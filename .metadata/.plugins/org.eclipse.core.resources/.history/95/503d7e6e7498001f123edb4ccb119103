// PID - Control 



// ******************** Predeclare PID_Regler Type ********************
typedef struct PIDContr PIDContr_t;

struct PIDContr
{
	
	float KP;				// Proportional Coeffizeint eg [steps/phi]
	float KI;				// Integral Coeff.
	float KD;				// Differential Coeff
	
	float (*run)(*PIDContr_t);
	(*set)(*PIDContr_t);
} PIDRegl_1;

/**
 * get the PID Coeffizent
 * @param PIDContr_t* stepper - the stepper to get the motor parameters
 * @returns Stepper_t* - the stepper with the motor parameters
 */
PIDContr_t* getPID(PIDContr_t* PIDContr) {
	return PIDContr;
}

// define prototype structure for the stepper
const PIDRegler_t PIDControl = {
	.KP
	.KI
	.KD
	.run = runPID,
	.init = initPID,
	.get = getPID,
	.set = setPID
};




void initPID(*PIDRegler_t PIDParam, float KP, float KI, float KD)
{
PIDParam->KP = KP;
PIDParam->KI = KI;
PIDParam->KD = KD;
}






float runPIDFilter()
{

}



/** Example main used with PID_Regler
 *
 *
 float PID_PosOut, PID_VeloOut;
 int main() {
 	struct PIDRegler PID_Pos, PID_Velo;
 	const uint8_t iHold = 5;

	// PID_Pos.init(... 	KP, KI, KD)
 	PID_Init(&PID_Pos, 0.5,    0, 0.2);
	PID_Init(&PID_Velo, 0.1, 0.2, 0.1);

	PID_PosOut= PID_Run(float ePos);

   
    StepperSetPos(StepL, ()PID_PosOut);
	
	
    //  Kopie der Parametersätze KP,KI,KD von einem Regler auf einen weiteren
	struct PIDRegler PID_new;
    PID.copy(&PID_Pos, &PID_new);


**/
struct LPFilter
{

}
int BalaPosRegler(int Pos, float phi)
{
	static float phi_old =0;
	float delta_phi = phi - RegPa.phi_0;
	int _iTargetPos = (int)((rad2step)*(RegPa.KP* tan(delta_phi) + (RegPa.KD* (phi - phi_old))));
	//int _iTargetPos = (int)((rad2step)*(RegPa.KP* delta_phi + (RegPa.KD* tan(phi - phi_old))));
	phi_old = phi;
	return (Pos+_iTargetPos);
}