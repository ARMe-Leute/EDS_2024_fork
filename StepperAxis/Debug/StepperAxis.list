
StepperAxis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af8  08007760  08007760  00017760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008258  08008258  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008260  08008260  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008260  08008260  00018260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  200001e0  08008448  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08008448  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000712f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f5  00000000  00000000  0002733f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00028a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  000290c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ffb6  00000000  00000000  00029690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068dc  00000000  00000000  00039646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056902  00000000  00000000  0003ff22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df8  00000000  00000000  00096874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0009966c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00099738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007744 	.word	0x08007744

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007744 	.word	0x08007744

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <i2cActivate>:
// Init hardware



void i2cActivate()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <i2cActivate+0x70>)
 8000ec4:	607b      	str	r3, [r7, #4]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <i2cActivate+0x74>)
 8000ec8:	603b      	str	r3, [r7, #0]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f002 f860 	bl	8002f90 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f001 fdb5 	bl	8002a40 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	2108      	movs	r1, #8
 8000eda:	6838      	ldr	r0, [r7, #0]
 8000edc:	f001 fe76 	bl	8002bcc <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	6838      	ldr	r0, [r7, #0]
 8000ee6:	f001 ff13 	bl	8002d10 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8000eea:	2202      	movs	r2, #2
 8000eec:	2109      	movs	r1, #9
 8000eee:	6838      	ldr	r0, [r7, #0]
 8000ef0:	f001 fe6c 	bl	8002bcc <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	2109      	movs	r1, #9
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f001 ff09 	bl	8002d10 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 8000efe:	2201      	movs	r2, #1
 8000f00:	2108      	movs	r1, #8
 8000f02:	6838      	ldr	r0, [r7, #0]
 8000f04:	f001 ff6d 	bl	8002de2 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2109      	movs	r1, #9
 8000f0c:	6838      	ldr	r0, [r7, #0]
 8000f0e:	f001 ff68 	bl	8002de2 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 8000f12:	2300      	movs	r3, #0
 8000f14:	2211      	movs	r2, #17
 8000f16:	2100      	movs	r1, #0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f002 f8eb 	bl	80030f4 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f002 f938 	bl	8003194 <i2cEnableDevice>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
#endif /* BALA2024 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	40020400 	.word	0x40020400

08000f34 <ledActivate>:




void ledActivate(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8000f38:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <ledActivate+0x80>)
 8000f3a:	f001 fde3 	bl	8002b04 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2103      	movs	r1, #3
 8000f42:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <ledActivate+0x80>)
 8000f44:	f001 fe42 	bl	8002bcc <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <ledActivate+0x80>)
 8000f4e:	f001 ff48 	bl	8002de2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2103      	movs	r1, #3
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <ledActivate+0x80>)
 8000f58:	f001 ff8c 	bl	8002e74 <gpioSelectPushPullMode>
    LED_red_off;
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <ledActivate+0x80>)
 8000f60:	f001 fe7f 	bl	8002c62 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2104      	movs	r1, #4
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <ledActivate+0x80>)
 8000f6a:	f001 fe2f 	bl	8002bcc <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2104      	movs	r1, #4
 8000f72:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <ledActivate+0x80>)
 8000f74:	f001 ff35 	bl	8002de2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <ledActivate+0x80>)
 8000f7e:	f001 ff79 	bl	8002e74 <gpioSelectPushPullMode>
    LED_green_off;
 8000f82:	2104      	movs	r1, #4
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <ledActivate+0x80>)
 8000f86:	f001 fe6c 	bl	8002c62 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	210a      	movs	r1, #10
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <ledActivate+0x80>)
 8000f90:	f001 fe1c 	bl	8002bcc <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8000f94:	2200      	movs	r2, #0
 8000f96:	210a      	movs	r1, #10
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <ledActivate+0x80>)
 8000f9a:	f001 ff22 	bl	8002de2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	210a      	movs	r1, #10
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <ledActivate+0x80>)
 8000fa4:	f001 ff66 	bl	8002e74 <gpioSelectPushPullMode>
    LED_blue_off;
 8000fa8:	210a      	movs	r1, #10
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <ledActivate+0x80>)
 8000fac:	f001 fe59 	bl	8002c62 <gpioSetPin>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <BALOsetup>:

void BALOsetup(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 8000fbc:	f7ff ffba 	bl	8000f34 <ledActivate>
   i2cActivate();
 8000fc0:	f7ff ff7c 	bl	8000ebc <i2cActivate>

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <AlBeOszi>:



uint16_t AlBeOszi(float *AlphaBeta)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

// Variables for Oszi Function
const int16_t oszi[3] = {70,50,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
const uint16_t osziColor = tft_GREY;
 8000fd0:	f641 1323 	movw	r3, #6435	; 0x1923
 8000fd4:	82fb      	strh	r3, [r7, #22]
const uint16_t aColor = tft_YELLOW;
 8000fd6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000fda:	82bb      	strh	r3, [r7, #20]
const uint16_t bColor = tft_MAGENTA;
 8000fdc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000fe0:	827b      	strh	r3, [r7, #18]

static int16_t timepos = 0;

// kleines Oszi als Zeitmitschrieb
	if (AlphaBeta[0] > 1) {AlphaBeta[0]= 1;}
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	dd03      	ble.n	8000ffe <AlBeOszi+0x36>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ffc:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[0] < -1) {AlphaBeta[0]= -1;}
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	d502      	bpl.n	8001018 <AlBeOszi+0x50>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a5f      	ldr	r2, [pc, #380]	; (8001194 <AlBeOszi+0x1cc>)
 8001016:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] > 1) {AlphaBeta[1]= 1;}
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3304      	adds	r3, #4
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	dd04      	ble.n	8001038 <AlBeOszi+0x70>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3304      	adds	r3, #4
 8001032:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001036:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] < -1) {AlphaBeta[1]= -1;}
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3304      	adds	r3, #4
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	d503      	bpl.n	8001056 <AlBeOszi+0x8e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3304      	adds	r3, #4
 8001052:	4a50      	ldr	r2, [pc, #320]	; (8001194 <AlBeOszi+0x1cc>)
 8001054:	601a      	str	r2, [r3, #0]
	int16_t Ya = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[0]);			// - ST7735 y = 0 upper line inverter direct to y Scale
 8001056:	4b50      	ldr	r3, [pc, #320]	; (8001198 <AlBeOszi+0x1d0>)
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <AlBeOszi+0x1d0>)
 8001060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001064:	3b01      	subs	r3, #1
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	b21b      	sxth	r3, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	823b      	strh	r3, [r7, #16]
	int16_t Yb = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[1]);
 800108a:	4b43      	ldr	r3, [pc, #268]	; (8001198 <AlBeOszi+0x1d0>)
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <AlBeOszi+0x1d0>)
 8001094:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001098:	3b01      	subs	r3, #1
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3304      	adds	r3, #4
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b2:	ee17 3a90 	vmov	r3, s15
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	b29b      	uxth	r3, r3
 80010be:	81fb      	strh	r3, [r7, #14]
	int16_t osziHight = oszi[1]*2;
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <AlBeOszi+0x1d0>)
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	81bb      	strh	r3, [r7, #12]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <AlBeOszi+0x1d4>)
 80010d0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <AlBeOszi+0x1d0>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <AlBeOszi+0x1d0>)
 80010de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	b219      	sxth	r1, r3
 80010ea:	8afb      	ldrh	r3, [r7, #22]
 80010ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010f0:	f000 fca8 	bl	8001a44 <tftDrawFastVLine>
	if (Ya == Yb)
 80010f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80010f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d10a      	bne.n	8001116 <AlBeOszi+0x14e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <AlBeOszi+0x1d4>)
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800110a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fbda 	bl	80018c8 <tftDrawPixel>
 8001114:	e011      	b.n	800113a <AlBeOszi+0x172>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <AlBeOszi+0x1d4>)
 8001118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111c:	8aba      	ldrh	r2, [r7, #20]
 800111e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fbd0 	bl	80018c8 <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <AlBeOszi+0x1d4>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	8a7a      	ldrh	r2, [r7, #18]
 8001130:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fbc7 	bl	80018c8 <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <AlBeOszi+0x1d4>)
 800113c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001140:	b29b      	uxth	r3, r3
 8001142:	3301      	adds	r3, #1
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <AlBeOszi+0x1d4>)
 800114a:	801a      	strh	r2, [r3, #0]
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <AlBeOszi+0x1d4>)
 800114e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <AlBeOszi+0x1d0>)
 8001154:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dd02      	ble.n	8001162 <AlBeOszi+0x19a>
	{
		timepos = 0;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <AlBeOszi+0x1d4>)
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <AlBeOszi+0x1d4>)
 8001164:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <AlBeOszi+0x1d0>)
 800116a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <AlBeOszi+0x1d0>)
 8001170:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001174:	0fda      	lsrs	r2, r3, #31
 8001176:	4413      	add	r3, r2
 8001178:	105b      	asrs	r3, r3, #1
 800117a:	b21a      	sxth	r2, r3
 800117c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001180:	f000 fc60 	bl	8001a44 <tftDrawFastVLine>
	return timepos;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <AlBeOszi+0x1d4>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	b29b      	uxth	r3, r3
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	bf800000 	.word	0xbf800000
 8001198:	08007778 	.word	0x08007778
 800119c:	200001fc 	.word	0x200001fc

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 80011e0:	482b      	ldr	r0, [pc, #172]	; (8001290 <initRotaryPushButton+0xb4>)
 80011e2:	f001 fc2d 	bl	8002a40 <gpioInitPort>
	gpioInitPort(GPIOB);
 80011e6:	482b      	ldr	r0, [pc, #172]	; (8001294 <initRotaryPushButton+0xb8>)
 80011e8:	f001 fc2a 	bl	8002a40 <gpioInitPort>
	gpioInitPort(GPIOC);
 80011ec:	482a      	ldr	r0, [pc, #168]	; (8001298 <initRotaryPushButton+0xbc>)
 80011ee:	f001 fc27 	bl	8002a40 <gpioInitPort>
	gpioInitPort(GPIOD);
 80011f2:	482a      	ldr	r0, [pc, #168]	; (800129c <initRotaryPushButton+0xc0>)
 80011f4:	f001 fc24 	bl	8002a40 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <initRotaryPushButton+0xc4>)
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <initRotaryPushButton+0xc4>)
 8001202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001206:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 8001208:	2200      	movs	r2, #0
 800120a:	2101      	movs	r1, #1
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <initRotaryPushButton+0xbc>)
 800120e:	f001 fcdd 	bl	8002bcc <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 8001212:	2201      	movs	r2, #1
 8001214:	2101      	movs	r1, #1
 8001216:	4820      	ldr	r0, [pc, #128]	; (8001298 <initRotaryPushButton+0xbc>)
 8001218:	f001 fe2c 	bl	8002e74 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	481d      	ldr	r0, [pc, #116]	; (8001298 <initRotaryPushButton+0xbc>)
 8001222:	f001 fcd3 	bl	8002bcc <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 8001226:	2201      	movs	r2, #1
 8001228:	2100      	movs	r1, #0
 800122a:	481b      	ldr	r0, [pc, #108]	; (8001298 <initRotaryPushButton+0xbc>)
 800122c:	f001 fe22 	bl	8002e74 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 8001230:	2200      	movs	r2, #0
 8001232:	210a      	movs	r1, #10
 8001234:	4816      	ldr	r0, [pc, #88]	; (8001290 <initRotaryPushButton+0xb4>)
 8001236:	f001 fcc9 	bl	8002bcc <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 800123a:	2201      	movs	r2, #1
 800123c:	210a      	movs	r1, #10
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <initRotaryPushButton+0xb4>)
 8001240:	f001 fe18 	bl	8002e74 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 8001244:	f001 f9a6 	bl	8002594 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 8001248:	2101      	movs	r1, #1
 800124a:	4813      	ldr	r0, [pc, #76]	; (8001298 <initRotaryPushButton+0xbc>)
 800124c:	f001 f9be 	bl	80025cc <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 8001250:	210a      	movs	r1, #10
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <initRotaryPushButton+0xb4>)
 8001254:	f001 f9ba 	bl	80025cc <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 8001258:	2001      	movs	r0, #1
 800125a:	f001 fa6b 	bl	8002734 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 800125e:	200a      	movs	r0, #10
 8001260:	f001 fa68 	bl	8002734 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 8001264:	2101      	movs	r1, #1
 8001266:	2001      	movs	r0, #1
 8001268:	f001 fa86 	bl	8002778 <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 800126c:	2100      	movs	r1, #0
 800126e:	200a      	movs	r0, #10
 8001270:	f001 fa82 	bl	8002778 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 8001274:	2007      	movs	r0, #7
 8001276:	f7ff ff93 	bl	80011a0 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 800127a:	2028      	movs	r0, #40	; 0x28
 800127c:	f7ff ff90 	bl	80011a0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001280:	b662      	cpsie	i
}
 8001282:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <initRotaryPushButton+0xc8>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	40020800 	.word	0x40020800
 800129c:	40020c00 	.word	0x40020c00
 80012a0:	40023800 	.word	0x40023800
 80012a4:	20000205 	.word	0x20000205

080012a8 <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 80012ac:	4815      	ldr	r0, [pc, #84]	; (8001304 <initRotaryPushButtonLED+0x5c>)
 80012ae:	f001 fbc7 	bl	8002a40 <gpioInitPort>
	gpioInitPort(GPIOB);
 80012b2:	4815      	ldr	r0, [pc, #84]	; (8001308 <initRotaryPushButtonLED+0x60>)
 80012b4:	f001 fbc4 	bl	8002a40 <gpioInitPort>
	gpioInitPort(GPIOC);
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <initRotaryPushButtonLED+0x64>)
 80012ba:	f001 fbc1 	bl	8002a40 <gpioInitPort>
	gpioInitPort(GPIOD);
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <initRotaryPushButtonLED+0x68>)
 80012c0:	f001 fbbe 	bl	8002a40 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2103      	movs	r1, #3
 80012c8:	480f      	ldr	r0, [pc, #60]	; (8001308 <initRotaryPushButtonLED+0x60>)
 80012ca:	f001 fc7f 	bl	8002bcc <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2104      	movs	r1, #4
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <initRotaryPushButtonLED+0x60>)
 80012d4:	f001 fc7a 	bl	8002bcc <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 80012d8:	2201      	movs	r2, #1
 80012da:	210a      	movs	r1, #10
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <initRotaryPushButtonLED+0x60>)
 80012de:	f001 fc75 	bl	8002bcc <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 80012e2:	2103      	movs	r1, #3
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <initRotaryPushButtonLED+0x60>)
 80012e6:	f001 fcbc 	bl	8002c62 <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 80012ea:	2104      	movs	r1, #4
 80012ec:	4806      	ldr	r0, [pc, #24]	; (8001308 <initRotaryPushButtonLED+0x60>)
 80012ee:	f001 fcb8 	bl	8002c62 <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 80012f2:	210a      	movs	r1, #10
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <initRotaryPushButtonLED+0x60>)
 80012f6:	f001 fcb4 	bl	8002c62 <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <initRotaryPushButtonLED+0x6c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	20000206 	.word	0x20000206

08001318 <setRotaryColor>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setRotaryColor(LED_COLOR_t color)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 8001322:	4b45      	ldr	r3, [pc, #276]	; (8001438 <setRotaryColor+0x120>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	f083 0301 	eor.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <setRotaryColor+0x1c>
	{
		initRotaryPushButtonLED();
 8001330:	f7ff ffba 	bl	80012a8 <initRotaryPushButtonLED>
	}

	switch(color)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b07      	cmp	r3, #7
 8001338:	d87a      	bhi.n	8001430 <setRotaryColor+0x118>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <setRotaryColor+0x28>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	08001361 	.word	0x08001361
 8001344:	0800137b 	.word	0x0800137b
 8001348:	08001395 	.word	0x08001395
 800134c:	080013af 	.word	0x080013af
 8001350:	080013c9 	.word	0x080013c9
 8001354:	080013e3 	.word	0x080013e3
 8001358:	080013fd 	.word	0x080013fd
 800135c:	08001417 	.word	0x08001417
	{
		/* Set LED color to BLACK */
		case LED_BLACK:
			gpioSetPin(LED_RED_ADR);
 8001360:	2103      	movs	r1, #3
 8001362:	4836      	ldr	r0, [pc, #216]	; (800143c <setRotaryColor+0x124>)
 8001364:	f001 fc7d 	bl	8002c62 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 8001368:	2104      	movs	r1, #4
 800136a:	4834      	ldr	r0, [pc, #208]	; (800143c <setRotaryColor+0x124>)
 800136c:	f001 fc79 	bl	8002c62 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001370:	210a      	movs	r1, #10
 8001372:	4832      	ldr	r0, [pc, #200]	; (800143c <setRotaryColor+0x124>)
 8001374:	f001 fc75 	bl	8002c62 <gpioSetPin>
			break;
 8001378:	e05a      	b.n	8001430 <setRotaryColor+0x118>

		/* Set LED color to RED */
		case LED_RED:
			gpioResetPin(LED_RED_ADR);
 800137a:	2103      	movs	r1, #3
 800137c:	482f      	ldr	r0, [pc, #188]	; (800143c <setRotaryColor+0x124>)
 800137e:	f001 fc9b 	bl	8002cb8 <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 8001382:	2104      	movs	r1, #4
 8001384:	482d      	ldr	r0, [pc, #180]	; (800143c <setRotaryColor+0x124>)
 8001386:	f001 fc6c 	bl	8002c62 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 800138a:	210a      	movs	r1, #10
 800138c:	482b      	ldr	r0, [pc, #172]	; (800143c <setRotaryColor+0x124>)
 800138e:	f001 fc68 	bl	8002c62 <gpioSetPin>
			break;
 8001392:	e04d      	b.n	8001430 <setRotaryColor+0x118>

		/* Set LED color to GREEN */
		case LED_GREEN:
			gpioSetPin(LED_RED_ADR);
 8001394:	2103      	movs	r1, #3
 8001396:	4829      	ldr	r0, [pc, #164]	; (800143c <setRotaryColor+0x124>)
 8001398:	f001 fc63 	bl	8002c62 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 800139c:	2104      	movs	r1, #4
 800139e:	4827      	ldr	r0, [pc, #156]	; (800143c <setRotaryColor+0x124>)
 80013a0:	f001 fc8a 	bl	8002cb8 <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 80013a4:	210a      	movs	r1, #10
 80013a6:	4825      	ldr	r0, [pc, #148]	; (800143c <setRotaryColor+0x124>)
 80013a8:	f001 fc5b 	bl	8002c62 <gpioSetPin>
			break;
 80013ac:	e040      	b.n	8001430 <setRotaryColor+0x118>

		/* Set LED color to BLUE */
		case LED_BLUE:
			gpioSetPin(LED_RED_ADR);
 80013ae:	2103      	movs	r1, #3
 80013b0:	4822      	ldr	r0, [pc, #136]	; (800143c <setRotaryColor+0x124>)
 80013b2:	f001 fc56 	bl	8002c62 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 80013b6:	2104      	movs	r1, #4
 80013b8:	4820      	ldr	r0, [pc, #128]	; (800143c <setRotaryColor+0x124>)
 80013ba:	f001 fc52 	bl	8002c62 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 80013be:	210a      	movs	r1, #10
 80013c0:	481e      	ldr	r0, [pc, #120]	; (800143c <setRotaryColor+0x124>)
 80013c2:	f001 fc79 	bl	8002cb8 <gpioResetPin>
			break;
 80013c6:	e033      	b.n	8001430 <setRotaryColor+0x118>

		/* Set LED color to MAGENTA */
		case LED_MAGENTA:
			gpioResetPin(LED_RED_ADR);
 80013c8:	2103      	movs	r1, #3
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <setRotaryColor+0x124>)
 80013cc:	f001 fc74 	bl	8002cb8 <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 80013d0:	2104      	movs	r1, #4
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <setRotaryColor+0x124>)
 80013d4:	f001 fc45 	bl	8002c62 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 80013d8:	210a      	movs	r1, #10
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <setRotaryColor+0x124>)
 80013dc:	f001 fc6c 	bl	8002cb8 <gpioResetPin>
			break;
 80013e0:	e026      	b.n	8001430 <setRotaryColor+0x118>

		/* Set LED color to CYAN */
		case LED_CYAN:
			gpioSetPin(LED_RED_ADR);
 80013e2:	2103      	movs	r1, #3
 80013e4:	4815      	ldr	r0, [pc, #84]	; (800143c <setRotaryColor+0x124>)
 80013e6:	f001 fc3c 	bl	8002c62 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 80013ea:	2104      	movs	r1, #4
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <setRotaryColor+0x124>)
 80013ee:	f001 fc63 	bl	8002cb8 <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 80013f2:	210a      	movs	r1, #10
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <setRotaryColor+0x124>)
 80013f6:	f001 fc5f 	bl	8002cb8 <gpioResetPin>
			break;
 80013fa:	e019      	b.n	8001430 <setRotaryColor+0x118>

		/* Set LED color to YELLOW */
		case LED_YELLOW:
			gpioResetPin(LED_RED_ADR);
 80013fc:	2103      	movs	r1, #3
 80013fe:	480f      	ldr	r0, [pc, #60]	; (800143c <setRotaryColor+0x124>)
 8001400:	f001 fc5a 	bl	8002cb8 <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 8001404:	2104      	movs	r1, #4
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <setRotaryColor+0x124>)
 8001408:	f001 fc56 	bl	8002cb8 <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 800140c:	210a      	movs	r1, #10
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <setRotaryColor+0x124>)
 8001410:	f001 fc27 	bl	8002c62 <gpioSetPin>
			break;
 8001414:	e00c      	b.n	8001430 <setRotaryColor+0x118>

		/* Set LED color to WHITE */
		case LED_WHITE:
			gpioResetPin(LED_RED_ADR);
 8001416:	2103      	movs	r1, #3
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <setRotaryColor+0x124>)
 800141a:	f001 fc4d 	bl	8002cb8 <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 800141e:	2104      	movs	r1, #4
 8001420:	4806      	ldr	r0, [pc, #24]	; (800143c <setRotaryColor+0x124>)
 8001422:	f001 fc49 	bl	8002cb8 <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 8001426:	210a      	movs	r1, #10
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <setRotaryColor+0x124>)
 800142a:	f001 fc45 	bl	8002cb8 <gpioResetPin>
			break;
 800142e:	bf00      	nop
	}
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000206 	.word	0x20000206
 800143c:	40020400 	.word	0x40020400

08001440 <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <getRotaryPushButton+0x3c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <getRotaryPushButton+0x1c>
	{
		initRotaryPushButton();
 8001454:	f7ff fec2 	bl	80011dc <initRotaryPushButton>
		return ERROR_VALUE;
 8001458:	2301      	movs	r3, #1
 800145a:	e00a      	b.n	8001472 <getRotaryPushButton+0x32>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <getRotaryPushButton+0x40>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <getRotaryPushButton+0x40>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <getRotaryPushButton+0x30>
	{
		pushButtonFlag = false;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <getRotaryPushButton+0x40>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000205 	.word	0x20000205
 8001480:	20000204 	.word	0x20000204

08001484 <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <getRotaryPosition+0x24>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 8001496:	2301      	movs	r3, #1
 8001498:	e001      	b.n	800149e <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <getRotaryPosition+0x28>)
 800149c:	681b      	ldr	r3, [r3, #0]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	20000205 	.word	0x20000205
 80014ac:	20000200 	.word	0x20000200

080014b0 <setRotaryPosition>:

uint16_t setRotaryPosition(int32_t position)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	if (initRotaryPushButtonDone == false)
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <setRotaryPosition+0x30>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f083 0301 	eor.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <setRotaryPosition+0x1a>
	{
		return ERROR_VALUE;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e003      	b.n	80014d2 <setRotaryPosition+0x22>
	}

	rotoryPosition = position;
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <setRotaryPosition+0x34>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6013      	str	r3, [r2, #0]

	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000205 	.word	0x20000205
 80014e4:	20000200 	.word	0x20000200

080014e8 <EXTI1_IRQHandler>:




void ROTARY_A_HANDLER(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 80014ec:	2100      	movs	r1, #0
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <EXTI1_IRQHandler+0x44>)
 80014f0:	f001 fd1d 	bl	8002f2e <gpioGetPinState>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <EXTI1_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <EXTI1_IRQHandler+0x48>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <EXTI1_IRQHandler+0x48>)
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e004      	b.n	8001510 <EXTI1_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <EXTI1_IRQHandler+0x48>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	4a08      	ldr	r2, [pc, #32]	; (8001530 <EXTI1_IRQHandler+0x48>)
 800150e:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <EXTI1_IRQHandler+0x4c>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <EXTI1_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <EXTI1_IRQHandler+0x4c>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <EXTI1_IRQHandler+0x4c>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	6153      	str	r3, [r2, #20]
	}
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40020800 	.word	0x40020800
 8001530:	20000200 	.word	0x20000200
 8001534:	40013c00 	.word	0x40013c00

08001538 <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <EXTI15_10_IRQHandler+0x2c>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <EXTI15_10_IRQHandler+0x30>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <EXTI15_10_IRQHandler+0x30>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <EXTI15_10_IRQHandler+0x30>)
 8001554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001558:	6153      	str	r3, [r2, #20]
	}
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	20000204 	.word	0x20000204
 8001568:	40013c00 	.word	0x40013c00

0800156c <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <delayms+0x18>)
 8001578:	f002 fa90 	bl	8003a9c <systickDelay>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000228 	.word	0x20000228

08001588 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <tftSPISenddata+0x20>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2206      	movs	r2, #6
 800159a:	4904      	ldr	r1, [pc, #16]	; (80015ac <tftSPISenddata+0x24>)
 800159c:	f002 f96f 	bl	800387e <spiWriteByte>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000004 	.word	0x20000004
 80015ac:	40020400 	.word	0x40020400

080015b0 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 80015ba:	2107      	movs	r1, #7
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <tftSendCmd+0x24>)
 80015be:	f001 fb7b 	bl	8002cb8 <gpioResetPin>
    tftSPISenddata(cmd);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ffdf 	bl	8001588 <tftSPISenddata>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020800 	.word	0x40020800

080015d8 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 80015e2:	2107      	movs	r1, #7
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <tftSendData+0x24>)
 80015e6:	f001 fb3c 	bl	8002c62 <gpioSetPin>
    tftSPISenddata(data);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ffcb 	bl	8001588 <tftSPISenddata>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40020800 	.word	0x40020800

08001600 <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 8001606:	4825      	ldr	r0, [pc, #148]	; (800169c <spiInit+0x9c>)
 8001608:	f001 fa7c 	bl	8002b04 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 800160c:	2201      	movs	r2, #1
 800160e:	2109      	movs	r1, #9
 8001610:	4822      	ldr	r0, [pc, #136]	; (800169c <spiInit+0x9c>)
 8001612:	f001 fadb 	bl	8002bcc <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8001616:	4822      	ldr	r0, [pc, #136]	; (80016a0 <spiInit+0xa0>)
 8001618:	f001 fa74 	bl	8002b04 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 800161c:	2201      	movs	r2, #1
 800161e:	2107      	movs	r1, #7
 8001620:	481f      	ldr	r0, [pc, #124]	; (80016a0 <spiInit+0xa0>)
 8001622:	f001 fad3 	bl	8002bcc <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8001626:	481f      	ldr	r0, [pc, #124]	; (80016a4 <spiInit+0xa4>)
 8001628:	f001 fa0a 	bl	8002a40 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 800162c:	2201      	movs	r2, #1
 800162e:	2106      	movs	r1, #6
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <spiInit+0xa4>)
 8001632:	f001 facb 	bl	8002bcc <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8001636:	2201      	movs	r2, #1
 8001638:	2106      	movs	r1, #6
 800163a:	481a      	ldr	r0, [pc, #104]	; (80016a4 <spiInit+0xa4>)
 800163c:	f001 fc1a 	bl	8002e74 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8001640:	4816      	ldr	r0, [pc, #88]	; (800169c <spiInit+0x9c>)
 8001642:	f001 f9fd 	bl	8002a40 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 8001646:	2202      	movs	r2, #2
 8001648:	2105      	movs	r1, #5
 800164a:	4814      	ldr	r0, [pc, #80]	; (800169c <spiInit+0x9c>)
 800164c:	f001 fabe 	bl	8002bcc <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8001650:	2205      	movs	r2, #5
 8001652:	2105      	movs	r1, #5
 8001654:	4811      	ldr	r0, [pc, #68]	; (800169c <spiInit+0x9c>)
 8001656:	f001 fb5b 	bl	8002d10 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 800165a:	2202      	movs	r2, #2
 800165c:	2107      	movs	r1, #7
 800165e:	480f      	ldr	r0, [pc, #60]	; (800169c <spiInit+0x9c>)
 8001660:	f001 fab4 	bl	8002bcc <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8001664:	2205      	movs	r2, #5
 8001666:	2107      	movs	r1, #7
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <spiInit+0x9c>)
 800166a:	f001 fb51 	bl	8002d10 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <spiInit+0xa8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f002 f8a8 	bl	80037c8 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <spiInit+0xa8>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	9303      	str	r3, [sp, #12]
 8001680:	2300      	movs	r3, #0
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2300      	movs	r3, #0
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2301      	movs	r3, #1
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2200      	movs	r2, #0
 8001690:	2103      	movs	r1, #3
 8001692:	f001 ffab 	bl	80035ec <spiInitSPI>

}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020400 	.word	0x40020400
 80016a8:	20000004 	.word	0x20000004

080016ac <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80016be:	e033      	b.n	8001728 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff71 	bl	80015b0 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e0:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016e8:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 80016ea:	e006      	b.n	80016fa <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff6f 	bl	80015d8 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	73ba      	strb	r2, [r7, #14]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f3      	bne.n	80016ec <commandList+0x40>
		}

		if(ms) {
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00e      	beq.n	8001728 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	2bff      	cmp	r3, #255	; 0xff
 8001718:	d102      	bne.n	8001720 <commandList+0x74>
 800171a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800171e:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8001720:	89bb      	ldrh	r3, [r7, #12]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff22 	bl	800156c <delayms>
	while(numCommands--) {                 // For each command...
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	1e5a      	subs	r2, r3, #1
 800172c:	73fa      	strb	r2, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1c6      	bne.n	80016c0 <commandList+0x14>
		}
	}
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8001744:	2106      	movs	r1, #6
 8001746:	480c      	ldr	r0, [pc, #48]	; (8001778 <commonInit+0x3c>)
 8001748:	f001 fab6 	bl	8002cb8 <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 800174c:	2109      	movs	r1, #9
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <commonInit+0x40>)
 8001750:	f001 fab2 	bl	8002cb8 <gpioResetPin>
	delayms(50);  //default value 500
 8001754:	2032      	movs	r0, #50	; 0x32
 8001756:	f7ff ff09 	bl	800156c <delayms>
	ST7735_RST1;
 800175a:	2109      	movs	r1, #9
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <commonInit+0x40>)
 800175e:	f001 fa80 	bl	8002c62 <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <commonInit+0x32>
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff9f 	bl	80016ac <commandList>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020400 	.word	0x40020400
 800177c:	40020000 	.word	0x40020000

08001780 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 800178a:	2032      	movs	r0, #50	; 0x32
 800178c:	f7ff feee 	bl	800156c <delayms>
	commonInit(Rcmd1);
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <tftInitR+0x58>)
 8001792:	f7ff ffd3 	bl	800173c <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <tftInitR+0x5c>)
 800179e:	f7ff ff85 	bl	80016ac <commandList>
		//Starting position of rows and columns
		colstart = 2;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <tftInitR+0x60>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <tftInitR+0x64>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e002      	b.n	80017b6 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <tftInitR+0x68>)
 80017b2:	f7ff ff7b 	bl	80016ac <commandList>
	}
	commandList(Rcmd3);
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <tftInitR+0x6c>)
 80017b8:	f7ff ff78 	bl	80016ac <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d105      	bne.n	80017ce <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 80017c2:	2036      	movs	r0, #54	; 0x36
 80017c4:	f7ff fef4 	bl	80015b0 <tftSendCmd>
		tftSendData(0xC0);
 80017c8:	20c0      	movs	r0, #192	; 0xc0
 80017ca:	f7ff ff05 	bl	80015d8 <tftSendData>
	}

	//  tabcolor = options;
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	08007bf8 	.word	0x08007bf8
 80017dc:	08007c34 	.word	0x08007c34
 80017e0:	20000208 	.word	0x20000208
 80017e4:	2000020c 	.word	0x2000020c
 80017e8:	08007c44 	.word	0x08007c44
 80017ec:	08007c54 	.word	0x08007c54

080017f0 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4604      	mov	r4, r0
 80017f8:	4608      	mov	r0, r1
 80017fa:	4611      	mov	r1, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	4623      	mov	r3, r4
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	4603      	mov	r3, r0
 8001804:	71bb      	strb	r3, [r7, #6]
 8001806:	460b      	mov	r3, r1
 8001808:	717b      	strb	r3, [r7, #5]
 800180a:	4613      	mov	r3, r2
 800180c:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 800180e:	202a      	movs	r0, #42	; 0x2a
 8001810:	f7ff fece 	bl	80015b0 <tftSendCmd>
	tftSendData(0x00);
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fedf 	bl	80015d8 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <tftSetAddrWindow+0x98>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4413      	add	r3, r2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fed6 	bl	80015d8 <tftSendData>
	tftSendData(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fed3 	bl	80015d8 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <tftSetAddrWindow+0x98>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	797b      	ldrb	r3, [r7, #5]
 800183a:	4413      	add	r3, r2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff feca 	bl	80015d8 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8001844:	202b      	movs	r0, #43	; 0x2b
 8001846:	f7ff feb3 	bl	80015b0 <tftSendCmd>
	tftSendData(0x00);
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fec4 	bl	80015d8 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <tftSetAddrWindow+0x9c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	4413      	add	r3, r2
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff febb 	bl	80015d8 <tftSendData>
	tftSendData(0x00);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff feb8 	bl	80015d8 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <tftSetAddrWindow+0x9c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	793b      	ldrb	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff feaf 	bl	80015d8 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 800187a:	202c      	movs	r0, #44	; 0x2c
 800187c:	f7ff fe98 	bl	80015b0 <tftSendCmd>
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000208 	.word	0x20000208
 800188c:	2000020c 	.word	0x2000020c

08001890 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 800189a:	2107      	movs	r1, #7
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <tftPushColor+0x34>)
 800189e:	f001 f9e0 	bl	8002c62 <gpioSetPin>
	putpix(color);
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fe6c 	bl	8001588 <tftSPISenddata>
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe67 	bl	8001588 <tftSPISenddata>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40020800 	.word	0x40020800

080018c8 <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
 80018d2:	460b      	mov	r3, r1
 80018d4:	80bb      	strh	r3, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db22      	blt.n	8001928 <tftDrawPixel+0x60>
 80018e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <tftDrawPixel+0x68>)
 80018e8:	8812      	ldrh	r2, [r2, #0]
 80018ea:	4293      	cmp	r3, r2
 80018ec:	da1c      	bge.n	8001928 <tftDrawPixel+0x60>
 80018ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db18      	blt.n	8001928 <tftDrawPixel+0x60>
 80018f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <tftDrawPixel+0x6c>)
 80018fc:	8812      	ldrh	r2, [r2, #0]
 80018fe:	4293      	cmp	r3, r2
 8001900:	da12      	bge.n	8001928 <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	b2d8      	uxtb	r0, r3
 8001906:	88bb      	ldrh	r3, [r7, #4]
 8001908:	b2d9      	uxtb	r1, r3
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	88bb      	ldrh	r3, [r7, #4]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	3301      	adds	r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f7ff ff69 	bl	80017f0 <tftSetAddrWindow>
	tftPushColor(color);
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ffb5 	bl	8001890 <tftPushColor>
 8001926:	e000      	b.n	800192a <tftDrawPixel+0x62>
		return;
 8001928:	bf00      	nop
}
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	20000002 	.word	0x20000002

08001938 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4623      	mov	r3, r4
 8001948:	80fb      	strh	r3, [r7, #6]
 800194a:	4603      	mov	r3, r0
 800194c:	80bb      	strh	r3, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	807b      	strh	r3, [r7, #2]
 8001952:	4613      	mov	r3, r2
 8001954:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8001956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195a:	4a37      	ldr	r2, [pc, #220]	; (8001a38 <tftFillRect+0x100>)
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	4293      	cmp	r3, r2
 8001960:	da65      	bge.n	8001a2e <tftFillRect+0xf6>
 8001962:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001966:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <tftFillRect+0x104>)
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	4293      	cmp	r3, r2
 800196c:	da5f      	bge.n	8001a2e <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 800196e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001972:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001976:	4413      	add	r3, r2
 8001978:	4a2f      	ldr	r2, [pc, #188]	; (8001a38 <tftFillRect+0x100>)
 800197a:	8812      	ldrh	r2, [r2, #0]
 800197c:	4293      	cmp	r3, r2
 800197e:	dd05      	ble.n	800198c <tftFillRect+0x54>
		{
		w = width  - x;
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <tftFillRect+0x100>)
 8001982:	881a      	ldrh	r2, [r3, #0]
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	b29b      	uxth	r3, r3
 800198a:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 800198c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001990:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001994:	4413      	add	r3, r2
 8001996:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <tftFillRect+0x104>)
 8001998:	8812      	ldrh	r2, [r2, #0]
 800199a:	4293      	cmp	r3, r2
 800199c:	dd05      	ble.n	80019aa <tftFillRect+0x72>
		{
		h = height - y;
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <tftFillRect+0x104>)
 80019a0:	881a      	ldrh	r2, [r3, #0]
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	b2d8      	uxtb	r0, r3
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	b2d9      	uxtb	r1, r3
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b2dc      	uxtb	r4, r3
 80019c2:	88bb      	ldrh	r3, [r7, #4]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	883b      	ldrh	r3, [r7, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4622      	mov	r2, r4
 80019d4:	f7ff ff0c 	bl	80017f0 <tftSetAddrWindow>

	ST7735_DC1;
 80019d8:	2107      	movs	r1, #7
 80019da:	4819      	ldr	r0, [pc, #100]	; (8001a40 <tftFillRect+0x108>)
 80019dc:	f001 f941 	bl	8002c62 <gpioSetPin>
	for(y=h; y>0; y--)
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	80bb      	strh	r3, [r7, #4]
 80019e4:	e01e      	b.n	8001a24 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	80fb      	strh	r3, [r7, #6]
 80019ea:	e011      	b.n	8001a10 <tftFillRect+0xd8>
		{
			putpix(color);
 80019ec:	8b3b      	ldrh	r3, [r7, #24]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fdc7 	bl	8001588 <tftSPISenddata>
 80019fa:	8b3b      	ldrh	r3, [r7, #24]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fdc2 	bl	8001588 <tftSPISenddata>
		for(x=w; x>0; x--)
 8001a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	80fb      	strh	r3, [r7, #6]
 8001a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dce9      	bgt.n	80019ec <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 8001a18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	80bb      	strh	r3, [r7, #4]
 8001a24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dcdc      	bgt.n	80019e6 <tftFillRect+0xae>
 8001a2c:	e000      	b.n	8001a30 <tftFillRect+0xf8>
		return;
 8001a2e:	bf00      	nop
		}
	}
}
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000002 	.word	0x20000002
 8001a40:	40020800 	.word	0x40020800

08001a44 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	80fb      	strh	r3, [r7, #6]
 8001a56:	4603      	mov	r3, r0
 8001a58:	80bb      	strh	r3, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	807b      	strh	r3, [r7, #2]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8001a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a66:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <tftDrawFastVLine+0xb4>)
 8001a68:	8812      	ldrh	r2, [r2, #0]
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	da3f      	bge.n	8001aee <tftDrawFastVLine+0xaa>
 8001a6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <tftDrawFastVLine+0xb8>)
 8001a74:	8812      	ldrh	r2, [r2, #0]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	da39      	bge.n	8001aee <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 8001a7a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <tftDrawFastVLine+0xb8>)
 8001a86:	8812      	ldrh	r2, [r2, #0]
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	dd05      	ble.n	8001a98 <tftDrawFastVLine+0x54>
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <tftDrawFastVLine+0xb8>)
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	88bb      	ldrh	r3, [r7, #4]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	b2d8      	uxtb	r0, r3
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	b2d9      	uxtb	r1, r3
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	b2dc      	uxtb	r4, r3
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	f7ff fe9b 	bl	80017f0 <tftSetAddrWindow>

	ST7735_DC1;
 8001aba:	2107      	movs	r1, #7
 8001abc:	4810      	ldr	r0, [pc, #64]	; (8001b00 <tftDrawFastVLine+0xbc>)
 8001abe:	f001 f8d0 	bl	8002c62 <gpioSetPin>
	while (h--) {
 8001ac2:	e00b      	b.n	8001adc <tftDrawFastVLine+0x98>
		putpix(color);
 8001ac4:	883b      	ldrh	r3, [r7, #0]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd5b 	bl	8001588 <tftSPISenddata>
 8001ad2:	883b      	ldrh	r3, [r7, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fd56 	bl	8001588 <tftSPISenddata>
	while (h--) {
 8001adc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	3a01      	subs	r2, #1
 8001ae4:	b292      	uxth	r2, r2
 8001ae6:	807a      	strh	r2, [r7, #2]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1eb      	bne.n	8001ac4 <tftDrawFastVLine+0x80>
 8001aec:	e000      	b.n	8001af0 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 8001aee:	bf00      	nop
	}
}
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd90      	pop	{r4, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000002 	.word	0x20000002
 8001b00:	40020800 	.word	0x40020800

08001b04 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <tftSetFont+0x40>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <tftSetFont+0x40>)
 8001b18:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	785a      	ldrb	r2, [r3, #1]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <tftSetFont+0x40>)
 8001b20:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	789a      	ldrb	r2, [r3, #2]
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <tftSetFont+0x40>)
 8001b28:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <tftSetFont+0x40>)
 8001b34:	811a      	strh	r2, [r3, #8]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000214 	.word	0x20000214

08001b48 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8001b56:	4b74      	ldr	r3, [pc, #464]	; (8001d28 <tftPrintChar+0x1e0>)
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	d803      	bhi.n	8001b66 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8001b5e:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <tftPrintChar+0x1e0>)
 8001b60:	791b      	ldrb	r3, [r3, #4]
 8001b62:	77bb      	strb	r3, [r7, #30]
 8001b64:	e003      	b.n	8001b6e <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8001b66:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <tftPrintChar+0x1e0>)
 8001b68:	791b      	ldrb	r3, [r3, #4]
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <tftPrintChar+0x1e4>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d15e      	bne.n	8001c34 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	b2d8      	uxtb	r0, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	b2d9      	uxtb	r1, r3
 8001b7e:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <tftPrintChar+0x1e0>)
 8001b80:	791a      	ldrb	r2, [r3, #4]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b2dc      	uxtb	r4, r3
 8001b8e:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <tftPrintChar+0x1e0>)
 8001b90:	795a      	ldrb	r2, [r3, #5]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	f7ff fe26 	bl	80017f0 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <tftPrintChar+0x1e0>)
 8001ba8:	7992      	ldrb	r2, [r2, #6]
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	7fbb      	ldrb	r3, [r7, #30]
 8001bb0:	b299      	uxth	r1, r3
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <tftPrintChar+0x1e0>)
 8001bb4:	795b      	ldrb	r3, [r3, #5]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	fb11 f303 	smulbb	r3, r1, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	fb12 f303 	smulbb	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	83bb      	strh	r3, [r7, #28]
 8001bcc:	e029      	b.n	8001c22 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <tftPrintChar+0x1e0>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	8b7b      	ldrh	r3, [r7, #26]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	77fb      	strb	r3, [r7, #31]
 8001bde:	e017      	b.n	8001c10 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8001be0:	7cfa      	ldrb	r2, [r7, #19]
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	f1c3 0307 	rsb	r3, r3, #7
 8001be8:	fa42 f303 	asr.w	r3, r2, r3
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8001bf4:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <tftPrintChar+0x1e8>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe49 	bl	8001890 <tftPushColor>
 8001bfe:	e004      	b.n	8001c0a <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8001c00:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <tftPrintChar+0x1ec>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe43 	bl	8001890 <tftPushColor>
			for(i=0;i<8;i++)
 8001c0a:	7ffb      	ldrb	r3, [r7, #31]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	77fb      	strb	r3, [r7, #31]
 8001c10:	7ffb      	ldrb	r3, [r7, #31]
 8001c12:	2b07      	cmp	r3, #7
 8001c14:	d9e4      	bls.n	8001be0 <tftPrintChar+0x98>
				}
			}
			temp++;
 8001c16:	8b7b      	ldrh	r3, [r7, #26]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8001c1c:	8bbb      	ldrh	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	83bb      	strh	r3, [r7, #28]
 8001c22:	8bba      	ldrh	r2, [r7, #28]
 8001c24:	7fbb      	ldrb	r3, [r7, #30]
 8001c26:	4940      	ldr	r1, [pc, #256]	; (8001d28 <tftPrintChar+0x1e0>)
 8001c28:	7949      	ldrb	r1, [r1, #5]
 8001c2a:	fb01 f303 	mul.w	r3, r1, r3
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbcd      	blt.n	8001bce <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001c32:	e075      	b.n	8001d20 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	4a3c      	ldr	r2, [pc, #240]	; (8001d28 <tftPrintChar+0x1e0>)
 8001c38:	7992      	ldrb	r2, [r2, #6]
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	7fbb      	ldrb	r3, [r7, #30]
 8001c40:	b299      	uxth	r1, r3
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <tftPrintChar+0x1e0>)
 8001c44:	795b      	ldrb	r3, [r3, #5]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	fb11 f303 	smulbb	r3, r1, r3
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	fb12 f303 	smulbb	r3, r2, r3
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3304      	adds	r3, #4
 8001c56:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	83bb      	strh	r3, [r7, #28]
 8001c5c:	e05a      	b.n	8001d14 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e04b      	b.n	8001cfc <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8001c64:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <tftPrintChar+0x1e0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	8b79      	ldrh	r1, [r7, #26]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	440a      	add	r2, r1
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	77fb      	strb	r3, [r7, #31]
 8001c78:	e03a      	b.n	8001cf0 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	4413      	add	r3, r2
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b2d8      	uxtb	r0, r3
 8001c90:	8bbb      	ldrh	r3, [r7, #28]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	b2d9      	uxtb	r1, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b2dc      	uxtb	r4, r3
 8001cb6:	8bbb      	ldrh	r3, [r7, #28]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	f7ff fd92 	bl	80017f0 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8001ccc:	7cfa      	ldrb	r2, [r7, #19]
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	f1c3 0307 	rsb	r3, r3, #7
 8001cd4:	fa42 f303 	asr.w	r3, r2, r3
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <tftPrintChar+0x1e8>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fdd3 	bl	8001890 <tftPushColor>
				for(i=0;i<8;i++)
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	3301      	adds	r3, #1
 8001cee:	77fb      	strb	r3, [r7, #31]
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	2b07      	cmp	r3, #7
 8001cf4:	d9c1      	bls.n	8001c7a <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	7fbb      	ldrb	r3, [r7, #30]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbaf      	blt.n	8001c64 <tftPrintChar+0x11c>
			temp+=(fz);
 8001d04:	7fbb      	ldrb	r3, [r7, #30]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	8b7b      	ldrh	r3, [r7, #26]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001d0e:	8bbb      	ldrh	r3, [r7, #28]
 8001d10:	3301      	adds	r3, #1
 8001d12:	83bb      	strh	r3, [r7, #28]
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <tftPrintChar+0x1e0>)
 8001d16:	795b      	ldrb	r3, [r3, #5]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	8bba      	ldrh	r2, [r7, #28]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d39e      	bcc.n	8001c5e <tftPrintChar+0x116>
}
 8001d20:	bf00      	nop
 8001d22:	3724      	adds	r7, #36	; 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	20000214 	.word	0x20000214
 8001d2c:	20000220 	.word	0x20000220
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000222 	.word	0x20000222

08001d38 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8001d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d3c:	b08e      	sub	sp, #56	; 0x38
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8001d4a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d4c:	f7fe fbf2 	bl	8000534 <__aeabi_i2d>
 8001d50:	a395      	add	r3, pc, #596	; (adr r3, 8001fa8 <tftRotateChar+0x270>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fc57 	bl	8000608 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8001d62:	4b8d      	ldr	r3, [pc, #564]	; (8001f98 <tftRotateChar+0x260>)
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	2b07      	cmp	r3, #7
 8001d68:	d804      	bhi.n	8001d74 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <tftRotateChar+0x260>)
 8001d6c:	791b      	ldrb	r3, [r3, #4]
 8001d6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001d72:	e017      	b.n	8001da4 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8001d74:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <tftRotateChar+0x260>)
 8001d76:	791b      	ldrb	r3, [r3, #4]
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	4a85      	ldr	r2, [pc, #532]	; (8001f98 <tftRotateChar+0x260>)
 8001d82:	7992      	ldrb	r2, [r2, #6]
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <tftRotateChar+0x260>)
 8001d90:	795b      	ldrb	r3, [r3, #5]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	fb11 f303 	smulbb	r3, r1, r3
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	fb12 f303 	smulbb	r3, r2, r3
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3304      	adds	r3, #4
 8001da2:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001daa:	e0e6      	b.n	8001f7a <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db0:	e0d2      	b.n	8001f58 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8001db2:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <tftRotateChar+0x260>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dba:	440a      	add	r2, r1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001dc8:	e0be      	b.n	8001f48 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001dca:	68b8      	ldr	r0, [r7, #8]
 8001dcc:	f7fe fbb2 	bl	8000534 <__aeabi_i2d>
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	460d      	mov	r5, r1
 8001dd4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	441a      	add	r2, r3
 8001dde:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <tftRotateChar+0x260>)
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	4619      	mov	r1, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fba1 	bl	8000534 <__aeabi_i2d>
 8001df2:	4680      	mov	r8, r0
 8001df4:	4689      	mov	r9, r1
 8001df6:	ed97 0b08 	vldr	d0, [r7, #32]
 8001dfa:	f004 fbb5 	bl	8006568 <cos>
 8001dfe:	ec53 2b10 	vmov	r2, r3, d0
 8001e02:	4640      	mov	r0, r8
 8001e04:	4649      	mov	r1, r9
 8001e06:	f7fe fbff 	bl	8000608 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4692      	mov	sl, r2
 8001e10:	469b      	mov	fp, r3
 8001e12:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb8c 	bl	8000534 <__aeabi_i2d>
 8001e1c:	4680      	mov	r8, r0
 8001e1e:	4689      	mov	r9, r1
 8001e20:	ed97 0b08 	vldr	d0, [r7, #32]
 8001e24:	f004 fbf4 	bl	8006610 <sin>
 8001e28:	ec53 2b10 	vmov	r2, r3, d0
 8001e2c:	4640      	mov	r0, r8
 8001e2e:	4649      	mov	r1, r9
 8001e30:	f7fe fbea 	bl	8000608 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4650      	mov	r0, sl
 8001e3a:	4659      	mov	r1, fp
 8001e3c:	f7fe fa2c 	bl	8000298 <__aeabi_dsub>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4620      	mov	r0, r4
 8001e46:	4629      	mov	r1, r5
 8001e48:	f7fe fa28 	bl	800029c <__adddf3>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fe88 	bl	8000b68 <__aeabi_d2iz>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7fe fb69 	bl	8000534 <__aeabi_i2d>
 8001e62:	4604      	mov	r4, r0
 8001e64:	460d      	mov	r5, r1
 8001e66:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb62 	bl	8000534 <__aeabi_i2d>
 8001e70:	4680      	mov	r8, r0
 8001e72:	4689      	mov	r9, r1
 8001e74:	ed97 0b08 	vldr	d0, [r7, #32]
 8001e78:	f004 fb76 	bl	8006568 <cos>
 8001e7c:	ec53 2b10 	vmov	r2, r3, d0
 8001e80:	4640      	mov	r0, r8
 8001e82:	4649      	mov	r1, r9
 8001e84:	f7fe fbc0 	bl	8000608 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4692      	mov	sl, r2
 8001e8e:	469b      	mov	fp, r3
 8001e90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	441a      	add	r2, r3
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <tftRotateChar+0x260>)
 8001e9c:	791b      	ldrb	r3, [r3, #4]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb43 	bl	8000534 <__aeabi_i2d>
 8001eae:	4680      	mov	r8, r0
 8001eb0:	4689      	mov	r9, r1
 8001eb2:	ed97 0b08 	vldr	d0, [r7, #32]
 8001eb6:	f004 fbab 	bl	8006610 <sin>
 8001eba:	ec53 2b10 	vmov	r2, r3, d0
 8001ebe:	4640      	mov	r0, r8
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	f7fe fba1 	bl	8000608 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4650      	mov	r0, sl
 8001ecc:	4659      	mov	r1, fp
 8001ece:	f7fe f9e5 	bl	800029c <__adddf3>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe f9df 	bl	800029c <__adddf3>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fe3f 	bl	8000b68 <__aeabi_d2iz>
 8001eea:	4603      	mov	r3, r0
 8001eec:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	b2d8      	uxtb	r0, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	b2d9      	uxtb	r1, r3
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f7ff fc73 	bl	80017f0 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8001f0a:	7ffa      	ldrb	r2, [r7, #31]
 8001f0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f10:	f1c3 0307 	rsb	r3, r3, #7
 8001f14:	fa42 f303 	asr.w	r3, r2, r3
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <tftRotateChar+0x264>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fcb3 	bl	8001890 <tftPushColor>
 8001f2a:	e008      	b.n	8001f3e <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <tftRotateChar+0x268>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d104      	bne.n	8001f3e <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <tftRotateChar+0x26c>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fca9 	bl	8001890 <tftPushColor>
			for(i=0;i<8;i++)
 8001f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f42:	3301      	adds	r3, #1
 8001f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f4c:	2b07      	cmp	r3, #7
 8001f4e:	f67f af3c 	bls.w	8001dca <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	3301      	adds	r3, #1
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f58:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	f6ff af27 	blt.w	8001db2 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8001f64:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001f6c:	4413      	add	r3, r2
 8001f6e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8001f70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f74:	3301      	adds	r3, #1
 8001f76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <tftRotateChar+0x260>)
 8001f7c:	795b      	ldrb	r3, [r3, #5]
 8001f7e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001f82:	429a      	cmp	r2, r3
 8001f84:	f4ff af12 	bcc.w	8001dac <tftRotateChar+0x74>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3738      	adds	r7, #56	; 0x38
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	f3af 8000 	nop.w
 8001f98:	20000214 	.word	0x20000214
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000220 	.word	0x20000220
 8001fa4:	20000222 	.word	0x20000222
 8001fa8:	1eb851ec 	.word	0x1eb851ec
 8001fac:	3f91eb85 	.word	0x3f91eb85

08001fb0 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7fe f908 	bl	80001e0 <strlen>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f113 0f02 	cmn.w	r3, #2
 8001fda:	d10a      	bne.n	8001ff2 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 8001fdc:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <tftPrint+0x128>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <tftPrint+0x12c>)
 8001fe4:	791b      	ldrb	r3, [r3, #4]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d10d      	bne.n	8002016 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 8001ffa:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <tftPrint+0x130>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	4b36      	ldr	r3, [pc, #216]	; (80020dc <tftPrint+0x12c>)
 8002002:	791b      	ldrb	r3, [r3, #4]
 8002004:	4619      	mov	r1, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	0fda      	lsrs	r2, r3, #31
 8002010:	4413      	add	r3, r2
 8002012:	105b      	asrs	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	e053      	b.n	80020c4 <tftPrint+0x114>
	{
		lettercount++;
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	3301      	adds	r3, #1
 8002020:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d112      	bne.n	800204e <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60fa      	str	r2, [r7, #12]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	69f9      	ldr	r1, [r7, #28]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fd87 	bl	8001b48 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <tftPrint+0x12c>)
 800203c:	791b      	ldrb	r3, [r3, #4]
 800203e:	461a      	mov	r2, r3
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4413      	add	r3, r2
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	e00a      	b.n	8002064 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	60fa      	str	r2, [r7, #12]
 8002054:	7818      	ldrb	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	f7ff fe6a 	bl	8001d38 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8002064:	f000 f8c4 	bl	80021f0 <tftGetWidth>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <tftPrint+0x12c>)
 800206e:	791b      	ldrb	r3, [r3, #4]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	4293      	cmp	r3, r2
 800207c:	db1f      	blt.n	80020be <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <tftPrint+0x12c>)
 8002088:	795b      	ldrb	r3, [r3, #5]
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 8002092:	f000 f8b9 	bl	8002208 <tftGetHeight>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <tftPrint+0x12c>)
 800209c:	795b      	ldrb	r3, [r3, #5]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	dd09      	ble.n	80020ba <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 80020a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020aa:	f7ff fa5f 	bl	800156c <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f834 	bl	800211c <tftFillScreen>
				y=0; // start at top left of new Page
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	e001      	b.n	80020be <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3301      	adds	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dba7      	blt.n	800201c <tftPrint+0x6c>
			}

		}

	}
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000214 	.word	0x20000214
 80020e0:	20000002 	.word	0x20000002

080020e4 <tftPrintColor>:
void tftPrintColor(char *st, int x, int y, uint16_t FontColor)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	807b      	strh	r3, [r7, #2]
	uint16_t _fg_old = _fg;
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <tftPrintColor+0x34>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	82fb      	strh	r3, [r7, #22]
	_fg = FontColor;
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <tftPrintColor+0x34>)
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	8013      	strh	r3, [r2, #0]
	tftPrint(st, x, y, 0);
 80020fe:	2300      	movs	r3, #0
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff ff53 	bl	8001fb0 <tftPrint>
	_fg = _fg_old;
 800210a:	4a03      	ldr	r2, [pc, #12]	; (8002118 <tftPrintColor+0x34>)
 800210c:	8afb      	ldrh	r3, [r7, #22]
 800210e:	8013      	strh	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000008 	.word	0x20000008

0800211c <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af02      	add	r7, sp, #8
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <tftFillScreen+0x2c>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b21a      	sxth	r2, r3
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <tftFillScreen+0x30>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	b219      	sxth	r1, r3
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	460b      	mov	r3, r1
 8002138:	2100      	movs	r1, #0
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff fbfc 	bl	8001938 <tftFillRect>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	20000002 	.word	0x20000002

08002150 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 8002162:	2036      	movs	r0, #54	; 0x36
 8002164:	f7ff fa24 	bl	80015b0 <tftSendCmd>

	switch (rotation)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d836      	bhi.n	80021dc <tftSetRotation+0x8c>
 800216e:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <tftSetRotation+0x24>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	08002185 	.word	0x08002185
 8002178:	08002199 	.word	0x08002199
 800217c:	080021ad 	.word	0x080021ad
 8002180:	080021c1 	.word	0x080021c1
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8002184:	20c0      	movs	r0, #192	; 0xc0
 8002186:	f7ff fa27 	bl	80015d8 <tftSendData>
		width  = ST7735_TFTWIDTH;
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <tftSetRotation+0x94>)
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <tftSetRotation+0x98>)
 8002192:	22a0      	movs	r2, #160	; 0xa0
 8002194:	801a      	strh	r2, [r3, #0]
		break;
 8002196:	e01d      	b.n	80021d4 <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8002198:	20a0      	movs	r0, #160	; 0xa0
 800219a:	f7ff fa1d 	bl	80015d8 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <tftSetRotation+0x94>)
 80021a0:	22a0      	movs	r2, #160	; 0xa0
 80021a2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <tftSetRotation+0x98>)
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	801a      	strh	r2, [r3, #0]
		   break;
 80021aa:	e013      	b.n	80021d4 <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff fa13 	bl	80015d8 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <tftSetRotation+0x94>)
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <tftSetRotation+0x98>)
 80021ba:	22a0      	movs	r2, #160	; 0xa0
 80021bc:	801a      	strh	r2, [r3, #0]
		   break;
 80021be:	e009      	b.n	80021d4 <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80021c0:	2060      	movs	r0, #96	; 0x60
 80021c2:	f7ff fa09 	bl	80015d8 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <tftSetRotation+0x94>)
 80021c8:	22a0      	movs	r2, #160	; 0xa0
 80021ca:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <tftSetRotation+0x98>)
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	801a      	strh	r2, [r3, #0]
		   break;
 80021d2:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80021d4:	4a05      	ldr	r2, [pc, #20]	; (80021ec <tftSetRotation+0x9c>)
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	7013      	strb	r3, [r2, #0]
 80021da:	e000      	b.n	80021de <tftSetRotation+0x8e>
		   return;
 80021dc:	bf00      	nop
}
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000002 	.word	0x20000002
 80021ec:	20000210 	.word	0x20000210

080021f0 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <tftGetWidth+0x14>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	20000000 	.word	0x20000000

08002208 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <tftGetHeight+0x14>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	20000002 	.word	0x20000002

08002220 <main>:
// StepTask Time for the main process with the period of xx ms
#define StepTaskTime 6


int main(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b090      	sub	sp, #64	; 0x40
 8002224:	af00      	add	r7, sp, #0

		uint8_t        scanAddr = 0x7F;  //7Bit Adresse
		I2C_TypeDef   *i2c  = I2C1;
		I2C_TypeDef   *i2c2  = I2C2;
	*/
	uint32_t   i2cTaskTime = 50UL;
 8002226:	2332      	movs	r3, #50	; 0x32
 8002228:	63fb      	str	r3, [r7, #60]	; 0x3c

	float AlphaBeta[2];  // Wertepaar


	// This is the Array, of all Timer-Variables
    uint32_t *timerList[] = { &I2C_Timer, &ST7735_Timer /*, additional timer */ };
 800222a:	4a42      	ldr	r2, [pc, #264]	; (8002334 <main+0x114>)
 800222c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002234:	e883 0003 	stmia.w	r3, {r0, r1}
	// size of the array  are calculated
	size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 8002238:	2302      	movs	r3, #2
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38

	    BALOsetup();
 800223c:	f7fe febc 	bl	8000fb8 <BALOsetup>
	    LED_red_on;
 8002240:	2103      	movs	r1, #3
 8002242:	483d      	ldr	r0, [pc, #244]	; (8002338 <main+0x118>)
 8002244:	f000 fd38 	bl	8002cb8 <gpioResetPin>
	    struct PIDContr PID_Pos;


		// Inits needed for TFT Display
	    // Initialisiert den Systick-Timer
		systickInit(SYSTICK_1MS);
 8002248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800224c:	f001 fba4 	bl	8003998 <systickInit>
		spiInit();
 8002250:	f7ff f9d6 	bl	8001600 <spiInit>
		tftInitR(INITR_REDTAB);
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff fa93 	bl	8001780 <tftInitR>

		//display setup
	    tftSetRotation(LANDSCAPE);
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff ff78 	bl	8002150 <tftSetRotation>
	    tftSetFont((uint8_t *)&SmallFont[0]);
 8002260:	4836      	ldr	r0, [pc, #216]	; (800233c <main+0x11c>)
 8002262:	f7ff fc4f 	bl	8001b04 <tftSetFont>
	    tftFillScreen(tft_BLACK);
 8002266:	2000      	movs	r0, #0
 8002268:	f7ff ff58 	bl	800211c <tftFillScreen>

	    /* initialize the rotary push button module */
	    initRotaryPushButton();
 800226c:	f7fe ffb6 	bl	80011dc <initRotaryPushButton>

	    systickSetMillis(&I2C_Timer, i2cTaskTime);
 8002270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002272:	4833      	ldr	r0, [pc, #204]	; (8002340 <main+0x120>)
 8002274:	f001 fb82 	bl	800397c <systickSetMillis>

	    LED_red_off;
 8002278:	2103      	movs	r1, #3
 800227a:	482f      	ldr	r0, [pc, #188]	; (8002338 <main+0x118>)
 800227c:	f000 fcf1 	bl	8002c62 <gpioSetPin>
	    tftPrintColor((char *)"StepperAxis \0",0,0,tft_MAGENTA);
 8002280:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	482e      	ldr	r0, [pc, #184]	; (8002344 <main+0x124>)
 800228a:	f7ff ff2b 	bl	80020e4 <tftPrintColor>

	    //initPID(&PID_Pos, 0.5, 0.5, 0.1, (float)0.0001*i2cTaskTime);  // Init der PID-Koeffizienten des Positions-Regler

	    while (1)
	    {
		   if (true == timerTrigger)
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <main+0x128>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <main+0x86>
		   {
				systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002298:	b2da      	uxtb	r2, r3
 800229a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 fbd1 	bl	8003a48 <systickUpdateTimerList>
		   }
		   if (isSystickExpired(I2C_Timer))
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <main+0x120>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 fb96 	bl	80039dc <isSystickExpired>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0eb      	beq.n	800228e <main+0x6e>
		   {
			   systickSetTicktime(&I2C_Timer, i2cTaskTime);
 80022b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80022b8:	4821      	ldr	r0, [pc, #132]	; (8002340 <main+0x120>)
 80022ba:	f001 fb81 	bl	80039c0 <systickSetTicktime>

			   if (getRotaryPushButton() != 0)
 80022be:	f7ff f8bf 	bl	8001440 <getRotaryPushButton>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <main+0xae>
			   {
				   setRotaryPosition(0);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff f8f1 	bl	80014b0 <setRotaryPosition>
				   //initPID(&PID_Pos, 0.5, 0.5, 0.1, (float)0.0001*i2cTaskTime);
			   }

			   AlphaBeta[0] = (float)getRotaryPosition()/50;
 80022ce:	f7ff f8d9 	bl	8001484 <getRotaryPosition>
 80022d2:	ee07 0a90 	vmov	s15, r0
 80022d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022da:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800234c <main+0x12c>
 80022de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			   LED_blue_on;
 80022e6:	210a      	movs	r1, #10
 80022e8:	4813      	ldr	r0, [pc, #76]	; (8002338 <main+0x118>)
 80022ea:	f000 fce5 	bl	8002cb8 <gpioResetPin>
			   //AlphaBeta[1] = runPID(&PID_Pos,AlphaBeta[0]);
			   LED_blue_off;
 80022ee:	210a      	movs	r1, #10
 80022f0:	4811      	ldr	r0, [pc, #68]	; (8002338 <main+0x118>)
 80022f2:	f000 fcb6 	bl	8002c62 <gpioSetPin>
			   if ((AlphaBeta[1] < -1) || (AlphaBeta[1] > 1))
 80022f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80022fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	d408      	bmi.n	800231a <main+0xfa>
 8002308:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800230c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	dd03      	ble.n	8002322 <main+0x102>
			   {
				   setRotaryColor(LED_RED);
 800231a:	2001      	movs	r0, #1
 800231c:	f7fe fffc 	bl	8001318 <setRotaryColor>
 8002320:	e002      	b.n	8002328 <main+0x108>
			   }
			   else
			   {
				   setRotaryColor(LED_YELLOW);
 8002322:	2006      	movs	r0, #6
 8002324:	f7fe fff8 	bl	8001318 <setRotaryColor>
			   }
			   AlBeOszi(AlphaBeta);
 8002328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fe4b 	bl	8000fc8 <AlBeOszi>
		   if (true == timerTrigger)
 8002332:	e7ac      	b.n	800228e <main+0x6e>
 8002334:	08007770 	.word	0x08007770
 8002338:	40020400 	.word	0x40020400
 800233c:	08007780 	.word	0x08007780
 8002340:	2000022c 	.word	0x2000022c
 8002344:	08007760 	.word	0x08007760
 8002348:	20000224 	.word	0x20000224
 800234c:	42480000 	.word	0x42480000

08002350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <SystemInit+0x20>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <SystemInit+0x20>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	2302      	movs	r3, #2
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	2302      	movs	r3, #2
 800238c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800238e:	4b34      	ldr	r3, [pc, #208]	; (8002460 <SystemCoreClockUpdate+0xec>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b08      	cmp	r3, #8
 800239c:	d011      	beq.n	80023c2 <SystemCoreClockUpdate+0x4e>
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d844      	bhi.n	800242e <SystemCoreClockUpdate+0xba>
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <SystemCoreClockUpdate+0x3e>
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d004      	beq.n	80023ba <SystemCoreClockUpdate+0x46>
 80023b0:	e03d      	b.n	800242e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <SystemCoreClockUpdate+0xf0>)
 80023b4:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <SystemCoreClockUpdate+0xf4>)
 80023b6:	601a      	str	r2, [r3, #0]
      break;
 80023b8:	e03d      	b.n	8002436 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <SystemCoreClockUpdate+0xf0>)
 80023bc:	4a2b      	ldr	r2, [pc, #172]	; (800246c <SystemCoreClockUpdate+0xf8>)
 80023be:	601a      	str	r2, [r3, #0]
      break;
 80023c0:	e039      	b.n	8002436 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80023c2:	4b27      	ldr	r3, [pc, #156]	; (8002460 <SystemCoreClockUpdate+0xec>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	0d9b      	lsrs	r3, r3, #22
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <SystemCoreClockUpdate+0xec>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80023de:	4a23      	ldr	r2, [pc, #140]	; (800246c <SystemCoreClockUpdate+0xf8>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <SystemCoreClockUpdate+0xec>)
 80023e8:	6852      	ldr	r2, [r2, #4]
 80023ea:	0992      	lsrs	r2, r2, #6
 80023ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f0:	fb02 f303 	mul.w	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e00b      	b.n	8002410 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <SystemCoreClockUpdate+0xf4>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	4a17      	ldr	r2, [pc, #92]	; (8002460 <SystemCoreClockUpdate+0xec>)
 8002402:	6852      	ldr	r2, [r2, #4]
 8002404:	0992      	lsrs	r2, r2, #6
 8002406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <SystemCoreClockUpdate+0xec>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	3301      	adds	r3, #1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <SystemCoreClockUpdate+0xf0>)
 800242a:	6013      	str	r3, [r2, #0]
      break;
 800242c:	e003      	b.n	8002436 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <SystemCoreClockUpdate+0xf0>)
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <SystemCoreClockUpdate+0xf4>)
 8002432:	601a      	str	r2, [r3, #0]
      break;
 8002434:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <SystemCoreClockUpdate+0xec>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <SystemCoreClockUpdate+0xfc>)
 8002442:	5cd3      	ldrb	r3, [r2, r3]
 8002444:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <SystemCoreClockUpdate+0xf0>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <SystemCoreClockUpdate+0xf0>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	40023800 	.word	0x40023800
 8002464:	2000000c 	.word	0x2000000c
 8002468:	00f42400 	.word	0x00f42400
 800246c:	007a1200 	.word	0x007a1200
 8002470:	08007c80 	.word	0x08007c80

08002474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002476:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002478:	f7ff ff6a 	bl	8002350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <LoopForever+0xe>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <LoopForever+0x16>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024a2:	f001 fb1f 	bl	8003ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024a6:	f7ff febb 	bl	8002220 <main>

080024aa <LoopForever>:

LoopForever:
  b LoopForever
 80024aa:	e7fe      	b.n	80024aa <LoopForever>
  ldr   r0, =_estack
 80024ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024b8:	08008268 	.word	0x08008268
  ldr r2, =_sbss
 80024bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024c0:	20000244 	.word	0x20000244

080024c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>

080024c6 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d03e      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d03b      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d038      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d035      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d032      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d02f      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d02c      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b07      	cmp	r3, #7
 80024fe:	d029      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b08      	cmp	r3, #8
 8002504:	d026      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d023      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b0a      	cmp	r3, #10
 8002510:	d020      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b0b      	cmp	r3, #11
 8002516:	d01d      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d01a      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b0d      	cmp	r3, #13
 8002522:	d017      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	2b0e      	cmp	r3, #14
 8002528:	d014      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d011      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d00e      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b11      	cmp	r3, #17
 800253a:	d00b      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	2b12      	cmp	r3, #18
 8002540:	d008      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b14      	cmp	r3, #20
 8002546:	d005      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	2b15      	cmp	r3, #21
 800254c:	d002      	beq.n	8002554 <extiVerifyIrqNum+0x8e>
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b16      	cmp	r3, #22
 8002552:	d101      	bne.n	8002558 <extiVerifyIrqNum+0x92>
    {
        return true;
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <extiVerifyIrqNum+0x94>
    }
    return false;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <extiVerifyTrigger+0x1c>
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d002      	beq.n	8002582 <extiVerifyTrigger+0x1c>
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d101      	bne.n	8002586 <extiVerifyTrigger+0x20>
    {
        return true;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <extiVerifyTrigger+0x22>
    }
    return false;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 800259a:	2300      	movs	r3, #0
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	e008      	b.n	80025b2 <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <extiInit+0x34>)
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	3302      	adds	r3, #2
 80025a6:	2100      	movs	r1, #0
 80025a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	3301      	adds	r3, #1
 80025b0:	71fb      	strb	r3, [r7, #7]
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d9f3      	bls.n	80025a0 <extiInit+0xc>
    }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40013800 	.word	0x40013800

080025cc <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f937 	bl	8002858 <gpioVerifyPort>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f083 0301 	eor.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 80025f6:	23ff      	movs	r3, #255	; 0xff
 80025f8:	e08a      	b.n	8002710 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f95d 	bl	80028bc <gpioVerifyPin>
 8002602:	4603      	mov	r3, r0
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 800260e:	23fe      	movs	r3, #254	; 0xfe
 8002610:	e07e      	b.n	8002710 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d841      	bhi.n	800269c <extiConfigIrq+0xd0>
 8002618:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <extiConfigIrq+0x54>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	08002661 	.word	0x08002661
 8002624:	08002661 	.word	0x08002661
 8002628:	08002661 	.word	0x08002661
 800262c:	08002661 	.word	0x08002661
 8002630:	0800266d 	.word	0x0800266d
 8002634:	0800266d 	.word	0x0800266d
 8002638:	0800266d 	.word	0x0800266d
 800263c:	0800266d 	.word	0x0800266d
 8002640:	0800267d 	.word	0x0800267d
 8002644:	0800267d 	.word	0x0800267d
 8002648:	0800267d 	.word	0x0800267d
 800264c:	0800267d 	.word	0x0800267d
 8002650:	0800268d 	.word	0x0800268d
 8002654:	0800268d 	.word	0x0800268d
 8002658:	0800268d 	.word	0x0800268d
 800265c:	0800268d 	.word	0x0800268d
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
            break;
 800266a:	e017      	b.n	800269c <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	3b04      	subs	r3, #4
 8002670:	b2db      	uxtb	r3, r3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	73bb      	strb	r3, [r7, #14]
            index = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
            break;
 800267a:	e00f      	b.n	800269c <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	3b08      	subs	r3, #8
 8002680:	b2db      	uxtb	r3, r3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8002686:	2302      	movs	r3, #2
 8002688:	73fb      	strb	r3, [r7, #15]
            break;
 800268a:	e007      	b.n	800269c <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	3b0c      	subs	r3, #12
 8002690:	b2db      	uxtb	r3, r3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8002696:	2303      	movs	r3, #3
 8002698:	73fb      	strb	r3, [r7, #15]
            break;
 800269a:	bf00      	nop
    }

    if (GPIOA == port)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <extiConfigIrq+0x14c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d102      	bne.n	80026aa <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 80026a4:	2300      	movs	r3, #0
 80026a6:	737b      	strb	r3, [r7, #13]
 80026a8:	e021      	b.n	80026ee <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1b      	ldr	r2, [pc, #108]	; (800271c <extiConfigIrq+0x150>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d102      	bne.n	80026b8 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 80026b2:	2301      	movs	r3, #1
 80026b4:	737b      	strb	r3, [r7, #13]
 80026b6:	e01a      	b.n	80026ee <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a19      	ldr	r2, [pc, #100]	; (8002720 <extiConfigIrq+0x154>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d102      	bne.n	80026c6 <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 80026c0:	2302      	movs	r3, #2
 80026c2:	737b      	strb	r3, [r7, #13]
 80026c4:	e013      	b.n	80026ee <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a16      	ldr	r2, [pc, #88]	; (8002724 <extiConfigIrq+0x158>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d102      	bne.n	80026d4 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 80026ce:	2303      	movs	r3, #3
 80026d0:	737b      	strb	r3, [r7, #13]
 80026d2:	e00c      	b.n	80026ee <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a14      	ldr	r2, [pc, #80]	; (8002728 <extiConfigIrq+0x15c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d102      	bne.n	80026e2 <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 80026dc:	2304      	movs	r3, #4
 80026de:	737b      	strb	r3, [r7, #13]
 80026e0:	e005      	b.n	80026ee <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <extiConfigIrq+0x160>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 80026ea:	2307      	movs	r3, #7
 80026ec:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <extiConfigIrq+0x164>)
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	3302      	adds	r3, #2
 80026f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026f8:	7b79      	ldrb	r1, [r7, #13]
 80026fa:	7bbb      	ldrb	r3, [r7, #14]
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	4618      	mov	r0, r3
 8002702:	490b      	ldr	r1, [pc, #44]	; (8002730 <extiConfigIrq+0x164>)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	4302      	orrs	r2, r0
 8002708:	3302      	adds	r3, #2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40013800 	.word	0x40013800

08002734 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fec0 	bl	80024c6 <extiVerifyIrqNum>
 8002746:	4603      	mov	r3, r0
 8002748:	f083 0301 	eor.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8002752:	23d8      	movs	r3, #216	; 0xd8
 8002754:	e00a      	b.n	800276c <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <extiEnableIrq+0x40>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	79fa      	ldrb	r2, [r7, #7]
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4a03      	ldr	r2, [pc, #12]	; (8002774 <extiEnableIrq+0x40>)
 8002766:	430b      	orrs	r3, r1
 8002768:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40013c00 	.word	0x40013c00

08002778 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	71fb      	strb	r3, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fe9b 	bl	80024c6 <extiVerifyIrqNum>
 8002790:	4603      	mov	r3, r0
 8002792:	f083 0301 	eor.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 800279c:	23d8      	movs	r3, #216	; 0xd8
 800279e:	e055      	b.n	800284c <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 80027a0:	79bb      	ldrb	r3, [r7, #6]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fedf 	bl	8002566 <extiVerifyTrigger>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 80027b4:	23d7      	movs	r3, #215	; 0xd7
 80027b6:	e049      	b.n	800284c <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 80027b8:	79bb      	ldrb	r3, [r7, #6]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d115      	bne.n	80027ea <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <extiSetTriggerEdge+0xdc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	79fa      	ldrb	r2, [r7, #7]
 80027c4:	2101      	movs	r1, #1
 80027c6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ca:	4611      	mov	r1, r2
 80027cc:	4a21      	ldr	r2, [pc, #132]	; (8002854 <extiSetTriggerEdge+0xdc>)
 80027ce:	430b      	orrs	r3, r1
 80027d0:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <extiSetTriggerEdge+0xdc>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	79fa      	ldrb	r2, [r7, #7]
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	43d2      	mvns	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <extiSetTriggerEdge+0xdc>)
 80027e4:	400b      	ands	r3, r1
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	e02f      	b.n	800284a <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 80027ea:	79bb      	ldrb	r3, [r7, #6]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d115      	bne.n	800281c <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <extiSetTriggerEdge+0xdc>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	79fa      	ldrb	r2, [r7, #7]
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	4611      	mov	r1, r2
 80027fe:	4a15      	ldr	r2, [pc, #84]	; (8002854 <extiSetTriggerEdge+0xdc>)
 8002800:	430b      	orrs	r3, r1
 8002802:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <extiSetTriggerEdge+0xdc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	79fa      	ldrb	r2, [r7, #7]
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f202 	lsl.w	r2, r1, r2
 8002810:	43d2      	mvns	r2, r2
 8002812:	4611      	mov	r1, r2
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <extiSetTriggerEdge+0xdc>)
 8002816:	400b      	ands	r3, r1
 8002818:	6093      	str	r3, [r2, #8]
 800281a:	e016      	b.n	800284a <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 800281c:	79bb      	ldrb	r3, [r7, #6]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d113      	bne.n	800284a <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <extiSetTriggerEdge+0xdc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	79fa      	ldrb	r2, [r7, #7]
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4611      	mov	r1, r2
 8002830:	4a08      	ldr	r2, [pc, #32]	; (8002854 <extiSetTriggerEdge+0xdc>)
 8002832:	430b      	orrs	r3, r1
 8002834:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <extiSetTriggerEdge+0xdc>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	79fa      	ldrb	r2, [r7, #7]
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f202 	lsl.w	r2, r1, r2
 8002842:	4611      	mov	r1, r2
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <extiSetTriggerEdge+0xdc>)
 8002846:	430b      	orrs	r3, r1
 8002848:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40013c00 	.word	0x40013c00

08002858 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <gpioVerifyPort+0x4c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d013      	beq.n	8002890 <gpioVerifyPort+0x38>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <gpioVerifyPort+0x50>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00f      	beq.n	8002890 <gpioVerifyPort+0x38>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <gpioVerifyPort+0x54>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00b      	beq.n	8002890 <gpioVerifyPort+0x38>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <gpioVerifyPort+0x58>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <gpioVerifyPort+0x5c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <gpioVerifyPort+0x38>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <gpioVerifyPort+0x60>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <gpioVerifyPort+0x3c>
    {
        return true;
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <gpioVerifyPort+0x3e>
    }
    return false;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	40020800 	.word	0x40020800
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40021c00 	.word	0x40021c00

080028bc <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02c      	beq.n	8002926 <gpioVerifyPin+0x6a>
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d029      	beq.n	8002926 <gpioVerifyPin+0x6a>
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d026      	beq.n	8002926 <gpioVerifyPin+0x6a>
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d023      	beq.n	8002926 <gpioVerifyPin+0x6a>
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d020      	beq.n	8002926 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d01d      	beq.n	8002926 <gpioVerifyPin+0x6a>
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d01a      	beq.n	8002926 <gpioVerifyPin+0x6a>
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b07      	cmp	r3, #7
 80028f4:	d017      	beq.n	8002926 <gpioVerifyPin+0x6a>
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d014      	beq.n	8002926 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	2b09      	cmp	r3, #9
 8002900:	d011      	beq.n	8002926 <gpioVerifyPin+0x6a>
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2b0a      	cmp	r3, #10
 8002906:	d00e      	beq.n	8002926 <gpioVerifyPin+0x6a>
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b0b      	cmp	r3, #11
 800290c:	d00b      	beq.n	8002926 <gpioVerifyPin+0x6a>
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	2b0c      	cmp	r3, #12
 8002912:	d008      	beq.n	8002926 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	2b0d      	cmp	r3, #13
 8002918:	d005      	beq.n	8002926 <gpioVerifyPin+0x6a>
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b0e      	cmp	r3, #14
 800291e:	d002      	beq.n	8002926 <gpioVerifyPin+0x6a>
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	d101      	bne.n	800292a <gpioVerifyPin+0x6e>
    {
        return true;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <gpioVerifyPin+0x70>
    }
    return false;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02c      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d029      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d026      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d023      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d020      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d01d      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2b06      	cmp	r3, #6
 800296a:	d01a      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	2b07      	cmp	r3, #7
 8002970:	d017      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d014      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	2b09      	cmp	r3, #9
 800297c:	d011      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	2b0a      	cmp	r3, #10
 8002982:	d00e      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	2b0b      	cmp	r3, #11
 8002988:	d00b      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d008      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b0d      	cmp	r3, #13
 8002994:	d005      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b0e      	cmp	r3, #14
 800299a:	d002      	beq.n	80029a2 <gpioVerifyAltFunc+0x6a>
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d101      	bne.n	80029a6 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <gpioVerifyAltFunc+0x70>
    }

    return false;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <gpioVerifyPinMode+0x22>
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d005      	beq.n	80029d6 <gpioVerifyPinMode+0x22>
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d002      	beq.n	80029d6 <gpioVerifyPinMode+0x22>
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d101      	bne.n	80029da <gpioVerifyPinMode+0x26>
    {
        return true;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <gpioVerifyPinMode+0x28>
    }

    return false;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <gpioVerifyOutputType+0x16>
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <gpioVerifyOutputType+0x1a>
    {
        return true;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <gpioVerifyPushPullMode+0x1c>
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d002      	beq.n	8002a2c <gpioVerifyPushPullMode+0x1c>
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d101      	bne.n	8002a30 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff05 	bl	8002858 <gpioVerifyPort>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d042      	beq.n	8002ada <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <gpioInitPort+0xa8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d106      	bne.n	8002a6a <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <gpioInitPort+0xac>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a22      	ldr	r2, [pc, #136]	; (8002aec <gpioInitPort+0xac>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	e035      	b.n	8002ad6 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	; (8002af0 <gpioInitPort+0xb0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d106      	bne.n	8002a80 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <gpioInitPort+0xac>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <gpioInitPort+0xac>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	e02a      	b.n	8002ad6 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <gpioInitPort+0xb4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d106      	bne.n	8002a96 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <gpioInitPort+0xac>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	4a17      	ldr	r2, [pc, #92]	; (8002aec <gpioInitPort+0xac>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6313      	str	r3, [r2, #48]	; 0x30
 8002a94:	e01f      	b.n	8002ad6 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <gpioInitPort+0xb8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d106      	bne.n	8002aac <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <gpioInitPort+0xac>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <gpioInitPort+0xac>)
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	e014      	b.n	8002ad6 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <gpioInitPort+0xbc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d106      	bne.n	8002ac2 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <gpioInitPort+0xac>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <gpioInitPort+0xac>)
 8002aba:	f043 0310 	orr.w	r3, r3, #16
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	e009      	b.n	8002ad6 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <gpioInitPort+0xc0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d105      	bne.n	8002ad6 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <gpioInitPort+0xac>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <gpioInitPort+0xac>)
 8002ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e001      	b.n	8002ade <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40021c00 	.word	0x40021c00

08002b04 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fea3 	bl	8002858 <gpioVerifyPort>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f083 0301 	eor.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	e041      	b.n	8002ba8 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <gpioSelectPort+0xac>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d106      	bne.n	8002b3a <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6313      	str	r3, [r2, #48]	; 0x30
 8002b38:	e035      	b.n	8002ba6 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <gpioSelectPort+0xb4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d106      	bne.n	8002b50 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002b42:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	e02a      	b.n	8002ba6 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <gpioSelectPort+0xb8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d106      	bne.n	8002b66 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6313      	str	r3, [r2, #48]	; 0x30
 8002b64:	e01f      	b.n	8002ba6 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <gpioSelectPort+0xbc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d106      	bne.n	8002b7c <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	e014      	b.n	8002ba6 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <gpioSelectPort+0xc0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d106      	bne.n	8002b92 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b8a:	f043 0310 	orr.w	r3, r3, #16
 8002b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b90:	e009      	b.n	8002ba6 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <gpioSelectPort+0xc4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d105      	bne.n	8002ba6 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <gpioSelectPort+0xb0>)
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020400 	.word	0x40020400
 8002bbc:	40020800 	.word	0x40020800
 8002bc0:	40020c00 	.word	0x40020c00
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40021c00 	.word	0x40021c00

08002bcc <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70fb      	strb	r3, [r7, #3]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff fe3b 	bl	8002858 <gpioVerifyPort>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e032      	b.n	8002c5a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fe60 	bl	80028bc <gpioVerifyPin>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f083 0301 	eor.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8002c08:	f06f 0301 	mvn.w	r3, #1
 8002c0c:	e025      	b.n	8002c5a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8002c0e:	78bb      	ldrb	r3, [r7, #2]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fecf 	bl	80029b4 <gpioVerifyPinMode>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8002c22:	f06f 0305 	mvn.w	r3, #5
 8002c26:	e018      	b.n	8002c5a <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	0052      	lsls	r2, r2, #1
 8002c30:	2103      	movs	r1, #3
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	43d2      	mvns	r2, r2
 8002c38:	401a      	ands	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8002c3e:	78bb      	ldrb	r3, [r7, #2]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	78b9      	ldrb	r1, [r7, #2]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	0052      	lsls	r2, r2, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fdf2 	bl	8002858 <gpioVerifyPort>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
 8002c84:	e014      	b.n	8002cb0 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fe17 	bl	80028bc <gpioVerifyPin>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f083 0301 	eor.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8002c9a:	f06f 0301 	mvn.w	r3, #1
 8002c9e:	e007      	b.n	8002cb0 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff fdc7 	bl	8002858 <gpioVerifyPort>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f083 0301 	eor.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cda:	e015      	b.n	8002d08 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fdec 	bl	80028bc <gpioVerifyPin>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8002cf0:	f06f 0301 	mvn.w	r3, #1
 8002cf4:	e008      	b.n	8002d08 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	3310      	adds	r3, #16
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fd99 	bl	8002858 <gpioVerifyPort>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f083 0301 	eor.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
 8002d36:	e050      	b.n	8002dda <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fdbe 	bl	80028bc <gpioVerifyPin>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f083 0301 	eor.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8002d4c:	f06f 0301 	mvn.w	r3, #1
 8002d50:	e043      	b.n	8002dda <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8002d52:	78bb      	ldrb	r3, [r7, #2]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fdef 	bl	8002938 <gpioVerifyAltFunc>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8002d66:	f06f 0302 	mvn.w	r3, #2
 8002d6a:	e036      	b.n	8002dda <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ff2a 	bl	8002bcc <gpioSelectPinMode>

	if (pin <= PIN7)
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b07      	cmp	r3, #7
 8002d7c:	d815      	bhi.n	8002daa <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	0092      	lsls	r2, r2, #2
 8002d86:	210f      	movs	r1, #15
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	43d2      	mvns	r2, r2
 8002d8e:	401a      	ands	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	78b9      	ldrb	r1, [r7, #2]
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	0092      	lsls	r2, r2, #2
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]
 8002da8:	e016      	b.n	8002dd8 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	3a08      	subs	r2, #8
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	210f      	movs	r1, #15
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	43d2      	mvns	r2, r2
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	78b9      	ldrb	r1, [r7, #2]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	3a08      	subs	r2, #8
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
 8002dee:	4613      	mov	r3, r2
 8002df0:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fd30 	bl	8002858 <gpioVerifyPort>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	e030      	b.n	8002e6c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fd55 	bl	80028bc <gpioVerifyPin>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8002e1e:	f06f 0301 	mvn.w	r3, #1
 8002e22:	e023      	b.n	8002e6c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8002e24:	78bb      	ldrb	r3, [r7, #2]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fdde 	bl	80029e8 <gpioVerifyOutputType>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f083 0301 	eor.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8002e38:	f06f 0303 	mvn.w	r3, #3
 8002e3c:	e016      	b.n	8002e6c <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4a:	43d2      	mvns	r2, r2
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8002e52:	78bb      	ldrb	r3, [r7, #2]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d108      	bne.n	8002e6a <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
 8002e80:	4613      	mov	r3, r2
 8002e82:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff fce7 	bl	8002858 <gpioVerifyPort>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e044      	b.n	8002f26 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fd0c 	bl	80028bc <gpioVerifyPin>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f083 0301 	eor.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8002eb0:	f06f 0301 	mvn.w	r3, #1
 8002eb4:	e037      	b.n	8002f26 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8002eb6:	78bb      	ldrb	r3, [r7, #2]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fda9 	bl	8002a10 <gpioVerifyPushPullMode>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8002eca:	f06f 0306 	mvn.w	r3, #6
 8002ece:	e02a      	b.n	8002f26 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	0052      	lsls	r2, r2, #1
 8002ed8:	2103      	movs	r1, #3
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	43d2      	mvns	r2, r2
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11a      	bne.n	8002f24 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8002eee:	78bb      	ldrb	r3, [r7, #2]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10a      	bne.n	8002f0a <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	0052      	lsls	r2, r2, #1
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f202 	lsl.w	r2, r1, r2
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	e00c      	b.n	8002f24 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8002f0a:	78bb      	ldrb	r3, [r7, #2]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d109      	bne.n	8002f24 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	0052      	lsls	r2, r2, #1
 8002f18:	2102      	movs	r1, #2
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	2101      	movs	r1, #1
 8002f42:	fa01 f202 	lsl.w	r2, r1, r2
 8002f46:	4013      	ands	r3, r2
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <i2cVerifyDutyCycle+0x16>
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <i2cSelectI2C+0x58>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d106      	bne.n	8002fae <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <i2cSelectI2C+0x5c>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	4a11      	ldr	r2, [pc, #68]	; (8002fec <i2cSelectI2C+0x5c>)
 8002fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002faa:	6413      	str	r3, [r2, #64]	; 0x40
 8002fac:	e014      	b.n	8002fd8 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <i2cSelectI2C+0x60>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d106      	bne.n	8002fc4 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <i2cSelectI2C+0x5c>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <i2cSelectI2C+0x5c>)
 8002fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc2:	e009      	b.n	8002fd8 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <i2cSelectI2C+0x64>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d105      	bne.n	8002fd8 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <i2cSelectI2C+0x5c>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	4a06      	ldr	r2, [pc, #24]	; (8002fec <i2cSelectI2C+0x5c>)
 8002fd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40005400 	.word	0x40005400
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40005800 	.word	0x40005800
 8002ff4:	40005c00 	.word	0x40005c00

08002ff8 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <i2cSetClkSpd+0x2a>
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d008      	beq.n	8003022 <i2cSetClkSpd+0x2a>
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d005      	beq.n	8003022 <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	2b03      	cmp	r3, #3
 800301a:	d002      	beq.n	8003022 <i2cSetClkSpd+0x2a>
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	2b04      	cmp	r3, #4
 8003020:	d160      	bne.n	80030e4 <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 8003022:	bf00      	nop
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f9      	bne.n	8003024 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800303e:	f023 030f 	bic.w	r3, r3, #15
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	61da      	str	r2, [r3, #28]
    	switch (spd)
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d836      	bhi.n	80030c6 <i2cSetClkSpd+0xce>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <i2cSetClkSpd+0x68>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003075 	.word	0x08003075
 8003064:	08003083 	.word	0x08003083
 8003068:	08003091 	.word	0x08003091
 800306c:	0800309f 	.word	0x0800309f
 8003070:	080030ad 	.word	0x080030ad
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	61da      	str	r2, [r3, #28]
				break;
 8003080:	e02e      	b.n	80030e0 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	61da      	str	r2, [r3, #28]
    			break;
 800308e:	e027      	b.n	80030e0 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	61da      	str	r2, [r3, #28]
    				break;
 800309c:	e020      	b.n	80030e0 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
    			//i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f043 0214 	orr.w	r2, r3, #20
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 80030aa:	e019      	b.n	80030e0 <i2cSetClkSpd+0xe8>
    			break;
    		}
    		case I2C_CLOCK_1Mz:
			{
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	61da      	str	r2, [r3, #28]
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f043 0205 	orr.w	r2, r3, #5
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 80030c4:	e00c      	b.n	80030e0 <i2cSetClkSpd+0xe8>
				break;
			}
    		default:
    		{
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	61da      	str	r2, [r3, #28]
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 80030de:	bf00      	nop
    			break;
    		}
    	}
 80030e0:	2300      	movs	r3, #0
 80030e2:	e001      	b.n	80030e8 <i2cSetClkSpd+0xf0>
    	 i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
    	return I2C_OK;
 80030e4:	f06f 033d 	mvn.w	r3, #61	; 0x3d
    }
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <i2cInitI2C>:
    return I2C_INVALID_CLOCK_SPEED;
}

 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	70fb      	strb	r3, [r7, #3]
 8003106:	460b      	mov	r3, r1
 8003108:	70bb      	strb	r3, [r7, #2]
 800310a:	4613      	mov	r3, r2
 800310c:	707b      	strb	r3, [r7, #1]
I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff28 	bl	8002f66 <i2cVerifyDutyCycle>
 8003116:	4603      	mov	r3, r0
 8003118:	f083 0301 	eor.w	r3, r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <i2cInitI2C+0x34>
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8003122:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8003126:	e02f      	b.n	8003188 <i2cInitI2C+0x94>
    {
        return I2C_INVALID_DUTY_CYCLE;
    }
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800312e:	601a      	str	r2, [r3, #0]

 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8003142:	f000 f967 	bl	8003414 <rccGetPclk1Freq>
 8003146:	60f8      	str	r0, [r7, #12]

 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a11      	ldr	r2, [pc, #68]	; (8003190 <i2cInitI2C+0x9c>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	0c9a      	lsrs	r2, r3, #18
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	605a      	str	r2, [r3, #4]
    pclock = rccGetPclk1Freq();
    i2c->CR2 = pclock / 1000000;		//
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2211      	movs	r2, #17
 800315a:	621a      	str	r2, [r3, #32]

    i2c->TRISE = trise;                // Set max. rise time
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]

 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	4619      	mov	r1, r3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff3f 	bl	8002ff8 <i2cSetClkSpd>

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]

    //i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8003186:	2300      	movs	r3, #0

 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	431bde83 	.word	0x431bde83

08003194 <i2cEnableDevice>:
 *          <td>CR1</td>
 *          <td rowspan="1">PE</td>
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	601a      	str	r2, [r3, #0]
{
 80031a8:	2300      	movs	r3, #0
    i2c->CR1 |= I2C_CR1_PE;
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 80031b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031bc:	b094      	sub	sp, #80	; 0x50
 80031be:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 80031c0:	2300      	movs	r3, #0
 80031c2:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 80031c4:	2300      	movs	r3, #0
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 80031c8:	2300      	movs	r3, #0
 80031ca:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 80031cc:	2300      	movs	r3, #0
 80031ce:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d0:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <rccGetSysClock+0x200>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d00d      	beq.n	80031f8 <rccGetSysClock+0x40>
 80031dc:	2b08      	cmp	r3, #8
 80031de:	f200 80e1 	bhi.w	80033a4 <rccGetSysClock+0x1ec>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <rccGetSysClock+0x34>
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d003      	beq.n	80031f2 <rccGetSysClock+0x3a>
 80031ea:	e0db      	b.n	80033a4 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80031ec:	4b73      	ldr	r3, [pc, #460]	; (80033bc <rccGetSysClock+0x204>)
 80031ee:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80031f0:	e0db      	b.n	80033aa <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80031f2:	4b73      	ldr	r3, [pc, #460]	; (80033c0 <rccGetSysClock+0x208>)
 80031f4:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80031f6:	e0d8      	b.n	80033aa <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f8:	4b6f      	ldr	r3, [pc, #444]	; (80033b8 <rccGetSysClock+0x200>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003200:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003202:	4b6d      	ldr	r3, [pc, #436]	; (80033b8 <rccGetSysClock+0x200>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d063      	beq.n	80032d6 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800320e:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <rccGetSysClock+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	2200      	movs	r2, #0
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
 8003218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
 8003222:	2300      	movs	r3, #0
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800322a:	4622      	mov	r2, r4
 800322c:	462b      	mov	r3, r5
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	0159      	lsls	r1, r3, #5
 8003238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323c:	0150      	lsls	r0, r2, #5
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4621      	mov	r1, r4
 8003244:	1a51      	subs	r1, r2, r1
 8003246:	6139      	str	r1, [r7, #16]
 8003248:	4629      	mov	r1, r5
 800324a:	eb63 0301 	sbc.w	r3, r3, r1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800325c:	4659      	mov	r1, fp
 800325e:	018b      	lsls	r3, r1, #6
 8003260:	4651      	mov	r1, sl
 8003262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003266:	4651      	mov	r1, sl
 8003268:	018a      	lsls	r2, r1, #6
 800326a:	4651      	mov	r1, sl
 800326c:	ebb2 0801 	subs.w	r8, r2, r1
 8003270:	4659      	mov	r1, fp
 8003272:	eb63 0901 	sbc.w	r9, r3, r1
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800328a:	4690      	mov	r8, r2
 800328c:	4699      	mov	r9, r3
 800328e:	4623      	mov	r3, r4
 8003290:	eb18 0303 	adds.w	r3, r8, r3
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	462b      	mov	r3, r5
 8003298:	eb49 0303 	adc.w	r3, r9, r3
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032aa:	4629      	mov	r1, r5
 80032ac:	024b      	lsls	r3, r1, #9
 80032ae:	4621      	mov	r1, r4
 80032b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032b4:	4621      	mov	r1, r4
 80032b6:	024a      	lsls	r2, r1, #9
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032be:	2200      	movs	r2, #0
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c8:	f7fd fc76 	bl	8000bb8 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80032d0:	4613      	mov	r3, r2
 80032d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d4:	e058      	b.n	8003388 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80032d6:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <rccGetSysClock+0x200>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	099b      	lsrs	r3, r3, #6
 80032dc:	2200      	movs	r2, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	4611      	mov	r1, r2
 80032e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032f0:	4642      	mov	r2, r8
 80032f2:	464b      	mov	r3, r9
 80032f4:	f04f 0000 	mov.w	r0, #0
 80032f8:	f04f 0100 	mov.w	r1, #0
 80032fc:	0159      	lsls	r1, r3, #5
 80032fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003302:	0150      	lsls	r0, r2, #5
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4641      	mov	r1, r8
 800330a:	ebb2 0a01 	subs.w	sl, r2, r1
 800330e:	4649      	mov	r1, r9
 8003310:	eb63 0b01 	sbc.w	fp, r3, r1
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003328:	ebb2 040a 	subs.w	r4, r2, sl
 800332c:	eb63 050b 	sbc.w	r5, r3, fp
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	00eb      	lsls	r3, r5, #3
 800333a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333e:	00e2      	lsls	r2, r4, #3
 8003340:	4614      	mov	r4, r2
 8003342:	461d      	mov	r5, r3
 8003344:	4643      	mov	r3, r8
 8003346:	18e3      	adds	r3, r4, r3
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	464b      	mov	r3, r9
 800334c:	eb45 0303 	adc.w	r3, r5, r3
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800335e:	4629      	mov	r1, r5
 8003360:	028b      	lsls	r3, r1, #10
 8003362:	4621      	mov	r1, r4
 8003364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003368:	4621      	mov	r1, r4
 800336a:	028a      	lsls	r2, r1, #10
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003372:	2200      	movs	r2, #0
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	61fa      	str	r2, [r7, #28]
 8003378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337c:	f7fd fc1c 	bl	8000bb8 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003384:	4613      	mov	r3, r2
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <rccGetSysClock+0x200>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	3301      	adds	r3, #1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8003398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800339a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80033a2:	e002      	b.n	80033aa <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <rccGetSysClock+0x204>)
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80033a8:	bf00      	nop
    }

    return sysClock;
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3750      	adds	r7, #80	; 0x50
 80033b0:	46bd      	mov	sp, r7
 80033b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	007a1200 	.word	0x007a1200

080033c4 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 80033ca:	f7ff fef5 	bl	80031b8 <rccGetSysClock>
 80033ce:	4601      	mov	r1, r0
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <rccGetHclkFreq+0x44>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d8:	22f0      	movs	r2, #240	; 0xf0
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	fa92 f2a2 	rbit	r2, r2
 80033e2:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	fab2 f282 	clz	r2, r2
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	40d3      	lsrs	r3, r2
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <rccGetHclkFreq+0x48>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	fa21 f303 	lsr.w	r3, r1, r3
 80033f6:	4a06      	ldr	r2, [pc, #24]	; (8003410 <rccGetHclkFreq+0x4c>)
 80033f8:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <rccGetHclkFreq+0x4c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	08007c90 	.word	0x08007c90
 8003410:	2000000c 	.word	0x2000000c

08003414 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800341a:	f7ff ffd3 	bl	80033c4 <rccGetHclkFreq>
 800341e:	4601      	mov	r1, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <rccGetPclk1Freq+0x3c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003428:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800342c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	fa92 f2a2 	rbit	r2, r2
 8003434:	603a      	str	r2, [r7, #0]
  return result;
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	fab2 f282 	clz	r2, r2
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	40d3      	lsrs	r3, r2
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <rccGetPclk1Freq+0x40>)
 8003442:	5cd3      	ldrb	r3, [r2, r3]
 8003444:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	08007c90 	.word	0x08007c90

08003458 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8003460:	bf00      	nop
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f9      	beq.n	8003462 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 800346e:	2300      	movs	r3, #0
 8003470:	81fb      	strh	r3, [r7, #14]
 8003472:	e002      	b.n	800347a <__spi_Chk_TX_empty+0x22>
 8003474:	89fb      	ldrh	r3, [r7, #14]
 8003476:	3301      	adds	r3, #1
 8003478:	81fb      	strh	r3, [r7, #14]
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d9f9      	bls.n	8003474 <__spi_Chk_TX_empty+0x1c>

}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8003496:	bf00      	nop
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f9      	bne.n	8003498 <__spi_Chk_notBSY+0xa>
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <spiVerifySPI+0x3c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00b      	beq.n	80034dc <spiVerifySPI+0x28>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0b      	ldr	r2, [pc, #44]	; (80034f4 <spiVerifySPI+0x40>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d007      	beq.n	80034dc <spiVerifySPI+0x28>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <spiVerifySPI+0x44>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <spiVerifySPI+0x28>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <spiVerifySPI+0x48>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <spiVerifySPI+0x2c>
    {
        return true;
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <spiVerifySPI+0x2e>
    }
    return false;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40013000 	.word	0x40013000
 80034f4:	40003800 	.word	0x40003800
 80034f8:	40003c00 	.word	0x40003c00
 80034fc:	40013400 	.word	0x40013400

08003500 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d014      	beq.n	800353a <spiVerifyClkDivider+0x3a>
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d011      	beq.n	800353a <spiVerifyClkDivider+0x3a>
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d00e      	beq.n	800353a <spiVerifyClkDivider+0x3a>
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d00b      	beq.n	800353a <spiVerifyClkDivider+0x3a>
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d008      	beq.n	800353a <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d005      	beq.n	800353a <spiVerifyClkDivider+0x3a>
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	2b06      	cmp	r3, #6
 8003532:	d002      	beq.n	800353a <spiVerifyClkDivider+0x3a>
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	2b07      	cmp	r3, #7
 8003538:	d101      	bne.n	800353e <spiVerifyClkDivider+0x3e>
    {
        return true;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <spiVerifyClkDivider+0x40>
    }
    return false;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d002      	beq.n	8003562 <spiVerifySSM+0x16>
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <spiVerifySSM+0x1a>
    {
        return true;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <spiVerifySSM+0x1c>
    }
    return false;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <spiVerifyOpMode+0x16>
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <spiVerifyOpMode+0x1a>
    {
        return true;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <spiVerifyOpMode+0x1c>
    }
    return false;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <spiVerifyPhase+0x16>
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <spiVerifyPhase+0x1a>
    {
        return true;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <spiVerifyPhase+0x1c>
    }
    return false;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <spiVerifyIdlePolarity+0x16>
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	70fb      	strb	r3, [r7, #3]
 80035fe:	460b      	mov	r3, r1
 8003600:	70bb      	strb	r3, [r7, #2]
 8003602:	4613      	mov	r3, r2
 8003604:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff77 	bl	8003500 <spiVerifyClkDivider>
 8003612:	4603      	mov	r3, r0
 8003614:	f083 0301 	eor.w	r3, r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 800361e:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8003622:	e0cc      	b.n	80037be <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8003624:	787b      	ldrb	r3, [r7, #1]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ff90 	bl	800354c <spiVerifySSM>
 800362c:	4603      	mov	r3, r0
 800362e:	f083 0301 	eor.w	r3, r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8003638:	f06f 0352 	mvn.w	r3, #82	; 0x52
 800363c:	e0bf      	b.n	80037be <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 800363e:	7f3b      	ldrb	r3, [r7, #28]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff97 	bl	8003574 <spiVerifyOpMode>
 8003646:	4603      	mov	r3, r0
 8003648:	f083 0301 	eor.w	r3, r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8003652:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8003656:	e0b2      	b.n	80037be <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8003658:	f897 3020 	ldrb.w	r3, [r7, #32]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff9d 	bl	800359c <spiVerifyPhase>
 8003662:	4603      	mov	r3, r0
 8003664:	f083 0301 	eor.w	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 800366e:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8003672:	e0a4      	b.n	80037be <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8003674:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ffa3 	bl	80035c4 <spiVerifyIdlePolarity>
 800367e:	4603      	mov	r3, r0
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 800368a:	f06f 0357 	mvn.w	r3, #87	; 0x57
 800368e:	e096      	b.n	80037be <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	2b07      	cmp	r3, #7
 8003694:	d83a      	bhi.n	800370c <spiInitSPI+0x120>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <spiInitSPI+0xb0>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036bd 	.word	0x080036bd
 80036a0:	080036c7 	.word	0x080036c7
 80036a4:	080036d1 	.word	0x080036d1
 80036a8:	080036db 	.word	0x080036db
 80036ac:	080036e5 	.word	0x080036e5
 80036b0:	080036ef 	.word	0x080036ef
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	08003703 	.word	0x08003703
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80036bc:	89fb      	ldrh	r3, [r7, #14]
 80036be:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80036c2:	81fb      	strh	r3, [r7, #14]
            break;
 80036c4:	e027      	b.n	8003716 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 80036c6:	89fb      	ldrh	r3, [r7, #14]
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	81fb      	strh	r3, [r7, #14]
            break;
 80036ce:	e022      	b.n	8003716 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 80036d0:	89fb      	ldrh	r3, [r7, #14]
 80036d2:	f043 0310 	orr.w	r3, r3, #16
 80036d6:	81fb      	strh	r3, [r7, #14]
            break;
 80036d8:	e01d      	b.n	8003716 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80036da:	89fb      	ldrh	r3, [r7, #14]
 80036dc:	f043 0318 	orr.w	r3, r3, #24
 80036e0:	81fb      	strh	r3, [r7, #14]
            break;
 80036e2:	e018      	b.n	8003716 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	f043 0320 	orr.w	r3, r3, #32
 80036ea:	81fb      	strh	r3, [r7, #14]
            break;
 80036ec:	e013      	b.n	8003716 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80036f4:	81fb      	strh	r3, [r7, #14]
            break;
 80036f6:	e00e      	b.n	8003716 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036fe:	81fb      	strh	r3, [r7, #14]
            break;
 8003700:	e009      	b.n	8003716 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003702:	89fb      	ldrh	r3, [r7, #14]
 8003704:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003708:	81fb      	strh	r3, [r7, #14]
            break;
 800370a:	e004      	b.n	8003716 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800370c:	89fb      	ldrh	r3, [r7, #14]
 800370e:	f043 0318 	orr.w	r3, r3, #24
 8003712:	81fb      	strh	r3, [r7, #14]
            break;
 8003714:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8003716:	78bb      	ldrb	r3, [r7, #2]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003722:	81fb      	strh	r3, [r7, #14]
 8003724:	e003      	b.n	800372e <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800372c:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 800372e:	787b      	ldrb	r3, [r7, #1]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d110      	bne.n	8003756 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8003734:	89fb      	ldrh	r3, [r7, #14]
 8003736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373a:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 800373c:	7e3b      	ldrb	r3, [r7, #24]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d104      	bne.n	800374c <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8003742:	89fb      	ldrh	r3, [r7, #14]
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	81fb      	strh	r3, [r7, #14]
 800374a:	e008      	b.n	800375e <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 800374c:	89fb      	ldrh	r3, [r7, #14]
 800374e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003752:	81fb      	strh	r3, [r7, #14]
 8003754:	e003      	b.n	800375e <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8003756:	89fb      	ldrh	r3, [r7, #14]
 8003758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800375c:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 800375e:	7f3b      	ldrb	r3, [r7, #28]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	81fb      	strh	r3, [r7, #14]
 800376c:	e003      	b.n	8003776 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 800376e:	89fb      	ldrh	r3, [r7, #14]
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8003776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 800377e:	89fb      	ldrh	r3, [r7, #14]
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	81fb      	strh	r3, [r7, #14]
 8003786:	e003      	b.n	8003790 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8003788:	89fb      	ldrh	r3, [r7, #14]
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8003790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8003798:	89fb      	ldrh	r3, [r7, #14]
 800379a:	f023 0302 	bic.w	r3, r3, #2
 800379e:	81fb      	strh	r3, [r7, #14]
 80037a0:	e003      	b.n	80037aa <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 80037a2:	89fb      	ldrh	r3, [r7, #14]
 80037a4:	f043 0302 	orr.w	r3, r3, #2
 80037a8:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 80037aa:	89fa      	ldrh	r2, [r7, #14]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f846 	bl	8003848 <spiEnableSPI>

    return SPI_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop

080037c8 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <spiSelectSPI+0x6c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d106      	bne.n	80037e6 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80037d8:	4b17      	ldr	r3, [pc, #92]	; (8003838 <spiSelectSPI+0x70>)
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	4a16      	ldr	r2, [pc, #88]	; (8003838 <spiSelectSPI+0x70>)
 80037de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037e2:	6453      	str	r3, [r2, #68]	; 0x44
 80037e4:	e01f      	b.n	8003826 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <spiSelectSPI+0x74>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d106      	bne.n	80037fc <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <spiSelectSPI+0x70>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <spiSelectSPI+0x70>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	e014      	b.n	8003826 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a10      	ldr	r2, [pc, #64]	; (8003840 <spiSelectSPI+0x78>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d106      	bne.n	8003812 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <spiSelectSPI+0x70>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	4a0b      	ldr	r2, [pc, #44]	; (8003838 <spiSelectSPI+0x70>)
 800380a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380e:	6413      	str	r3, [r2, #64]	; 0x40
 8003810:	e009      	b.n	8003826 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <spiSelectSPI+0x7c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d105      	bne.n	8003826 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <spiSelectSPI+0x70>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	4a06      	ldr	r2, [pc, #24]	; (8003838 <spiSelectSPI+0x70>)
 8003820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003824:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40013000 	.word	0x40013000
 8003838:	40023800 	.word	0x40023800
 800383c:	40003800 	.word	0x40003800
 8003840:	40003c00 	.word	0x40003c00
 8003844:	40013400 	.word	0x40013400

08003848 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fe2f 	bl	80034b4 <spiVerifySPI>
 8003856:	4603      	mov	r3, r0
 8003858:	f083 0301 	eor.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8003862:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8003866:	e006      	b.n	8003876 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	4611      	mov	r1, r2
 800388a:	461a      	mov	r2, r3
 800388c:	460b      	mov	r3, r1
 800388e:	71fb      	strb	r3, [r7, #7]
 8003890:	4613      	mov	r3, r2
 8003892:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f810 	bl	80028bc <gpioVerifyPin>
 800389c:	4603      	mov	r3, r0
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 80038a8:	f06f 0301 	mvn.w	r3, #1
 80038ac:	e016      	b.n	80038dc <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fdd2 	bl	8003458 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	4619      	mov	r1, r3
 80038b8:	68b8      	ldr	r0, [r7, #8]
 80038ba:	f7ff f9fd 	bl	8002cb8 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 80038be:	79ba      	ldrb	r2, [r7, #6]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff fdc7 	bl	8003458 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff fddf 	bl	800348e <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	4619      	mov	r1, r3
 80038d4:	68b8      	ldr	r0, [r7, #8]
 80038d6:	f7ff f9c4 	bl	8002c62 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	db0a      	blt.n	800390e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	490c      	ldr	r1, [pc, #48]	; (8003930 <__NVIC_SetPriority+0x4c>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	440b      	add	r3, r1
 8003908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800390c:	e00a      	b.n	8003924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	4908      	ldr	r1, [pc, #32]	; (8003934 <__NVIC_SetPriority+0x50>)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3b04      	subs	r3, #4
 800391c:	0112      	lsls	r2, r2, #4
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	440b      	add	r3, r1
 8003922:	761a      	strb	r2, [r3, #24]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000e100 	.word	0xe000e100
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003948:	d301      	bcc.n	800394e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800394a:	2301      	movs	r3, #1
 800394c:	e00f      	b.n	800396e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800394e:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <SysTick_Config+0x40>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003956:	210f      	movs	r1, #15
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	f7ff ffc2 	bl	80038e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <SysTick_Config+0x40>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <SysTick_Config+0x40>)
 8003968:	2207      	movs	r2, #7
 800396a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	e000e010 	.word	0xe000e010

0800397c <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	601a      	str	r2, [r3, #0]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 80039a0:	f7fe fce8 	bl	8002374 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <systickInit+0x24>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ffc2 	bl	8003938 <SysTick_Config>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 80039e4:	2300      	movs	r3, #0
 80039e6:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <isSystickExpired+0x16>
	{
		timerState = true;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <SysTick_Handler+0x14>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	20000224 	.word	0x20000224

08003a18 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <systickUpdateTimer+0x1a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	1e5a      	subs	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <systickUpdateTimer+0x2c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	20000224 	.word	0x20000224

08003a48 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e011      	b.n	8003a7e <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <systickUpdateTimerList+0x30>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1e5a      	subs	r2, r3, #1
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3e9      	bcc.n	8003a5a <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <systickUpdateTimerList+0x50>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000224 	.word	0x20000224

08003a9c <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8003aa6:	6839      	ldr	r1, [r7, #0]
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff67 	bl	800397c <systickSetMillis>
    while (!isSystickExpired(*timer))
 8003aae:	e006      	b.n	8003abe <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <systickDelay+0x44>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ffad 	bl	8003a18 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ff8a 	bl	80039dc <isSystickExpired>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ed      	bne.n	8003ab0 <systickDelay+0x14>
        }
    }
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000224 	.word	0x20000224

08003ae4 <__libc_init_array>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	4d0d      	ldr	r5, [pc, #52]	; (8003b1c <__libc_init_array+0x38>)
 8003ae8:	4c0d      	ldr	r4, [pc, #52]	; (8003b20 <__libc_init_array+0x3c>)
 8003aea:	1b64      	subs	r4, r4, r5
 8003aec:	10a4      	asrs	r4, r4, #2
 8003aee:	2600      	movs	r6, #0
 8003af0:	42a6      	cmp	r6, r4
 8003af2:	d109      	bne.n	8003b08 <__libc_init_array+0x24>
 8003af4:	4d0b      	ldr	r5, [pc, #44]	; (8003b24 <__libc_init_array+0x40>)
 8003af6:	4c0c      	ldr	r4, [pc, #48]	; (8003b28 <__libc_init_array+0x44>)
 8003af8:	f003 fe24 	bl	8007744 <_init>
 8003afc:	1b64      	subs	r4, r4, r5
 8003afe:	10a4      	asrs	r4, r4, #2
 8003b00:	2600      	movs	r6, #0
 8003b02:	42a6      	cmp	r6, r4
 8003b04:	d105      	bne.n	8003b12 <__libc_init_array+0x2e>
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0c:	4798      	blx	r3
 8003b0e:	3601      	adds	r6, #1
 8003b10:	e7ee      	b.n	8003af0 <__libc_init_array+0xc>
 8003b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b16:	4798      	blx	r3
 8003b18:	3601      	adds	r6, #1
 8003b1a:	e7f2      	b.n	8003b02 <__libc_init_array+0x1e>
 8003b1c:	08008260 	.word	0x08008260
 8003b20:	08008260 	.word	0x08008260
 8003b24:	08008260 	.word	0x08008260
 8003b28:	08008264 	.word	0x08008264

08003b2c <memset>:
 8003b2c:	4402      	add	r2, r0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d100      	bne.n	8003b36 <memset+0xa>
 8003b34:	4770      	bx	lr
 8003b36:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3a:	e7f9      	b.n	8003b30 <memset+0x4>

08003b3c <__cvt>:
 8003b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	ec55 4b10 	vmov	r4, r5, d0
 8003b44:	2d00      	cmp	r5, #0
 8003b46:	460e      	mov	r6, r1
 8003b48:	4619      	mov	r1, r3
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	bfbb      	ittet	lt
 8003b4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b52:	461d      	movlt	r5, r3
 8003b54:	2300      	movge	r3, #0
 8003b56:	232d      	movlt	r3, #45	; 0x2d
 8003b58:	700b      	strb	r3, [r1, #0]
 8003b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b60:	4691      	mov	r9, r2
 8003b62:	f023 0820 	bic.w	r8, r3, #32
 8003b66:	bfbc      	itt	lt
 8003b68:	4622      	movlt	r2, r4
 8003b6a:	4614      	movlt	r4, r2
 8003b6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b70:	d005      	beq.n	8003b7e <__cvt+0x42>
 8003b72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b76:	d100      	bne.n	8003b7a <__cvt+0x3e>
 8003b78:	3601      	adds	r6, #1
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	e000      	b.n	8003b80 <__cvt+0x44>
 8003b7e:	2103      	movs	r1, #3
 8003b80:	ab03      	add	r3, sp, #12
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	ab02      	add	r3, sp, #8
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	ec45 4b10 	vmov	d0, r4, r5
 8003b8c:	4653      	mov	r3, sl
 8003b8e:	4632      	mov	r2, r6
 8003b90:	f000 fcca 	bl	8004528 <_dtoa_r>
 8003b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b98:	4607      	mov	r7, r0
 8003b9a:	d102      	bne.n	8003ba2 <__cvt+0x66>
 8003b9c:	f019 0f01 	tst.w	r9, #1
 8003ba0:	d022      	beq.n	8003be8 <__cvt+0xac>
 8003ba2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ba6:	eb07 0906 	add.w	r9, r7, r6
 8003baa:	d110      	bne.n	8003bce <__cvt+0x92>
 8003bac:	783b      	ldrb	r3, [r7, #0]
 8003bae:	2b30      	cmp	r3, #48	; 0x30
 8003bb0:	d10a      	bne.n	8003bc8 <__cvt+0x8c>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f7fc ff8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003bbe:	b918      	cbnz	r0, 8003bc8 <__cvt+0x8c>
 8003bc0:	f1c6 0601 	rsb	r6, r6, #1
 8003bc4:	f8ca 6000 	str.w	r6, [sl]
 8003bc8:	f8da 3000 	ldr.w	r3, [sl]
 8003bcc:	4499      	add	r9, r3
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f7fc ff7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8003bda:	b108      	cbz	r0, 8003be0 <__cvt+0xa4>
 8003bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003be0:	2230      	movs	r2, #48	; 0x30
 8003be2:	9b03      	ldr	r3, [sp, #12]
 8003be4:	454b      	cmp	r3, r9
 8003be6:	d307      	bcc.n	8003bf8 <__cvt+0xbc>
 8003be8:	9b03      	ldr	r3, [sp, #12]
 8003bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bec:	1bdb      	subs	r3, r3, r7
 8003bee:	4638      	mov	r0, r7
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	b004      	add	sp, #16
 8003bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf8:	1c59      	adds	r1, r3, #1
 8003bfa:	9103      	str	r1, [sp, #12]
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e7f0      	b.n	8003be2 <__cvt+0xa6>

08003c00 <__exponent>:
 8003c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c02:	4603      	mov	r3, r0
 8003c04:	2900      	cmp	r1, #0
 8003c06:	bfb8      	it	lt
 8003c08:	4249      	neglt	r1, r1
 8003c0a:	f803 2b02 	strb.w	r2, [r3], #2
 8003c0e:	bfb4      	ite	lt
 8003c10:	222d      	movlt	r2, #45	; 0x2d
 8003c12:	222b      	movge	r2, #43	; 0x2b
 8003c14:	2909      	cmp	r1, #9
 8003c16:	7042      	strb	r2, [r0, #1]
 8003c18:	dd2a      	ble.n	8003c70 <__exponent+0x70>
 8003c1a:	f10d 0407 	add.w	r4, sp, #7
 8003c1e:	46a4      	mov	ip, r4
 8003c20:	270a      	movs	r7, #10
 8003c22:	46a6      	mov	lr, r4
 8003c24:	460a      	mov	r2, r1
 8003c26:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c2a:	fb07 1516 	mls	r5, r7, r6, r1
 8003c2e:	3530      	adds	r5, #48	; 0x30
 8003c30:	2a63      	cmp	r2, #99	; 0x63
 8003c32:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	dcf1      	bgt.n	8003c22 <__exponent+0x22>
 8003c3e:	3130      	adds	r1, #48	; 0x30
 8003c40:	f1ae 0502 	sub.w	r5, lr, #2
 8003c44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c48:	1c44      	adds	r4, r0, #1
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	4561      	cmp	r1, ip
 8003c4e:	d30a      	bcc.n	8003c66 <__exponent+0x66>
 8003c50:	f10d 0209 	add.w	r2, sp, #9
 8003c54:	eba2 020e 	sub.w	r2, r2, lr
 8003c58:	4565      	cmp	r5, ip
 8003c5a:	bf88      	it	hi
 8003c5c:	2200      	movhi	r2, #0
 8003c5e:	4413      	add	r3, r2
 8003c60:	1a18      	subs	r0, r3, r0
 8003c62:	b003      	add	sp, #12
 8003c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c6e:	e7ed      	b.n	8003c4c <__exponent+0x4c>
 8003c70:	2330      	movs	r3, #48	; 0x30
 8003c72:	3130      	adds	r1, #48	; 0x30
 8003c74:	7083      	strb	r3, [r0, #2]
 8003c76:	70c1      	strb	r1, [r0, #3]
 8003c78:	1d03      	adds	r3, r0, #4
 8003c7a:	e7f1      	b.n	8003c60 <__exponent+0x60>

08003c7c <_printf_float>:
 8003c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c80:	ed2d 8b02 	vpush	{d8}
 8003c84:	b08d      	sub	sp, #52	; 0x34
 8003c86:	460c      	mov	r4, r1
 8003c88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	461f      	mov	r7, r3
 8003c90:	4605      	mov	r5, r0
 8003c92:	f001 fa37 	bl	8005104 <_localeconv_r>
 8003c96:	f8d0 a000 	ldr.w	sl, [r0]
 8003c9a:	4650      	mov	r0, sl
 8003c9c:	f7fc faa0 	bl	80001e0 <strlen>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	9305      	str	r3, [sp, #20]
 8003ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003cb0:	3307      	adds	r3, #7
 8003cb2:	f023 0307 	bic.w	r3, r3, #7
 8003cb6:	f103 0208 	add.w	r2, r3, #8
 8003cba:	f8c8 2000 	str.w	r2, [r8]
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003cc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cce:	9307      	str	r3, [sp, #28]
 8003cd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cd4:	ee08 0a10 	vmov	s16, r0
 8003cd8:	4b9f      	ldr	r3, [pc, #636]	; (8003f58 <_printf_float+0x2dc>)
 8003cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cde:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce2:	f7fc ff2b 	bl	8000b3c <__aeabi_dcmpun>
 8003ce6:	bb88      	cbnz	r0, 8003d4c <_printf_float+0xd0>
 8003ce8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cec:	4b9a      	ldr	r3, [pc, #616]	; (8003f58 <_printf_float+0x2dc>)
 8003cee:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf2:	f7fc ff05 	bl	8000b00 <__aeabi_dcmple>
 8003cf6:	bb48      	cbnz	r0, 8003d4c <_printf_float+0xd0>
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	4640      	mov	r0, r8
 8003cfe:	4649      	mov	r1, r9
 8003d00:	f7fc fef4 	bl	8000aec <__aeabi_dcmplt>
 8003d04:	b110      	cbz	r0, 8003d0c <_printf_float+0x90>
 8003d06:	232d      	movs	r3, #45	; 0x2d
 8003d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d0c:	4b93      	ldr	r3, [pc, #588]	; (8003f5c <_printf_float+0x2e0>)
 8003d0e:	4894      	ldr	r0, [pc, #592]	; (8003f60 <_printf_float+0x2e4>)
 8003d10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d14:	bf94      	ite	ls
 8003d16:	4698      	movls	r8, r3
 8003d18:	4680      	movhi	r8, r0
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	6123      	str	r3, [r4, #16]
 8003d1e:	9b05      	ldr	r3, [sp, #20]
 8003d20:	f023 0204 	bic.w	r2, r3, #4
 8003d24:	6022      	str	r2, [r4, #0]
 8003d26:	f04f 0900 	mov.w	r9, #0
 8003d2a:	9700      	str	r7, [sp, #0]
 8003d2c:	4633      	mov	r3, r6
 8003d2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d30:	4621      	mov	r1, r4
 8003d32:	4628      	mov	r0, r5
 8003d34:	f000 f9d8 	bl	80040e8 <_printf_common>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	f040 8090 	bne.w	8003e5e <_printf_float+0x1e2>
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d42:	b00d      	add	sp, #52	; 0x34
 8003d44:	ecbd 8b02 	vpop	{d8}
 8003d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	4640      	mov	r0, r8
 8003d52:	4649      	mov	r1, r9
 8003d54:	f7fc fef2 	bl	8000b3c <__aeabi_dcmpun>
 8003d58:	b140      	cbz	r0, 8003d6c <_printf_float+0xf0>
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bfbc      	itt	lt
 8003d60:	232d      	movlt	r3, #45	; 0x2d
 8003d62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d66:	487f      	ldr	r0, [pc, #508]	; (8003f64 <_printf_float+0x2e8>)
 8003d68:	4b7f      	ldr	r3, [pc, #508]	; (8003f68 <_printf_float+0x2ec>)
 8003d6a:	e7d1      	b.n	8003d10 <_printf_float+0x94>
 8003d6c:	6863      	ldr	r3, [r4, #4]
 8003d6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d72:	9206      	str	r2, [sp, #24]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	d13f      	bne.n	8003df8 <_printf_float+0x17c>
 8003d78:	2306      	movs	r3, #6
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	9b05      	ldr	r3, [sp, #20]
 8003d7e:	6861      	ldr	r1, [r4, #4]
 8003d80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d84:	2300      	movs	r3, #0
 8003d86:	9303      	str	r3, [sp, #12]
 8003d88:	ab0a      	add	r3, sp, #40	; 0x28
 8003d8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d8e:	ab09      	add	r3, sp, #36	; 0x24
 8003d90:	ec49 8b10 	vmov	d0, r8, r9
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	6022      	str	r2, [r4, #0]
 8003d98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f7ff fecd 	bl	8003b3c <__cvt>
 8003da2:	9b06      	ldr	r3, [sp, #24]
 8003da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003da6:	2b47      	cmp	r3, #71	; 0x47
 8003da8:	4680      	mov	r8, r0
 8003daa:	d108      	bne.n	8003dbe <_printf_float+0x142>
 8003dac:	1cc8      	adds	r0, r1, #3
 8003dae:	db02      	blt.n	8003db6 <_printf_float+0x13a>
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	4299      	cmp	r1, r3
 8003db4:	dd41      	ble.n	8003e3a <_printf_float+0x1be>
 8003db6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003dba:	fa5f fb8b 	uxtb.w	fp, fp
 8003dbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003dc2:	d820      	bhi.n	8003e06 <_printf_float+0x18a>
 8003dc4:	3901      	subs	r1, #1
 8003dc6:	465a      	mov	r2, fp
 8003dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8003dce:	f7ff ff17 	bl	8003c00 <__exponent>
 8003dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dd4:	1813      	adds	r3, r2, r0
 8003dd6:	2a01      	cmp	r2, #1
 8003dd8:	4681      	mov	r9, r0
 8003dda:	6123      	str	r3, [r4, #16]
 8003ddc:	dc02      	bgt.n	8003de4 <_printf_float+0x168>
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	07d2      	lsls	r2, r2, #31
 8003de2:	d501      	bpl.n	8003de8 <_printf_float+0x16c>
 8003de4:	3301      	adds	r3, #1
 8003de6:	6123      	str	r3, [r4, #16]
 8003de8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d09c      	beq.n	8003d2a <_printf_float+0xae>
 8003df0:	232d      	movs	r3, #45	; 0x2d
 8003df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df6:	e798      	b.n	8003d2a <_printf_float+0xae>
 8003df8:	9a06      	ldr	r2, [sp, #24]
 8003dfa:	2a47      	cmp	r2, #71	; 0x47
 8003dfc:	d1be      	bne.n	8003d7c <_printf_float+0x100>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1bc      	bne.n	8003d7c <_printf_float+0x100>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e7b9      	b.n	8003d7a <_printf_float+0xfe>
 8003e06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e0a:	d118      	bne.n	8003e3e <_printf_float+0x1c2>
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	6863      	ldr	r3, [r4, #4]
 8003e10:	dd0b      	ble.n	8003e2a <_printf_float+0x1ae>
 8003e12:	6121      	str	r1, [r4, #16]
 8003e14:	b913      	cbnz	r3, 8003e1c <_printf_float+0x1a0>
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	07d0      	lsls	r0, r2, #31
 8003e1a:	d502      	bpl.n	8003e22 <_printf_float+0x1a6>
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	440b      	add	r3, r1
 8003e20:	6123      	str	r3, [r4, #16]
 8003e22:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e24:	f04f 0900 	mov.w	r9, #0
 8003e28:	e7de      	b.n	8003de8 <_printf_float+0x16c>
 8003e2a:	b913      	cbnz	r3, 8003e32 <_printf_float+0x1b6>
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	07d2      	lsls	r2, r2, #31
 8003e30:	d501      	bpl.n	8003e36 <_printf_float+0x1ba>
 8003e32:	3302      	adds	r3, #2
 8003e34:	e7f4      	b.n	8003e20 <_printf_float+0x1a4>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e7f2      	b.n	8003e20 <_printf_float+0x1a4>
 8003e3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e40:	4299      	cmp	r1, r3
 8003e42:	db05      	blt.n	8003e50 <_printf_float+0x1d4>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	6121      	str	r1, [r4, #16]
 8003e48:	07d8      	lsls	r0, r3, #31
 8003e4a:	d5ea      	bpl.n	8003e22 <_printf_float+0x1a6>
 8003e4c:	1c4b      	adds	r3, r1, #1
 8003e4e:	e7e7      	b.n	8003e20 <_printf_float+0x1a4>
 8003e50:	2900      	cmp	r1, #0
 8003e52:	bfd4      	ite	le
 8003e54:	f1c1 0202 	rsble	r2, r1, #2
 8003e58:	2201      	movgt	r2, #1
 8003e5a:	4413      	add	r3, r2
 8003e5c:	e7e0      	b.n	8003e20 <_printf_float+0x1a4>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	055a      	lsls	r2, r3, #21
 8003e62:	d407      	bmi.n	8003e74 <_printf_float+0x1f8>
 8003e64:	6923      	ldr	r3, [r4, #16]
 8003e66:	4642      	mov	r2, r8
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d12c      	bne.n	8003ecc <_printf_float+0x250>
 8003e72:	e764      	b.n	8003d3e <_printf_float+0xc2>
 8003e74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e78:	f240 80e0 	bls.w	800403c <_printf_float+0x3c0>
 8003e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e80:	2200      	movs	r2, #0
 8003e82:	2300      	movs	r3, #0
 8003e84:	f7fc fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d034      	beq.n	8003ef6 <_printf_float+0x27a>
 8003e8c:	4a37      	ldr	r2, [pc, #220]	; (8003f6c <_printf_float+0x2f0>)
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4631      	mov	r1, r6
 8003e92:	4628      	mov	r0, r5
 8003e94:	47b8      	blx	r7
 8003e96:	3001      	adds	r0, #1
 8003e98:	f43f af51 	beq.w	8003d3e <_printf_float+0xc2>
 8003e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	db02      	blt.n	8003eaa <_printf_float+0x22e>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	07d8      	lsls	r0, r3, #31
 8003ea8:	d510      	bpl.n	8003ecc <_printf_float+0x250>
 8003eaa:	ee18 3a10 	vmov	r3, s16
 8003eae:	4652      	mov	r2, sl
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	47b8      	blx	r7
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	f43f af41 	beq.w	8003d3e <_printf_float+0xc2>
 8003ebc:	f04f 0800 	mov.w	r8, #0
 8003ec0:	f104 091a 	add.w	r9, r4, #26
 8003ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	4543      	cmp	r3, r8
 8003eca:	dc09      	bgt.n	8003ee0 <_printf_float+0x264>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	079b      	lsls	r3, r3, #30
 8003ed0:	f100 8105 	bmi.w	80040de <_printf_float+0x462>
 8003ed4:	68e0      	ldr	r0, [r4, #12]
 8003ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ed8:	4298      	cmp	r0, r3
 8003eda:	bfb8      	it	lt
 8003edc:	4618      	movlt	r0, r3
 8003ede:	e730      	b.n	8003d42 <_printf_float+0xc6>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	464a      	mov	r2, r9
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	f43f af27 	beq.w	8003d3e <_printf_float+0xc2>
 8003ef0:	f108 0801 	add.w	r8, r8, #1
 8003ef4:	e7e6      	b.n	8003ec4 <_printf_float+0x248>
 8003ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dc39      	bgt.n	8003f70 <_printf_float+0x2f4>
 8003efc:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <_printf_float+0x2f0>)
 8003efe:	2301      	movs	r3, #1
 8003f00:	4631      	mov	r1, r6
 8003f02:	4628      	mov	r0, r5
 8003f04:	47b8      	blx	r7
 8003f06:	3001      	adds	r0, #1
 8003f08:	f43f af19 	beq.w	8003d3e <_printf_float+0xc2>
 8003f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d102      	bne.n	8003f1a <_printf_float+0x29e>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	07d9      	lsls	r1, r3, #31
 8003f18:	d5d8      	bpl.n	8003ecc <_printf_float+0x250>
 8003f1a:	ee18 3a10 	vmov	r3, s16
 8003f1e:	4652      	mov	r2, sl
 8003f20:	4631      	mov	r1, r6
 8003f22:	4628      	mov	r0, r5
 8003f24:	47b8      	blx	r7
 8003f26:	3001      	adds	r0, #1
 8003f28:	f43f af09 	beq.w	8003d3e <_printf_float+0xc2>
 8003f2c:	f04f 0900 	mov.w	r9, #0
 8003f30:	f104 0a1a 	add.w	sl, r4, #26
 8003f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f36:	425b      	negs	r3, r3
 8003f38:	454b      	cmp	r3, r9
 8003f3a:	dc01      	bgt.n	8003f40 <_printf_float+0x2c4>
 8003f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f3e:	e792      	b.n	8003e66 <_printf_float+0x1ea>
 8003f40:	2301      	movs	r3, #1
 8003f42:	4652      	mov	r2, sl
 8003f44:	4631      	mov	r1, r6
 8003f46:	4628      	mov	r0, r5
 8003f48:	47b8      	blx	r7
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f43f aef7 	beq.w	8003d3e <_printf_float+0xc2>
 8003f50:	f109 0901 	add.w	r9, r9, #1
 8003f54:	e7ee      	b.n	8003f34 <_printf_float+0x2b8>
 8003f56:	bf00      	nop
 8003f58:	7fefffff 	.word	0x7fefffff
 8003f5c:	08007ca4 	.word	0x08007ca4
 8003f60:	08007ca8 	.word	0x08007ca8
 8003f64:	08007cb0 	.word	0x08007cb0
 8003f68:	08007cac 	.word	0x08007cac
 8003f6c:	08007cb4 	.word	0x08007cb4
 8003f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f74:	429a      	cmp	r2, r3
 8003f76:	bfa8      	it	ge
 8003f78:	461a      	movge	r2, r3
 8003f7a:	2a00      	cmp	r2, #0
 8003f7c:	4691      	mov	r9, r2
 8003f7e:	dc37      	bgt.n	8003ff0 <_printf_float+0x374>
 8003f80:	f04f 0b00 	mov.w	fp, #0
 8003f84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f88:	f104 021a 	add.w	r2, r4, #26
 8003f8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f8e:	9305      	str	r3, [sp, #20]
 8003f90:	eba3 0309 	sub.w	r3, r3, r9
 8003f94:	455b      	cmp	r3, fp
 8003f96:	dc33      	bgt.n	8004000 <_printf_float+0x384>
 8003f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	db3b      	blt.n	8004018 <_printf_float+0x39c>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	07da      	lsls	r2, r3, #31
 8003fa4:	d438      	bmi.n	8004018 <_printf_float+0x39c>
 8003fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa8:	9a05      	ldr	r2, [sp, #20]
 8003faa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fac:	1a9a      	subs	r2, r3, r2
 8003fae:	eba3 0901 	sub.w	r9, r3, r1
 8003fb2:	4591      	cmp	r9, r2
 8003fb4:	bfa8      	it	ge
 8003fb6:	4691      	movge	r9, r2
 8003fb8:	f1b9 0f00 	cmp.w	r9, #0
 8003fbc:	dc35      	bgt.n	800402a <_printf_float+0x3ae>
 8003fbe:	f04f 0800 	mov.w	r8, #0
 8003fc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fc6:	f104 0a1a 	add.w	sl, r4, #26
 8003fca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	eba3 0309 	sub.w	r3, r3, r9
 8003fd4:	4543      	cmp	r3, r8
 8003fd6:	f77f af79 	ble.w	8003ecc <_printf_float+0x250>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4652      	mov	r2, sl
 8003fde:	4631      	mov	r1, r6
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	47b8      	blx	r7
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	f43f aeaa 	beq.w	8003d3e <_printf_float+0xc2>
 8003fea:	f108 0801 	add.w	r8, r8, #1
 8003fee:	e7ec      	b.n	8003fca <_printf_float+0x34e>
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	47b8      	blx	r7
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d1c0      	bne.n	8003f80 <_printf_float+0x304>
 8003ffe:	e69e      	b.n	8003d3e <_printf_float+0xc2>
 8004000:	2301      	movs	r3, #1
 8004002:	4631      	mov	r1, r6
 8004004:	4628      	mov	r0, r5
 8004006:	9205      	str	r2, [sp, #20]
 8004008:	47b8      	blx	r7
 800400a:	3001      	adds	r0, #1
 800400c:	f43f ae97 	beq.w	8003d3e <_printf_float+0xc2>
 8004010:	9a05      	ldr	r2, [sp, #20]
 8004012:	f10b 0b01 	add.w	fp, fp, #1
 8004016:	e7b9      	b.n	8003f8c <_printf_float+0x310>
 8004018:	ee18 3a10 	vmov	r3, s16
 800401c:	4652      	mov	r2, sl
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	d1be      	bne.n	8003fa6 <_printf_float+0x32a>
 8004028:	e689      	b.n	8003d3e <_printf_float+0xc2>
 800402a:	9a05      	ldr	r2, [sp, #20]
 800402c:	464b      	mov	r3, r9
 800402e:	4442      	add	r2, r8
 8004030:	4631      	mov	r1, r6
 8004032:	4628      	mov	r0, r5
 8004034:	47b8      	blx	r7
 8004036:	3001      	adds	r0, #1
 8004038:	d1c1      	bne.n	8003fbe <_printf_float+0x342>
 800403a:	e680      	b.n	8003d3e <_printf_float+0xc2>
 800403c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800403e:	2a01      	cmp	r2, #1
 8004040:	dc01      	bgt.n	8004046 <_printf_float+0x3ca>
 8004042:	07db      	lsls	r3, r3, #31
 8004044:	d538      	bpl.n	80040b8 <_printf_float+0x43c>
 8004046:	2301      	movs	r3, #1
 8004048:	4642      	mov	r2, r8
 800404a:	4631      	mov	r1, r6
 800404c:	4628      	mov	r0, r5
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	f43f ae74 	beq.w	8003d3e <_printf_float+0xc2>
 8004056:	ee18 3a10 	vmov	r3, s16
 800405a:	4652      	mov	r2, sl
 800405c:	4631      	mov	r1, r6
 800405e:	4628      	mov	r0, r5
 8004060:	47b8      	blx	r7
 8004062:	3001      	adds	r0, #1
 8004064:	f43f ae6b 	beq.w	8003d3e <_printf_float+0xc2>
 8004068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800406c:	2200      	movs	r2, #0
 800406e:	2300      	movs	r3, #0
 8004070:	f7fc fd32 	bl	8000ad8 <__aeabi_dcmpeq>
 8004074:	b9d8      	cbnz	r0, 80040ae <_printf_float+0x432>
 8004076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004078:	f108 0201 	add.w	r2, r8, #1
 800407c:	3b01      	subs	r3, #1
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	47b8      	blx	r7
 8004084:	3001      	adds	r0, #1
 8004086:	d10e      	bne.n	80040a6 <_printf_float+0x42a>
 8004088:	e659      	b.n	8003d3e <_printf_float+0xc2>
 800408a:	2301      	movs	r3, #1
 800408c:	4652      	mov	r2, sl
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	f43f ae52 	beq.w	8003d3e <_printf_float+0xc2>
 800409a:	f108 0801 	add.w	r8, r8, #1
 800409e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040a0:	3b01      	subs	r3, #1
 80040a2:	4543      	cmp	r3, r8
 80040a4:	dcf1      	bgt.n	800408a <_printf_float+0x40e>
 80040a6:	464b      	mov	r3, r9
 80040a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040ac:	e6dc      	b.n	8003e68 <_printf_float+0x1ec>
 80040ae:	f04f 0800 	mov.w	r8, #0
 80040b2:	f104 0a1a 	add.w	sl, r4, #26
 80040b6:	e7f2      	b.n	800409e <_printf_float+0x422>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4642      	mov	r2, r8
 80040bc:	e7df      	b.n	800407e <_printf_float+0x402>
 80040be:	2301      	movs	r3, #1
 80040c0:	464a      	mov	r2, r9
 80040c2:	4631      	mov	r1, r6
 80040c4:	4628      	mov	r0, r5
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	f43f ae38 	beq.w	8003d3e <_printf_float+0xc2>
 80040ce:	f108 0801 	add.w	r8, r8, #1
 80040d2:	68e3      	ldr	r3, [r4, #12]
 80040d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040d6:	1a5b      	subs	r3, r3, r1
 80040d8:	4543      	cmp	r3, r8
 80040da:	dcf0      	bgt.n	80040be <_printf_float+0x442>
 80040dc:	e6fa      	b.n	8003ed4 <_printf_float+0x258>
 80040de:	f04f 0800 	mov.w	r8, #0
 80040e2:	f104 0919 	add.w	r9, r4, #25
 80040e6:	e7f4      	b.n	80040d2 <_printf_float+0x456>

080040e8 <_printf_common>:
 80040e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	4616      	mov	r6, r2
 80040ee:	4699      	mov	r9, r3
 80040f0:	688a      	ldr	r2, [r1, #8]
 80040f2:	690b      	ldr	r3, [r1, #16]
 80040f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bfb8      	it	lt
 80040fc:	4613      	movlt	r3, r2
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004104:	4607      	mov	r7, r0
 8004106:	460c      	mov	r4, r1
 8004108:	b10a      	cbz	r2, 800410e <_printf_common+0x26>
 800410a:	3301      	adds	r3, #1
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	0699      	lsls	r1, r3, #26
 8004112:	bf42      	ittt	mi
 8004114:	6833      	ldrmi	r3, [r6, #0]
 8004116:	3302      	addmi	r3, #2
 8004118:	6033      	strmi	r3, [r6, #0]
 800411a:	6825      	ldr	r5, [r4, #0]
 800411c:	f015 0506 	ands.w	r5, r5, #6
 8004120:	d106      	bne.n	8004130 <_printf_common+0x48>
 8004122:	f104 0a19 	add.w	sl, r4, #25
 8004126:	68e3      	ldr	r3, [r4, #12]
 8004128:	6832      	ldr	r2, [r6, #0]
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	42ab      	cmp	r3, r5
 800412e:	dc26      	bgt.n	800417e <_printf_common+0x96>
 8004130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004134:	1e13      	subs	r3, r2, #0
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	bf18      	it	ne
 800413a:	2301      	movne	r3, #1
 800413c:	0692      	lsls	r2, r2, #26
 800413e:	d42b      	bmi.n	8004198 <_printf_common+0xb0>
 8004140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004144:	4649      	mov	r1, r9
 8004146:	4638      	mov	r0, r7
 8004148:	47c0      	blx	r8
 800414a:	3001      	adds	r0, #1
 800414c:	d01e      	beq.n	800418c <_printf_common+0xa4>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	68e5      	ldr	r5, [r4, #12]
 8004152:	6832      	ldr	r2, [r6, #0]
 8004154:	f003 0306 	and.w	r3, r3, #6
 8004158:	2b04      	cmp	r3, #4
 800415a:	bf08      	it	eq
 800415c:	1aad      	subeq	r5, r5, r2
 800415e:	68a3      	ldr	r3, [r4, #8]
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	bf0c      	ite	eq
 8004164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004168:	2500      	movne	r5, #0
 800416a:	4293      	cmp	r3, r2
 800416c:	bfc4      	itt	gt
 800416e:	1a9b      	subgt	r3, r3, r2
 8004170:	18ed      	addgt	r5, r5, r3
 8004172:	2600      	movs	r6, #0
 8004174:	341a      	adds	r4, #26
 8004176:	42b5      	cmp	r5, r6
 8004178:	d11a      	bne.n	80041b0 <_printf_common+0xc8>
 800417a:	2000      	movs	r0, #0
 800417c:	e008      	b.n	8004190 <_printf_common+0xa8>
 800417e:	2301      	movs	r3, #1
 8004180:	4652      	mov	r2, sl
 8004182:	4649      	mov	r1, r9
 8004184:	4638      	mov	r0, r7
 8004186:	47c0      	blx	r8
 8004188:	3001      	adds	r0, #1
 800418a:	d103      	bne.n	8004194 <_printf_common+0xac>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004194:	3501      	adds	r5, #1
 8004196:	e7c6      	b.n	8004126 <_printf_common+0x3e>
 8004198:	18e1      	adds	r1, r4, r3
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	2030      	movs	r0, #48	; 0x30
 800419e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041a2:	4422      	add	r2, r4
 80041a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041ac:	3302      	adds	r3, #2
 80041ae:	e7c7      	b.n	8004140 <_printf_common+0x58>
 80041b0:	2301      	movs	r3, #1
 80041b2:	4622      	mov	r2, r4
 80041b4:	4649      	mov	r1, r9
 80041b6:	4638      	mov	r0, r7
 80041b8:	47c0      	blx	r8
 80041ba:	3001      	adds	r0, #1
 80041bc:	d0e6      	beq.n	800418c <_printf_common+0xa4>
 80041be:	3601      	adds	r6, #1
 80041c0:	e7d9      	b.n	8004176 <_printf_common+0x8e>
	...

080041c4 <_printf_i>:
 80041c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	7e0f      	ldrb	r7, [r1, #24]
 80041ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041cc:	2f78      	cmp	r7, #120	; 0x78
 80041ce:	4691      	mov	r9, r2
 80041d0:	4680      	mov	r8, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	469a      	mov	sl, r3
 80041d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041da:	d807      	bhi.n	80041ec <_printf_i+0x28>
 80041dc:	2f62      	cmp	r7, #98	; 0x62
 80041de:	d80a      	bhi.n	80041f6 <_printf_i+0x32>
 80041e0:	2f00      	cmp	r7, #0
 80041e2:	f000 80d8 	beq.w	8004396 <_printf_i+0x1d2>
 80041e6:	2f58      	cmp	r7, #88	; 0x58
 80041e8:	f000 80a3 	beq.w	8004332 <_printf_i+0x16e>
 80041ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041f4:	e03a      	b.n	800426c <_printf_i+0xa8>
 80041f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041fa:	2b15      	cmp	r3, #21
 80041fc:	d8f6      	bhi.n	80041ec <_printf_i+0x28>
 80041fe:	a101      	add	r1, pc, #4	; (adr r1, 8004204 <_printf_i+0x40>)
 8004200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004204:	0800425d 	.word	0x0800425d
 8004208:	08004271 	.word	0x08004271
 800420c:	080041ed 	.word	0x080041ed
 8004210:	080041ed 	.word	0x080041ed
 8004214:	080041ed 	.word	0x080041ed
 8004218:	080041ed 	.word	0x080041ed
 800421c:	08004271 	.word	0x08004271
 8004220:	080041ed 	.word	0x080041ed
 8004224:	080041ed 	.word	0x080041ed
 8004228:	080041ed 	.word	0x080041ed
 800422c:	080041ed 	.word	0x080041ed
 8004230:	0800437d 	.word	0x0800437d
 8004234:	080042a1 	.word	0x080042a1
 8004238:	0800435f 	.word	0x0800435f
 800423c:	080041ed 	.word	0x080041ed
 8004240:	080041ed 	.word	0x080041ed
 8004244:	0800439f 	.word	0x0800439f
 8004248:	080041ed 	.word	0x080041ed
 800424c:	080042a1 	.word	0x080042a1
 8004250:	080041ed 	.word	0x080041ed
 8004254:	080041ed 	.word	0x080041ed
 8004258:	08004367 	.word	0x08004367
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	602a      	str	r2, [r5, #0]
 8004264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800426c:	2301      	movs	r3, #1
 800426e:	e0a3      	b.n	80043b8 <_printf_i+0x1f4>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	6829      	ldr	r1, [r5, #0]
 8004274:	0606      	lsls	r6, r0, #24
 8004276:	f101 0304 	add.w	r3, r1, #4
 800427a:	d50a      	bpl.n	8004292 <_printf_i+0xce>
 800427c:	680e      	ldr	r6, [r1, #0]
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	2e00      	cmp	r6, #0
 8004282:	da03      	bge.n	800428c <_printf_i+0xc8>
 8004284:	232d      	movs	r3, #45	; 0x2d
 8004286:	4276      	negs	r6, r6
 8004288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428c:	485e      	ldr	r0, [pc, #376]	; (8004408 <_printf_i+0x244>)
 800428e:	230a      	movs	r3, #10
 8004290:	e019      	b.n	80042c6 <_printf_i+0x102>
 8004292:	680e      	ldr	r6, [r1, #0]
 8004294:	602b      	str	r3, [r5, #0]
 8004296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800429a:	bf18      	it	ne
 800429c:	b236      	sxthne	r6, r6
 800429e:	e7ef      	b.n	8004280 <_printf_i+0xbc>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	6820      	ldr	r0, [r4, #0]
 80042a4:	1d19      	adds	r1, r3, #4
 80042a6:	6029      	str	r1, [r5, #0]
 80042a8:	0601      	lsls	r1, r0, #24
 80042aa:	d501      	bpl.n	80042b0 <_printf_i+0xec>
 80042ac:	681e      	ldr	r6, [r3, #0]
 80042ae:	e002      	b.n	80042b6 <_printf_i+0xf2>
 80042b0:	0646      	lsls	r6, r0, #25
 80042b2:	d5fb      	bpl.n	80042ac <_printf_i+0xe8>
 80042b4:	881e      	ldrh	r6, [r3, #0]
 80042b6:	4854      	ldr	r0, [pc, #336]	; (8004408 <_printf_i+0x244>)
 80042b8:	2f6f      	cmp	r7, #111	; 0x6f
 80042ba:	bf0c      	ite	eq
 80042bc:	2308      	moveq	r3, #8
 80042be:	230a      	movne	r3, #10
 80042c0:	2100      	movs	r1, #0
 80042c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042c6:	6865      	ldr	r5, [r4, #4]
 80042c8:	60a5      	str	r5, [r4, #8]
 80042ca:	2d00      	cmp	r5, #0
 80042cc:	bfa2      	ittt	ge
 80042ce:	6821      	ldrge	r1, [r4, #0]
 80042d0:	f021 0104 	bicge.w	r1, r1, #4
 80042d4:	6021      	strge	r1, [r4, #0]
 80042d6:	b90e      	cbnz	r6, 80042dc <_printf_i+0x118>
 80042d8:	2d00      	cmp	r5, #0
 80042da:	d04d      	beq.n	8004378 <_printf_i+0x1b4>
 80042dc:	4615      	mov	r5, r2
 80042de:	fbb6 f1f3 	udiv	r1, r6, r3
 80042e2:	fb03 6711 	mls	r7, r3, r1, r6
 80042e6:	5dc7      	ldrb	r7, [r0, r7]
 80042e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042ec:	4637      	mov	r7, r6
 80042ee:	42bb      	cmp	r3, r7
 80042f0:	460e      	mov	r6, r1
 80042f2:	d9f4      	bls.n	80042de <_printf_i+0x11a>
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d10b      	bne.n	8004310 <_printf_i+0x14c>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	07de      	lsls	r6, r3, #31
 80042fc:	d508      	bpl.n	8004310 <_printf_i+0x14c>
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	6861      	ldr	r1, [r4, #4]
 8004302:	4299      	cmp	r1, r3
 8004304:	bfde      	ittt	le
 8004306:	2330      	movle	r3, #48	; 0x30
 8004308:	f805 3c01 	strble.w	r3, [r5, #-1]
 800430c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004310:	1b52      	subs	r2, r2, r5
 8004312:	6122      	str	r2, [r4, #16]
 8004314:	f8cd a000 	str.w	sl, [sp]
 8004318:	464b      	mov	r3, r9
 800431a:	aa03      	add	r2, sp, #12
 800431c:	4621      	mov	r1, r4
 800431e:	4640      	mov	r0, r8
 8004320:	f7ff fee2 	bl	80040e8 <_printf_common>
 8004324:	3001      	adds	r0, #1
 8004326:	d14c      	bne.n	80043c2 <_printf_i+0x1fe>
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	b004      	add	sp, #16
 800432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004332:	4835      	ldr	r0, [pc, #212]	; (8004408 <_printf_i+0x244>)
 8004334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004338:	6829      	ldr	r1, [r5, #0]
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004340:	6029      	str	r1, [r5, #0]
 8004342:	061d      	lsls	r5, r3, #24
 8004344:	d514      	bpl.n	8004370 <_printf_i+0x1ac>
 8004346:	07df      	lsls	r7, r3, #31
 8004348:	bf44      	itt	mi
 800434a:	f043 0320 	orrmi.w	r3, r3, #32
 800434e:	6023      	strmi	r3, [r4, #0]
 8004350:	b91e      	cbnz	r6, 800435a <_printf_i+0x196>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	f023 0320 	bic.w	r3, r3, #32
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	2310      	movs	r3, #16
 800435c:	e7b0      	b.n	80042c0 <_printf_i+0xfc>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	f043 0320 	orr.w	r3, r3, #32
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	2378      	movs	r3, #120	; 0x78
 8004368:	4828      	ldr	r0, [pc, #160]	; (800440c <_printf_i+0x248>)
 800436a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800436e:	e7e3      	b.n	8004338 <_printf_i+0x174>
 8004370:	0659      	lsls	r1, r3, #25
 8004372:	bf48      	it	mi
 8004374:	b2b6      	uxthmi	r6, r6
 8004376:	e7e6      	b.n	8004346 <_printf_i+0x182>
 8004378:	4615      	mov	r5, r2
 800437a:	e7bb      	b.n	80042f4 <_printf_i+0x130>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	6826      	ldr	r6, [r4, #0]
 8004380:	6961      	ldr	r1, [r4, #20]
 8004382:	1d18      	adds	r0, r3, #4
 8004384:	6028      	str	r0, [r5, #0]
 8004386:	0635      	lsls	r5, r6, #24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	d501      	bpl.n	8004390 <_printf_i+0x1cc>
 800438c:	6019      	str	r1, [r3, #0]
 800438e:	e002      	b.n	8004396 <_printf_i+0x1d2>
 8004390:	0670      	lsls	r0, r6, #25
 8004392:	d5fb      	bpl.n	800438c <_printf_i+0x1c8>
 8004394:	8019      	strh	r1, [r3, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	6123      	str	r3, [r4, #16]
 800439a:	4615      	mov	r5, r2
 800439c:	e7ba      	b.n	8004314 <_printf_i+0x150>
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	1d1a      	adds	r2, r3, #4
 80043a2:	602a      	str	r2, [r5, #0]
 80043a4:	681d      	ldr	r5, [r3, #0]
 80043a6:	6862      	ldr	r2, [r4, #4]
 80043a8:	2100      	movs	r1, #0
 80043aa:	4628      	mov	r0, r5
 80043ac:	f7fb ff20 	bl	80001f0 <memchr>
 80043b0:	b108      	cbz	r0, 80043b6 <_printf_i+0x1f2>
 80043b2:	1b40      	subs	r0, r0, r5
 80043b4:	6060      	str	r0, [r4, #4]
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	2300      	movs	r3, #0
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c0:	e7a8      	b.n	8004314 <_printf_i+0x150>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	462a      	mov	r2, r5
 80043c6:	4649      	mov	r1, r9
 80043c8:	4640      	mov	r0, r8
 80043ca:	47d0      	blx	sl
 80043cc:	3001      	adds	r0, #1
 80043ce:	d0ab      	beq.n	8004328 <_printf_i+0x164>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	079b      	lsls	r3, r3, #30
 80043d4:	d413      	bmi.n	80043fe <_printf_i+0x23a>
 80043d6:	68e0      	ldr	r0, [r4, #12]
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	4298      	cmp	r0, r3
 80043dc:	bfb8      	it	lt
 80043de:	4618      	movlt	r0, r3
 80043e0:	e7a4      	b.n	800432c <_printf_i+0x168>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4632      	mov	r2, r6
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d09b      	beq.n	8004328 <_printf_i+0x164>
 80043f0:	3501      	adds	r5, #1
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	9903      	ldr	r1, [sp, #12]
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	dcf2      	bgt.n	80043e2 <_printf_i+0x21e>
 80043fc:	e7eb      	b.n	80043d6 <_printf_i+0x212>
 80043fe:	2500      	movs	r5, #0
 8004400:	f104 0619 	add.w	r6, r4, #25
 8004404:	e7f5      	b.n	80043f2 <_printf_i+0x22e>
 8004406:	bf00      	nop
 8004408:	08007cb6 	.word	0x08007cb6
 800440c:	08007cc7 	.word	0x08007cc7

08004410 <quorem>:
 8004410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004414:	6903      	ldr	r3, [r0, #16]
 8004416:	690c      	ldr	r4, [r1, #16]
 8004418:	42a3      	cmp	r3, r4
 800441a:	4607      	mov	r7, r0
 800441c:	f2c0 8081 	blt.w	8004522 <quorem+0x112>
 8004420:	3c01      	subs	r4, #1
 8004422:	f101 0814 	add.w	r8, r1, #20
 8004426:	f100 0514 	add.w	r5, r0, #20
 800442a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004438:	3301      	adds	r3, #1
 800443a:	429a      	cmp	r2, r3
 800443c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004440:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004444:	fbb2 f6f3 	udiv	r6, r2, r3
 8004448:	d331      	bcc.n	80044ae <quorem+0x9e>
 800444a:	f04f 0e00 	mov.w	lr, #0
 800444e:	4640      	mov	r0, r8
 8004450:	46ac      	mov	ip, r5
 8004452:	46f2      	mov	sl, lr
 8004454:	f850 2b04 	ldr.w	r2, [r0], #4
 8004458:	b293      	uxth	r3, r2
 800445a:	fb06 e303 	mla	r3, r6, r3, lr
 800445e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004462:	b29b      	uxth	r3, r3
 8004464:	ebaa 0303 	sub.w	r3, sl, r3
 8004468:	f8dc a000 	ldr.w	sl, [ip]
 800446c:	0c12      	lsrs	r2, r2, #16
 800446e:	fa13 f38a 	uxtah	r3, r3, sl
 8004472:	fb06 e202 	mla	r2, r6, r2, lr
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	9b00      	ldr	r3, [sp, #0]
 800447a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800447e:	b292      	uxth	r2, r2
 8004480:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004488:	f8bd 3000 	ldrh.w	r3, [sp]
 800448c:	4581      	cmp	r9, r0
 800448e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004492:	f84c 3b04 	str.w	r3, [ip], #4
 8004496:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800449a:	d2db      	bcs.n	8004454 <quorem+0x44>
 800449c:	f855 300b 	ldr.w	r3, [r5, fp]
 80044a0:	b92b      	cbnz	r3, 80044ae <quorem+0x9e>
 80044a2:	9b01      	ldr	r3, [sp, #4]
 80044a4:	3b04      	subs	r3, #4
 80044a6:	429d      	cmp	r5, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	d32e      	bcc.n	800450a <quorem+0xfa>
 80044ac:	613c      	str	r4, [r7, #16]
 80044ae:	4638      	mov	r0, r7
 80044b0:	f001 f8c4 	bl	800563c <__mcmp>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	db24      	blt.n	8004502 <quorem+0xf2>
 80044b8:	3601      	adds	r6, #1
 80044ba:	4628      	mov	r0, r5
 80044bc:	f04f 0c00 	mov.w	ip, #0
 80044c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80044c4:	f8d0 e000 	ldr.w	lr, [r0]
 80044c8:	b293      	uxth	r3, r2
 80044ca:	ebac 0303 	sub.w	r3, ip, r3
 80044ce:	0c12      	lsrs	r2, r2, #16
 80044d0:	fa13 f38e 	uxtah	r3, r3, lr
 80044d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80044d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044dc:	b29b      	uxth	r3, r3
 80044de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044e2:	45c1      	cmp	r9, r8
 80044e4:	f840 3b04 	str.w	r3, [r0], #4
 80044e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044ec:	d2e8      	bcs.n	80044c0 <quorem+0xb0>
 80044ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044f6:	b922      	cbnz	r2, 8004502 <quorem+0xf2>
 80044f8:	3b04      	subs	r3, #4
 80044fa:	429d      	cmp	r5, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	d30a      	bcc.n	8004516 <quorem+0x106>
 8004500:	613c      	str	r4, [r7, #16]
 8004502:	4630      	mov	r0, r6
 8004504:	b003      	add	sp, #12
 8004506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	3b04      	subs	r3, #4
 800450e:	2a00      	cmp	r2, #0
 8004510:	d1cc      	bne.n	80044ac <quorem+0x9c>
 8004512:	3c01      	subs	r4, #1
 8004514:	e7c7      	b.n	80044a6 <quorem+0x96>
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	3b04      	subs	r3, #4
 800451a:	2a00      	cmp	r2, #0
 800451c:	d1f0      	bne.n	8004500 <quorem+0xf0>
 800451e:	3c01      	subs	r4, #1
 8004520:	e7eb      	b.n	80044fa <quorem+0xea>
 8004522:	2000      	movs	r0, #0
 8004524:	e7ee      	b.n	8004504 <quorem+0xf4>
	...

08004528 <_dtoa_r>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	ed2d 8b04 	vpush	{d8-d9}
 8004530:	ec57 6b10 	vmov	r6, r7, d0
 8004534:	b093      	sub	sp, #76	; 0x4c
 8004536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800453c:	9106      	str	r1, [sp, #24]
 800453e:	ee10 aa10 	vmov	sl, s0
 8004542:	4604      	mov	r4, r0
 8004544:	9209      	str	r2, [sp, #36]	; 0x24
 8004546:	930c      	str	r3, [sp, #48]	; 0x30
 8004548:	46bb      	mov	fp, r7
 800454a:	b975      	cbnz	r5, 800456a <_dtoa_r+0x42>
 800454c:	2010      	movs	r0, #16
 800454e:	f000 fddd 	bl	800510c <malloc>
 8004552:	4602      	mov	r2, r0
 8004554:	6260      	str	r0, [r4, #36]	; 0x24
 8004556:	b920      	cbnz	r0, 8004562 <_dtoa_r+0x3a>
 8004558:	4ba7      	ldr	r3, [pc, #668]	; (80047f8 <_dtoa_r+0x2d0>)
 800455a:	21ea      	movs	r1, #234	; 0xea
 800455c:	48a7      	ldr	r0, [pc, #668]	; (80047fc <_dtoa_r+0x2d4>)
 800455e:	f001 fa75 	bl	8005a4c <__assert_func>
 8004562:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004566:	6005      	str	r5, [r0, #0]
 8004568:	60c5      	str	r5, [r0, #12]
 800456a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	b151      	cbz	r1, 8004586 <_dtoa_r+0x5e>
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	604a      	str	r2, [r1, #4]
 8004574:	2301      	movs	r3, #1
 8004576:	4093      	lsls	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
 800457a:	4620      	mov	r0, r4
 800457c:	f000 fe1c 	bl	80051b8 <_Bfree>
 8004580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	1e3b      	subs	r3, r7, #0
 8004588:	bfaa      	itet	ge
 800458a:	2300      	movge	r3, #0
 800458c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004590:	f8c8 3000 	strge.w	r3, [r8]
 8004594:	4b9a      	ldr	r3, [pc, #616]	; (8004800 <_dtoa_r+0x2d8>)
 8004596:	bfbc      	itt	lt
 8004598:	2201      	movlt	r2, #1
 800459a:	f8c8 2000 	strlt.w	r2, [r8]
 800459e:	ea33 030b 	bics.w	r3, r3, fp
 80045a2:	d11b      	bne.n	80045dc <_dtoa_r+0xb4>
 80045a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80045b0:	4333      	orrs	r3, r6
 80045b2:	f000 8592 	beq.w	80050da <_dtoa_r+0xbb2>
 80045b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045b8:	b963      	cbnz	r3, 80045d4 <_dtoa_r+0xac>
 80045ba:	4b92      	ldr	r3, [pc, #584]	; (8004804 <_dtoa_r+0x2dc>)
 80045bc:	e022      	b.n	8004604 <_dtoa_r+0xdc>
 80045be:	4b92      	ldr	r3, [pc, #584]	; (8004808 <_dtoa_r+0x2e0>)
 80045c0:	9301      	str	r3, [sp, #4]
 80045c2:	3308      	adds	r3, #8
 80045c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	9801      	ldr	r0, [sp, #4]
 80045ca:	b013      	add	sp, #76	; 0x4c
 80045cc:	ecbd 8b04 	vpop	{d8-d9}
 80045d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d4:	4b8b      	ldr	r3, [pc, #556]	; (8004804 <_dtoa_r+0x2dc>)
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	3303      	adds	r3, #3
 80045da:	e7f3      	b.n	80045c4 <_dtoa_r+0x9c>
 80045dc:	2200      	movs	r2, #0
 80045de:	2300      	movs	r3, #0
 80045e0:	4650      	mov	r0, sl
 80045e2:	4659      	mov	r1, fp
 80045e4:	f7fc fa78 	bl	8000ad8 <__aeabi_dcmpeq>
 80045e8:	ec4b ab19 	vmov	d9, sl, fp
 80045ec:	4680      	mov	r8, r0
 80045ee:	b158      	cbz	r0, 8004608 <_dtoa_r+0xe0>
 80045f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045f2:	2301      	movs	r3, #1
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 856b 	beq.w	80050d4 <_dtoa_r+0xbac>
 80045fe:	4883      	ldr	r0, [pc, #524]	; (800480c <_dtoa_r+0x2e4>)
 8004600:	6018      	str	r0, [r3, #0]
 8004602:	1e43      	subs	r3, r0, #1
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	e7df      	b.n	80045c8 <_dtoa_r+0xa0>
 8004608:	ec4b ab10 	vmov	d0, sl, fp
 800460c:	aa10      	add	r2, sp, #64	; 0x40
 800460e:	a911      	add	r1, sp, #68	; 0x44
 8004610:	4620      	mov	r0, r4
 8004612:	f001 f8b9 	bl	8005788 <__d2b>
 8004616:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800461a:	ee08 0a10 	vmov	s16, r0
 800461e:	2d00      	cmp	r5, #0
 8004620:	f000 8084 	beq.w	800472c <_dtoa_r+0x204>
 8004624:	ee19 3a90 	vmov	r3, s19
 8004628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800462c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004630:	4656      	mov	r6, sl
 8004632:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800463a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800463e:	4b74      	ldr	r3, [pc, #464]	; (8004810 <_dtoa_r+0x2e8>)
 8004640:	2200      	movs	r2, #0
 8004642:	4630      	mov	r0, r6
 8004644:	4639      	mov	r1, r7
 8004646:	f7fb fe27 	bl	8000298 <__aeabi_dsub>
 800464a:	a365      	add	r3, pc, #404	; (adr r3, 80047e0 <_dtoa_r+0x2b8>)
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f7fb ffda 	bl	8000608 <__aeabi_dmul>
 8004654:	a364      	add	r3, pc, #400	; (adr r3, 80047e8 <_dtoa_r+0x2c0>)
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	f7fb fe1f 	bl	800029c <__adddf3>
 800465e:	4606      	mov	r6, r0
 8004660:	4628      	mov	r0, r5
 8004662:	460f      	mov	r7, r1
 8004664:	f7fb ff66 	bl	8000534 <__aeabi_i2d>
 8004668:	a361      	add	r3, pc, #388	; (adr r3, 80047f0 <_dtoa_r+0x2c8>)
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f7fb ffcb 	bl	8000608 <__aeabi_dmul>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4630      	mov	r0, r6
 8004678:	4639      	mov	r1, r7
 800467a:	f7fb fe0f 	bl	800029c <__adddf3>
 800467e:	4606      	mov	r6, r0
 8004680:	460f      	mov	r7, r1
 8004682:	f7fc fa71 	bl	8000b68 <__aeabi_d2iz>
 8004686:	2200      	movs	r2, #0
 8004688:	9000      	str	r0, [sp, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	4630      	mov	r0, r6
 800468e:	4639      	mov	r1, r7
 8004690:	f7fc fa2c 	bl	8000aec <__aeabi_dcmplt>
 8004694:	b150      	cbz	r0, 80046ac <_dtoa_r+0x184>
 8004696:	9800      	ldr	r0, [sp, #0]
 8004698:	f7fb ff4c 	bl	8000534 <__aeabi_i2d>
 800469c:	4632      	mov	r2, r6
 800469e:	463b      	mov	r3, r7
 80046a0:	f7fc fa1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80046a4:	b910      	cbnz	r0, 80046ac <_dtoa_r+0x184>
 80046a6:	9b00      	ldr	r3, [sp, #0]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	9b00      	ldr	r3, [sp, #0]
 80046ae:	2b16      	cmp	r3, #22
 80046b0:	d85a      	bhi.n	8004768 <_dtoa_r+0x240>
 80046b2:	9a00      	ldr	r2, [sp, #0]
 80046b4:	4b57      	ldr	r3, [pc, #348]	; (8004814 <_dtoa_r+0x2ec>)
 80046b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	ec51 0b19 	vmov	r0, r1, d9
 80046c2:	f7fc fa13 	bl	8000aec <__aeabi_dcmplt>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d050      	beq.n	800476c <_dtoa_r+0x244>
 80046ca:	9b00      	ldr	r3, [sp, #0]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046d6:	1b5d      	subs	r5, r3, r5
 80046d8:	1e6b      	subs	r3, r5, #1
 80046da:	9305      	str	r3, [sp, #20]
 80046dc:	bf45      	ittet	mi
 80046de:	f1c5 0301 	rsbmi	r3, r5, #1
 80046e2:	9304      	strmi	r3, [sp, #16]
 80046e4:	2300      	movpl	r3, #0
 80046e6:	2300      	movmi	r3, #0
 80046e8:	bf4c      	ite	mi
 80046ea:	9305      	strmi	r3, [sp, #20]
 80046ec:	9304      	strpl	r3, [sp, #16]
 80046ee:	9b00      	ldr	r3, [sp, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	db3d      	blt.n	8004770 <_dtoa_r+0x248>
 80046f4:	9b05      	ldr	r3, [sp, #20]
 80046f6:	9a00      	ldr	r2, [sp, #0]
 80046f8:	920a      	str	r2, [sp, #40]	; 0x28
 80046fa:	4413      	add	r3, r2
 80046fc:	9305      	str	r3, [sp, #20]
 80046fe:	2300      	movs	r3, #0
 8004700:	9307      	str	r3, [sp, #28]
 8004702:	9b06      	ldr	r3, [sp, #24]
 8004704:	2b09      	cmp	r3, #9
 8004706:	f200 8089 	bhi.w	800481c <_dtoa_r+0x2f4>
 800470a:	2b05      	cmp	r3, #5
 800470c:	bfc4      	itt	gt
 800470e:	3b04      	subgt	r3, #4
 8004710:	9306      	strgt	r3, [sp, #24]
 8004712:	9b06      	ldr	r3, [sp, #24]
 8004714:	f1a3 0302 	sub.w	r3, r3, #2
 8004718:	bfcc      	ite	gt
 800471a:	2500      	movgt	r5, #0
 800471c:	2501      	movle	r5, #1
 800471e:	2b03      	cmp	r3, #3
 8004720:	f200 8087 	bhi.w	8004832 <_dtoa_r+0x30a>
 8004724:	e8df f003 	tbb	[pc, r3]
 8004728:	59383a2d 	.word	0x59383a2d
 800472c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004730:	441d      	add	r5, r3
 8004732:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004736:	2b20      	cmp	r3, #32
 8004738:	bfc1      	itttt	gt
 800473a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800473e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004742:	fa0b f303 	lslgt.w	r3, fp, r3
 8004746:	fa26 f000 	lsrgt.w	r0, r6, r0
 800474a:	bfda      	itte	le
 800474c:	f1c3 0320 	rsble	r3, r3, #32
 8004750:	fa06 f003 	lslle.w	r0, r6, r3
 8004754:	4318      	orrgt	r0, r3
 8004756:	f7fb fedd 	bl	8000514 <__aeabi_ui2d>
 800475a:	2301      	movs	r3, #1
 800475c:	4606      	mov	r6, r0
 800475e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004762:	3d01      	subs	r5, #1
 8004764:	930e      	str	r3, [sp, #56]	; 0x38
 8004766:	e76a      	b.n	800463e <_dtoa_r+0x116>
 8004768:	2301      	movs	r3, #1
 800476a:	e7b2      	b.n	80046d2 <_dtoa_r+0x1aa>
 800476c:	900b      	str	r0, [sp, #44]	; 0x2c
 800476e:	e7b1      	b.n	80046d4 <_dtoa_r+0x1ac>
 8004770:	9b04      	ldr	r3, [sp, #16]
 8004772:	9a00      	ldr	r2, [sp, #0]
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	4253      	negs	r3, r2
 800477a:	9307      	str	r3, [sp, #28]
 800477c:	2300      	movs	r3, #0
 800477e:	930a      	str	r3, [sp, #40]	; 0x28
 8004780:	e7bf      	b.n	8004702 <_dtoa_r+0x1da>
 8004782:	2300      	movs	r3, #0
 8004784:	9308      	str	r3, [sp, #32]
 8004786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	dc55      	bgt.n	8004838 <_dtoa_r+0x310>
 800478c:	2301      	movs	r3, #1
 800478e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004792:	461a      	mov	r2, r3
 8004794:	9209      	str	r2, [sp, #36]	; 0x24
 8004796:	e00c      	b.n	80047b2 <_dtoa_r+0x28a>
 8004798:	2301      	movs	r3, #1
 800479a:	e7f3      	b.n	8004784 <_dtoa_r+0x25c>
 800479c:	2300      	movs	r3, #0
 800479e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a0:	9308      	str	r3, [sp, #32]
 80047a2:	9b00      	ldr	r3, [sp, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	9302      	str	r3, [sp, #8]
 80047a8:	3301      	adds	r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	9303      	str	r3, [sp, #12]
 80047ae:	bfb8      	it	lt
 80047b0:	2301      	movlt	r3, #1
 80047b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80047b4:	2200      	movs	r2, #0
 80047b6:	6042      	str	r2, [r0, #4]
 80047b8:	2204      	movs	r2, #4
 80047ba:	f102 0614 	add.w	r6, r2, #20
 80047be:	429e      	cmp	r6, r3
 80047c0:	6841      	ldr	r1, [r0, #4]
 80047c2:	d93d      	bls.n	8004840 <_dtoa_r+0x318>
 80047c4:	4620      	mov	r0, r4
 80047c6:	f000 fcb7 	bl	8005138 <_Balloc>
 80047ca:	9001      	str	r0, [sp, #4]
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d13b      	bne.n	8004848 <_dtoa_r+0x320>
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <_dtoa_r+0x2f0>)
 80047d2:	4602      	mov	r2, r0
 80047d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80047d8:	e6c0      	b.n	800455c <_dtoa_r+0x34>
 80047da:	2301      	movs	r3, #1
 80047dc:	e7df      	b.n	800479e <_dtoa_r+0x276>
 80047de:	bf00      	nop
 80047e0:	636f4361 	.word	0x636f4361
 80047e4:	3fd287a7 	.word	0x3fd287a7
 80047e8:	8b60c8b3 	.word	0x8b60c8b3
 80047ec:	3fc68a28 	.word	0x3fc68a28
 80047f0:	509f79fb 	.word	0x509f79fb
 80047f4:	3fd34413 	.word	0x3fd34413
 80047f8:	08007ce5 	.word	0x08007ce5
 80047fc:	08007cfc 	.word	0x08007cfc
 8004800:	7ff00000 	.word	0x7ff00000
 8004804:	08007ce1 	.word	0x08007ce1
 8004808:	08007cd8 	.word	0x08007cd8
 800480c:	08007cb5 	.word	0x08007cb5
 8004810:	3ff80000 	.word	0x3ff80000
 8004814:	08007df0 	.word	0x08007df0
 8004818:	08007d57 	.word	0x08007d57
 800481c:	2501      	movs	r5, #1
 800481e:	2300      	movs	r3, #0
 8004820:	9306      	str	r3, [sp, #24]
 8004822:	9508      	str	r5, [sp, #32]
 8004824:	f04f 33ff 	mov.w	r3, #4294967295
 8004828:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	2312      	movs	r3, #18
 8004830:	e7b0      	b.n	8004794 <_dtoa_r+0x26c>
 8004832:	2301      	movs	r3, #1
 8004834:	9308      	str	r3, [sp, #32]
 8004836:	e7f5      	b.n	8004824 <_dtoa_r+0x2fc>
 8004838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800483e:	e7b8      	b.n	80047b2 <_dtoa_r+0x28a>
 8004840:	3101      	adds	r1, #1
 8004842:	6041      	str	r1, [r0, #4]
 8004844:	0052      	lsls	r2, r2, #1
 8004846:	e7b8      	b.n	80047ba <_dtoa_r+0x292>
 8004848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800484a:	9a01      	ldr	r2, [sp, #4]
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	2b0e      	cmp	r3, #14
 8004852:	f200 809d 	bhi.w	8004990 <_dtoa_r+0x468>
 8004856:	2d00      	cmp	r5, #0
 8004858:	f000 809a 	beq.w	8004990 <_dtoa_r+0x468>
 800485c:	9b00      	ldr	r3, [sp, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	dd32      	ble.n	80048c8 <_dtoa_r+0x3a0>
 8004862:	4ab7      	ldr	r2, [pc, #732]	; (8004b40 <_dtoa_r+0x618>)
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800486c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004870:	9b00      	ldr	r3, [sp, #0]
 8004872:	05d8      	lsls	r0, r3, #23
 8004874:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004878:	d516      	bpl.n	80048a8 <_dtoa_r+0x380>
 800487a:	4bb2      	ldr	r3, [pc, #712]	; (8004b44 <_dtoa_r+0x61c>)
 800487c:	ec51 0b19 	vmov	r0, r1, d9
 8004880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004884:	f7fb ffea 	bl	800085c <__aeabi_ddiv>
 8004888:	f007 070f 	and.w	r7, r7, #15
 800488c:	4682      	mov	sl, r0
 800488e:	468b      	mov	fp, r1
 8004890:	2503      	movs	r5, #3
 8004892:	4eac      	ldr	r6, [pc, #688]	; (8004b44 <_dtoa_r+0x61c>)
 8004894:	b957      	cbnz	r7, 80048ac <_dtoa_r+0x384>
 8004896:	4642      	mov	r2, r8
 8004898:	464b      	mov	r3, r9
 800489a:	4650      	mov	r0, sl
 800489c:	4659      	mov	r1, fp
 800489e:	f7fb ffdd 	bl	800085c <__aeabi_ddiv>
 80048a2:	4682      	mov	sl, r0
 80048a4:	468b      	mov	fp, r1
 80048a6:	e028      	b.n	80048fa <_dtoa_r+0x3d2>
 80048a8:	2502      	movs	r5, #2
 80048aa:	e7f2      	b.n	8004892 <_dtoa_r+0x36a>
 80048ac:	07f9      	lsls	r1, r7, #31
 80048ae:	d508      	bpl.n	80048c2 <_dtoa_r+0x39a>
 80048b0:	4640      	mov	r0, r8
 80048b2:	4649      	mov	r1, r9
 80048b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80048b8:	f7fb fea6 	bl	8000608 <__aeabi_dmul>
 80048bc:	3501      	adds	r5, #1
 80048be:	4680      	mov	r8, r0
 80048c0:	4689      	mov	r9, r1
 80048c2:	107f      	asrs	r7, r7, #1
 80048c4:	3608      	adds	r6, #8
 80048c6:	e7e5      	b.n	8004894 <_dtoa_r+0x36c>
 80048c8:	f000 809b 	beq.w	8004a02 <_dtoa_r+0x4da>
 80048cc:	9b00      	ldr	r3, [sp, #0]
 80048ce:	4f9d      	ldr	r7, [pc, #628]	; (8004b44 <_dtoa_r+0x61c>)
 80048d0:	425e      	negs	r6, r3
 80048d2:	4b9b      	ldr	r3, [pc, #620]	; (8004b40 <_dtoa_r+0x618>)
 80048d4:	f006 020f 	and.w	r2, r6, #15
 80048d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	ec51 0b19 	vmov	r0, r1, d9
 80048e4:	f7fb fe90 	bl	8000608 <__aeabi_dmul>
 80048e8:	1136      	asrs	r6, r6, #4
 80048ea:	4682      	mov	sl, r0
 80048ec:	468b      	mov	fp, r1
 80048ee:	2300      	movs	r3, #0
 80048f0:	2502      	movs	r5, #2
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	d17a      	bne.n	80049ec <_dtoa_r+0x4c4>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1d3      	bne.n	80048a2 <_dtoa_r+0x37a>
 80048fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8082 	beq.w	8004a06 <_dtoa_r+0x4de>
 8004902:	4b91      	ldr	r3, [pc, #580]	; (8004b48 <_dtoa_r+0x620>)
 8004904:	2200      	movs	r2, #0
 8004906:	4650      	mov	r0, sl
 8004908:	4659      	mov	r1, fp
 800490a:	f7fc f8ef 	bl	8000aec <__aeabi_dcmplt>
 800490e:	2800      	cmp	r0, #0
 8004910:	d079      	beq.n	8004a06 <_dtoa_r+0x4de>
 8004912:	9b03      	ldr	r3, [sp, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d076      	beq.n	8004a06 <_dtoa_r+0x4de>
 8004918:	9b02      	ldr	r3, [sp, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	dd36      	ble.n	800498c <_dtoa_r+0x464>
 800491e:	9b00      	ldr	r3, [sp, #0]
 8004920:	4650      	mov	r0, sl
 8004922:	4659      	mov	r1, fp
 8004924:	1e5f      	subs	r7, r3, #1
 8004926:	2200      	movs	r2, #0
 8004928:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <_dtoa_r+0x624>)
 800492a:	f7fb fe6d 	bl	8000608 <__aeabi_dmul>
 800492e:	9e02      	ldr	r6, [sp, #8]
 8004930:	4682      	mov	sl, r0
 8004932:	468b      	mov	fp, r1
 8004934:	3501      	adds	r5, #1
 8004936:	4628      	mov	r0, r5
 8004938:	f7fb fdfc 	bl	8000534 <__aeabi_i2d>
 800493c:	4652      	mov	r2, sl
 800493e:	465b      	mov	r3, fp
 8004940:	f7fb fe62 	bl	8000608 <__aeabi_dmul>
 8004944:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <_dtoa_r+0x628>)
 8004946:	2200      	movs	r2, #0
 8004948:	f7fb fca8 	bl	800029c <__adddf3>
 800494c:	46d0      	mov	r8, sl
 800494e:	46d9      	mov	r9, fp
 8004950:	4682      	mov	sl, r0
 8004952:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004956:	2e00      	cmp	r6, #0
 8004958:	d158      	bne.n	8004a0c <_dtoa_r+0x4e4>
 800495a:	4b7e      	ldr	r3, [pc, #504]	; (8004b54 <_dtoa_r+0x62c>)
 800495c:	2200      	movs	r2, #0
 800495e:	4640      	mov	r0, r8
 8004960:	4649      	mov	r1, r9
 8004962:	f7fb fc99 	bl	8000298 <__aeabi_dsub>
 8004966:	4652      	mov	r2, sl
 8004968:	465b      	mov	r3, fp
 800496a:	4680      	mov	r8, r0
 800496c:	4689      	mov	r9, r1
 800496e:	f7fc f8db 	bl	8000b28 <__aeabi_dcmpgt>
 8004972:	2800      	cmp	r0, #0
 8004974:	f040 8295 	bne.w	8004ea2 <_dtoa_r+0x97a>
 8004978:	4652      	mov	r2, sl
 800497a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800497e:	4640      	mov	r0, r8
 8004980:	4649      	mov	r1, r9
 8004982:	f7fc f8b3 	bl	8000aec <__aeabi_dcmplt>
 8004986:	2800      	cmp	r0, #0
 8004988:	f040 8289 	bne.w	8004e9e <_dtoa_r+0x976>
 800498c:	ec5b ab19 	vmov	sl, fp, d9
 8004990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004992:	2b00      	cmp	r3, #0
 8004994:	f2c0 8148 	blt.w	8004c28 <_dtoa_r+0x700>
 8004998:	9a00      	ldr	r2, [sp, #0]
 800499a:	2a0e      	cmp	r2, #14
 800499c:	f300 8144 	bgt.w	8004c28 <_dtoa_r+0x700>
 80049a0:	4b67      	ldr	r3, [pc, #412]	; (8004b40 <_dtoa_r+0x618>)
 80049a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f280 80d5 	bge.w	8004b5c <_dtoa_r+0x634>
 80049b2:	9b03      	ldr	r3, [sp, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f300 80d1 	bgt.w	8004b5c <_dtoa_r+0x634>
 80049ba:	f040 826f 	bne.w	8004e9c <_dtoa_r+0x974>
 80049be:	4b65      	ldr	r3, [pc, #404]	; (8004b54 <_dtoa_r+0x62c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	4640      	mov	r0, r8
 80049c4:	4649      	mov	r1, r9
 80049c6:	f7fb fe1f 	bl	8000608 <__aeabi_dmul>
 80049ca:	4652      	mov	r2, sl
 80049cc:	465b      	mov	r3, fp
 80049ce:	f7fc f8a1 	bl	8000b14 <__aeabi_dcmpge>
 80049d2:	9e03      	ldr	r6, [sp, #12]
 80049d4:	4637      	mov	r7, r6
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f040 8245 	bne.w	8004e66 <_dtoa_r+0x93e>
 80049dc:	9d01      	ldr	r5, [sp, #4]
 80049de:	2331      	movs	r3, #49	; 0x31
 80049e0:	f805 3b01 	strb.w	r3, [r5], #1
 80049e4:	9b00      	ldr	r3, [sp, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	e240      	b.n	8004e6e <_dtoa_r+0x946>
 80049ec:	07f2      	lsls	r2, r6, #31
 80049ee:	d505      	bpl.n	80049fc <_dtoa_r+0x4d4>
 80049f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f4:	f7fb fe08 	bl	8000608 <__aeabi_dmul>
 80049f8:	3501      	adds	r5, #1
 80049fa:	2301      	movs	r3, #1
 80049fc:	1076      	asrs	r6, r6, #1
 80049fe:	3708      	adds	r7, #8
 8004a00:	e777      	b.n	80048f2 <_dtoa_r+0x3ca>
 8004a02:	2502      	movs	r5, #2
 8004a04:	e779      	b.n	80048fa <_dtoa_r+0x3d2>
 8004a06:	9f00      	ldr	r7, [sp, #0]
 8004a08:	9e03      	ldr	r6, [sp, #12]
 8004a0a:	e794      	b.n	8004936 <_dtoa_r+0x40e>
 8004a0c:	9901      	ldr	r1, [sp, #4]
 8004a0e:	4b4c      	ldr	r3, [pc, #304]	; (8004b40 <_dtoa_r+0x618>)
 8004a10:	4431      	add	r1, r6
 8004a12:	910d      	str	r1, [sp, #52]	; 0x34
 8004a14:	9908      	ldr	r1, [sp, #32]
 8004a16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004a1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a1e:	2900      	cmp	r1, #0
 8004a20:	d043      	beq.n	8004aaa <_dtoa_r+0x582>
 8004a22:	494d      	ldr	r1, [pc, #308]	; (8004b58 <_dtoa_r+0x630>)
 8004a24:	2000      	movs	r0, #0
 8004a26:	f7fb ff19 	bl	800085c <__aeabi_ddiv>
 8004a2a:	4652      	mov	r2, sl
 8004a2c:	465b      	mov	r3, fp
 8004a2e:	f7fb fc33 	bl	8000298 <__aeabi_dsub>
 8004a32:	9d01      	ldr	r5, [sp, #4]
 8004a34:	4682      	mov	sl, r0
 8004a36:	468b      	mov	fp, r1
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f7fc f894 	bl	8000b68 <__aeabi_d2iz>
 8004a40:	4606      	mov	r6, r0
 8004a42:	f7fb fd77 	bl	8000534 <__aeabi_i2d>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	f7fb fc23 	bl	8000298 <__aeabi_dsub>
 8004a52:	3630      	adds	r6, #48	; 0x30
 8004a54:	f805 6b01 	strb.w	r6, [r5], #1
 8004a58:	4652      	mov	r2, sl
 8004a5a:	465b      	mov	r3, fp
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	4689      	mov	r9, r1
 8004a60:	f7fc f844 	bl	8000aec <__aeabi_dcmplt>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d163      	bne.n	8004b30 <_dtoa_r+0x608>
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	4936      	ldr	r1, [pc, #216]	; (8004b48 <_dtoa_r+0x620>)
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f7fb fc12 	bl	8000298 <__aeabi_dsub>
 8004a74:	4652      	mov	r2, sl
 8004a76:	465b      	mov	r3, fp
 8004a78:	f7fc f838 	bl	8000aec <__aeabi_dcmplt>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	f040 80b5 	bne.w	8004bec <_dtoa_r+0x6c4>
 8004a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a84:	429d      	cmp	r5, r3
 8004a86:	d081      	beq.n	800498c <_dtoa_r+0x464>
 8004a88:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <_dtoa_r+0x624>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4650      	mov	r0, sl
 8004a8e:	4659      	mov	r1, fp
 8004a90:	f7fb fdba 	bl	8000608 <__aeabi_dmul>
 8004a94:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <_dtoa_r+0x624>)
 8004a96:	4682      	mov	sl, r0
 8004a98:	468b      	mov	fp, r1
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f7fb fdb2 	bl	8000608 <__aeabi_dmul>
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	4689      	mov	r9, r1
 8004aa8:	e7c6      	b.n	8004a38 <_dtoa_r+0x510>
 8004aaa:	4650      	mov	r0, sl
 8004aac:	4659      	mov	r1, fp
 8004aae:	f7fb fdab 	bl	8000608 <__aeabi_dmul>
 8004ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ab4:	9d01      	ldr	r5, [sp, #4]
 8004ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ab8:	4682      	mov	sl, r0
 8004aba:	468b      	mov	fp, r1
 8004abc:	4649      	mov	r1, r9
 8004abe:	4640      	mov	r0, r8
 8004ac0:	f7fc f852 	bl	8000b68 <__aeabi_d2iz>
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	f7fb fd35 	bl	8000534 <__aeabi_i2d>
 8004aca:	3630      	adds	r6, #48	; 0x30
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f7fb fbe0 	bl	8000298 <__aeabi_dsub>
 8004ad8:	f805 6b01 	strb.w	r6, [r5], #1
 8004adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ade:	429d      	cmp	r5, r3
 8004ae0:	4680      	mov	r8, r0
 8004ae2:	4689      	mov	r9, r1
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	d124      	bne.n	8004b34 <_dtoa_r+0x60c>
 8004aea:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <_dtoa_r+0x630>)
 8004aec:	4650      	mov	r0, sl
 8004aee:	4659      	mov	r1, fp
 8004af0:	f7fb fbd4 	bl	800029c <__adddf3>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4640      	mov	r0, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	f7fc f814 	bl	8000b28 <__aeabi_dcmpgt>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d173      	bne.n	8004bec <_dtoa_r+0x6c4>
 8004b04:	4652      	mov	r2, sl
 8004b06:	465b      	mov	r3, fp
 8004b08:	4913      	ldr	r1, [pc, #76]	; (8004b58 <_dtoa_r+0x630>)
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	f7fb fbc4 	bl	8000298 <__aeabi_dsub>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4640      	mov	r0, r8
 8004b16:	4649      	mov	r1, r9
 8004b18:	f7fb ffe8 	bl	8000aec <__aeabi_dcmplt>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f43f af35 	beq.w	800498c <_dtoa_r+0x464>
 8004b22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004b24:	1e6b      	subs	r3, r5, #1
 8004b26:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b2c:	2b30      	cmp	r3, #48	; 0x30
 8004b2e:	d0f8      	beq.n	8004b22 <_dtoa_r+0x5fa>
 8004b30:	9700      	str	r7, [sp, #0]
 8004b32:	e049      	b.n	8004bc8 <_dtoa_r+0x6a0>
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <_dtoa_r+0x624>)
 8004b36:	f7fb fd67 	bl	8000608 <__aeabi_dmul>
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	4689      	mov	r9, r1
 8004b3e:	e7bd      	b.n	8004abc <_dtoa_r+0x594>
 8004b40:	08007df0 	.word	0x08007df0
 8004b44:	08007dc8 	.word	0x08007dc8
 8004b48:	3ff00000 	.word	0x3ff00000
 8004b4c:	40240000 	.word	0x40240000
 8004b50:	401c0000 	.word	0x401c0000
 8004b54:	40140000 	.word	0x40140000
 8004b58:	3fe00000 	.word	0x3fe00000
 8004b5c:	9d01      	ldr	r5, [sp, #4]
 8004b5e:	4656      	mov	r6, sl
 8004b60:	465f      	mov	r7, fp
 8004b62:	4642      	mov	r2, r8
 8004b64:	464b      	mov	r3, r9
 8004b66:	4630      	mov	r0, r6
 8004b68:	4639      	mov	r1, r7
 8004b6a:	f7fb fe77 	bl	800085c <__aeabi_ddiv>
 8004b6e:	f7fb fffb 	bl	8000b68 <__aeabi_d2iz>
 8004b72:	4682      	mov	sl, r0
 8004b74:	f7fb fcde 	bl	8000534 <__aeabi_i2d>
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	f7fb fd44 	bl	8000608 <__aeabi_dmul>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4630      	mov	r0, r6
 8004b86:	4639      	mov	r1, r7
 8004b88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004b8c:	f7fb fb84 	bl	8000298 <__aeabi_dsub>
 8004b90:	f805 6b01 	strb.w	r6, [r5], #1
 8004b94:	9e01      	ldr	r6, [sp, #4]
 8004b96:	9f03      	ldr	r7, [sp, #12]
 8004b98:	1bae      	subs	r6, r5, r6
 8004b9a:	42b7      	cmp	r7, r6
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	d135      	bne.n	8004c0e <_dtoa_r+0x6e6>
 8004ba2:	f7fb fb7b 	bl	800029c <__adddf3>
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	464b      	mov	r3, r9
 8004baa:	4606      	mov	r6, r0
 8004bac:	460f      	mov	r7, r1
 8004bae:	f7fb ffbb 	bl	8000b28 <__aeabi_dcmpgt>
 8004bb2:	b9d0      	cbnz	r0, 8004bea <_dtoa_r+0x6c2>
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	4630      	mov	r0, r6
 8004bba:	4639      	mov	r1, r7
 8004bbc:	f7fb ff8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bc0:	b110      	cbz	r0, 8004bc8 <_dtoa_r+0x6a0>
 8004bc2:	f01a 0f01 	tst.w	sl, #1
 8004bc6:	d110      	bne.n	8004bea <_dtoa_r+0x6c2>
 8004bc8:	4620      	mov	r0, r4
 8004bca:	ee18 1a10 	vmov	r1, s16
 8004bce:	f000 faf3 	bl	80051b8 <_Bfree>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9800      	ldr	r0, [sp, #0]
 8004bd6:	702b      	strb	r3, [r5, #0]
 8004bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bda:	3001      	adds	r0, #1
 8004bdc:	6018      	str	r0, [r3, #0]
 8004bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f43f acf1 	beq.w	80045c8 <_dtoa_r+0xa0>
 8004be6:	601d      	str	r5, [r3, #0]
 8004be8:	e4ee      	b.n	80045c8 <_dtoa_r+0xa0>
 8004bea:	9f00      	ldr	r7, [sp, #0]
 8004bec:	462b      	mov	r3, r5
 8004bee:	461d      	mov	r5, r3
 8004bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bf4:	2a39      	cmp	r2, #57	; 0x39
 8004bf6:	d106      	bne.n	8004c06 <_dtoa_r+0x6de>
 8004bf8:	9a01      	ldr	r2, [sp, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d1f7      	bne.n	8004bee <_dtoa_r+0x6c6>
 8004bfe:	9901      	ldr	r1, [sp, #4]
 8004c00:	2230      	movs	r2, #48	; 0x30
 8004c02:	3701      	adds	r7, #1
 8004c04:	700a      	strb	r2, [r1, #0]
 8004c06:	781a      	ldrb	r2, [r3, #0]
 8004c08:	3201      	adds	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e790      	b.n	8004b30 <_dtoa_r+0x608>
 8004c0e:	4ba6      	ldr	r3, [pc, #664]	; (8004ea8 <_dtoa_r+0x980>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	f7fb fcf9 	bl	8000608 <__aeabi_dmul>
 8004c16:	2200      	movs	r2, #0
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	460f      	mov	r7, r1
 8004c1e:	f7fb ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d09d      	beq.n	8004b62 <_dtoa_r+0x63a>
 8004c26:	e7cf      	b.n	8004bc8 <_dtoa_r+0x6a0>
 8004c28:	9a08      	ldr	r2, [sp, #32]
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	f000 80d7 	beq.w	8004dde <_dtoa_r+0x8b6>
 8004c30:	9a06      	ldr	r2, [sp, #24]
 8004c32:	2a01      	cmp	r2, #1
 8004c34:	f300 80ba 	bgt.w	8004dac <_dtoa_r+0x884>
 8004c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	f000 80b2 	beq.w	8004da4 <_dtoa_r+0x87c>
 8004c40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c44:	9e07      	ldr	r6, [sp, #28]
 8004c46:	9d04      	ldr	r5, [sp, #16]
 8004c48:	9a04      	ldr	r2, [sp, #16]
 8004c4a:	441a      	add	r2, r3
 8004c4c:	9204      	str	r2, [sp, #16]
 8004c4e:	9a05      	ldr	r2, [sp, #20]
 8004c50:	2101      	movs	r1, #1
 8004c52:	441a      	add	r2, r3
 8004c54:	4620      	mov	r0, r4
 8004c56:	9205      	str	r2, [sp, #20]
 8004c58:	f000 fb66 	bl	8005328 <__i2b>
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	2d00      	cmp	r5, #0
 8004c60:	dd0c      	ble.n	8004c7c <_dtoa_r+0x754>
 8004c62:	9b05      	ldr	r3, [sp, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	dd09      	ble.n	8004c7c <_dtoa_r+0x754>
 8004c68:	42ab      	cmp	r3, r5
 8004c6a:	9a04      	ldr	r2, [sp, #16]
 8004c6c:	bfa8      	it	ge
 8004c6e:	462b      	movge	r3, r5
 8004c70:	1ad2      	subs	r2, r2, r3
 8004c72:	9204      	str	r2, [sp, #16]
 8004c74:	9a05      	ldr	r2, [sp, #20]
 8004c76:	1aed      	subs	r5, r5, r3
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	9305      	str	r3, [sp, #20]
 8004c7c:	9b07      	ldr	r3, [sp, #28]
 8004c7e:	b31b      	cbz	r3, 8004cc8 <_dtoa_r+0x7a0>
 8004c80:	9b08      	ldr	r3, [sp, #32]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80af 	beq.w	8004de6 <_dtoa_r+0x8be>
 8004c88:	2e00      	cmp	r6, #0
 8004c8a:	dd13      	ble.n	8004cb4 <_dtoa_r+0x78c>
 8004c8c:	4639      	mov	r1, r7
 8004c8e:	4632      	mov	r2, r6
 8004c90:	4620      	mov	r0, r4
 8004c92:	f000 fc09 	bl	80054a8 <__pow5mult>
 8004c96:	ee18 2a10 	vmov	r2, s16
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	4607      	mov	r7, r0
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f000 fb58 	bl	8005354 <__multiply>
 8004ca4:	ee18 1a10 	vmov	r1, s16
 8004ca8:	4680      	mov	r8, r0
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fa84 	bl	80051b8 <_Bfree>
 8004cb0:	ee08 8a10 	vmov	s16, r8
 8004cb4:	9b07      	ldr	r3, [sp, #28]
 8004cb6:	1b9a      	subs	r2, r3, r6
 8004cb8:	d006      	beq.n	8004cc8 <_dtoa_r+0x7a0>
 8004cba:	ee18 1a10 	vmov	r1, s16
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f000 fbf2 	bl	80054a8 <__pow5mult>
 8004cc4:	ee08 0a10 	vmov	s16, r0
 8004cc8:	2101      	movs	r1, #1
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 fb2c 	bl	8005328 <__i2b>
 8004cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	f340 8088 	ble.w	8004dea <_dtoa_r+0x8c2>
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4601      	mov	r1, r0
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 fbe2 	bl	80054a8 <__pow5mult>
 8004ce4:	9b06      	ldr	r3, [sp, #24]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	4606      	mov	r6, r0
 8004cea:	f340 8081 	ble.w	8004df0 <_dtoa_r+0x8c8>
 8004cee:	f04f 0800 	mov.w	r8, #0
 8004cf2:	6933      	ldr	r3, [r6, #16]
 8004cf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004cf8:	6918      	ldr	r0, [r3, #16]
 8004cfa:	f000 fac5 	bl	8005288 <__hi0bits>
 8004cfe:	f1c0 0020 	rsb	r0, r0, #32
 8004d02:	9b05      	ldr	r3, [sp, #20]
 8004d04:	4418      	add	r0, r3
 8004d06:	f010 001f 	ands.w	r0, r0, #31
 8004d0a:	f000 8092 	beq.w	8004e32 <_dtoa_r+0x90a>
 8004d0e:	f1c0 0320 	rsb	r3, r0, #32
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	f340 808a 	ble.w	8004e2c <_dtoa_r+0x904>
 8004d18:	f1c0 001c 	rsb	r0, r0, #28
 8004d1c:	9b04      	ldr	r3, [sp, #16]
 8004d1e:	4403      	add	r3, r0
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	9b05      	ldr	r3, [sp, #20]
 8004d24:	4403      	add	r3, r0
 8004d26:	4405      	add	r5, r0
 8004d28:	9305      	str	r3, [sp, #20]
 8004d2a:	9b04      	ldr	r3, [sp, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	dd07      	ble.n	8004d40 <_dtoa_r+0x818>
 8004d30:	ee18 1a10 	vmov	r1, s16
 8004d34:	461a      	mov	r2, r3
 8004d36:	4620      	mov	r0, r4
 8004d38:	f000 fc10 	bl	800555c <__lshift>
 8004d3c:	ee08 0a10 	vmov	s16, r0
 8004d40:	9b05      	ldr	r3, [sp, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	dd05      	ble.n	8004d52 <_dtoa_r+0x82a>
 8004d46:	4631      	mov	r1, r6
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f000 fc06 	bl	800555c <__lshift>
 8004d50:	4606      	mov	r6, r0
 8004d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d06e      	beq.n	8004e36 <_dtoa_r+0x90e>
 8004d58:	ee18 0a10 	vmov	r0, s16
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	f000 fc6d 	bl	800563c <__mcmp>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	da67      	bge.n	8004e36 <_dtoa_r+0x90e>
 8004d66:	9b00      	ldr	r3, [sp, #0]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	ee18 1a10 	vmov	r1, s16
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	220a      	movs	r2, #10
 8004d72:	2300      	movs	r3, #0
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fa41 	bl	80051fc <__multadd>
 8004d7a:	9b08      	ldr	r3, [sp, #32]
 8004d7c:	ee08 0a10 	vmov	s16, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 81b1 	beq.w	80050e8 <_dtoa_r+0xbc0>
 8004d86:	2300      	movs	r3, #0
 8004d88:	4639      	mov	r1, r7
 8004d8a:	220a      	movs	r2, #10
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f000 fa35 	bl	80051fc <__multadd>
 8004d92:	9b02      	ldr	r3, [sp, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	4607      	mov	r7, r0
 8004d98:	f300 808e 	bgt.w	8004eb8 <_dtoa_r+0x990>
 8004d9c:	9b06      	ldr	r3, [sp, #24]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	dc51      	bgt.n	8004e46 <_dtoa_r+0x91e>
 8004da2:	e089      	b.n	8004eb8 <_dtoa_r+0x990>
 8004da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004da6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004daa:	e74b      	b.n	8004c44 <_dtoa_r+0x71c>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1e5e      	subs	r6, r3, #1
 8004db0:	9b07      	ldr	r3, [sp, #28]
 8004db2:	42b3      	cmp	r3, r6
 8004db4:	bfbf      	itttt	lt
 8004db6:	9b07      	ldrlt	r3, [sp, #28]
 8004db8:	9607      	strlt	r6, [sp, #28]
 8004dba:	1af2      	sublt	r2, r6, r3
 8004dbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004dbe:	bfb6      	itet	lt
 8004dc0:	189b      	addlt	r3, r3, r2
 8004dc2:	1b9e      	subge	r6, r3, r6
 8004dc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	bfb8      	it	lt
 8004dca:	2600      	movlt	r6, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bfb7      	itett	lt
 8004dd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004dd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004dd8:	1a9d      	sublt	r5, r3, r2
 8004dda:	2300      	movlt	r3, #0
 8004ddc:	e734      	b.n	8004c48 <_dtoa_r+0x720>
 8004dde:	9e07      	ldr	r6, [sp, #28]
 8004de0:	9d04      	ldr	r5, [sp, #16]
 8004de2:	9f08      	ldr	r7, [sp, #32]
 8004de4:	e73b      	b.n	8004c5e <_dtoa_r+0x736>
 8004de6:	9a07      	ldr	r2, [sp, #28]
 8004de8:	e767      	b.n	8004cba <_dtoa_r+0x792>
 8004dea:	9b06      	ldr	r3, [sp, #24]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	dc18      	bgt.n	8004e22 <_dtoa_r+0x8fa>
 8004df0:	f1ba 0f00 	cmp.w	sl, #0
 8004df4:	d115      	bne.n	8004e22 <_dtoa_r+0x8fa>
 8004df6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004dfa:	b993      	cbnz	r3, 8004e22 <_dtoa_r+0x8fa>
 8004dfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e00:	0d1b      	lsrs	r3, r3, #20
 8004e02:	051b      	lsls	r3, r3, #20
 8004e04:	b183      	cbz	r3, 8004e28 <_dtoa_r+0x900>
 8004e06:	9b04      	ldr	r3, [sp, #16]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	9b05      	ldr	r3, [sp, #20]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	f04f 0801 	mov.w	r8, #1
 8004e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f47f af6a 	bne.w	8004cf2 <_dtoa_r+0x7ca>
 8004e1e:	2001      	movs	r0, #1
 8004e20:	e76f      	b.n	8004d02 <_dtoa_r+0x7da>
 8004e22:	f04f 0800 	mov.w	r8, #0
 8004e26:	e7f6      	b.n	8004e16 <_dtoa_r+0x8ee>
 8004e28:	4698      	mov	r8, r3
 8004e2a:	e7f4      	b.n	8004e16 <_dtoa_r+0x8ee>
 8004e2c:	f43f af7d 	beq.w	8004d2a <_dtoa_r+0x802>
 8004e30:	4618      	mov	r0, r3
 8004e32:	301c      	adds	r0, #28
 8004e34:	e772      	b.n	8004d1c <_dtoa_r+0x7f4>
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	dc37      	bgt.n	8004eac <_dtoa_r+0x984>
 8004e3c:	9b06      	ldr	r3, [sp, #24]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	dd34      	ble.n	8004eac <_dtoa_r+0x984>
 8004e42:	9b03      	ldr	r3, [sp, #12]
 8004e44:	9302      	str	r3, [sp, #8]
 8004e46:	9b02      	ldr	r3, [sp, #8]
 8004e48:	b96b      	cbnz	r3, 8004e66 <_dtoa_r+0x93e>
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	2205      	movs	r2, #5
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 f9d4 	bl	80051fc <__multadd>
 8004e54:	4601      	mov	r1, r0
 8004e56:	4606      	mov	r6, r0
 8004e58:	ee18 0a10 	vmov	r0, s16
 8004e5c:	f000 fbee 	bl	800563c <__mcmp>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	f73f adbb 	bgt.w	80049dc <_dtoa_r+0x4b4>
 8004e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e68:	9d01      	ldr	r5, [sp, #4]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	f04f 0800 	mov.w	r8, #0
 8004e72:	4631      	mov	r1, r6
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 f99f 	bl	80051b8 <_Bfree>
 8004e7a:	2f00      	cmp	r7, #0
 8004e7c:	f43f aea4 	beq.w	8004bc8 <_dtoa_r+0x6a0>
 8004e80:	f1b8 0f00 	cmp.w	r8, #0
 8004e84:	d005      	beq.n	8004e92 <_dtoa_r+0x96a>
 8004e86:	45b8      	cmp	r8, r7
 8004e88:	d003      	beq.n	8004e92 <_dtoa_r+0x96a>
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 f993 	bl	80051b8 <_Bfree>
 8004e92:	4639      	mov	r1, r7
 8004e94:	4620      	mov	r0, r4
 8004e96:	f000 f98f 	bl	80051b8 <_Bfree>
 8004e9a:	e695      	b.n	8004bc8 <_dtoa_r+0x6a0>
 8004e9c:	2600      	movs	r6, #0
 8004e9e:	4637      	mov	r7, r6
 8004ea0:	e7e1      	b.n	8004e66 <_dtoa_r+0x93e>
 8004ea2:	9700      	str	r7, [sp, #0]
 8004ea4:	4637      	mov	r7, r6
 8004ea6:	e599      	b.n	80049dc <_dtoa_r+0x4b4>
 8004ea8:	40240000 	.word	0x40240000
 8004eac:	9b08      	ldr	r3, [sp, #32]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80ca 	beq.w	8005048 <_dtoa_r+0xb20>
 8004eb4:	9b03      	ldr	r3, [sp, #12]
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	2d00      	cmp	r5, #0
 8004eba:	dd05      	ble.n	8004ec8 <_dtoa_r+0x9a0>
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 fb4b 	bl	800555c <__lshift>
 8004ec6:	4607      	mov	r7, r0
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	d05b      	beq.n	8004f86 <_dtoa_r+0xa5e>
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 f931 	bl	8005138 <_Balloc>
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	b928      	cbnz	r0, 8004ee6 <_dtoa_r+0x9be>
 8004eda:	4b87      	ldr	r3, [pc, #540]	; (80050f8 <_dtoa_r+0xbd0>)
 8004edc:	4602      	mov	r2, r0
 8004ede:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ee2:	f7ff bb3b 	b.w	800455c <_dtoa_r+0x34>
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	3202      	adds	r2, #2
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	f107 010c 	add.w	r1, r7, #12
 8004ef0:	300c      	adds	r0, #12
 8004ef2:	f000 f913 	bl	800511c <memcpy>
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 fb2e 	bl	800555c <__lshift>
 8004f00:	9b01      	ldr	r3, [sp, #4]
 8004f02:	f103 0901 	add.w	r9, r3, #1
 8004f06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	9305      	str	r3, [sp, #20]
 8004f0e:	f00a 0301 	and.w	r3, sl, #1
 8004f12:	46b8      	mov	r8, r7
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	4607      	mov	r7, r0
 8004f18:	4631      	mov	r1, r6
 8004f1a:	ee18 0a10 	vmov	r0, s16
 8004f1e:	f7ff fa77 	bl	8004410 <quorem>
 8004f22:	4641      	mov	r1, r8
 8004f24:	9002      	str	r0, [sp, #8]
 8004f26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004f2a:	ee18 0a10 	vmov	r0, s16
 8004f2e:	f000 fb85 	bl	800563c <__mcmp>
 8004f32:	463a      	mov	r2, r7
 8004f34:	9003      	str	r0, [sp, #12]
 8004f36:	4631      	mov	r1, r6
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 fb9b 	bl	8005674 <__mdiff>
 8004f3e:	68c2      	ldr	r2, [r0, #12]
 8004f40:	f109 3bff 	add.w	fp, r9, #4294967295
 8004f44:	4605      	mov	r5, r0
 8004f46:	bb02      	cbnz	r2, 8004f8a <_dtoa_r+0xa62>
 8004f48:	4601      	mov	r1, r0
 8004f4a:	ee18 0a10 	vmov	r0, s16
 8004f4e:	f000 fb75 	bl	800563c <__mcmp>
 8004f52:	4602      	mov	r2, r0
 8004f54:	4629      	mov	r1, r5
 8004f56:	4620      	mov	r0, r4
 8004f58:	9207      	str	r2, [sp, #28]
 8004f5a:	f000 f92d 	bl	80051b8 <_Bfree>
 8004f5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004f62:	ea43 0102 	orr.w	r1, r3, r2
 8004f66:	9b04      	ldr	r3, [sp, #16]
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	464d      	mov	r5, r9
 8004f6c:	d10f      	bne.n	8004f8e <_dtoa_r+0xa66>
 8004f6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f72:	d02a      	beq.n	8004fca <_dtoa_r+0xaa2>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dd02      	ble.n	8004f80 <_dtoa_r+0xa58>
 8004f7a:	9b02      	ldr	r3, [sp, #8]
 8004f7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004f80:	f88b a000 	strb.w	sl, [fp]
 8004f84:	e775      	b.n	8004e72 <_dtoa_r+0x94a>
 8004f86:	4638      	mov	r0, r7
 8004f88:	e7ba      	b.n	8004f00 <_dtoa_r+0x9d8>
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	e7e2      	b.n	8004f54 <_dtoa_r+0xa2c>
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	db04      	blt.n	8004f9e <_dtoa_r+0xa76>
 8004f94:	9906      	ldr	r1, [sp, #24]
 8004f96:	430b      	orrs	r3, r1
 8004f98:	9904      	ldr	r1, [sp, #16]
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	d122      	bne.n	8004fe4 <_dtoa_r+0xabc>
 8004f9e:	2a00      	cmp	r2, #0
 8004fa0:	ddee      	ble.n	8004f80 <_dtoa_r+0xa58>
 8004fa2:	ee18 1a10 	vmov	r1, s16
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 fad7 	bl	800555c <__lshift>
 8004fae:	4631      	mov	r1, r6
 8004fb0:	ee08 0a10 	vmov	s16, r0
 8004fb4:	f000 fb42 	bl	800563c <__mcmp>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	dc03      	bgt.n	8004fc4 <_dtoa_r+0xa9c>
 8004fbc:	d1e0      	bne.n	8004f80 <_dtoa_r+0xa58>
 8004fbe:	f01a 0f01 	tst.w	sl, #1
 8004fc2:	d0dd      	beq.n	8004f80 <_dtoa_r+0xa58>
 8004fc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004fc8:	d1d7      	bne.n	8004f7a <_dtoa_r+0xa52>
 8004fca:	2339      	movs	r3, #57	; 0x39
 8004fcc:	f88b 3000 	strb.w	r3, [fp]
 8004fd0:	462b      	mov	r3, r5
 8004fd2:	461d      	mov	r5, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004fda:	2a39      	cmp	r2, #57	; 0x39
 8004fdc:	d071      	beq.n	80050c2 <_dtoa_r+0xb9a>
 8004fde:	3201      	adds	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e746      	b.n	8004e72 <_dtoa_r+0x94a>
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	dd07      	ble.n	8004ff8 <_dtoa_r+0xad0>
 8004fe8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004fec:	d0ed      	beq.n	8004fca <_dtoa_r+0xaa2>
 8004fee:	f10a 0301 	add.w	r3, sl, #1
 8004ff2:	f88b 3000 	strb.w	r3, [fp]
 8004ff6:	e73c      	b.n	8004e72 <_dtoa_r+0x94a>
 8004ff8:	9b05      	ldr	r3, [sp, #20]
 8004ffa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004ffe:	4599      	cmp	r9, r3
 8005000:	d047      	beq.n	8005092 <_dtoa_r+0xb6a>
 8005002:	ee18 1a10 	vmov	r1, s16
 8005006:	2300      	movs	r3, #0
 8005008:	220a      	movs	r2, #10
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f8f6 	bl	80051fc <__multadd>
 8005010:	45b8      	cmp	r8, r7
 8005012:	ee08 0a10 	vmov	s16, r0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	f04f 020a 	mov.w	r2, #10
 800501e:	4641      	mov	r1, r8
 8005020:	4620      	mov	r0, r4
 8005022:	d106      	bne.n	8005032 <_dtoa_r+0xb0a>
 8005024:	f000 f8ea 	bl	80051fc <__multadd>
 8005028:	4680      	mov	r8, r0
 800502a:	4607      	mov	r7, r0
 800502c:	f109 0901 	add.w	r9, r9, #1
 8005030:	e772      	b.n	8004f18 <_dtoa_r+0x9f0>
 8005032:	f000 f8e3 	bl	80051fc <__multadd>
 8005036:	4639      	mov	r1, r7
 8005038:	4680      	mov	r8, r0
 800503a:	2300      	movs	r3, #0
 800503c:	220a      	movs	r2, #10
 800503e:	4620      	mov	r0, r4
 8005040:	f000 f8dc 	bl	80051fc <__multadd>
 8005044:	4607      	mov	r7, r0
 8005046:	e7f1      	b.n	800502c <_dtoa_r+0xb04>
 8005048:	9b03      	ldr	r3, [sp, #12]
 800504a:	9302      	str	r3, [sp, #8]
 800504c:	9d01      	ldr	r5, [sp, #4]
 800504e:	ee18 0a10 	vmov	r0, s16
 8005052:	4631      	mov	r1, r6
 8005054:	f7ff f9dc 	bl	8004410 <quorem>
 8005058:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800505c:	9b01      	ldr	r3, [sp, #4]
 800505e:	f805 ab01 	strb.w	sl, [r5], #1
 8005062:	1aea      	subs	r2, r5, r3
 8005064:	9b02      	ldr	r3, [sp, #8]
 8005066:	4293      	cmp	r3, r2
 8005068:	dd09      	ble.n	800507e <_dtoa_r+0xb56>
 800506a:	ee18 1a10 	vmov	r1, s16
 800506e:	2300      	movs	r3, #0
 8005070:	220a      	movs	r2, #10
 8005072:	4620      	mov	r0, r4
 8005074:	f000 f8c2 	bl	80051fc <__multadd>
 8005078:	ee08 0a10 	vmov	s16, r0
 800507c:	e7e7      	b.n	800504e <_dtoa_r+0xb26>
 800507e:	9b02      	ldr	r3, [sp, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	bfc8      	it	gt
 8005084:	461d      	movgt	r5, r3
 8005086:	9b01      	ldr	r3, [sp, #4]
 8005088:	bfd8      	it	le
 800508a:	2501      	movle	r5, #1
 800508c:	441d      	add	r5, r3
 800508e:	f04f 0800 	mov.w	r8, #0
 8005092:	ee18 1a10 	vmov	r1, s16
 8005096:	2201      	movs	r2, #1
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fa5f 	bl	800555c <__lshift>
 800509e:	4631      	mov	r1, r6
 80050a0:	ee08 0a10 	vmov	s16, r0
 80050a4:	f000 faca 	bl	800563c <__mcmp>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	dc91      	bgt.n	8004fd0 <_dtoa_r+0xaa8>
 80050ac:	d102      	bne.n	80050b4 <_dtoa_r+0xb8c>
 80050ae:	f01a 0f01 	tst.w	sl, #1
 80050b2:	d18d      	bne.n	8004fd0 <_dtoa_r+0xaa8>
 80050b4:	462b      	mov	r3, r5
 80050b6:	461d      	mov	r5, r3
 80050b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050bc:	2a30      	cmp	r2, #48	; 0x30
 80050be:	d0fa      	beq.n	80050b6 <_dtoa_r+0xb8e>
 80050c0:	e6d7      	b.n	8004e72 <_dtoa_r+0x94a>
 80050c2:	9a01      	ldr	r2, [sp, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d184      	bne.n	8004fd2 <_dtoa_r+0xaaa>
 80050c8:	9b00      	ldr	r3, [sp, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2331      	movs	r3, #49	; 0x31
 80050d0:	7013      	strb	r3, [r2, #0]
 80050d2:	e6ce      	b.n	8004e72 <_dtoa_r+0x94a>
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <_dtoa_r+0xbd4>)
 80050d6:	f7ff ba95 	b.w	8004604 <_dtoa_r+0xdc>
 80050da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f47f aa6e 	bne.w	80045be <_dtoa_r+0x96>
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <_dtoa_r+0xbd8>)
 80050e4:	f7ff ba8e 	b.w	8004604 <_dtoa_r+0xdc>
 80050e8:	9b02      	ldr	r3, [sp, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	dcae      	bgt.n	800504c <_dtoa_r+0xb24>
 80050ee:	9b06      	ldr	r3, [sp, #24]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	f73f aea8 	bgt.w	8004e46 <_dtoa_r+0x91e>
 80050f6:	e7a9      	b.n	800504c <_dtoa_r+0xb24>
 80050f8:	08007d57 	.word	0x08007d57
 80050fc:	08007cb4 	.word	0x08007cb4
 8005100:	08007cd8 	.word	0x08007cd8

08005104 <_localeconv_r>:
 8005104:	4800      	ldr	r0, [pc, #0]	; (8005108 <_localeconv_r+0x4>)
 8005106:	4770      	bx	lr
 8005108:	20000164 	.word	0x20000164

0800510c <malloc>:
 800510c:	4b02      	ldr	r3, [pc, #8]	; (8005118 <malloc+0xc>)
 800510e:	4601      	mov	r1, r0
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	f000 bc17 	b.w	8005944 <_malloc_r>
 8005116:	bf00      	nop
 8005118:	20000010 	.word	0x20000010

0800511c <memcpy>:
 800511c:	440a      	add	r2, r1
 800511e:	4291      	cmp	r1, r2
 8005120:	f100 33ff 	add.w	r3, r0, #4294967295
 8005124:	d100      	bne.n	8005128 <memcpy+0xc>
 8005126:	4770      	bx	lr
 8005128:	b510      	push	{r4, lr}
 800512a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800512e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005132:	4291      	cmp	r1, r2
 8005134:	d1f9      	bne.n	800512a <memcpy+0xe>
 8005136:	bd10      	pop	{r4, pc}

08005138 <_Balloc>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800513c:	4604      	mov	r4, r0
 800513e:	460d      	mov	r5, r1
 8005140:	b976      	cbnz	r6, 8005160 <_Balloc+0x28>
 8005142:	2010      	movs	r0, #16
 8005144:	f7ff ffe2 	bl	800510c <malloc>
 8005148:	4602      	mov	r2, r0
 800514a:	6260      	str	r0, [r4, #36]	; 0x24
 800514c:	b920      	cbnz	r0, 8005158 <_Balloc+0x20>
 800514e:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <_Balloc+0x78>)
 8005150:	4818      	ldr	r0, [pc, #96]	; (80051b4 <_Balloc+0x7c>)
 8005152:	2166      	movs	r1, #102	; 0x66
 8005154:	f000 fc7a 	bl	8005a4c <__assert_func>
 8005158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800515c:	6006      	str	r6, [r0, #0]
 800515e:	60c6      	str	r6, [r0, #12]
 8005160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005162:	68f3      	ldr	r3, [r6, #12]
 8005164:	b183      	cbz	r3, 8005188 <_Balloc+0x50>
 8005166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800516e:	b9b8      	cbnz	r0, 80051a0 <_Balloc+0x68>
 8005170:	2101      	movs	r1, #1
 8005172:	fa01 f605 	lsl.w	r6, r1, r5
 8005176:	1d72      	adds	r2, r6, #5
 8005178:	0092      	lsls	r2, r2, #2
 800517a:	4620      	mov	r0, r4
 800517c:	f000 fb60 	bl	8005840 <_calloc_r>
 8005180:	b160      	cbz	r0, 800519c <_Balloc+0x64>
 8005182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005186:	e00e      	b.n	80051a6 <_Balloc+0x6e>
 8005188:	2221      	movs	r2, #33	; 0x21
 800518a:	2104      	movs	r1, #4
 800518c:	4620      	mov	r0, r4
 800518e:	f000 fb57 	bl	8005840 <_calloc_r>
 8005192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005194:	60f0      	str	r0, [r6, #12]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e4      	bne.n	8005166 <_Balloc+0x2e>
 800519c:	2000      	movs	r0, #0
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	6802      	ldr	r2, [r0, #0]
 80051a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80051a6:	2300      	movs	r3, #0
 80051a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051ac:	e7f7      	b.n	800519e <_Balloc+0x66>
 80051ae:	bf00      	nop
 80051b0:	08007ce5 	.word	0x08007ce5
 80051b4:	08007d68 	.word	0x08007d68

080051b8 <_Bfree>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051bc:	4605      	mov	r5, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	b976      	cbnz	r6, 80051e0 <_Bfree+0x28>
 80051c2:	2010      	movs	r0, #16
 80051c4:	f7ff ffa2 	bl	800510c <malloc>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6268      	str	r0, [r5, #36]	; 0x24
 80051cc:	b920      	cbnz	r0, 80051d8 <_Bfree+0x20>
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <_Bfree+0x3c>)
 80051d0:	4809      	ldr	r0, [pc, #36]	; (80051f8 <_Bfree+0x40>)
 80051d2:	218a      	movs	r1, #138	; 0x8a
 80051d4:	f000 fc3a 	bl	8005a4c <__assert_func>
 80051d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051dc:	6006      	str	r6, [r0, #0]
 80051de:	60c6      	str	r6, [r0, #12]
 80051e0:	b13c      	cbz	r4, 80051f2 <_Bfree+0x3a>
 80051e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051e4:	6862      	ldr	r2, [r4, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051ec:	6021      	str	r1, [r4, #0]
 80051ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	08007ce5 	.word	0x08007ce5
 80051f8:	08007d68 	.word	0x08007d68

080051fc <__multadd>:
 80051fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005200:	690d      	ldr	r5, [r1, #16]
 8005202:	4607      	mov	r7, r0
 8005204:	460c      	mov	r4, r1
 8005206:	461e      	mov	r6, r3
 8005208:	f101 0c14 	add.w	ip, r1, #20
 800520c:	2000      	movs	r0, #0
 800520e:	f8dc 3000 	ldr.w	r3, [ip]
 8005212:	b299      	uxth	r1, r3
 8005214:	fb02 6101 	mla	r1, r2, r1, r6
 8005218:	0c1e      	lsrs	r6, r3, #16
 800521a:	0c0b      	lsrs	r3, r1, #16
 800521c:	fb02 3306 	mla	r3, r2, r6, r3
 8005220:	b289      	uxth	r1, r1
 8005222:	3001      	adds	r0, #1
 8005224:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005228:	4285      	cmp	r5, r0
 800522a:	f84c 1b04 	str.w	r1, [ip], #4
 800522e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005232:	dcec      	bgt.n	800520e <__multadd+0x12>
 8005234:	b30e      	cbz	r6, 800527a <__multadd+0x7e>
 8005236:	68a3      	ldr	r3, [r4, #8]
 8005238:	42ab      	cmp	r3, r5
 800523a:	dc19      	bgt.n	8005270 <__multadd+0x74>
 800523c:	6861      	ldr	r1, [r4, #4]
 800523e:	4638      	mov	r0, r7
 8005240:	3101      	adds	r1, #1
 8005242:	f7ff ff79 	bl	8005138 <_Balloc>
 8005246:	4680      	mov	r8, r0
 8005248:	b928      	cbnz	r0, 8005256 <__multadd+0x5a>
 800524a:	4602      	mov	r2, r0
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <__multadd+0x84>)
 800524e:	480d      	ldr	r0, [pc, #52]	; (8005284 <__multadd+0x88>)
 8005250:	21b5      	movs	r1, #181	; 0xb5
 8005252:	f000 fbfb 	bl	8005a4c <__assert_func>
 8005256:	6922      	ldr	r2, [r4, #16]
 8005258:	3202      	adds	r2, #2
 800525a:	f104 010c 	add.w	r1, r4, #12
 800525e:	0092      	lsls	r2, r2, #2
 8005260:	300c      	adds	r0, #12
 8005262:	f7ff ff5b 	bl	800511c <memcpy>
 8005266:	4621      	mov	r1, r4
 8005268:	4638      	mov	r0, r7
 800526a:	f7ff ffa5 	bl	80051b8 <_Bfree>
 800526e:	4644      	mov	r4, r8
 8005270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005274:	3501      	adds	r5, #1
 8005276:	615e      	str	r6, [r3, #20]
 8005278:	6125      	str	r5, [r4, #16]
 800527a:	4620      	mov	r0, r4
 800527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005280:	08007d57 	.word	0x08007d57
 8005284:	08007d68 	.word	0x08007d68

08005288 <__hi0bits>:
 8005288:	0c03      	lsrs	r3, r0, #16
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	b9d3      	cbnz	r3, 80052c4 <__hi0bits+0x3c>
 800528e:	0400      	lsls	r0, r0, #16
 8005290:	2310      	movs	r3, #16
 8005292:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005296:	bf04      	itt	eq
 8005298:	0200      	lsleq	r0, r0, #8
 800529a:	3308      	addeq	r3, #8
 800529c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80052a0:	bf04      	itt	eq
 80052a2:	0100      	lsleq	r0, r0, #4
 80052a4:	3304      	addeq	r3, #4
 80052a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80052aa:	bf04      	itt	eq
 80052ac:	0080      	lsleq	r0, r0, #2
 80052ae:	3302      	addeq	r3, #2
 80052b0:	2800      	cmp	r0, #0
 80052b2:	db05      	blt.n	80052c0 <__hi0bits+0x38>
 80052b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80052b8:	f103 0301 	add.w	r3, r3, #1
 80052bc:	bf08      	it	eq
 80052be:	2320      	moveq	r3, #32
 80052c0:	4618      	mov	r0, r3
 80052c2:	4770      	bx	lr
 80052c4:	2300      	movs	r3, #0
 80052c6:	e7e4      	b.n	8005292 <__hi0bits+0xa>

080052c8 <__lo0bits>:
 80052c8:	6803      	ldr	r3, [r0, #0]
 80052ca:	f013 0207 	ands.w	r2, r3, #7
 80052ce:	4601      	mov	r1, r0
 80052d0:	d00b      	beq.n	80052ea <__lo0bits+0x22>
 80052d2:	07da      	lsls	r2, r3, #31
 80052d4:	d423      	bmi.n	800531e <__lo0bits+0x56>
 80052d6:	0798      	lsls	r0, r3, #30
 80052d8:	bf49      	itett	mi
 80052da:	085b      	lsrmi	r3, r3, #1
 80052dc:	089b      	lsrpl	r3, r3, #2
 80052de:	2001      	movmi	r0, #1
 80052e0:	600b      	strmi	r3, [r1, #0]
 80052e2:	bf5c      	itt	pl
 80052e4:	600b      	strpl	r3, [r1, #0]
 80052e6:	2002      	movpl	r0, #2
 80052e8:	4770      	bx	lr
 80052ea:	b298      	uxth	r0, r3
 80052ec:	b9a8      	cbnz	r0, 800531a <__lo0bits+0x52>
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	2010      	movs	r0, #16
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	b90a      	cbnz	r2, 80052fa <__lo0bits+0x32>
 80052f6:	3008      	adds	r0, #8
 80052f8:	0a1b      	lsrs	r3, r3, #8
 80052fa:	071a      	lsls	r2, r3, #28
 80052fc:	bf04      	itt	eq
 80052fe:	091b      	lsreq	r3, r3, #4
 8005300:	3004      	addeq	r0, #4
 8005302:	079a      	lsls	r2, r3, #30
 8005304:	bf04      	itt	eq
 8005306:	089b      	lsreq	r3, r3, #2
 8005308:	3002      	addeq	r0, #2
 800530a:	07da      	lsls	r2, r3, #31
 800530c:	d403      	bmi.n	8005316 <__lo0bits+0x4e>
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	f100 0001 	add.w	r0, r0, #1
 8005314:	d005      	beq.n	8005322 <__lo0bits+0x5a>
 8005316:	600b      	str	r3, [r1, #0]
 8005318:	4770      	bx	lr
 800531a:	4610      	mov	r0, r2
 800531c:	e7e9      	b.n	80052f2 <__lo0bits+0x2a>
 800531e:	2000      	movs	r0, #0
 8005320:	4770      	bx	lr
 8005322:	2020      	movs	r0, #32
 8005324:	4770      	bx	lr
	...

08005328 <__i2b>:
 8005328:	b510      	push	{r4, lr}
 800532a:	460c      	mov	r4, r1
 800532c:	2101      	movs	r1, #1
 800532e:	f7ff ff03 	bl	8005138 <_Balloc>
 8005332:	4602      	mov	r2, r0
 8005334:	b928      	cbnz	r0, 8005342 <__i2b+0x1a>
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <__i2b+0x24>)
 8005338:	4805      	ldr	r0, [pc, #20]	; (8005350 <__i2b+0x28>)
 800533a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800533e:	f000 fb85 	bl	8005a4c <__assert_func>
 8005342:	2301      	movs	r3, #1
 8005344:	6144      	str	r4, [r0, #20]
 8005346:	6103      	str	r3, [r0, #16]
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	08007d57 	.word	0x08007d57
 8005350:	08007d68 	.word	0x08007d68

08005354 <__multiply>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4691      	mov	r9, r2
 800535a:	690a      	ldr	r2, [r1, #16]
 800535c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005360:	429a      	cmp	r2, r3
 8005362:	bfb8      	it	lt
 8005364:	460b      	movlt	r3, r1
 8005366:	460c      	mov	r4, r1
 8005368:	bfbc      	itt	lt
 800536a:	464c      	movlt	r4, r9
 800536c:	4699      	movlt	r9, r3
 800536e:	6927      	ldr	r7, [r4, #16]
 8005370:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	6861      	ldr	r1, [r4, #4]
 8005378:	eb07 060a 	add.w	r6, r7, sl
 800537c:	42b3      	cmp	r3, r6
 800537e:	b085      	sub	sp, #20
 8005380:	bfb8      	it	lt
 8005382:	3101      	addlt	r1, #1
 8005384:	f7ff fed8 	bl	8005138 <_Balloc>
 8005388:	b930      	cbnz	r0, 8005398 <__multiply+0x44>
 800538a:	4602      	mov	r2, r0
 800538c:	4b44      	ldr	r3, [pc, #272]	; (80054a0 <__multiply+0x14c>)
 800538e:	4845      	ldr	r0, [pc, #276]	; (80054a4 <__multiply+0x150>)
 8005390:	f240 115d 	movw	r1, #349	; 0x15d
 8005394:	f000 fb5a 	bl	8005a4c <__assert_func>
 8005398:	f100 0514 	add.w	r5, r0, #20
 800539c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053a0:	462b      	mov	r3, r5
 80053a2:	2200      	movs	r2, #0
 80053a4:	4543      	cmp	r3, r8
 80053a6:	d321      	bcc.n	80053ec <__multiply+0x98>
 80053a8:	f104 0314 	add.w	r3, r4, #20
 80053ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80053b0:	f109 0314 	add.w	r3, r9, #20
 80053b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80053b8:	9202      	str	r2, [sp, #8]
 80053ba:	1b3a      	subs	r2, r7, r4
 80053bc:	3a15      	subs	r2, #21
 80053be:	f022 0203 	bic.w	r2, r2, #3
 80053c2:	3204      	adds	r2, #4
 80053c4:	f104 0115 	add.w	r1, r4, #21
 80053c8:	428f      	cmp	r7, r1
 80053ca:	bf38      	it	cc
 80053cc:	2204      	movcc	r2, #4
 80053ce:	9201      	str	r2, [sp, #4]
 80053d0:	9a02      	ldr	r2, [sp, #8]
 80053d2:	9303      	str	r3, [sp, #12]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d80c      	bhi.n	80053f2 <__multiply+0x9e>
 80053d8:	2e00      	cmp	r6, #0
 80053da:	dd03      	ble.n	80053e4 <__multiply+0x90>
 80053dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05a      	beq.n	800549a <__multiply+0x146>
 80053e4:	6106      	str	r6, [r0, #16]
 80053e6:	b005      	add	sp, #20
 80053e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ec:	f843 2b04 	str.w	r2, [r3], #4
 80053f0:	e7d8      	b.n	80053a4 <__multiply+0x50>
 80053f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80053f6:	f1ba 0f00 	cmp.w	sl, #0
 80053fa:	d024      	beq.n	8005446 <__multiply+0xf2>
 80053fc:	f104 0e14 	add.w	lr, r4, #20
 8005400:	46a9      	mov	r9, r5
 8005402:	f04f 0c00 	mov.w	ip, #0
 8005406:	f85e 2b04 	ldr.w	r2, [lr], #4
 800540a:	f8d9 1000 	ldr.w	r1, [r9]
 800540e:	fa1f fb82 	uxth.w	fp, r2
 8005412:	b289      	uxth	r1, r1
 8005414:	fb0a 110b 	mla	r1, sl, fp, r1
 8005418:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800541c:	f8d9 2000 	ldr.w	r2, [r9]
 8005420:	4461      	add	r1, ip
 8005422:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005426:	fb0a c20b 	mla	r2, sl, fp, ip
 800542a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800542e:	b289      	uxth	r1, r1
 8005430:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005434:	4577      	cmp	r7, lr
 8005436:	f849 1b04 	str.w	r1, [r9], #4
 800543a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800543e:	d8e2      	bhi.n	8005406 <__multiply+0xb2>
 8005440:	9a01      	ldr	r2, [sp, #4]
 8005442:	f845 c002 	str.w	ip, [r5, r2]
 8005446:	9a03      	ldr	r2, [sp, #12]
 8005448:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800544c:	3304      	adds	r3, #4
 800544e:	f1b9 0f00 	cmp.w	r9, #0
 8005452:	d020      	beq.n	8005496 <__multiply+0x142>
 8005454:	6829      	ldr	r1, [r5, #0]
 8005456:	f104 0c14 	add.w	ip, r4, #20
 800545a:	46ae      	mov	lr, r5
 800545c:	f04f 0a00 	mov.w	sl, #0
 8005460:	f8bc b000 	ldrh.w	fp, [ip]
 8005464:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005468:	fb09 220b 	mla	r2, r9, fp, r2
 800546c:	4492      	add	sl, r2
 800546e:	b289      	uxth	r1, r1
 8005470:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005474:	f84e 1b04 	str.w	r1, [lr], #4
 8005478:	f85c 2b04 	ldr.w	r2, [ip], #4
 800547c:	f8be 1000 	ldrh.w	r1, [lr]
 8005480:	0c12      	lsrs	r2, r2, #16
 8005482:	fb09 1102 	mla	r1, r9, r2, r1
 8005486:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800548a:	4567      	cmp	r7, ip
 800548c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005490:	d8e6      	bhi.n	8005460 <__multiply+0x10c>
 8005492:	9a01      	ldr	r2, [sp, #4]
 8005494:	50a9      	str	r1, [r5, r2]
 8005496:	3504      	adds	r5, #4
 8005498:	e79a      	b.n	80053d0 <__multiply+0x7c>
 800549a:	3e01      	subs	r6, #1
 800549c:	e79c      	b.n	80053d8 <__multiply+0x84>
 800549e:	bf00      	nop
 80054a0:	08007d57 	.word	0x08007d57
 80054a4:	08007d68 	.word	0x08007d68

080054a8 <__pow5mult>:
 80054a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ac:	4615      	mov	r5, r2
 80054ae:	f012 0203 	ands.w	r2, r2, #3
 80054b2:	4606      	mov	r6, r0
 80054b4:	460f      	mov	r7, r1
 80054b6:	d007      	beq.n	80054c8 <__pow5mult+0x20>
 80054b8:	4c25      	ldr	r4, [pc, #148]	; (8005550 <__pow5mult+0xa8>)
 80054ba:	3a01      	subs	r2, #1
 80054bc:	2300      	movs	r3, #0
 80054be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054c2:	f7ff fe9b 	bl	80051fc <__multadd>
 80054c6:	4607      	mov	r7, r0
 80054c8:	10ad      	asrs	r5, r5, #2
 80054ca:	d03d      	beq.n	8005548 <__pow5mult+0xa0>
 80054cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80054ce:	b97c      	cbnz	r4, 80054f0 <__pow5mult+0x48>
 80054d0:	2010      	movs	r0, #16
 80054d2:	f7ff fe1b 	bl	800510c <malloc>
 80054d6:	4602      	mov	r2, r0
 80054d8:	6270      	str	r0, [r6, #36]	; 0x24
 80054da:	b928      	cbnz	r0, 80054e8 <__pow5mult+0x40>
 80054dc:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <__pow5mult+0xac>)
 80054de:	481e      	ldr	r0, [pc, #120]	; (8005558 <__pow5mult+0xb0>)
 80054e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80054e4:	f000 fab2 	bl	8005a4c <__assert_func>
 80054e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054ec:	6004      	str	r4, [r0, #0]
 80054ee:	60c4      	str	r4, [r0, #12]
 80054f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054f8:	b94c      	cbnz	r4, 800550e <__pow5mult+0x66>
 80054fa:	f240 2171 	movw	r1, #625	; 0x271
 80054fe:	4630      	mov	r0, r6
 8005500:	f7ff ff12 	bl	8005328 <__i2b>
 8005504:	2300      	movs	r3, #0
 8005506:	f8c8 0008 	str.w	r0, [r8, #8]
 800550a:	4604      	mov	r4, r0
 800550c:	6003      	str	r3, [r0, #0]
 800550e:	f04f 0900 	mov.w	r9, #0
 8005512:	07eb      	lsls	r3, r5, #31
 8005514:	d50a      	bpl.n	800552c <__pow5mult+0x84>
 8005516:	4639      	mov	r1, r7
 8005518:	4622      	mov	r2, r4
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ff1a 	bl	8005354 <__multiply>
 8005520:	4639      	mov	r1, r7
 8005522:	4680      	mov	r8, r0
 8005524:	4630      	mov	r0, r6
 8005526:	f7ff fe47 	bl	80051b8 <_Bfree>
 800552a:	4647      	mov	r7, r8
 800552c:	106d      	asrs	r5, r5, #1
 800552e:	d00b      	beq.n	8005548 <__pow5mult+0xa0>
 8005530:	6820      	ldr	r0, [r4, #0]
 8005532:	b938      	cbnz	r0, 8005544 <__pow5mult+0x9c>
 8005534:	4622      	mov	r2, r4
 8005536:	4621      	mov	r1, r4
 8005538:	4630      	mov	r0, r6
 800553a:	f7ff ff0b 	bl	8005354 <__multiply>
 800553e:	6020      	str	r0, [r4, #0]
 8005540:	f8c0 9000 	str.w	r9, [r0]
 8005544:	4604      	mov	r4, r0
 8005546:	e7e4      	b.n	8005512 <__pow5mult+0x6a>
 8005548:	4638      	mov	r0, r7
 800554a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554e:	bf00      	nop
 8005550:	08007eb8 	.word	0x08007eb8
 8005554:	08007ce5 	.word	0x08007ce5
 8005558:	08007d68 	.word	0x08007d68

0800555c <__lshift>:
 800555c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005560:	460c      	mov	r4, r1
 8005562:	6849      	ldr	r1, [r1, #4]
 8005564:	6923      	ldr	r3, [r4, #16]
 8005566:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800556a:	68a3      	ldr	r3, [r4, #8]
 800556c:	4607      	mov	r7, r0
 800556e:	4691      	mov	r9, r2
 8005570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005574:	f108 0601 	add.w	r6, r8, #1
 8005578:	42b3      	cmp	r3, r6
 800557a:	db0b      	blt.n	8005594 <__lshift+0x38>
 800557c:	4638      	mov	r0, r7
 800557e:	f7ff fddb 	bl	8005138 <_Balloc>
 8005582:	4605      	mov	r5, r0
 8005584:	b948      	cbnz	r0, 800559a <__lshift+0x3e>
 8005586:	4602      	mov	r2, r0
 8005588:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <__lshift+0xd8>)
 800558a:	482b      	ldr	r0, [pc, #172]	; (8005638 <__lshift+0xdc>)
 800558c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005590:	f000 fa5c 	bl	8005a4c <__assert_func>
 8005594:	3101      	adds	r1, #1
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	e7ee      	b.n	8005578 <__lshift+0x1c>
 800559a:	2300      	movs	r3, #0
 800559c:	f100 0114 	add.w	r1, r0, #20
 80055a0:	f100 0210 	add.w	r2, r0, #16
 80055a4:	4618      	mov	r0, r3
 80055a6:	4553      	cmp	r3, sl
 80055a8:	db37      	blt.n	800561a <__lshift+0xbe>
 80055aa:	6920      	ldr	r0, [r4, #16]
 80055ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055b0:	f104 0314 	add.w	r3, r4, #20
 80055b4:	f019 091f 	ands.w	r9, r9, #31
 80055b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80055c0:	d02f      	beq.n	8005622 <__lshift+0xc6>
 80055c2:	f1c9 0e20 	rsb	lr, r9, #32
 80055c6:	468a      	mov	sl, r1
 80055c8:	f04f 0c00 	mov.w	ip, #0
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	fa02 f209 	lsl.w	r2, r2, r9
 80055d2:	ea42 020c 	orr.w	r2, r2, ip
 80055d6:	f84a 2b04 	str.w	r2, [sl], #4
 80055da:	f853 2b04 	ldr.w	r2, [r3], #4
 80055de:	4298      	cmp	r0, r3
 80055e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80055e4:	d8f2      	bhi.n	80055cc <__lshift+0x70>
 80055e6:	1b03      	subs	r3, r0, r4
 80055e8:	3b15      	subs	r3, #21
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	3304      	adds	r3, #4
 80055f0:	f104 0215 	add.w	r2, r4, #21
 80055f4:	4290      	cmp	r0, r2
 80055f6:	bf38      	it	cc
 80055f8:	2304      	movcc	r3, #4
 80055fa:	f841 c003 	str.w	ip, [r1, r3]
 80055fe:	f1bc 0f00 	cmp.w	ip, #0
 8005602:	d001      	beq.n	8005608 <__lshift+0xac>
 8005604:	f108 0602 	add.w	r6, r8, #2
 8005608:	3e01      	subs	r6, #1
 800560a:	4638      	mov	r0, r7
 800560c:	612e      	str	r6, [r5, #16]
 800560e:	4621      	mov	r1, r4
 8005610:	f7ff fdd2 	bl	80051b8 <_Bfree>
 8005614:	4628      	mov	r0, r5
 8005616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561a:	f842 0f04 	str.w	r0, [r2, #4]!
 800561e:	3301      	adds	r3, #1
 8005620:	e7c1      	b.n	80055a6 <__lshift+0x4a>
 8005622:	3904      	subs	r1, #4
 8005624:	f853 2b04 	ldr.w	r2, [r3], #4
 8005628:	f841 2f04 	str.w	r2, [r1, #4]!
 800562c:	4298      	cmp	r0, r3
 800562e:	d8f9      	bhi.n	8005624 <__lshift+0xc8>
 8005630:	e7ea      	b.n	8005608 <__lshift+0xac>
 8005632:	bf00      	nop
 8005634:	08007d57 	.word	0x08007d57
 8005638:	08007d68 	.word	0x08007d68

0800563c <__mcmp>:
 800563c:	b530      	push	{r4, r5, lr}
 800563e:	6902      	ldr	r2, [r0, #16]
 8005640:	690c      	ldr	r4, [r1, #16]
 8005642:	1b12      	subs	r2, r2, r4
 8005644:	d10e      	bne.n	8005664 <__mcmp+0x28>
 8005646:	f100 0314 	add.w	r3, r0, #20
 800564a:	3114      	adds	r1, #20
 800564c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005650:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005654:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005658:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800565c:	42a5      	cmp	r5, r4
 800565e:	d003      	beq.n	8005668 <__mcmp+0x2c>
 8005660:	d305      	bcc.n	800566e <__mcmp+0x32>
 8005662:	2201      	movs	r2, #1
 8005664:	4610      	mov	r0, r2
 8005666:	bd30      	pop	{r4, r5, pc}
 8005668:	4283      	cmp	r3, r0
 800566a:	d3f3      	bcc.n	8005654 <__mcmp+0x18>
 800566c:	e7fa      	b.n	8005664 <__mcmp+0x28>
 800566e:	f04f 32ff 	mov.w	r2, #4294967295
 8005672:	e7f7      	b.n	8005664 <__mcmp+0x28>

08005674 <__mdiff>:
 8005674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	460c      	mov	r4, r1
 800567a:	4606      	mov	r6, r0
 800567c:	4611      	mov	r1, r2
 800567e:	4620      	mov	r0, r4
 8005680:	4690      	mov	r8, r2
 8005682:	f7ff ffdb 	bl	800563c <__mcmp>
 8005686:	1e05      	subs	r5, r0, #0
 8005688:	d110      	bne.n	80056ac <__mdiff+0x38>
 800568a:	4629      	mov	r1, r5
 800568c:	4630      	mov	r0, r6
 800568e:	f7ff fd53 	bl	8005138 <_Balloc>
 8005692:	b930      	cbnz	r0, 80056a2 <__mdiff+0x2e>
 8005694:	4b3a      	ldr	r3, [pc, #232]	; (8005780 <__mdiff+0x10c>)
 8005696:	4602      	mov	r2, r0
 8005698:	f240 2132 	movw	r1, #562	; 0x232
 800569c:	4839      	ldr	r0, [pc, #228]	; (8005784 <__mdiff+0x110>)
 800569e:	f000 f9d5 	bl	8005a4c <__assert_func>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ac:	bfa4      	itt	ge
 80056ae:	4643      	movge	r3, r8
 80056b0:	46a0      	movge	r8, r4
 80056b2:	4630      	mov	r0, r6
 80056b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80056b8:	bfa6      	itte	ge
 80056ba:	461c      	movge	r4, r3
 80056bc:	2500      	movge	r5, #0
 80056be:	2501      	movlt	r5, #1
 80056c0:	f7ff fd3a 	bl	8005138 <_Balloc>
 80056c4:	b920      	cbnz	r0, 80056d0 <__mdiff+0x5c>
 80056c6:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <__mdiff+0x10c>)
 80056c8:	4602      	mov	r2, r0
 80056ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80056ce:	e7e5      	b.n	800569c <__mdiff+0x28>
 80056d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80056d4:	6926      	ldr	r6, [r4, #16]
 80056d6:	60c5      	str	r5, [r0, #12]
 80056d8:	f104 0914 	add.w	r9, r4, #20
 80056dc:	f108 0514 	add.w	r5, r8, #20
 80056e0:	f100 0e14 	add.w	lr, r0, #20
 80056e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80056e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056ec:	f108 0210 	add.w	r2, r8, #16
 80056f0:	46f2      	mov	sl, lr
 80056f2:	2100      	movs	r1, #0
 80056f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80056f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80056fc:	fa1f f883 	uxth.w	r8, r3
 8005700:	fa11 f18b 	uxtah	r1, r1, fp
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	eba1 0808 	sub.w	r8, r1, r8
 800570a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800570e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005712:	fa1f f888 	uxth.w	r8, r8
 8005716:	1419      	asrs	r1, r3, #16
 8005718:	454e      	cmp	r6, r9
 800571a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800571e:	f84a 3b04 	str.w	r3, [sl], #4
 8005722:	d8e7      	bhi.n	80056f4 <__mdiff+0x80>
 8005724:	1b33      	subs	r3, r6, r4
 8005726:	3b15      	subs	r3, #21
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	3304      	adds	r3, #4
 800572e:	3415      	adds	r4, #21
 8005730:	42a6      	cmp	r6, r4
 8005732:	bf38      	it	cc
 8005734:	2304      	movcc	r3, #4
 8005736:	441d      	add	r5, r3
 8005738:	4473      	add	r3, lr
 800573a:	469e      	mov	lr, r3
 800573c:	462e      	mov	r6, r5
 800573e:	4566      	cmp	r6, ip
 8005740:	d30e      	bcc.n	8005760 <__mdiff+0xec>
 8005742:	f10c 0203 	add.w	r2, ip, #3
 8005746:	1b52      	subs	r2, r2, r5
 8005748:	f022 0203 	bic.w	r2, r2, #3
 800574c:	3d03      	subs	r5, #3
 800574e:	45ac      	cmp	ip, r5
 8005750:	bf38      	it	cc
 8005752:	2200      	movcc	r2, #0
 8005754:	441a      	add	r2, r3
 8005756:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800575a:	b17b      	cbz	r3, 800577c <__mdiff+0x108>
 800575c:	6107      	str	r7, [r0, #16]
 800575e:	e7a3      	b.n	80056a8 <__mdiff+0x34>
 8005760:	f856 8b04 	ldr.w	r8, [r6], #4
 8005764:	fa11 f288 	uxtah	r2, r1, r8
 8005768:	1414      	asrs	r4, r2, #16
 800576a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800576e:	b292      	uxth	r2, r2
 8005770:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005774:	f84e 2b04 	str.w	r2, [lr], #4
 8005778:	1421      	asrs	r1, r4, #16
 800577a:	e7e0      	b.n	800573e <__mdiff+0xca>
 800577c:	3f01      	subs	r7, #1
 800577e:	e7ea      	b.n	8005756 <__mdiff+0xe2>
 8005780:	08007d57 	.word	0x08007d57
 8005784:	08007d68 	.word	0x08007d68

08005788 <__d2b>:
 8005788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800578c:	4689      	mov	r9, r1
 800578e:	2101      	movs	r1, #1
 8005790:	ec57 6b10 	vmov	r6, r7, d0
 8005794:	4690      	mov	r8, r2
 8005796:	f7ff fccf 	bl	8005138 <_Balloc>
 800579a:	4604      	mov	r4, r0
 800579c:	b930      	cbnz	r0, 80057ac <__d2b+0x24>
 800579e:	4602      	mov	r2, r0
 80057a0:	4b25      	ldr	r3, [pc, #148]	; (8005838 <__d2b+0xb0>)
 80057a2:	4826      	ldr	r0, [pc, #152]	; (800583c <__d2b+0xb4>)
 80057a4:	f240 310a 	movw	r1, #778	; 0x30a
 80057a8:	f000 f950 	bl	8005a4c <__assert_func>
 80057ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80057b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80057b4:	bb35      	cbnz	r5, 8005804 <__d2b+0x7c>
 80057b6:	2e00      	cmp	r6, #0
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	d028      	beq.n	800580e <__d2b+0x86>
 80057bc:	4668      	mov	r0, sp
 80057be:	9600      	str	r6, [sp, #0]
 80057c0:	f7ff fd82 	bl	80052c8 <__lo0bits>
 80057c4:	9900      	ldr	r1, [sp, #0]
 80057c6:	b300      	cbz	r0, 800580a <__d2b+0x82>
 80057c8:	9a01      	ldr	r2, [sp, #4]
 80057ca:	f1c0 0320 	rsb	r3, r0, #32
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	430b      	orrs	r3, r1
 80057d4:	40c2      	lsrs	r2, r0
 80057d6:	6163      	str	r3, [r4, #20]
 80057d8:	9201      	str	r2, [sp, #4]
 80057da:	9b01      	ldr	r3, [sp, #4]
 80057dc:	61a3      	str	r3, [r4, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf14      	ite	ne
 80057e2:	2202      	movne	r2, #2
 80057e4:	2201      	moveq	r2, #1
 80057e6:	6122      	str	r2, [r4, #16]
 80057e8:	b1d5      	cbz	r5, 8005820 <__d2b+0x98>
 80057ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80057ee:	4405      	add	r5, r0
 80057f0:	f8c9 5000 	str.w	r5, [r9]
 80057f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057f8:	f8c8 0000 	str.w	r0, [r8]
 80057fc:	4620      	mov	r0, r4
 80057fe:	b003      	add	sp, #12
 8005800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005808:	e7d5      	b.n	80057b6 <__d2b+0x2e>
 800580a:	6161      	str	r1, [r4, #20]
 800580c:	e7e5      	b.n	80057da <__d2b+0x52>
 800580e:	a801      	add	r0, sp, #4
 8005810:	f7ff fd5a 	bl	80052c8 <__lo0bits>
 8005814:	9b01      	ldr	r3, [sp, #4]
 8005816:	6163      	str	r3, [r4, #20]
 8005818:	2201      	movs	r2, #1
 800581a:	6122      	str	r2, [r4, #16]
 800581c:	3020      	adds	r0, #32
 800581e:	e7e3      	b.n	80057e8 <__d2b+0x60>
 8005820:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005824:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005828:	f8c9 0000 	str.w	r0, [r9]
 800582c:	6918      	ldr	r0, [r3, #16]
 800582e:	f7ff fd2b 	bl	8005288 <__hi0bits>
 8005832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005836:	e7df      	b.n	80057f8 <__d2b+0x70>
 8005838:	08007d57 	.word	0x08007d57
 800583c:	08007d68 	.word	0x08007d68

08005840 <_calloc_r>:
 8005840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005842:	fba1 2402 	umull	r2, r4, r1, r2
 8005846:	b94c      	cbnz	r4, 800585c <_calloc_r+0x1c>
 8005848:	4611      	mov	r1, r2
 800584a:	9201      	str	r2, [sp, #4]
 800584c:	f000 f87a 	bl	8005944 <_malloc_r>
 8005850:	9a01      	ldr	r2, [sp, #4]
 8005852:	4605      	mov	r5, r0
 8005854:	b930      	cbnz	r0, 8005864 <_calloc_r+0x24>
 8005856:	4628      	mov	r0, r5
 8005858:	b003      	add	sp, #12
 800585a:	bd30      	pop	{r4, r5, pc}
 800585c:	220c      	movs	r2, #12
 800585e:	6002      	str	r2, [r0, #0]
 8005860:	2500      	movs	r5, #0
 8005862:	e7f8      	b.n	8005856 <_calloc_r+0x16>
 8005864:	4621      	mov	r1, r4
 8005866:	f7fe f961 	bl	8003b2c <memset>
 800586a:	e7f4      	b.n	8005856 <_calloc_r+0x16>

0800586c <_free_r>:
 800586c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800586e:	2900      	cmp	r1, #0
 8005870:	d044      	beq.n	80058fc <_free_r+0x90>
 8005872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005876:	9001      	str	r0, [sp, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f1a1 0404 	sub.w	r4, r1, #4
 800587e:	bfb8      	it	lt
 8005880:	18e4      	addlt	r4, r4, r3
 8005882:	f000 f925 	bl	8005ad0 <__malloc_lock>
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <_free_r+0x94>)
 8005888:	9801      	ldr	r0, [sp, #4]
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	b933      	cbnz	r3, 800589c <_free_r+0x30>
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	b003      	add	sp, #12
 8005894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005898:	f000 b920 	b.w	8005adc <__malloc_unlock>
 800589c:	42a3      	cmp	r3, r4
 800589e:	d908      	bls.n	80058b2 <_free_r+0x46>
 80058a0:	6825      	ldr	r5, [r4, #0]
 80058a2:	1961      	adds	r1, r4, r5
 80058a4:	428b      	cmp	r3, r1
 80058a6:	bf01      	itttt	eq
 80058a8:	6819      	ldreq	r1, [r3, #0]
 80058aa:	685b      	ldreq	r3, [r3, #4]
 80058ac:	1949      	addeq	r1, r1, r5
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	e7ed      	b.n	800588e <_free_r+0x22>
 80058b2:	461a      	mov	r2, r3
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	b10b      	cbz	r3, 80058bc <_free_r+0x50>
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	d9fa      	bls.n	80058b2 <_free_r+0x46>
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	1855      	adds	r5, r2, r1
 80058c0:	42a5      	cmp	r5, r4
 80058c2:	d10b      	bne.n	80058dc <_free_r+0x70>
 80058c4:	6824      	ldr	r4, [r4, #0]
 80058c6:	4421      	add	r1, r4
 80058c8:	1854      	adds	r4, r2, r1
 80058ca:	42a3      	cmp	r3, r4
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	d1e0      	bne.n	8005892 <_free_r+0x26>
 80058d0:	681c      	ldr	r4, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	6053      	str	r3, [r2, #4]
 80058d6:	4421      	add	r1, r4
 80058d8:	6011      	str	r1, [r2, #0]
 80058da:	e7da      	b.n	8005892 <_free_r+0x26>
 80058dc:	d902      	bls.n	80058e4 <_free_r+0x78>
 80058de:	230c      	movs	r3, #12
 80058e0:	6003      	str	r3, [r0, #0]
 80058e2:	e7d6      	b.n	8005892 <_free_r+0x26>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	1961      	adds	r1, r4, r5
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf04      	itt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	bf04      	itt	eq
 80058f4:	1949      	addeq	r1, r1, r5
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	6054      	str	r4, [r2, #4]
 80058fa:	e7ca      	b.n	8005892 <_free_r+0x26>
 80058fc:	b003      	add	sp, #12
 80058fe:	bd30      	pop	{r4, r5, pc}
 8005900:	20000230 	.word	0x20000230

08005904 <sbrk_aligned>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	4e0e      	ldr	r6, [pc, #56]	; (8005940 <sbrk_aligned+0x3c>)
 8005908:	460c      	mov	r4, r1
 800590a:	6831      	ldr	r1, [r6, #0]
 800590c:	4605      	mov	r5, r0
 800590e:	b911      	cbnz	r1, 8005916 <sbrk_aligned+0x12>
 8005910:	f000 f88c 	bl	8005a2c <_sbrk_r>
 8005914:	6030      	str	r0, [r6, #0]
 8005916:	4621      	mov	r1, r4
 8005918:	4628      	mov	r0, r5
 800591a:	f000 f887 	bl	8005a2c <_sbrk_r>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d00a      	beq.n	8005938 <sbrk_aligned+0x34>
 8005922:	1cc4      	adds	r4, r0, #3
 8005924:	f024 0403 	bic.w	r4, r4, #3
 8005928:	42a0      	cmp	r0, r4
 800592a:	d007      	beq.n	800593c <sbrk_aligned+0x38>
 800592c:	1a21      	subs	r1, r4, r0
 800592e:	4628      	mov	r0, r5
 8005930:	f000 f87c 	bl	8005a2c <_sbrk_r>
 8005934:	3001      	adds	r0, #1
 8005936:	d101      	bne.n	800593c <sbrk_aligned+0x38>
 8005938:	f04f 34ff 	mov.w	r4, #4294967295
 800593c:	4620      	mov	r0, r4
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	20000234 	.word	0x20000234

08005944 <_malloc_r>:
 8005944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005948:	1ccd      	adds	r5, r1, #3
 800594a:	f025 0503 	bic.w	r5, r5, #3
 800594e:	3508      	adds	r5, #8
 8005950:	2d0c      	cmp	r5, #12
 8005952:	bf38      	it	cc
 8005954:	250c      	movcc	r5, #12
 8005956:	2d00      	cmp	r5, #0
 8005958:	4607      	mov	r7, r0
 800595a:	db01      	blt.n	8005960 <_malloc_r+0x1c>
 800595c:	42a9      	cmp	r1, r5
 800595e:	d905      	bls.n	800596c <_malloc_r+0x28>
 8005960:	230c      	movs	r3, #12
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	2600      	movs	r6, #0
 8005966:	4630      	mov	r0, r6
 8005968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596c:	4e2e      	ldr	r6, [pc, #184]	; (8005a28 <_malloc_r+0xe4>)
 800596e:	f000 f8af 	bl	8005ad0 <__malloc_lock>
 8005972:	6833      	ldr	r3, [r6, #0]
 8005974:	461c      	mov	r4, r3
 8005976:	bb34      	cbnz	r4, 80059c6 <_malloc_r+0x82>
 8005978:	4629      	mov	r1, r5
 800597a:	4638      	mov	r0, r7
 800597c:	f7ff ffc2 	bl	8005904 <sbrk_aligned>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	4604      	mov	r4, r0
 8005984:	d14d      	bne.n	8005a22 <_malloc_r+0xde>
 8005986:	6834      	ldr	r4, [r6, #0]
 8005988:	4626      	mov	r6, r4
 800598a:	2e00      	cmp	r6, #0
 800598c:	d140      	bne.n	8005a10 <_malloc_r+0xcc>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	4631      	mov	r1, r6
 8005992:	4638      	mov	r0, r7
 8005994:	eb04 0803 	add.w	r8, r4, r3
 8005998:	f000 f848 	bl	8005a2c <_sbrk_r>
 800599c:	4580      	cmp	r8, r0
 800599e:	d13a      	bne.n	8005a16 <_malloc_r+0xd2>
 80059a0:	6821      	ldr	r1, [r4, #0]
 80059a2:	3503      	adds	r5, #3
 80059a4:	1a6d      	subs	r5, r5, r1
 80059a6:	f025 0503 	bic.w	r5, r5, #3
 80059aa:	3508      	adds	r5, #8
 80059ac:	2d0c      	cmp	r5, #12
 80059ae:	bf38      	it	cc
 80059b0:	250c      	movcc	r5, #12
 80059b2:	4629      	mov	r1, r5
 80059b4:	4638      	mov	r0, r7
 80059b6:	f7ff ffa5 	bl	8005904 <sbrk_aligned>
 80059ba:	3001      	adds	r0, #1
 80059bc:	d02b      	beq.n	8005a16 <_malloc_r+0xd2>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	442b      	add	r3, r5
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	e00e      	b.n	80059e4 <_malloc_r+0xa0>
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	1b52      	subs	r2, r2, r5
 80059ca:	d41e      	bmi.n	8005a0a <_malloc_r+0xc6>
 80059cc:	2a0b      	cmp	r2, #11
 80059ce:	d916      	bls.n	80059fe <_malloc_r+0xba>
 80059d0:	1961      	adds	r1, r4, r5
 80059d2:	42a3      	cmp	r3, r4
 80059d4:	6025      	str	r5, [r4, #0]
 80059d6:	bf18      	it	ne
 80059d8:	6059      	strne	r1, [r3, #4]
 80059da:	6863      	ldr	r3, [r4, #4]
 80059dc:	bf08      	it	eq
 80059de:	6031      	streq	r1, [r6, #0]
 80059e0:	5162      	str	r2, [r4, r5]
 80059e2:	604b      	str	r3, [r1, #4]
 80059e4:	4638      	mov	r0, r7
 80059e6:	f104 060b 	add.w	r6, r4, #11
 80059ea:	f000 f877 	bl	8005adc <__malloc_unlock>
 80059ee:	f026 0607 	bic.w	r6, r6, #7
 80059f2:	1d23      	adds	r3, r4, #4
 80059f4:	1af2      	subs	r2, r6, r3
 80059f6:	d0b6      	beq.n	8005966 <_malloc_r+0x22>
 80059f8:	1b9b      	subs	r3, r3, r6
 80059fa:	50a3      	str	r3, [r4, r2]
 80059fc:	e7b3      	b.n	8005966 <_malloc_r+0x22>
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	bf0c      	ite	eq
 8005a04:	6032      	streq	r2, [r6, #0]
 8005a06:	605a      	strne	r2, [r3, #4]
 8005a08:	e7ec      	b.n	80059e4 <_malloc_r+0xa0>
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	6864      	ldr	r4, [r4, #4]
 8005a0e:	e7b2      	b.n	8005976 <_malloc_r+0x32>
 8005a10:	4634      	mov	r4, r6
 8005a12:	6876      	ldr	r6, [r6, #4]
 8005a14:	e7b9      	b.n	800598a <_malloc_r+0x46>
 8005a16:	230c      	movs	r3, #12
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	f000 f85e 	bl	8005adc <__malloc_unlock>
 8005a20:	e7a1      	b.n	8005966 <_malloc_r+0x22>
 8005a22:	6025      	str	r5, [r4, #0]
 8005a24:	e7de      	b.n	80059e4 <_malloc_r+0xa0>
 8005a26:	bf00      	nop
 8005a28:	20000230 	.word	0x20000230

08005a2c <_sbrk_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d06      	ldr	r5, [pc, #24]	; (8005a48 <_sbrk_r+0x1c>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	f001 fe6c 	bl	8007714 <_sbrk>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_sbrk_r+0x1a>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_sbrk_r+0x1a>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	20000238 	.word	0x20000238

08005a4c <__assert_func>:
 8005a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a4e:	4614      	mov	r4, r2
 8005a50:	461a      	mov	r2, r3
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <__assert_func+0x2c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4605      	mov	r5, r0
 8005a58:	68d8      	ldr	r0, [r3, #12]
 8005a5a:	b14c      	cbz	r4, 8005a70 <__assert_func+0x24>
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <__assert_func+0x30>)
 8005a5e:	9100      	str	r1, [sp, #0]
 8005a60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a64:	4906      	ldr	r1, [pc, #24]	; (8005a80 <__assert_func+0x34>)
 8005a66:	462b      	mov	r3, r5
 8005a68:	f000 f80e 	bl	8005a88 <fiprintf>
 8005a6c:	f000 fa64 	bl	8005f38 <abort>
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <__assert_func+0x38>)
 8005a72:	461c      	mov	r4, r3
 8005a74:	e7f3      	b.n	8005a5e <__assert_func+0x12>
 8005a76:	bf00      	nop
 8005a78:	20000010 	.word	0x20000010
 8005a7c:	08007ec4 	.word	0x08007ec4
 8005a80:	08007ed1 	.word	0x08007ed1
 8005a84:	08007eff 	.word	0x08007eff

08005a88 <fiprintf>:
 8005a88:	b40e      	push	{r1, r2, r3}
 8005a8a:	b503      	push	{r0, r1, lr}
 8005a8c:	4601      	mov	r1, r0
 8005a8e:	ab03      	add	r3, sp, #12
 8005a90:	4805      	ldr	r0, [pc, #20]	; (8005aa8 <fiprintf+0x20>)
 8005a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a96:	6800      	ldr	r0, [r0, #0]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	f000 f84f 	bl	8005b3c <_vfiprintf_r>
 8005a9e:	b002      	add	sp, #8
 8005aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa4:	b003      	add	sp, #12
 8005aa6:	4770      	bx	lr
 8005aa8:	20000010 	.word	0x20000010

08005aac <__ascii_mbtowc>:
 8005aac:	b082      	sub	sp, #8
 8005aae:	b901      	cbnz	r1, 8005ab2 <__ascii_mbtowc+0x6>
 8005ab0:	a901      	add	r1, sp, #4
 8005ab2:	b142      	cbz	r2, 8005ac6 <__ascii_mbtowc+0x1a>
 8005ab4:	b14b      	cbz	r3, 8005aca <__ascii_mbtowc+0x1e>
 8005ab6:	7813      	ldrb	r3, [r2, #0]
 8005ab8:	600b      	str	r3, [r1, #0]
 8005aba:	7812      	ldrb	r2, [r2, #0]
 8005abc:	1e10      	subs	r0, r2, #0
 8005abe:	bf18      	it	ne
 8005ac0:	2001      	movne	r0, #1
 8005ac2:	b002      	add	sp, #8
 8005ac4:	4770      	bx	lr
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	e7fb      	b.n	8005ac2 <__ascii_mbtowc+0x16>
 8005aca:	f06f 0001 	mvn.w	r0, #1
 8005ace:	e7f8      	b.n	8005ac2 <__ascii_mbtowc+0x16>

08005ad0 <__malloc_lock>:
 8005ad0:	4801      	ldr	r0, [pc, #4]	; (8005ad8 <__malloc_lock+0x8>)
 8005ad2:	f000 bbf1 	b.w	80062b8 <__retarget_lock_acquire_recursive>
 8005ad6:	bf00      	nop
 8005ad8:	2000023c 	.word	0x2000023c

08005adc <__malloc_unlock>:
 8005adc:	4801      	ldr	r0, [pc, #4]	; (8005ae4 <__malloc_unlock+0x8>)
 8005ade:	f000 bbec 	b.w	80062ba <__retarget_lock_release_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	2000023c 	.word	0x2000023c

08005ae8 <__sfputc_r>:
 8005ae8:	6893      	ldr	r3, [r2, #8]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	b410      	push	{r4}
 8005af0:	6093      	str	r3, [r2, #8]
 8005af2:	da08      	bge.n	8005b06 <__sfputc_r+0x1e>
 8005af4:	6994      	ldr	r4, [r2, #24]
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	db01      	blt.n	8005afe <__sfputc_r+0x16>
 8005afa:	290a      	cmp	r1, #10
 8005afc:	d103      	bne.n	8005b06 <__sfputc_r+0x1e>
 8005afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b02:	f000 b94b 	b.w	8005d9c <__swbuf_r>
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	1c58      	adds	r0, r3, #1
 8005b0a:	6010      	str	r0, [r2, #0]
 8005b0c:	7019      	strb	r1, [r3, #0]
 8005b0e:	4608      	mov	r0, r1
 8005b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <__sfputs_r>:
 8005b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b18:	4606      	mov	r6, r0
 8005b1a:	460f      	mov	r7, r1
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	18d5      	adds	r5, r2, r3
 8005b20:	42ac      	cmp	r4, r5
 8005b22:	d101      	bne.n	8005b28 <__sfputs_r+0x12>
 8005b24:	2000      	movs	r0, #0
 8005b26:	e007      	b.n	8005b38 <__sfputs_r+0x22>
 8005b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7ff ffda 	bl	8005ae8 <__sfputc_r>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d1f3      	bne.n	8005b20 <__sfputs_r+0xa>
 8005b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b3c <_vfiprintf_r>:
 8005b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b40:	460d      	mov	r5, r1
 8005b42:	b09d      	sub	sp, #116	; 0x74
 8005b44:	4614      	mov	r4, r2
 8005b46:	4698      	mov	r8, r3
 8005b48:	4606      	mov	r6, r0
 8005b4a:	b118      	cbz	r0, 8005b54 <_vfiprintf_r+0x18>
 8005b4c:	6983      	ldr	r3, [r0, #24]
 8005b4e:	b90b      	cbnz	r3, 8005b54 <_vfiprintf_r+0x18>
 8005b50:	f000 fb14 	bl	800617c <__sinit>
 8005b54:	4b89      	ldr	r3, [pc, #548]	; (8005d7c <_vfiprintf_r+0x240>)
 8005b56:	429d      	cmp	r5, r3
 8005b58:	d11b      	bne.n	8005b92 <_vfiprintf_r+0x56>
 8005b5a:	6875      	ldr	r5, [r6, #4]
 8005b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b5e:	07d9      	lsls	r1, r3, #31
 8005b60:	d405      	bmi.n	8005b6e <_vfiprintf_r+0x32>
 8005b62:	89ab      	ldrh	r3, [r5, #12]
 8005b64:	059a      	lsls	r2, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_vfiprintf_r+0x32>
 8005b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b6a:	f000 fba5 	bl	80062b8 <__retarget_lock_acquire_recursive>
 8005b6e:	89ab      	ldrh	r3, [r5, #12]
 8005b70:	071b      	lsls	r3, r3, #28
 8005b72:	d501      	bpl.n	8005b78 <_vfiprintf_r+0x3c>
 8005b74:	692b      	ldr	r3, [r5, #16]
 8005b76:	b9eb      	cbnz	r3, 8005bb4 <_vfiprintf_r+0x78>
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f000 f96e 	bl	8005e5c <__swsetup_r>
 8005b80:	b1c0      	cbz	r0, 8005bb4 <_vfiprintf_r+0x78>
 8005b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b84:	07dc      	lsls	r4, r3, #31
 8005b86:	d50e      	bpl.n	8005ba6 <_vfiprintf_r+0x6a>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	b01d      	add	sp, #116	; 0x74
 8005b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b92:	4b7b      	ldr	r3, [pc, #492]	; (8005d80 <_vfiprintf_r+0x244>)
 8005b94:	429d      	cmp	r5, r3
 8005b96:	d101      	bne.n	8005b9c <_vfiprintf_r+0x60>
 8005b98:	68b5      	ldr	r5, [r6, #8]
 8005b9a:	e7df      	b.n	8005b5c <_vfiprintf_r+0x20>
 8005b9c:	4b79      	ldr	r3, [pc, #484]	; (8005d84 <_vfiprintf_r+0x248>)
 8005b9e:	429d      	cmp	r5, r3
 8005ba0:	bf08      	it	eq
 8005ba2:	68f5      	ldreq	r5, [r6, #12]
 8005ba4:	e7da      	b.n	8005b5c <_vfiprintf_r+0x20>
 8005ba6:	89ab      	ldrh	r3, [r5, #12]
 8005ba8:	0598      	lsls	r0, r3, #22
 8005baa:	d4ed      	bmi.n	8005b88 <_vfiprintf_r+0x4c>
 8005bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bae:	f000 fb84 	bl	80062ba <__retarget_lock_release_recursive>
 8005bb2:	e7e9      	b.n	8005b88 <_vfiprintf_r+0x4c>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bc2:	2330      	movs	r3, #48	; 0x30
 8005bc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d88 <_vfiprintf_r+0x24c>
 8005bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bcc:	f04f 0901 	mov.w	r9, #1
 8005bd0:	4623      	mov	r3, r4
 8005bd2:	469a      	mov	sl, r3
 8005bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd8:	b10a      	cbz	r2, 8005bde <_vfiprintf_r+0xa2>
 8005bda:	2a25      	cmp	r2, #37	; 0x25
 8005bdc:	d1f9      	bne.n	8005bd2 <_vfiprintf_r+0x96>
 8005bde:	ebba 0b04 	subs.w	fp, sl, r4
 8005be2:	d00b      	beq.n	8005bfc <_vfiprintf_r+0xc0>
 8005be4:	465b      	mov	r3, fp
 8005be6:	4622      	mov	r2, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	4630      	mov	r0, r6
 8005bec:	f7ff ff93 	bl	8005b16 <__sfputs_r>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f000 80aa 	beq.w	8005d4a <_vfiprintf_r+0x20e>
 8005bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bf8:	445a      	add	r2, fp
 8005bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8005bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80a2 	beq.w	8005d4a <_vfiprintf_r+0x20e>
 8005c06:	2300      	movs	r3, #0
 8005c08:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c10:	f10a 0a01 	add.w	sl, sl, #1
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	9307      	str	r3, [sp, #28]
 8005c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c1e:	4654      	mov	r4, sl
 8005c20:	2205      	movs	r2, #5
 8005c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c26:	4858      	ldr	r0, [pc, #352]	; (8005d88 <_vfiprintf_r+0x24c>)
 8005c28:	f7fa fae2 	bl	80001f0 <memchr>
 8005c2c:	9a04      	ldr	r2, [sp, #16]
 8005c2e:	b9d8      	cbnz	r0, 8005c68 <_vfiprintf_r+0x12c>
 8005c30:	06d1      	lsls	r1, r2, #27
 8005c32:	bf44      	itt	mi
 8005c34:	2320      	movmi	r3, #32
 8005c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c3a:	0713      	lsls	r3, r2, #28
 8005c3c:	bf44      	itt	mi
 8005c3e:	232b      	movmi	r3, #43	; 0x2b
 8005c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c44:	f89a 3000 	ldrb.w	r3, [sl]
 8005c48:	2b2a      	cmp	r3, #42	; 0x2a
 8005c4a:	d015      	beq.n	8005c78 <_vfiprintf_r+0x13c>
 8005c4c:	9a07      	ldr	r2, [sp, #28]
 8005c4e:	4654      	mov	r4, sl
 8005c50:	2000      	movs	r0, #0
 8005c52:	f04f 0c0a 	mov.w	ip, #10
 8005c56:	4621      	mov	r1, r4
 8005c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c5c:	3b30      	subs	r3, #48	; 0x30
 8005c5e:	2b09      	cmp	r3, #9
 8005c60:	d94e      	bls.n	8005d00 <_vfiprintf_r+0x1c4>
 8005c62:	b1b0      	cbz	r0, 8005c92 <_vfiprintf_r+0x156>
 8005c64:	9207      	str	r2, [sp, #28]
 8005c66:	e014      	b.n	8005c92 <_vfiprintf_r+0x156>
 8005c68:	eba0 0308 	sub.w	r3, r0, r8
 8005c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c70:	4313      	orrs	r3, r2
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	46a2      	mov	sl, r4
 8005c76:	e7d2      	b.n	8005c1e <_vfiprintf_r+0xe2>
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	1d19      	adds	r1, r3, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	9103      	str	r1, [sp, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bfbb      	ittet	lt
 8005c84:	425b      	neglt	r3, r3
 8005c86:	f042 0202 	orrlt.w	r2, r2, #2
 8005c8a:	9307      	strge	r3, [sp, #28]
 8005c8c:	9307      	strlt	r3, [sp, #28]
 8005c8e:	bfb8      	it	lt
 8005c90:	9204      	strlt	r2, [sp, #16]
 8005c92:	7823      	ldrb	r3, [r4, #0]
 8005c94:	2b2e      	cmp	r3, #46	; 0x2e
 8005c96:	d10c      	bne.n	8005cb2 <_vfiprintf_r+0x176>
 8005c98:	7863      	ldrb	r3, [r4, #1]
 8005c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9c:	d135      	bne.n	8005d0a <_vfiprintf_r+0x1ce>
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	1d1a      	adds	r2, r3, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	9203      	str	r2, [sp, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfb8      	it	lt
 8005caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cae:	3402      	adds	r4, #2
 8005cb0:	9305      	str	r3, [sp, #20]
 8005cb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d98 <_vfiprintf_r+0x25c>
 8005cb6:	7821      	ldrb	r1, [r4, #0]
 8005cb8:	2203      	movs	r2, #3
 8005cba:	4650      	mov	r0, sl
 8005cbc:	f7fa fa98 	bl	80001f0 <memchr>
 8005cc0:	b140      	cbz	r0, 8005cd4 <_vfiprintf_r+0x198>
 8005cc2:	2340      	movs	r3, #64	; 0x40
 8005cc4:	eba0 000a 	sub.w	r0, r0, sl
 8005cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8005ccc:	9b04      	ldr	r3, [sp, #16]
 8005cce:	4303      	orrs	r3, r0
 8005cd0:	3401      	adds	r4, #1
 8005cd2:	9304      	str	r3, [sp, #16]
 8005cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd8:	482c      	ldr	r0, [pc, #176]	; (8005d8c <_vfiprintf_r+0x250>)
 8005cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cde:	2206      	movs	r2, #6
 8005ce0:	f7fa fa86 	bl	80001f0 <memchr>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d03f      	beq.n	8005d68 <_vfiprintf_r+0x22c>
 8005ce8:	4b29      	ldr	r3, [pc, #164]	; (8005d90 <_vfiprintf_r+0x254>)
 8005cea:	bb1b      	cbnz	r3, 8005d34 <_vfiprintf_r+0x1f8>
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	3307      	adds	r3, #7
 8005cf0:	f023 0307 	bic.w	r3, r3, #7
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	9303      	str	r3, [sp, #12]
 8005cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfa:	443b      	add	r3, r7
 8005cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfe:	e767      	b.n	8005bd0 <_vfiprintf_r+0x94>
 8005d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d04:	460c      	mov	r4, r1
 8005d06:	2001      	movs	r0, #1
 8005d08:	e7a5      	b.n	8005c56 <_vfiprintf_r+0x11a>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	3401      	adds	r4, #1
 8005d0e:	9305      	str	r3, [sp, #20]
 8005d10:	4619      	mov	r1, r3
 8005d12:	f04f 0c0a 	mov.w	ip, #10
 8005d16:	4620      	mov	r0, r4
 8005d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d1c:	3a30      	subs	r2, #48	; 0x30
 8005d1e:	2a09      	cmp	r2, #9
 8005d20:	d903      	bls.n	8005d2a <_vfiprintf_r+0x1ee>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0c5      	beq.n	8005cb2 <_vfiprintf_r+0x176>
 8005d26:	9105      	str	r1, [sp, #20]
 8005d28:	e7c3      	b.n	8005cb2 <_vfiprintf_r+0x176>
 8005d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d2e:	4604      	mov	r4, r0
 8005d30:	2301      	movs	r3, #1
 8005d32:	e7f0      	b.n	8005d16 <_vfiprintf_r+0x1da>
 8005d34:	ab03      	add	r3, sp, #12
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	462a      	mov	r2, r5
 8005d3a:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <_vfiprintf_r+0x258>)
 8005d3c:	a904      	add	r1, sp, #16
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f7fd ff9c 	bl	8003c7c <_printf_float>
 8005d44:	4607      	mov	r7, r0
 8005d46:	1c78      	adds	r0, r7, #1
 8005d48:	d1d6      	bne.n	8005cf8 <_vfiprintf_r+0x1bc>
 8005d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d4c:	07d9      	lsls	r1, r3, #31
 8005d4e:	d405      	bmi.n	8005d5c <_vfiprintf_r+0x220>
 8005d50:	89ab      	ldrh	r3, [r5, #12]
 8005d52:	059a      	lsls	r2, r3, #22
 8005d54:	d402      	bmi.n	8005d5c <_vfiprintf_r+0x220>
 8005d56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d58:	f000 faaf 	bl	80062ba <__retarget_lock_release_recursive>
 8005d5c:	89ab      	ldrh	r3, [r5, #12]
 8005d5e:	065b      	lsls	r3, r3, #25
 8005d60:	f53f af12 	bmi.w	8005b88 <_vfiprintf_r+0x4c>
 8005d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d66:	e711      	b.n	8005b8c <_vfiprintf_r+0x50>
 8005d68:	ab03      	add	r3, sp, #12
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	462a      	mov	r2, r5
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <_vfiprintf_r+0x258>)
 8005d70:	a904      	add	r1, sp, #16
 8005d72:	4630      	mov	r0, r6
 8005d74:	f7fe fa26 	bl	80041c4 <_printf_i>
 8005d78:	e7e4      	b.n	8005d44 <_vfiprintf_r+0x208>
 8005d7a:	bf00      	nop
 8005d7c:	0800803c 	.word	0x0800803c
 8005d80:	0800805c 	.word	0x0800805c
 8005d84:	0800801c 	.word	0x0800801c
 8005d88:	08007f0a 	.word	0x08007f0a
 8005d8c:	08007f14 	.word	0x08007f14
 8005d90:	08003c7d 	.word	0x08003c7d
 8005d94:	08005b17 	.word	0x08005b17
 8005d98:	08007f10 	.word	0x08007f10

08005d9c <__swbuf_r>:
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	460e      	mov	r6, r1
 8005da0:	4614      	mov	r4, r2
 8005da2:	4605      	mov	r5, r0
 8005da4:	b118      	cbz	r0, 8005dae <__swbuf_r+0x12>
 8005da6:	6983      	ldr	r3, [r0, #24]
 8005da8:	b90b      	cbnz	r3, 8005dae <__swbuf_r+0x12>
 8005daa:	f000 f9e7 	bl	800617c <__sinit>
 8005dae:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <__swbuf_r+0x98>)
 8005db0:	429c      	cmp	r4, r3
 8005db2:	d12b      	bne.n	8005e0c <__swbuf_r+0x70>
 8005db4:	686c      	ldr	r4, [r5, #4]
 8005db6:	69a3      	ldr	r3, [r4, #24]
 8005db8:	60a3      	str	r3, [r4, #8]
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	071a      	lsls	r2, r3, #28
 8005dbe:	d52f      	bpl.n	8005e20 <__swbuf_r+0x84>
 8005dc0:	6923      	ldr	r3, [r4, #16]
 8005dc2:	b36b      	cbz	r3, 8005e20 <__swbuf_r+0x84>
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	1ac0      	subs	r0, r0, r3
 8005dca:	6963      	ldr	r3, [r4, #20]
 8005dcc:	b2f6      	uxtb	r6, r6
 8005dce:	4283      	cmp	r3, r0
 8005dd0:	4637      	mov	r7, r6
 8005dd2:	dc04      	bgt.n	8005dde <__swbuf_r+0x42>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f93c 	bl	8006054 <_fflush_r>
 8005ddc:	bb30      	cbnz	r0, 8005e2c <__swbuf_r+0x90>
 8005dde:	68a3      	ldr	r3, [r4, #8]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	60a3      	str	r3, [r4, #8]
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	6022      	str	r2, [r4, #0]
 8005dea:	701e      	strb	r6, [r3, #0]
 8005dec:	6963      	ldr	r3, [r4, #20]
 8005dee:	3001      	adds	r0, #1
 8005df0:	4283      	cmp	r3, r0
 8005df2:	d004      	beq.n	8005dfe <__swbuf_r+0x62>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	07db      	lsls	r3, r3, #31
 8005df8:	d506      	bpl.n	8005e08 <__swbuf_r+0x6c>
 8005dfa:	2e0a      	cmp	r6, #10
 8005dfc:	d104      	bne.n	8005e08 <__swbuf_r+0x6c>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 f927 	bl	8006054 <_fflush_r>
 8005e06:	b988      	cbnz	r0, 8005e2c <__swbuf_r+0x90>
 8005e08:	4638      	mov	r0, r7
 8005e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <__swbuf_r+0x9c>)
 8005e0e:	429c      	cmp	r4, r3
 8005e10:	d101      	bne.n	8005e16 <__swbuf_r+0x7a>
 8005e12:	68ac      	ldr	r4, [r5, #8]
 8005e14:	e7cf      	b.n	8005db6 <__swbuf_r+0x1a>
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <__swbuf_r+0xa0>)
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	bf08      	it	eq
 8005e1c:	68ec      	ldreq	r4, [r5, #12]
 8005e1e:	e7ca      	b.n	8005db6 <__swbuf_r+0x1a>
 8005e20:	4621      	mov	r1, r4
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 f81a 	bl	8005e5c <__swsetup_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d0cb      	beq.n	8005dc4 <__swbuf_r+0x28>
 8005e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e30:	e7ea      	b.n	8005e08 <__swbuf_r+0x6c>
 8005e32:	bf00      	nop
 8005e34:	0800803c 	.word	0x0800803c
 8005e38:	0800805c 	.word	0x0800805c
 8005e3c:	0800801c 	.word	0x0800801c

08005e40 <__ascii_wctomb>:
 8005e40:	b149      	cbz	r1, 8005e56 <__ascii_wctomb+0x16>
 8005e42:	2aff      	cmp	r2, #255	; 0xff
 8005e44:	bf85      	ittet	hi
 8005e46:	238a      	movhi	r3, #138	; 0x8a
 8005e48:	6003      	strhi	r3, [r0, #0]
 8005e4a:	700a      	strbls	r2, [r1, #0]
 8005e4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e50:	bf98      	it	ls
 8005e52:	2001      	movls	r0, #1
 8005e54:	4770      	bx	lr
 8005e56:	4608      	mov	r0, r1
 8005e58:	4770      	bx	lr
	...

08005e5c <__swsetup_r>:
 8005e5c:	4b32      	ldr	r3, [pc, #200]	; (8005f28 <__swsetup_r+0xcc>)
 8005e5e:	b570      	push	{r4, r5, r6, lr}
 8005e60:	681d      	ldr	r5, [r3, #0]
 8005e62:	4606      	mov	r6, r0
 8005e64:	460c      	mov	r4, r1
 8005e66:	b125      	cbz	r5, 8005e72 <__swsetup_r+0x16>
 8005e68:	69ab      	ldr	r3, [r5, #24]
 8005e6a:	b913      	cbnz	r3, 8005e72 <__swsetup_r+0x16>
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 f985 	bl	800617c <__sinit>
 8005e72:	4b2e      	ldr	r3, [pc, #184]	; (8005f2c <__swsetup_r+0xd0>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	d10f      	bne.n	8005e98 <__swsetup_r+0x3c>
 8005e78:	686c      	ldr	r4, [r5, #4]
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e80:	0719      	lsls	r1, r3, #28
 8005e82:	d42c      	bmi.n	8005ede <__swsetup_r+0x82>
 8005e84:	06dd      	lsls	r5, r3, #27
 8005e86:	d411      	bmi.n	8005eac <__swsetup_r+0x50>
 8005e88:	2309      	movs	r3, #9
 8005e8a:	6033      	str	r3, [r6, #0]
 8005e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	f04f 30ff 	mov.w	r0, #4294967295
 8005e96:	e03e      	b.n	8005f16 <__swsetup_r+0xba>
 8005e98:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <__swsetup_r+0xd4>)
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	d101      	bne.n	8005ea2 <__swsetup_r+0x46>
 8005e9e:	68ac      	ldr	r4, [r5, #8]
 8005ea0:	e7eb      	b.n	8005e7a <__swsetup_r+0x1e>
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <__swsetup_r+0xd8>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	bf08      	it	eq
 8005ea8:	68ec      	ldreq	r4, [r5, #12]
 8005eaa:	e7e6      	b.n	8005e7a <__swsetup_r+0x1e>
 8005eac:	0758      	lsls	r0, r3, #29
 8005eae:	d512      	bpl.n	8005ed6 <__swsetup_r+0x7a>
 8005eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eb2:	b141      	cbz	r1, 8005ec6 <__swsetup_r+0x6a>
 8005eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eb8:	4299      	cmp	r1, r3
 8005eba:	d002      	beq.n	8005ec2 <__swsetup_r+0x66>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff fcd5 	bl	800586c <_free_r>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	6063      	str	r3, [r4, #4]
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	f043 0308 	orr.w	r3, r3, #8
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	b94b      	cbnz	r3, 8005ef6 <__swsetup_r+0x9a>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eec:	d003      	beq.n	8005ef6 <__swsetup_r+0x9a>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f000 fa09 	bl	8006308 <__smakebuf_r>
 8005ef6:	89a0      	ldrh	r0, [r4, #12]
 8005ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005efc:	f010 0301 	ands.w	r3, r0, #1
 8005f00:	d00a      	beq.n	8005f18 <__swsetup_r+0xbc>
 8005f02:	2300      	movs	r3, #0
 8005f04:	60a3      	str	r3, [r4, #8]
 8005f06:	6963      	ldr	r3, [r4, #20]
 8005f08:	425b      	negs	r3, r3
 8005f0a:	61a3      	str	r3, [r4, #24]
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	b943      	cbnz	r3, 8005f22 <__swsetup_r+0xc6>
 8005f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f14:	d1ba      	bne.n	8005e8c <__swsetup_r+0x30>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	0781      	lsls	r1, r0, #30
 8005f1a:	bf58      	it	pl
 8005f1c:	6963      	ldrpl	r3, [r4, #20]
 8005f1e:	60a3      	str	r3, [r4, #8]
 8005f20:	e7f4      	b.n	8005f0c <__swsetup_r+0xb0>
 8005f22:	2000      	movs	r0, #0
 8005f24:	e7f7      	b.n	8005f16 <__swsetup_r+0xba>
 8005f26:	bf00      	nop
 8005f28:	20000010 	.word	0x20000010
 8005f2c:	0800803c 	.word	0x0800803c
 8005f30:	0800805c 	.word	0x0800805c
 8005f34:	0800801c 	.word	0x0800801c

08005f38 <abort>:
 8005f38:	b508      	push	{r3, lr}
 8005f3a:	2006      	movs	r0, #6
 8005f3c:	f000 fa4c 	bl	80063d8 <raise>
 8005f40:	2001      	movs	r0, #1
 8005f42:	f001 fbfd 	bl	8007740 <_exit>
	...

08005f48 <__sflush_r>:
 8005f48:	898a      	ldrh	r2, [r1, #12]
 8005f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4e:	4605      	mov	r5, r0
 8005f50:	0710      	lsls	r0, r2, #28
 8005f52:	460c      	mov	r4, r1
 8005f54:	d458      	bmi.n	8006008 <__sflush_r+0xc0>
 8005f56:	684b      	ldr	r3, [r1, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dc05      	bgt.n	8005f68 <__sflush_r+0x20>
 8005f5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dc02      	bgt.n	8005f68 <__sflush_r+0x20>
 8005f62:	2000      	movs	r0, #0
 8005f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f6a:	2e00      	cmp	r6, #0
 8005f6c:	d0f9      	beq.n	8005f62 <__sflush_r+0x1a>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f74:	682f      	ldr	r7, [r5, #0]
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	d032      	beq.n	8005fe0 <__sflush_r+0x98>
 8005f7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	075a      	lsls	r2, r3, #29
 8005f80:	d505      	bpl.n	8005f8e <__sflush_r+0x46>
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	1ac0      	subs	r0, r0, r3
 8005f86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f88:	b10b      	cbz	r3, 8005f8e <__sflush_r+0x46>
 8005f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f8c:	1ac0      	subs	r0, r0, r3
 8005f8e:	2300      	movs	r3, #0
 8005f90:	4602      	mov	r2, r0
 8005f92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f94:	6a21      	ldr	r1, [r4, #32]
 8005f96:	4628      	mov	r0, r5
 8005f98:	47b0      	blx	r6
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	d106      	bne.n	8005fae <__sflush_r+0x66>
 8005fa0:	6829      	ldr	r1, [r5, #0]
 8005fa2:	291d      	cmp	r1, #29
 8005fa4:	d82c      	bhi.n	8006000 <__sflush_r+0xb8>
 8005fa6:	4a2a      	ldr	r2, [pc, #168]	; (8006050 <__sflush_r+0x108>)
 8005fa8:	40ca      	lsrs	r2, r1
 8005faa:	07d6      	lsls	r6, r2, #31
 8005fac:	d528      	bpl.n	8006000 <__sflush_r+0xb8>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	6062      	str	r2, [r4, #4]
 8005fb2:	04d9      	lsls	r1, r3, #19
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	6022      	str	r2, [r4, #0]
 8005fb8:	d504      	bpl.n	8005fc4 <__sflush_r+0x7c>
 8005fba:	1c42      	adds	r2, r0, #1
 8005fbc:	d101      	bne.n	8005fc2 <__sflush_r+0x7a>
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	b903      	cbnz	r3, 8005fc4 <__sflush_r+0x7c>
 8005fc2:	6560      	str	r0, [r4, #84]	; 0x54
 8005fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc6:	602f      	str	r7, [r5, #0]
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	d0ca      	beq.n	8005f62 <__sflush_r+0x1a>
 8005fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fd0:	4299      	cmp	r1, r3
 8005fd2:	d002      	beq.n	8005fda <__sflush_r+0x92>
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f7ff fc49 	bl	800586c <_free_r>
 8005fda:	2000      	movs	r0, #0
 8005fdc:	6360      	str	r0, [r4, #52]	; 0x34
 8005fde:	e7c1      	b.n	8005f64 <__sflush_r+0x1c>
 8005fe0:	6a21      	ldr	r1, [r4, #32]
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b0      	blx	r6
 8005fe8:	1c41      	adds	r1, r0, #1
 8005fea:	d1c7      	bne.n	8005f7c <__sflush_r+0x34>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0c4      	beq.n	8005f7c <__sflush_r+0x34>
 8005ff2:	2b1d      	cmp	r3, #29
 8005ff4:	d001      	beq.n	8005ffa <__sflush_r+0xb2>
 8005ff6:	2b16      	cmp	r3, #22
 8005ff8:	d101      	bne.n	8005ffe <__sflush_r+0xb6>
 8005ffa:	602f      	str	r7, [r5, #0]
 8005ffc:	e7b1      	b.n	8005f62 <__sflush_r+0x1a>
 8005ffe:	89a3      	ldrh	r3, [r4, #12]
 8006000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006004:	81a3      	strh	r3, [r4, #12]
 8006006:	e7ad      	b.n	8005f64 <__sflush_r+0x1c>
 8006008:	690f      	ldr	r7, [r1, #16]
 800600a:	2f00      	cmp	r7, #0
 800600c:	d0a9      	beq.n	8005f62 <__sflush_r+0x1a>
 800600e:	0793      	lsls	r3, r2, #30
 8006010:	680e      	ldr	r6, [r1, #0]
 8006012:	bf08      	it	eq
 8006014:	694b      	ldreq	r3, [r1, #20]
 8006016:	600f      	str	r7, [r1, #0]
 8006018:	bf18      	it	ne
 800601a:	2300      	movne	r3, #0
 800601c:	eba6 0807 	sub.w	r8, r6, r7
 8006020:	608b      	str	r3, [r1, #8]
 8006022:	f1b8 0f00 	cmp.w	r8, #0
 8006026:	dd9c      	ble.n	8005f62 <__sflush_r+0x1a>
 8006028:	6a21      	ldr	r1, [r4, #32]
 800602a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800602c:	4643      	mov	r3, r8
 800602e:	463a      	mov	r2, r7
 8006030:	4628      	mov	r0, r5
 8006032:	47b0      	blx	r6
 8006034:	2800      	cmp	r0, #0
 8006036:	dc06      	bgt.n	8006046 <__sflush_r+0xfe>
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800603e:	81a3      	strh	r3, [r4, #12]
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	e78e      	b.n	8005f64 <__sflush_r+0x1c>
 8006046:	4407      	add	r7, r0
 8006048:	eba8 0800 	sub.w	r8, r8, r0
 800604c:	e7e9      	b.n	8006022 <__sflush_r+0xda>
 800604e:	bf00      	nop
 8006050:	20400001 	.word	0x20400001

08006054 <_fflush_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	690b      	ldr	r3, [r1, #16]
 8006058:	4605      	mov	r5, r0
 800605a:	460c      	mov	r4, r1
 800605c:	b913      	cbnz	r3, 8006064 <_fflush_r+0x10>
 800605e:	2500      	movs	r5, #0
 8006060:	4628      	mov	r0, r5
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	b118      	cbz	r0, 800606e <_fflush_r+0x1a>
 8006066:	6983      	ldr	r3, [r0, #24]
 8006068:	b90b      	cbnz	r3, 800606e <_fflush_r+0x1a>
 800606a:	f000 f887 	bl	800617c <__sinit>
 800606e:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <_fflush_r+0x6c>)
 8006070:	429c      	cmp	r4, r3
 8006072:	d11b      	bne.n	80060ac <_fflush_r+0x58>
 8006074:	686c      	ldr	r4, [r5, #4]
 8006076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0ef      	beq.n	800605e <_fflush_r+0xa>
 800607e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006080:	07d0      	lsls	r0, r2, #31
 8006082:	d404      	bmi.n	800608e <_fflush_r+0x3a>
 8006084:	0599      	lsls	r1, r3, #22
 8006086:	d402      	bmi.n	800608e <_fflush_r+0x3a>
 8006088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800608a:	f000 f915 	bl	80062b8 <__retarget_lock_acquire_recursive>
 800608e:	4628      	mov	r0, r5
 8006090:	4621      	mov	r1, r4
 8006092:	f7ff ff59 	bl	8005f48 <__sflush_r>
 8006096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006098:	07da      	lsls	r2, r3, #31
 800609a:	4605      	mov	r5, r0
 800609c:	d4e0      	bmi.n	8006060 <_fflush_r+0xc>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	059b      	lsls	r3, r3, #22
 80060a2:	d4dd      	bmi.n	8006060 <_fflush_r+0xc>
 80060a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a6:	f000 f908 	bl	80062ba <__retarget_lock_release_recursive>
 80060aa:	e7d9      	b.n	8006060 <_fflush_r+0xc>
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <_fflush_r+0x70>)
 80060ae:	429c      	cmp	r4, r3
 80060b0:	d101      	bne.n	80060b6 <_fflush_r+0x62>
 80060b2:	68ac      	ldr	r4, [r5, #8]
 80060b4:	e7df      	b.n	8006076 <_fflush_r+0x22>
 80060b6:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <_fflush_r+0x74>)
 80060b8:	429c      	cmp	r4, r3
 80060ba:	bf08      	it	eq
 80060bc:	68ec      	ldreq	r4, [r5, #12]
 80060be:	e7da      	b.n	8006076 <_fflush_r+0x22>
 80060c0:	0800803c 	.word	0x0800803c
 80060c4:	0800805c 	.word	0x0800805c
 80060c8:	0800801c 	.word	0x0800801c

080060cc <std>:
 80060cc:	2300      	movs	r3, #0
 80060ce:	b510      	push	{r4, lr}
 80060d0:	4604      	mov	r4, r0
 80060d2:	e9c0 3300 	strd	r3, r3, [r0]
 80060d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060da:	6083      	str	r3, [r0, #8]
 80060dc:	8181      	strh	r1, [r0, #12]
 80060de:	6643      	str	r3, [r0, #100]	; 0x64
 80060e0:	81c2      	strh	r2, [r0, #14]
 80060e2:	6183      	str	r3, [r0, #24]
 80060e4:	4619      	mov	r1, r3
 80060e6:	2208      	movs	r2, #8
 80060e8:	305c      	adds	r0, #92	; 0x5c
 80060ea:	f7fd fd1f 	bl	8003b2c <memset>
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <std+0x38>)
 80060f0:	6263      	str	r3, [r4, #36]	; 0x24
 80060f2:	4b05      	ldr	r3, [pc, #20]	; (8006108 <std+0x3c>)
 80060f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <std+0x40>)
 80060f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <std+0x44>)
 80060fc:	6224      	str	r4, [r4, #32]
 80060fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006100:	bd10      	pop	{r4, pc}
 8006102:	bf00      	nop
 8006104:	08006411 	.word	0x08006411
 8006108:	08006433 	.word	0x08006433
 800610c:	0800646b 	.word	0x0800646b
 8006110:	0800648f 	.word	0x0800648f

08006114 <_cleanup_r>:
 8006114:	4901      	ldr	r1, [pc, #4]	; (800611c <_cleanup_r+0x8>)
 8006116:	f000 b8af 	b.w	8006278 <_fwalk_reent>
 800611a:	bf00      	nop
 800611c:	08006055 	.word	0x08006055

08006120 <__sfmoreglue>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	2268      	movs	r2, #104	; 0x68
 8006124:	1e4d      	subs	r5, r1, #1
 8006126:	4355      	muls	r5, r2
 8006128:	460e      	mov	r6, r1
 800612a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800612e:	f7ff fc09 	bl	8005944 <_malloc_r>
 8006132:	4604      	mov	r4, r0
 8006134:	b140      	cbz	r0, 8006148 <__sfmoreglue+0x28>
 8006136:	2100      	movs	r1, #0
 8006138:	e9c0 1600 	strd	r1, r6, [r0]
 800613c:	300c      	adds	r0, #12
 800613e:	60a0      	str	r0, [r4, #8]
 8006140:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006144:	f7fd fcf2 	bl	8003b2c <memset>
 8006148:	4620      	mov	r0, r4
 800614a:	bd70      	pop	{r4, r5, r6, pc}

0800614c <__sfp_lock_acquire>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__sfp_lock_acquire+0x8>)
 800614e:	f000 b8b3 	b.w	80062b8 <__retarget_lock_acquire_recursive>
 8006152:	bf00      	nop
 8006154:	2000023d 	.word	0x2000023d

08006158 <__sfp_lock_release>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__sfp_lock_release+0x8>)
 800615a:	f000 b8ae 	b.w	80062ba <__retarget_lock_release_recursive>
 800615e:	bf00      	nop
 8006160:	2000023d 	.word	0x2000023d

08006164 <__sinit_lock_acquire>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__sinit_lock_acquire+0x8>)
 8006166:	f000 b8a7 	b.w	80062b8 <__retarget_lock_acquire_recursive>
 800616a:	bf00      	nop
 800616c:	2000023e 	.word	0x2000023e

08006170 <__sinit_lock_release>:
 8006170:	4801      	ldr	r0, [pc, #4]	; (8006178 <__sinit_lock_release+0x8>)
 8006172:	f000 b8a2 	b.w	80062ba <__retarget_lock_release_recursive>
 8006176:	bf00      	nop
 8006178:	2000023e 	.word	0x2000023e

0800617c <__sinit>:
 800617c:	b510      	push	{r4, lr}
 800617e:	4604      	mov	r4, r0
 8006180:	f7ff fff0 	bl	8006164 <__sinit_lock_acquire>
 8006184:	69a3      	ldr	r3, [r4, #24]
 8006186:	b11b      	cbz	r3, 8006190 <__sinit+0x14>
 8006188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800618c:	f7ff bff0 	b.w	8006170 <__sinit_lock_release>
 8006190:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006194:	6523      	str	r3, [r4, #80]	; 0x50
 8006196:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <__sinit+0x68>)
 8006198:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <__sinit+0x6c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	62a2      	str	r2, [r4, #40]	; 0x28
 800619e:	42a3      	cmp	r3, r4
 80061a0:	bf04      	itt	eq
 80061a2:	2301      	moveq	r3, #1
 80061a4:	61a3      	streq	r3, [r4, #24]
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f820 	bl	80061ec <__sfp>
 80061ac:	6060      	str	r0, [r4, #4]
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 f81c 	bl	80061ec <__sfp>
 80061b4:	60a0      	str	r0, [r4, #8]
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 f818 	bl	80061ec <__sfp>
 80061bc:	2200      	movs	r2, #0
 80061be:	60e0      	str	r0, [r4, #12]
 80061c0:	2104      	movs	r1, #4
 80061c2:	6860      	ldr	r0, [r4, #4]
 80061c4:	f7ff ff82 	bl	80060cc <std>
 80061c8:	68a0      	ldr	r0, [r4, #8]
 80061ca:	2201      	movs	r2, #1
 80061cc:	2109      	movs	r1, #9
 80061ce:	f7ff ff7d 	bl	80060cc <std>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	2202      	movs	r2, #2
 80061d6:	2112      	movs	r1, #18
 80061d8:	f7ff ff78 	bl	80060cc <std>
 80061dc:	2301      	movs	r3, #1
 80061de:	61a3      	str	r3, [r4, #24]
 80061e0:	e7d2      	b.n	8006188 <__sinit+0xc>
 80061e2:	bf00      	nop
 80061e4:	08007ca0 	.word	0x08007ca0
 80061e8:	08006115 	.word	0x08006115

080061ec <__sfp>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	4607      	mov	r7, r0
 80061f0:	f7ff ffac 	bl	800614c <__sfp_lock_acquire>
 80061f4:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <__sfp+0x84>)
 80061f6:	681e      	ldr	r6, [r3, #0]
 80061f8:	69b3      	ldr	r3, [r6, #24]
 80061fa:	b913      	cbnz	r3, 8006202 <__sfp+0x16>
 80061fc:	4630      	mov	r0, r6
 80061fe:	f7ff ffbd 	bl	800617c <__sinit>
 8006202:	3648      	adds	r6, #72	; 0x48
 8006204:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006208:	3b01      	subs	r3, #1
 800620a:	d503      	bpl.n	8006214 <__sfp+0x28>
 800620c:	6833      	ldr	r3, [r6, #0]
 800620e:	b30b      	cbz	r3, 8006254 <__sfp+0x68>
 8006210:	6836      	ldr	r6, [r6, #0]
 8006212:	e7f7      	b.n	8006204 <__sfp+0x18>
 8006214:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006218:	b9d5      	cbnz	r5, 8006250 <__sfp+0x64>
 800621a:	4b16      	ldr	r3, [pc, #88]	; (8006274 <__sfp+0x88>)
 800621c:	60e3      	str	r3, [r4, #12]
 800621e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006222:	6665      	str	r5, [r4, #100]	; 0x64
 8006224:	f000 f847 	bl	80062b6 <__retarget_lock_init_recursive>
 8006228:	f7ff ff96 	bl	8006158 <__sfp_lock_release>
 800622c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006230:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006234:	6025      	str	r5, [r4, #0]
 8006236:	61a5      	str	r5, [r4, #24]
 8006238:	2208      	movs	r2, #8
 800623a:	4629      	mov	r1, r5
 800623c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006240:	f7fd fc74 	bl	8003b2c <memset>
 8006244:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006248:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800624c:	4620      	mov	r0, r4
 800624e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006250:	3468      	adds	r4, #104	; 0x68
 8006252:	e7d9      	b.n	8006208 <__sfp+0x1c>
 8006254:	2104      	movs	r1, #4
 8006256:	4638      	mov	r0, r7
 8006258:	f7ff ff62 	bl	8006120 <__sfmoreglue>
 800625c:	4604      	mov	r4, r0
 800625e:	6030      	str	r0, [r6, #0]
 8006260:	2800      	cmp	r0, #0
 8006262:	d1d5      	bne.n	8006210 <__sfp+0x24>
 8006264:	f7ff ff78 	bl	8006158 <__sfp_lock_release>
 8006268:	230c      	movs	r3, #12
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	e7ee      	b.n	800624c <__sfp+0x60>
 800626e:	bf00      	nop
 8006270:	08007ca0 	.word	0x08007ca0
 8006274:	ffff0001 	.word	0xffff0001

08006278 <_fwalk_reent>:
 8006278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800627c:	4606      	mov	r6, r0
 800627e:	4688      	mov	r8, r1
 8006280:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006284:	2700      	movs	r7, #0
 8006286:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800628a:	f1b9 0901 	subs.w	r9, r9, #1
 800628e:	d505      	bpl.n	800629c <_fwalk_reent+0x24>
 8006290:	6824      	ldr	r4, [r4, #0]
 8006292:	2c00      	cmp	r4, #0
 8006294:	d1f7      	bne.n	8006286 <_fwalk_reent+0xe>
 8006296:	4638      	mov	r0, r7
 8006298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629c:	89ab      	ldrh	r3, [r5, #12]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d907      	bls.n	80062b2 <_fwalk_reent+0x3a>
 80062a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062a6:	3301      	adds	r3, #1
 80062a8:	d003      	beq.n	80062b2 <_fwalk_reent+0x3a>
 80062aa:	4629      	mov	r1, r5
 80062ac:	4630      	mov	r0, r6
 80062ae:	47c0      	blx	r8
 80062b0:	4307      	orrs	r7, r0
 80062b2:	3568      	adds	r5, #104	; 0x68
 80062b4:	e7e9      	b.n	800628a <_fwalk_reent+0x12>

080062b6 <__retarget_lock_init_recursive>:
 80062b6:	4770      	bx	lr

080062b8 <__retarget_lock_acquire_recursive>:
 80062b8:	4770      	bx	lr

080062ba <__retarget_lock_release_recursive>:
 80062ba:	4770      	bx	lr

080062bc <__swhatbuf_r>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	460e      	mov	r6, r1
 80062c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c4:	2900      	cmp	r1, #0
 80062c6:	b096      	sub	sp, #88	; 0x58
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	da08      	bge.n	80062e0 <__swhatbuf_r+0x24>
 80062ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	061a      	lsls	r2, r3, #24
 80062d8:	d410      	bmi.n	80062fc <__swhatbuf_r+0x40>
 80062da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062de:	e00e      	b.n	80062fe <__swhatbuf_r+0x42>
 80062e0:	466a      	mov	r2, sp
 80062e2:	f000 f8fb 	bl	80064dc <_fstat_r>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	dbf1      	blt.n	80062ce <__swhatbuf_r+0x12>
 80062ea:	9a01      	ldr	r2, [sp, #4]
 80062ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062f4:	425a      	negs	r2, r3
 80062f6:	415a      	adcs	r2, r3
 80062f8:	602a      	str	r2, [r5, #0]
 80062fa:	e7ee      	b.n	80062da <__swhatbuf_r+0x1e>
 80062fc:	2340      	movs	r3, #64	; 0x40
 80062fe:	2000      	movs	r0, #0
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	b016      	add	sp, #88	; 0x58
 8006304:	bd70      	pop	{r4, r5, r6, pc}
	...

08006308 <__smakebuf_r>:
 8006308:	898b      	ldrh	r3, [r1, #12]
 800630a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800630c:	079d      	lsls	r5, r3, #30
 800630e:	4606      	mov	r6, r0
 8006310:	460c      	mov	r4, r1
 8006312:	d507      	bpl.n	8006324 <__smakebuf_r+0x1c>
 8006314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	2301      	movs	r3, #1
 800631e:	6163      	str	r3, [r4, #20]
 8006320:	b002      	add	sp, #8
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	ab01      	add	r3, sp, #4
 8006326:	466a      	mov	r2, sp
 8006328:	f7ff ffc8 	bl	80062bc <__swhatbuf_r>
 800632c:	9900      	ldr	r1, [sp, #0]
 800632e:	4605      	mov	r5, r0
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff fb07 	bl	8005944 <_malloc_r>
 8006336:	b948      	cbnz	r0, 800634c <__smakebuf_r+0x44>
 8006338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633c:	059a      	lsls	r2, r3, #22
 800633e:	d4ef      	bmi.n	8006320 <__smakebuf_r+0x18>
 8006340:	f023 0303 	bic.w	r3, r3, #3
 8006344:	f043 0302 	orr.w	r3, r3, #2
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	e7e3      	b.n	8006314 <__smakebuf_r+0xc>
 800634c:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <__smakebuf_r+0x7c>)
 800634e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	6020      	str	r0, [r4, #0]
 8006354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006358:	81a3      	strh	r3, [r4, #12]
 800635a:	9b00      	ldr	r3, [sp, #0]
 800635c:	6163      	str	r3, [r4, #20]
 800635e:	9b01      	ldr	r3, [sp, #4]
 8006360:	6120      	str	r0, [r4, #16]
 8006362:	b15b      	cbz	r3, 800637c <__smakebuf_r+0x74>
 8006364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006368:	4630      	mov	r0, r6
 800636a:	f000 f8c9 	bl	8006500 <_isatty_r>
 800636e:	b128      	cbz	r0, 800637c <__smakebuf_r+0x74>
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	81a3      	strh	r3, [r4, #12]
 800637c:	89a0      	ldrh	r0, [r4, #12]
 800637e:	4305      	orrs	r5, r0
 8006380:	81a5      	strh	r5, [r4, #12]
 8006382:	e7cd      	b.n	8006320 <__smakebuf_r+0x18>
 8006384:	08006115 	.word	0x08006115

08006388 <_raise_r>:
 8006388:	291f      	cmp	r1, #31
 800638a:	b538      	push	{r3, r4, r5, lr}
 800638c:	4604      	mov	r4, r0
 800638e:	460d      	mov	r5, r1
 8006390:	d904      	bls.n	800639c <_raise_r+0x14>
 8006392:	2316      	movs	r3, #22
 8006394:	6003      	str	r3, [r0, #0]
 8006396:	f04f 30ff 	mov.w	r0, #4294967295
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800639e:	b112      	cbz	r2, 80063a6 <_raise_r+0x1e>
 80063a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063a4:	b94b      	cbnz	r3, 80063ba <_raise_r+0x32>
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 f830 	bl	800640c <_getpid_r>
 80063ac:	462a      	mov	r2, r5
 80063ae:	4601      	mov	r1, r0
 80063b0:	4620      	mov	r0, r4
 80063b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063b6:	f000 b817 	b.w	80063e8 <_kill_r>
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d00a      	beq.n	80063d4 <_raise_r+0x4c>
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	d103      	bne.n	80063ca <_raise_r+0x42>
 80063c2:	2316      	movs	r3, #22
 80063c4:	6003      	str	r3, [r0, #0]
 80063c6:	2001      	movs	r0, #1
 80063c8:	e7e7      	b.n	800639a <_raise_r+0x12>
 80063ca:	2400      	movs	r4, #0
 80063cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063d0:	4628      	mov	r0, r5
 80063d2:	4798      	blx	r3
 80063d4:	2000      	movs	r0, #0
 80063d6:	e7e0      	b.n	800639a <_raise_r+0x12>

080063d8 <raise>:
 80063d8:	4b02      	ldr	r3, [pc, #8]	; (80063e4 <raise+0xc>)
 80063da:	4601      	mov	r1, r0
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f7ff bfd3 	b.w	8006388 <_raise_r>
 80063e2:	bf00      	nop
 80063e4:	20000010 	.word	0x20000010

080063e8 <_kill_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	; (8006408 <_kill_r+0x20>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f001 f975 	bl	80076e4 <_kill>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d102      	bne.n	8006404 <_kill_r+0x1c>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	b103      	cbz	r3, 8006404 <_kill_r+0x1c>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	20000238 	.word	0x20000238

0800640c <_getpid_r>:
 800640c:	f001 b95a 	b.w	80076c4 <_getpid>

08006410 <__sread>:
 8006410:	b510      	push	{r4, lr}
 8006412:	460c      	mov	r4, r1
 8006414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006418:	f000 f894 	bl	8006544 <_read_r>
 800641c:	2800      	cmp	r0, #0
 800641e:	bfab      	itete	ge
 8006420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006422:	89a3      	ldrhlt	r3, [r4, #12]
 8006424:	181b      	addge	r3, r3, r0
 8006426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800642a:	bfac      	ite	ge
 800642c:	6563      	strge	r3, [r4, #84]	; 0x54
 800642e:	81a3      	strhlt	r3, [r4, #12]
 8006430:	bd10      	pop	{r4, pc}

08006432 <__swrite>:
 8006432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	461f      	mov	r7, r3
 8006438:	898b      	ldrh	r3, [r1, #12]
 800643a:	05db      	lsls	r3, r3, #23
 800643c:	4605      	mov	r5, r0
 800643e:	460c      	mov	r4, r1
 8006440:	4616      	mov	r6, r2
 8006442:	d505      	bpl.n	8006450 <__swrite+0x1e>
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	2302      	movs	r3, #2
 800644a:	2200      	movs	r2, #0
 800644c:	f000 f868 	bl	8006520 <_lseek_r>
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	4632      	mov	r2, r6
 800645e:	463b      	mov	r3, r7
 8006460:	4628      	mov	r0, r5
 8006462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	f000 b817 	b.w	8006498 <_write_r>

0800646a <__sseek>:
 800646a:	b510      	push	{r4, lr}
 800646c:	460c      	mov	r4, r1
 800646e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006472:	f000 f855 	bl	8006520 <_lseek_r>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	bf15      	itete	ne
 800647c:	6560      	strne	r0, [r4, #84]	; 0x54
 800647e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006486:	81a3      	strheq	r3, [r4, #12]
 8006488:	bf18      	it	ne
 800648a:	81a3      	strhne	r3, [r4, #12]
 800648c:	bd10      	pop	{r4, pc}

0800648e <__sclose>:
 800648e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006492:	f000 b813 	b.w	80064bc <_close_r>
	...

08006498 <_write_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d07      	ldr	r5, [pc, #28]	; (80064b8 <_write_r+0x20>)
 800649c:	4604      	mov	r4, r0
 800649e:	4608      	mov	r0, r1
 80064a0:	4611      	mov	r1, r2
 80064a2:	2200      	movs	r2, #0
 80064a4:	602a      	str	r2, [r5, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f001 f942 	bl	8007730 <_write>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_write_r+0x1e>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_write_r+0x1e>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	20000238 	.word	0x20000238

080064bc <_close_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d06      	ldr	r5, [pc, #24]	; (80064d8 <_close_r+0x1c>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	f001 f8ec 	bl	80076a4 <_close>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_close_r+0x1a>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_close_r+0x1a>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20000238 	.word	0x20000238

080064dc <_fstat_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4d07      	ldr	r5, [pc, #28]	; (80064fc <_fstat_r+0x20>)
 80064e0:	2300      	movs	r3, #0
 80064e2:	4604      	mov	r4, r0
 80064e4:	4608      	mov	r0, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	602b      	str	r3, [r5, #0]
 80064ea:	f001 f8e3 	bl	80076b4 <_fstat>
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	d102      	bne.n	80064f8 <_fstat_r+0x1c>
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	b103      	cbz	r3, 80064f8 <_fstat_r+0x1c>
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	bd38      	pop	{r3, r4, r5, pc}
 80064fa:	bf00      	nop
 80064fc:	20000238 	.word	0x20000238

08006500 <_isatty_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d06      	ldr	r5, [pc, #24]	; (800651c <_isatty_r+0x1c>)
 8006504:	2300      	movs	r3, #0
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	602b      	str	r3, [r5, #0]
 800650c:	f001 f8e2 	bl	80076d4 <_isatty>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d102      	bne.n	800651a <_isatty_r+0x1a>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b103      	cbz	r3, 800651a <_isatty_r+0x1a>
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	20000238 	.word	0x20000238

08006520 <_lseek_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4d07      	ldr	r5, [pc, #28]	; (8006540 <_lseek_r+0x20>)
 8006524:	4604      	mov	r4, r0
 8006526:	4608      	mov	r0, r1
 8006528:	4611      	mov	r1, r2
 800652a:	2200      	movs	r2, #0
 800652c:	602a      	str	r2, [r5, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	f001 f8e0 	bl	80076f4 <_lseek>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_lseek_r+0x1e>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_lseek_r+0x1e>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	20000238 	.word	0x20000238

08006544 <_read_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	4d07      	ldr	r5, [pc, #28]	; (8006564 <_read_r+0x20>)
 8006548:	4604      	mov	r4, r0
 800654a:	4608      	mov	r0, r1
 800654c:	4611      	mov	r1, r2
 800654e:	2200      	movs	r2, #0
 8006550:	602a      	str	r2, [r5, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	f001 f8d6 	bl	8007704 <_read>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_read_r+0x1e>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_read_r+0x1e>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	20000238 	.word	0x20000238

08006568 <cos>:
 8006568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800656a:	ec53 2b10 	vmov	r2, r3, d0
 800656e:	4826      	ldr	r0, [pc, #152]	; (8006608 <cos+0xa0>)
 8006570:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006574:	4281      	cmp	r1, r0
 8006576:	dc06      	bgt.n	8006586 <cos+0x1e>
 8006578:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006600 <cos+0x98>
 800657c:	b005      	add	sp, #20
 800657e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006582:	f000 baa9 	b.w	8006ad8 <__kernel_cos>
 8006586:	4821      	ldr	r0, [pc, #132]	; (800660c <cos+0xa4>)
 8006588:	4281      	cmp	r1, r0
 800658a:	dd09      	ble.n	80065a0 <cos+0x38>
 800658c:	ee10 0a10 	vmov	r0, s0
 8006590:	4619      	mov	r1, r3
 8006592:	f7f9 fe81 	bl	8000298 <__aeabi_dsub>
 8006596:	ec41 0b10 	vmov	d0, r0, r1
 800659a:	b005      	add	sp, #20
 800659c:	f85d fb04 	ldr.w	pc, [sp], #4
 80065a0:	4668      	mov	r0, sp
 80065a2:	f000 f88d 	bl	80066c0 <__ieee754_rem_pio2>
 80065a6:	f000 0003 	and.w	r0, r0, #3
 80065aa:	2801      	cmp	r0, #1
 80065ac:	d00b      	beq.n	80065c6 <cos+0x5e>
 80065ae:	2802      	cmp	r0, #2
 80065b0:	d016      	beq.n	80065e0 <cos+0x78>
 80065b2:	b9e0      	cbnz	r0, 80065ee <cos+0x86>
 80065b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065b8:	ed9d 0b00 	vldr	d0, [sp]
 80065bc:	f000 fa8c 	bl	8006ad8 <__kernel_cos>
 80065c0:	ec51 0b10 	vmov	r0, r1, d0
 80065c4:	e7e7      	b.n	8006596 <cos+0x2e>
 80065c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065ca:	ed9d 0b00 	vldr	d0, [sp]
 80065ce:	f000 fe9b 	bl	8007308 <__kernel_sin>
 80065d2:	ec53 2b10 	vmov	r2, r3, d0
 80065d6:	ee10 0a10 	vmov	r0, s0
 80065da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80065de:	e7da      	b.n	8006596 <cos+0x2e>
 80065e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065e4:	ed9d 0b00 	vldr	d0, [sp]
 80065e8:	f000 fa76 	bl	8006ad8 <__kernel_cos>
 80065ec:	e7f1      	b.n	80065d2 <cos+0x6a>
 80065ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065f2:	ed9d 0b00 	vldr	d0, [sp]
 80065f6:	2001      	movs	r0, #1
 80065f8:	f000 fe86 	bl	8007308 <__kernel_sin>
 80065fc:	e7e0      	b.n	80065c0 <cos+0x58>
 80065fe:	bf00      	nop
	...
 8006608:	3fe921fb 	.word	0x3fe921fb
 800660c:	7fefffff 	.word	0x7fefffff

08006610 <sin>:
 8006610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006612:	ec53 2b10 	vmov	r2, r3, d0
 8006616:	4828      	ldr	r0, [pc, #160]	; (80066b8 <sin+0xa8>)
 8006618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800661c:	4281      	cmp	r1, r0
 800661e:	dc07      	bgt.n	8006630 <sin+0x20>
 8006620:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80066b0 <sin+0xa0>
 8006624:	2000      	movs	r0, #0
 8006626:	b005      	add	sp, #20
 8006628:	f85d eb04 	ldr.w	lr, [sp], #4
 800662c:	f000 be6c 	b.w	8007308 <__kernel_sin>
 8006630:	4822      	ldr	r0, [pc, #136]	; (80066bc <sin+0xac>)
 8006632:	4281      	cmp	r1, r0
 8006634:	dd09      	ble.n	800664a <sin+0x3a>
 8006636:	ee10 0a10 	vmov	r0, s0
 800663a:	4619      	mov	r1, r3
 800663c:	f7f9 fe2c 	bl	8000298 <__aeabi_dsub>
 8006640:	ec41 0b10 	vmov	d0, r0, r1
 8006644:	b005      	add	sp, #20
 8006646:	f85d fb04 	ldr.w	pc, [sp], #4
 800664a:	4668      	mov	r0, sp
 800664c:	f000 f838 	bl	80066c0 <__ieee754_rem_pio2>
 8006650:	f000 0003 	and.w	r0, r0, #3
 8006654:	2801      	cmp	r0, #1
 8006656:	d00c      	beq.n	8006672 <sin+0x62>
 8006658:	2802      	cmp	r0, #2
 800665a:	d011      	beq.n	8006680 <sin+0x70>
 800665c:	b9f0      	cbnz	r0, 800669c <sin+0x8c>
 800665e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006662:	ed9d 0b00 	vldr	d0, [sp]
 8006666:	2001      	movs	r0, #1
 8006668:	f000 fe4e 	bl	8007308 <__kernel_sin>
 800666c:	ec51 0b10 	vmov	r0, r1, d0
 8006670:	e7e6      	b.n	8006640 <sin+0x30>
 8006672:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006676:	ed9d 0b00 	vldr	d0, [sp]
 800667a:	f000 fa2d 	bl	8006ad8 <__kernel_cos>
 800667e:	e7f5      	b.n	800666c <sin+0x5c>
 8006680:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006684:	ed9d 0b00 	vldr	d0, [sp]
 8006688:	2001      	movs	r0, #1
 800668a:	f000 fe3d 	bl	8007308 <__kernel_sin>
 800668e:	ec53 2b10 	vmov	r2, r3, d0
 8006692:	ee10 0a10 	vmov	r0, s0
 8006696:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800669a:	e7d1      	b.n	8006640 <sin+0x30>
 800669c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066a0:	ed9d 0b00 	vldr	d0, [sp]
 80066a4:	f000 fa18 	bl	8006ad8 <__kernel_cos>
 80066a8:	e7f1      	b.n	800668e <sin+0x7e>
 80066aa:	bf00      	nop
 80066ac:	f3af 8000 	nop.w
	...
 80066b8:	3fe921fb 	.word	0x3fe921fb
 80066bc:	7fefffff 	.word	0x7fefffff

080066c0 <__ieee754_rem_pio2>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	ed2d 8b02 	vpush	{d8}
 80066c8:	ec55 4b10 	vmov	r4, r5, d0
 80066cc:	4bca      	ldr	r3, [pc, #808]	; (80069f8 <__ieee754_rem_pio2+0x338>)
 80066ce:	b08b      	sub	sp, #44	; 0x2c
 80066d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80066d4:	4598      	cmp	r8, r3
 80066d6:	4682      	mov	sl, r0
 80066d8:	9502      	str	r5, [sp, #8]
 80066da:	dc08      	bgt.n	80066ee <__ieee754_rem_pio2+0x2e>
 80066dc:	2200      	movs	r2, #0
 80066de:	2300      	movs	r3, #0
 80066e0:	ed80 0b00 	vstr	d0, [r0]
 80066e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80066e8:	f04f 0b00 	mov.w	fp, #0
 80066ec:	e028      	b.n	8006740 <__ieee754_rem_pio2+0x80>
 80066ee:	4bc3      	ldr	r3, [pc, #780]	; (80069fc <__ieee754_rem_pio2+0x33c>)
 80066f0:	4598      	cmp	r8, r3
 80066f2:	dc78      	bgt.n	80067e6 <__ieee754_rem_pio2+0x126>
 80066f4:	9b02      	ldr	r3, [sp, #8]
 80066f6:	4ec2      	ldr	r6, [pc, #776]	; (8006a00 <__ieee754_rem_pio2+0x340>)
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	ee10 0a10 	vmov	r0, s0
 80066fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80069c0 <__ieee754_rem_pio2+0x300>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	4629      	mov	r1, r5
 8006706:	dd39      	ble.n	800677c <__ieee754_rem_pio2+0xbc>
 8006708:	f7f9 fdc6 	bl	8000298 <__aeabi_dsub>
 800670c:	45b0      	cmp	r8, r6
 800670e:	4604      	mov	r4, r0
 8006710:	460d      	mov	r5, r1
 8006712:	d01b      	beq.n	800674c <__ieee754_rem_pio2+0x8c>
 8006714:	a3ac      	add	r3, pc, #688	; (adr r3, 80069c8 <__ieee754_rem_pio2+0x308>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fdbd 	bl	8000298 <__aeabi_dsub>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	e9ca 2300 	strd	r2, r3, [sl]
 8006726:	4620      	mov	r0, r4
 8006728:	4629      	mov	r1, r5
 800672a:	f7f9 fdb5 	bl	8000298 <__aeabi_dsub>
 800672e:	a3a6      	add	r3, pc, #664	; (adr r3, 80069c8 <__ieee754_rem_pio2+0x308>)
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7f9 fdb0 	bl	8000298 <__aeabi_dsub>
 8006738:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800673c:	f04f 0b01 	mov.w	fp, #1
 8006740:	4658      	mov	r0, fp
 8006742:	b00b      	add	sp, #44	; 0x2c
 8006744:	ecbd 8b02 	vpop	{d8}
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	a3a0      	add	r3, pc, #640	; (adr r3, 80069d0 <__ieee754_rem_pio2+0x310>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 fda1 	bl	8000298 <__aeabi_dsub>
 8006756:	a3a0      	add	r3, pc, #640	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x318>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	4604      	mov	r4, r0
 800675e:	460d      	mov	r5, r1
 8006760:	f7f9 fd9a 	bl	8000298 <__aeabi_dsub>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	e9ca 2300 	strd	r2, r3, [sl]
 800676c:	4620      	mov	r0, r4
 800676e:	4629      	mov	r1, r5
 8006770:	f7f9 fd92 	bl	8000298 <__aeabi_dsub>
 8006774:	a398      	add	r3, pc, #608	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x318>)
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	e7db      	b.n	8006734 <__ieee754_rem_pio2+0x74>
 800677c:	f7f9 fd8e 	bl	800029c <__adddf3>
 8006780:	45b0      	cmp	r8, r6
 8006782:	4604      	mov	r4, r0
 8006784:	460d      	mov	r5, r1
 8006786:	d016      	beq.n	80067b6 <__ieee754_rem_pio2+0xf6>
 8006788:	a38f      	add	r3, pc, #572	; (adr r3, 80069c8 <__ieee754_rem_pio2+0x308>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f7f9 fd85 	bl	800029c <__adddf3>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	e9ca 2300 	strd	r2, r3, [sl]
 800679a:	4620      	mov	r0, r4
 800679c:	4629      	mov	r1, r5
 800679e:	f7f9 fd7b 	bl	8000298 <__aeabi_dsub>
 80067a2:	a389      	add	r3, pc, #548	; (adr r3, 80069c8 <__ieee754_rem_pio2+0x308>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 fd78 	bl	800029c <__adddf3>
 80067ac:	f04f 3bff 	mov.w	fp, #4294967295
 80067b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80067b4:	e7c4      	b.n	8006740 <__ieee754_rem_pio2+0x80>
 80067b6:	a386      	add	r3, pc, #536	; (adr r3, 80069d0 <__ieee754_rem_pio2+0x310>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7f9 fd6e 	bl	800029c <__adddf3>
 80067c0:	a385      	add	r3, pc, #532	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x318>)
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	4604      	mov	r4, r0
 80067c8:	460d      	mov	r5, r1
 80067ca:	f7f9 fd67 	bl	800029c <__adddf3>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	e9ca 2300 	strd	r2, r3, [sl]
 80067d6:	4620      	mov	r0, r4
 80067d8:	4629      	mov	r1, r5
 80067da:	f7f9 fd5d 	bl	8000298 <__aeabi_dsub>
 80067de:	a37e      	add	r3, pc, #504	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x318>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	e7e0      	b.n	80067a8 <__ieee754_rem_pio2+0xe8>
 80067e6:	4b87      	ldr	r3, [pc, #540]	; (8006a04 <__ieee754_rem_pio2+0x344>)
 80067e8:	4598      	cmp	r8, r3
 80067ea:	f300 80d9 	bgt.w	80069a0 <__ieee754_rem_pio2+0x2e0>
 80067ee:	f000 fe49 	bl	8007484 <fabs>
 80067f2:	ec55 4b10 	vmov	r4, r5, d0
 80067f6:	ee10 0a10 	vmov	r0, s0
 80067fa:	a379      	add	r3, pc, #484	; (adr r3, 80069e0 <__ieee754_rem_pio2+0x320>)
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	4629      	mov	r1, r5
 8006802:	f7f9 ff01 	bl	8000608 <__aeabi_dmul>
 8006806:	4b80      	ldr	r3, [pc, #512]	; (8006a08 <__ieee754_rem_pio2+0x348>)
 8006808:	2200      	movs	r2, #0
 800680a:	f7f9 fd47 	bl	800029c <__adddf3>
 800680e:	f7fa f9ab 	bl	8000b68 <__aeabi_d2iz>
 8006812:	4683      	mov	fp, r0
 8006814:	f7f9 fe8e 	bl	8000534 <__aeabi_i2d>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	ec43 2b18 	vmov	d8, r2, r3
 8006820:	a367      	add	r3, pc, #412	; (adr r3, 80069c0 <__ieee754_rem_pio2+0x300>)
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f7f9 feef 	bl	8000608 <__aeabi_dmul>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4620      	mov	r0, r4
 8006830:	4629      	mov	r1, r5
 8006832:	f7f9 fd31 	bl	8000298 <__aeabi_dsub>
 8006836:	a364      	add	r3, pc, #400	; (adr r3, 80069c8 <__ieee754_rem_pio2+0x308>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	4606      	mov	r6, r0
 800683e:	460f      	mov	r7, r1
 8006840:	ec51 0b18 	vmov	r0, r1, d8
 8006844:	f7f9 fee0 	bl	8000608 <__aeabi_dmul>
 8006848:	f1bb 0f1f 	cmp.w	fp, #31
 800684c:	4604      	mov	r4, r0
 800684e:	460d      	mov	r5, r1
 8006850:	dc0d      	bgt.n	800686e <__ieee754_rem_pio2+0x1ae>
 8006852:	4b6e      	ldr	r3, [pc, #440]	; (8006a0c <__ieee754_rem_pio2+0x34c>)
 8006854:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685c:	4543      	cmp	r3, r8
 800685e:	d006      	beq.n	800686e <__ieee754_rem_pio2+0x1ae>
 8006860:	4622      	mov	r2, r4
 8006862:	462b      	mov	r3, r5
 8006864:	4630      	mov	r0, r6
 8006866:	4639      	mov	r1, r7
 8006868:	f7f9 fd16 	bl	8000298 <__aeabi_dsub>
 800686c:	e00f      	b.n	800688e <__ieee754_rem_pio2+0x1ce>
 800686e:	462b      	mov	r3, r5
 8006870:	4622      	mov	r2, r4
 8006872:	4630      	mov	r0, r6
 8006874:	4639      	mov	r1, r7
 8006876:	f7f9 fd0f 	bl	8000298 <__aeabi_dsub>
 800687a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800687e:	9303      	str	r3, [sp, #12]
 8006880:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006884:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006888:	f1b8 0f10 	cmp.w	r8, #16
 800688c:	dc02      	bgt.n	8006894 <__ieee754_rem_pio2+0x1d4>
 800688e:	e9ca 0100 	strd	r0, r1, [sl]
 8006892:	e039      	b.n	8006908 <__ieee754_rem_pio2+0x248>
 8006894:	a34e      	add	r3, pc, #312	; (adr r3, 80069d0 <__ieee754_rem_pio2+0x310>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	ec51 0b18 	vmov	r0, r1, d8
 800689e:	f7f9 feb3 	bl	8000608 <__aeabi_dmul>
 80068a2:	4604      	mov	r4, r0
 80068a4:	460d      	mov	r5, r1
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4630      	mov	r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	f7f9 fcf3 	bl	8000298 <__aeabi_dsub>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	4630      	mov	r0, r6
 80068bc:	4639      	mov	r1, r7
 80068be:	f7f9 fceb 	bl	8000298 <__aeabi_dsub>
 80068c2:	4622      	mov	r2, r4
 80068c4:	462b      	mov	r3, r5
 80068c6:	f7f9 fce7 	bl	8000298 <__aeabi_dsub>
 80068ca:	a343      	add	r3, pc, #268	; (adr r3, 80069d8 <__ieee754_rem_pio2+0x318>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	ec51 0b18 	vmov	r0, r1, d8
 80068d8:	f7f9 fe96 	bl	8000608 <__aeabi_dmul>
 80068dc:	4622      	mov	r2, r4
 80068de:	462b      	mov	r3, r5
 80068e0:	f7f9 fcda 	bl	8000298 <__aeabi_dsub>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4604      	mov	r4, r0
 80068ea:	460d      	mov	r5, r1
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f7f9 fcd2 	bl	8000298 <__aeabi_dsub>
 80068f4:	9a03      	ldr	r2, [sp, #12]
 80068f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b31      	cmp	r3, #49	; 0x31
 80068fe:	dc24      	bgt.n	800694a <__ieee754_rem_pio2+0x28a>
 8006900:	e9ca 0100 	strd	r0, r1, [sl]
 8006904:	4646      	mov	r6, r8
 8006906:	464f      	mov	r7, r9
 8006908:	e9da 8900 	ldrd	r8, r9, [sl]
 800690c:	4630      	mov	r0, r6
 800690e:	4642      	mov	r2, r8
 8006910:	464b      	mov	r3, r9
 8006912:	4639      	mov	r1, r7
 8006914:	f7f9 fcc0 	bl	8000298 <__aeabi_dsub>
 8006918:	462b      	mov	r3, r5
 800691a:	4622      	mov	r2, r4
 800691c:	f7f9 fcbc 	bl	8000298 <__aeabi_dsub>
 8006920:	9b02      	ldr	r3, [sp, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006928:	f6bf af0a 	bge.w	8006740 <__ieee754_rem_pio2+0x80>
 800692c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006930:	f8ca 3004 	str.w	r3, [sl, #4]
 8006934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006938:	f8ca 8000 	str.w	r8, [sl]
 800693c:	f8ca 0008 	str.w	r0, [sl, #8]
 8006940:	f8ca 300c 	str.w	r3, [sl, #12]
 8006944:	f1cb 0b00 	rsb	fp, fp, #0
 8006948:	e6fa      	b.n	8006740 <__ieee754_rem_pio2+0x80>
 800694a:	a327      	add	r3, pc, #156	; (adr r3, 80069e8 <__ieee754_rem_pio2+0x328>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	ec51 0b18 	vmov	r0, r1, d8
 8006954:	f7f9 fe58 	bl	8000608 <__aeabi_dmul>
 8006958:	4604      	mov	r4, r0
 800695a:	460d      	mov	r5, r1
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4640      	mov	r0, r8
 8006962:	4649      	mov	r1, r9
 8006964:	f7f9 fc98 	bl	8000298 <__aeabi_dsub>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4606      	mov	r6, r0
 800696e:	460f      	mov	r7, r1
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	f7f9 fc90 	bl	8000298 <__aeabi_dsub>
 8006978:	4622      	mov	r2, r4
 800697a:	462b      	mov	r3, r5
 800697c:	f7f9 fc8c 	bl	8000298 <__aeabi_dsub>
 8006980:	a31b      	add	r3, pc, #108	; (adr r3, 80069f0 <__ieee754_rem_pio2+0x330>)
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	4604      	mov	r4, r0
 8006988:	460d      	mov	r5, r1
 800698a:	ec51 0b18 	vmov	r0, r1, d8
 800698e:	f7f9 fe3b 	bl	8000608 <__aeabi_dmul>
 8006992:	4622      	mov	r2, r4
 8006994:	462b      	mov	r3, r5
 8006996:	f7f9 fc7f 	bl	8000298 <__aeabi_dsub>
 800699a:	4604      	mov	r4, r0
 800699c:	460d      	mov	r5, r1
 800699e:	e75f      	b.n	8006860 <__ieee754_rem_pio2+0x1a0>
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <__ieee754_rem_pio2+0x350>)
 80069a2:	4598      	cmp	r8, r3
 80069a4:	dd36      	ble.n	8006a14 <__ieee754_rem_pio2+0x354>
 80069a6:	ee10 2a10 	vmov	r2, s0
 80069aa:	462b      	mov	r3, r5
 80069ac:	4620      	mov	r0, r4
 80069ae:	4629      	mov	r1, r5
 80069b0:	f7f9 fc72 	bl	8000298 <__aeabi_dsub>
 80069b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80069b8:	e9ca 0100 	strd	r0, r1, [sl]
 80069bc:	e694      	b.n	80066e8 <__ieee754_rem_pio2+0x28>
 80069be:	bf00      	nop
 80069c0:	54400000 	.word	0x54400000
 80069c4:	3ff921fb 	.word	0x3ff921fb
 80069c8:	1a626331 	.word	0x1a626331
 80069cc:	3dd0b461 	.word	0x3dd0b461
 80069d0:	1a600000 	.word	0x1a600000
 80069d4:	3dd0b461 	.word	0x3dd0b461
 80069d8:	2e037073 	.word	0x2e037073
 80069dc:	3ba3198a 	.word	0x3ba3198a
 80069e0:	6dc9c883 	.word	0x6dc9c883
 80069e4:	3fe45f30 	.word	0x3fe45f30
 80069e8:	2e000000 	.word	0x2e000000
 80069ec:	3ba3198a 	.word	0x3ba3198a
 80069f0:	252049c1 	.word	0x252049c1
 80069f4:	397b839a 	.word	0x397b839a
 80069f8:	3fe921fb 	.word	0x3fe921fb
 80069fc:	4002d97b 	.word	0x4002d97b
 8006a00:	3ff921fb 	.word	0x3ff921fb
 8006a04:	413921fb 	.word	0x413921fb
 8006a08:	3fe00000 	.word	0x3fe00000
 8006a0c:	0800807c 	.word	0x0800807c
 8006a10:	7fefffff 	.word	0x7fefffff
 8006a14:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006a18:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006a1c:	ee10 0a10 	vmov	r0, s0
 8006a20:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006a24:	ee10 6a10 	vmov	r6, s0
 8006a28:	460f      	mov	r7, r1
 8006a2a:	f7fa f89d 	bl	8000b68 <__aeabi_d2iz>
 8006a2e:	f7f9 fd81 	bl	8000534 <__aeabi_i2d>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4630      	mov	r0, r6
 8006a38:	4639      	mov	r1, r7
 8006a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a3e:	f7f9 fc2b 	bl	8000298 <__aeabi_dsub>
 8006a42:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <__ieee754_rem_pio2+0x410>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	f7f9 fddf 	bl	8000608 <__aeabi_dmul>
 8006a4a:	460f      	mov	r7, r1
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	f7fa f88b 	bl	8000b68 <__aeabi_d2iz>
 8006a52:	f7f9 fd6f 	bl	8000534 <__aeabi_i2d>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a62:	f7f9 fc19 	bl	8000298 <__aeabi_dsub>
 8006a66:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <__ieee754_rem_pio2+0x410>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f7f9 fdcd 	bl	8000608 <__aeabi_dmul>
 8006a6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a72:	ad04      	add	r5, sp, #16
 8006a74:	f04f 0803 	mov.w	r8, #3
 8006a78:	46a9      	mov	r9, r5
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	4632      	mov	r2, r6
 8006a80:	463b      	mov	r3, r7
 8006a82:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006a86:	46c3      	mov	fp, r8
 8006a88:	3d08      	subs	r5, #8
 8006a8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a8e:	f7fa f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d1f3      	bne.n	8006a7e <__ieee754_rem_pio2+0x3be>
 8006a96:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <__ieee754_rem_pio2+0x414>)
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	465b      	mov	r3, fp
 8006aa2:	4651      	mov	r1, sl
 8006aa4:	4648      	mov	r0, r9
 8006aa6:	f000 f8df 	bl	8006c68 <__kernel_rem_pio2>
 8006aaa:	9b02      	ldr	r3, [sp, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	4683      	mov	fp, r0
 8006ab0:	f6bf ae46 	bge.w	8006740 <__ieee754_rem_pio2+0x80>
 8006ab4:	e9da 2100 	ldrd	r2, r1, [sl]
 8006ab8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006abc:	e9ca 2300 	strd	r2, r3, [sl]
 8006ac0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ac8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006acc:	e73a      	b.n	8006944 <__ieee754_rem_pio2+0x284>
 8006ace:	bf00      	nop
 8006ad0:	41700000 	.word	0x41700000
 8006ad4:	080080fc 	.word	0x080080fc

08006ad8 <__kernel_cos>:
 8006ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	ec57 6b10 	vmov	r6, r7, d0
 8006ae0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006ae4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006ae8:	ed8d 1b00 	vstr	d1, [sp]
 8006aec:	da07      	bge.n	8006afe <__kernel_cos+0x26>
 8006aee:	ee10 0a10 	vmov	r0, s0
 8006af2:	4639      	mov	r1, r7
 8006af4:	f7fa f838 	bl	8000b68 <__aeabi_d2iz>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	f000 8088 	beq.w	8006c0e <__kernel_cos+0x136>
 8006afe:	4632      	mov	r2, r6
 8006b00:	463b      	mov	r3, r7
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7f9 fd7f 	bl	8000608 <__aeabi_dmul>
 8006b0a:	4b51      	ldr	r3, [pc, #324]	; (8006c50 <__kernel_cos+0x178>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	460d      	mov	r5, r1
 8006b12:	f7f9 fd79 	bl	8000608 <__aeabi_dmul>
 8006b16:	a340      	add	r3, pc, #256	; (adr r3, 8006c18 <__kernel_cos+0x140>)
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	4682      	mov	sl, r0
 8006b1e:	468b      	mov	fp, r1
 8006b20:	4620      	mov	r0, r4
 8006b22:	4629      	mov	r1, r5
 8006b24:	f7f9 fd70 	bl	8000608 <__aeabi_dmul>
 8006b28:	a33d      	add	r3, pc, #244	; (adr r3, 8006c20 <__kernel_cos+0x148>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fbb5 	bl	800029c <__adddf3>
 8006b32:	4622      	mov	r2, r4
 8006b34:	462b      	mov	r3, r5
 8006b36:	f7f9 fd67 	bl	8000608 <__aeabi_dmul>
 8006b3a:	a33b      	add	r3, pc, #236	; (adr r3, 8006c28 <__kernel_cos+0x150>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fbaa 	bl	8000298 <__aeabi_dsub>
 8006b44:	4622      	mov	r2, r4
 8006b46:	462b      	mov	r3, r5
 8006b48:	f7f9 fd5e 	bl	8000608 <__aeabi_dmul>
 8006b4c:	a338      	add	r3, pc, #224	; (adr r3, 8006c30 <__kernel_cos+0x158>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fba3 	bl	800029c <__adddf3>
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	f7f9 fd55 	bl	8000608 <__aeabi_dmul>
 8006b5e:	a336      	add	r3, pc, #216	; (adr r3, 8006c38 <__kernel_cos+0x160>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fb98 	bl	8000298 <__aeabi_dsub>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	462b      	mov	r3, r5
 8006b6c:	f7f9 fd4c 	bl	8000608 <__aeabi_dmul>
 8006b70:	a333      	add	r3, pc, #204	; (adr r3, 8006c40 <__kernel_cos+0x168>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fb91 	bl	800029c <__adddf3>
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	f7f9 fd43 	bl	8000608 <__aeabi_dmul>
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	f7f9 fd3f 	bl	8000608 <__aeabi_dmul>
 8006b8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	4630      	mov	r0, r6
 8006b94:	4639      	mov	r1, r7
 8006b96:	f7f9 fd37 	bl	8000608 <__aeabi_dmul>
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7f9 fb79 	bl	8000298 <__aeabi_dsub>
 8006ba6:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <__kernel_cos+0x17c>)
 8006ba8:	4598      	cmp	r8, r3
 8006baa:	4606      	mov	r6, r0
 8006bac:	460f      	mov	r7, r1
 8006bae:	dc10      	bgt.n	8006bd2 <__kernel_cos+0xfa>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	4659      	mov	r1, fp
 8006bb8:	f7f9 fb6e 	bl	8000298 <__aeabi_dsub>
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4926      	ldr	r1, [pc, #152]	; (8006c58 <__kernel_cos+0x180>)
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f7f9 fb68 	bl	8000298 <__aeabi_dsub>
 8006bc8:	ec41 0b10 	vmov	d0, r0, r1
 8006bcc:	b003      	add	sp, #12
 8006bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <__kernel_cos+0x184>)
 8006bd4:	4920      	ldr	r1, [pc, #128]	; (8006c58 <__kernel_cos+0x180>)
 8006bd6:	4598      	cmp	r8, r3
 8006bd8:	bfcc      	ite	gt
 8006bda:	4d21      	ldrgt	r5, [pc, #132]	; (8006c60 <__kernel_cos+0x188>)
 8006bdc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006be0:	2400      	movs	r4, #0
 8006be2:	4622      	mov	r2, r4
 8006be4:	462b      	mov	r3, r5
 8006be6:	2000      	movs	r0, #0
 8006be8:	f7f9 fb56 	bl	8000298 <__aeabi_dsub>
 8006bec:	4622      	mov	r2, r4
 8006bee:	4680      	mov	r8, r0
 8006bf0:	4689      	mov	r9, r1
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	4650      	mov	r0, sl
 8006bf6:	4659      	mov	r1, fp
 8006bf8:	f7f9 fb4e 	bl	8000298 <__aeabi_dsub>
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	463b      	mov	r3, r7
 8006c00:	f7f9 fb4a 	bl	8000298 <__aeabi_dsub>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	e7da      	b.n	8006bc4 <__kernel_cos+0xec>
 8006c0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006c48 <__kernel_cos+0x170>
 8006c12:	e7db      	b.n	8006bcc <__kernel_cos+0xf4>
 8006c14:	f3af 8000 	nop.w
 8006c18:	be8838d4 	.word	0xbe8838d4
 8006c1c:	bda8fae9 	.word	0xbda8fae9
 8006c20:	bdb4b1c4 	.word	0xbdb4b1c4
 8006c24:	3e21ee9e 	.word	0x3e21ee9e
 8006c28:	809c52ad 	.word	0x809c52ad
 8006c2c:	3e927e4f 	.word	0x3e927e4f
 8006c30:	19cb1590 	.word	0x19cb1590
 8006c34:	3efa01a0 	.word	0x3efa01a0
 8006c38:	16c15177 	.word	0x16c15177
 8006c3c:	3f56c16c 	.word	0x3f56c16c
 8006c40:	5555554c 	.word	0x5555554c
 8006c44:	3fa55555 	.word	0x3fa55555
 8006c48:	00000000 	.word	0x00000000
 8006c4c:	3ff00000 	.word	0x3ff00000
 8006c50:	3fe00000 	.word	0x3fe00000
 8006c54:	3fd33332 	.word	0x3fd33332
 8006c58:	3ff00000 	.word	0x3ff00000
 8006c5c:	3fe90000 	.word	0x3fe90000
 8006c60:	3fd20000 	.word	0x3fd20000
 8006c64:	00000000 	.word	0x00000000

08006c68 <__kernel_rem_pio2>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	ed2d 8b02 	vpush	{d8}
 8006c70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006c74:	f112 0f14 	cmn.w	r2, #20
 8006c78:	9308      	str	r3, [sp, #32]
 8006c7a:	9101      	str	r1, [sp, #4]
 8006c7c:	4bc4      	ldr	r3, [pc, #784]	; (8006f90 <__kernel_rem_pio2+0x328>)
 8006c7e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006c80:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c86:	9302      	str	r3, [sp, #8]
 8006c88:	9b08      	ldr	r3, [sp, #32]
 8006c8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c8e:	bfa8      	it	ge
 8006c90:	1ed4      	subge	r4, r2, #3
 8006c92:	9306      	str	r3, [sp, #24]
 8006c94:	bfb2      	itee	lt
 8006c96:	2400      	movlt	r4, #0
 8006c98:	2318      	movge	r3, #24
 8006c9a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006c9e:	f06f 0317 	mvn.w	r3, #23
 8006ca2:	fb04 3303 	mla	r3, r4, r3, r3
 8006ca6:	eb03 0a02 	add.w	sl, r3, r2
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	9a06      	ldr	r2, [sp, #24]
 8006cae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006f80 <__kernel_rem_pio2+0x318>
 8006cb2:	eb03 0802 	add.w	r8, r3, r2
 8006cb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006cb8:	1aa7      	subs	r7, r4, r2
 8006cba:	ae22      	add	r6, sp, #136	; 0x88
 8006cbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	4545      	cmp	r5, r8
 8006cc4:	dd13      	ble.n	8006cee <__kernel_rem_pio2+0x86>
 8006cc6:	9b08      	ldr	r3, [sp, #32]
 8006cc8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006f80 <__kernel_rem_pio2+0x318>
 8006ccc:	aa22      	add	r2, sp, #136	; 0x88
 8006cce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006cd2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006cd6:	f04f 0800 	mov.w	r8, #0
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	4598      	cmp	r8, r3
 8006cde:	dc2f      	bgt.n	8006d40 <__kernel_rem_pio2+0xd8>
 8006ce0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006ce4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006ce8:	462f      	mov	r7, r5
 8006cea:	2600      	movs	r6, #0
 8006cec:	e01b      	b.n	8006d26 <__kernel_rem_pio2+0xbe>
 8006cee:	42ef      	cmn	r7, r5
 8006cf0:	d407      	bmi.n	8006d02 <__kernel_rem_pio2+0x9a>
 8006cf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006cf6:	f7f9 fc1d 	bl	8000534 <__aeabi_i2d>
 8006cfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006cfe:	3501      	adds	r5, #1
 8006d00:	e7df      	b.n	8006cc2 <__kernel_rem_pio2+0x5a>
 8006d02:	ec51 0b18 	vmov	r0, r1, d8
 8006d06:	e7f8      	b.n	8006cfa <__kernel_rem_pio2+0x92>
 8006d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006d10:	f7f9 fc7a 	bl	8000608 <__aeabi_dmul>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d1c:	f7f9 fabe 	bl	800029c <__adddf3>
 8006d20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d24:	3601      	adds	r6, #1
 8006d26:	9b06      	ldr	r3, [sp, #24]
 8006d28:	429e      	cmp	r6, r3
 8006d2a:	f1a7 0708 	sub.w	r7, r7, #8
 8006d2e:	ddeb      	ble.n	8006d08 <__kernel_rem_pio2+0xa0>
 8006d30:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006d34:	f108 0801 	add.w	r8, r8, #1
 8006d38:	ecab 7b02 	vstmia	fp!, {d7}
 8006d3c:	3508      	adds	r5, #8
 8006d3e:	e7cc      	b.n	8006cda <__kernel_rem_pio2+0x72>
 8006d40:	9b02      	ldr	r3, [sp, #8]
 8006d42:	aa0e      	add	r2, sp, #56	; 0x38
 8006d44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d48:	930d      	str	r3, [sp, #52]	; 0x34
 8006d4a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006d4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d50:	9c02      	ldr	r4, [sp, #8]
 8006d52:	930c      	str	r3, [sp, #48]	; 0x30
 8006d54:	00e3      	lsls	r3, r4, #3
 8006d56:	930a      	str	r3, [sp, #40]	; 0x28
 8006d58:	ab9a      	add	r3, sp, #616	; 0x268
 8006d5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006d62:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006d66:	ab72      	add	r3, sp, #456	; 0x1c8
 8006d68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006d6c:	46c3      	mov	fp, r8
 8006d6e:	46a1      	mov	r9, r4
 8006d70:	f1b9 0f00 	cmp.w	r9, #0
 8006d74:	f1a5 0508 	sub.w	r5, r5, #8
 8006d78:	dc77      	bgt.n	8006e6a <__kernel_rem_pio2+0x202>
 8006d7a:	ec47 6b10 	vmov	d0, r6, r7
 8006d7e:	4650      	mov	r0, sl
 8006d80:	f000 fc0a 	bl	8007598 <scalbn>
 8006d84:	ec57 6b10 	vmov	r6, r7, d0
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006d8e:	ee10 0a10 	vmov	r0, s0
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 fc38 	bl	8000608 <__aeabi_dmul>
 8006d98:	ec41 0b10 	vmov	d0, r0, r1
 8006d9c:	f000 fb7c 	bl	8007498 <floor>
 8006da0:	4b7c      	ldr	r3, [pc, #496]	; (8006f94 <__kernel_rem_pio2+0x32c>)
 8006da2:	ec51 0b10 	vmov	r0, r1, d0
 8006da6:	2200      	movs	r2, #0
 8006da8:	f7f9 fc2e 	bl	8000608 <__aeabi_dmul>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4630      	mov	r0, r6
 8006db2:	4639      	mov	r1, r7
 8006db4:	f7f9 fa70 	bl	8000298 <__aeabi_dsub>
 8006db8:	460f      	mov	r7, r1
 8006dba:	4606      	mov	r6, r0
 8006dbc:	f7f9 fed4 	bl	8000b68 <__aeabi_d2iz>
 8006dc0:	9004      	str	r0, [sp, #16]
 8006dc2:	f7f9 fbb7 	bl	8000534 <__aeabi_i2d>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4630      	mov	r0, r6
 8006dcc:	4639      	mov	r1, r7
 8006dce:	f7f9 fa63 	bl	8000298 <__aeabi_dsub>
 8006dd2:	f1ba 0f00 	cmp.w	sl, #0
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	dd6d      	ble.n	8006eb8 <__kernel_rem_pio2+0x250>
 8006ddc:	1e62      	subs	r2, r4, #1
 8006dde:	ab0e      	add	r3, sp, #56	; 0x38
 8006de0:	9d04      	ldr	r5, [sp, #16]
 8006de2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006de6:	f1ca 0118 	rsb	r1, sl, #24
 8006dea:	fa40 f301 	asr.w	r3, r0, r1
 8006dee:	441d      	add	r5, r3
 8006df0:	408b      	lsls	r3, r1
 8006df2:	1ac0      	subs	r0, r0, r3
 8006df4:	ab0e      	add	r3, sp, #56	; 0x38
 8006df6:	9504      	str	r5, [sp, #16]
 8006df8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006dfc:	f1ca 0317 	rsb	r3, sl, #23
 8006e00:	fa40 fb03 	asr.w	fp, r0, r3
 8006e04:	f1bb 0f00 	cmp.w	fp, #0
 8006e08:	dd65      	ble.n	8006ed6 <__kernel_rem_pio2+0x26e>
 8006e0a:	9b04      	ldr	r3, [sp, #16]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	3301      	adds	r3, #1
 8006e10:	9304      	str	r3, [sp, #16]
 8006e12:	4615      	mov	r5, r2
 8006e14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e18:	4294      	cmp	r4, r2
 8006e1a:	f300 809c 	bgt.w	8006f56 <__kernel_rem_pio2+0x2ee>
 8006e1e:	f1ba 0f00 	cmp.w	sl, #0
 8006e22:	dd07      	ble.n	8006e34 <__kernel_rem_pio2+0x1cc>
 8006e24:	f1ba 0f01 	cmp.w	sl, #1
 8006e28:	f000 80c0 	beq.w	8006fac <__kernel_rem_pio2+0x344>
 8006e2c:	f1ba 0f02 	cmp.w	sl, #2
 8006e30:	f000 80c6 	beq.w	8006fc0 <__kernel_rem_pio2+0x358>
 8006e34:	f1bb 0f02 	cmp.w	fp, #2
 8006e38:	d14d      	bne.n	8006ed6 <__kernel_rem_pio2+0x26e>
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	4956      	ldr	r1, [pc, #344]	; (8006f98 <__kernel_rem_pio2+0x330>)
 8006e40:	2000      	movs	r0, #0
 8006e42:	f7f9 fa29 	bl	8000298 <__aeabi_dsub>
 8006e46:	4606      	mov	r6, r0
 8006e48:	460f      	mov	r7, r1
 8006e4a:	2d00      	cmp	r5, #0
 8006e4c:	d043      	beq.n	8006ed6 <__kernel_rem_pio2+0x26e>
 8006e4e:	4650      	mov	r0, sl
 8006e50:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006f88 <__kernel_rem_pio2+0x320>
 8006e54:	f000 fba0 	bl	8007598 <scalbn>
 8006e58:	4630      	mov	r0, r6
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	ec53 2b10 	vmov	r2, r3, d0
 8006e60:	f7f9 fa1a 	bl	8000298 <__aeabi_dsub>
 8006e64:	4606      	mov	r6, r0
 8006e66:	460f      	mov	r7, r1
 8006e68:	e035      	b.n	8006ed6 <__kernel_rem_pio2+0x26e>
 8006e6a:	4b4c      	ldr	r3, [pc, #304]	; (8006f9c <__kernel_rem_pio2+0x334>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	f7f9 fbc9 	bl	8000608 <__aeabi_dmul>
 8006e76:	f7f9 fe77 	bl	8000b68 <__aeabi_d2iz>
 8006e7a:	f7f9 fb5b 	bl	8000534 <__aeabi_i2d>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	ec43 2b18 	vmov	d8, r2, r3
 8006e86:	4b46      	ldr	r3, [pc, #280]	; (8006fa0 <__kernel_rem_pio2+0x338>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f7f9 fbbd 	bl	8000608 <__aeabi_dmul>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4630      	mov	r0, r6
 8006e94:	4639      	mov	r1, r7
 8006e96:	f7f9 f9ff 	bl	8000298 <__aeabi_dsub>
 8006e9a:	f7f9 fe65 	bl	8000b68 <__aeabi_d2iz>
 8006e9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ea2:	f84b 0b04 	str.w	r0, [fp], #4
 8006ea6:	ec51 0b18 	vmov	r0, r1, d8
 8006eaa:	f7f9 f9f7 	bl	800029c <__adddf3>
 8006eae:	f109 39ff 	add.w	r9, r9, #4294967295
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	e75b      	b.n	8006d70 <__kernel_rem_pio2+0x108>
 8006eb8:	d106      	bne.n	8006ec8 <__kernel_rem_pio2+0x260>
 8006eba:	1e63      	subs	r3, r4, #1
 8006ebc:	aa0e      	add	r2, sp, #56	; 0x38
 8006ebe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006ec2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006ec6:	e79d      	b.n	8006e04 <__kernel_rem_pio2+0x19c>
 8006ec8:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <__kernel_rem_pio2+0x33c>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f7f9 fe22 	bl	8000b14 <__aeabi_dcmpge>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d13d      	bne.n	8006f50 <__kernel_rem_pio2+0x2e8>
 8006ed4:	4683      	mov	fp, r0
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4630      	mov	r0, r6
 8006edc:	4639      	mov	r1, r7
 8006ede:	f7f9 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f000 80c0 	beq.w	8007068 <__kernel_rem_pio2+0x400>
 8006ee8:	1e65      	subs	r5, r4, #1
 8006eea:	462b      	mov	r3, r5
 8006eec:	2200      	movs	r2, #0
 8006eee:	9902      	ldr	r1, [sp, #8]
 8006ef0:	428b      	cmp	r3, r1
 8006ef2:	da6c      	bge.n	8006fce <__kernel_rem_pio2+0x366>
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	f000 8089 	beq.w	800700c <__kernel_rem_pio2+0x3a4>
 8006efa:	ab0e      	add	r3, sp, #56	; 0x38
 8006efc:	f1aa 0a18 	sub.w	sl, sl, #24
 8006f00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80ad 	beq.w	8007064 <__kernel_rem_pio2+0x3fc>
 8006f0a:	4650      	mov	r0, sl
 8006f0c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006f88 <__kernel_rem_pio2+0x320>
 8006f10:	f000 fb42 	bl	8007598 <scalbn>
 8006f14:	ab9a      	add	r3, sp, #616	; 0x268
 8006f16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006f1a:	ec57 6b10 	vmov	r6, r7, d0
 8006f1e:	00ec      	lsls	r4, r5, #3
 8006f20:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006f24:	46aa      	mov	sl, r5
 8006f26:	f1ba 0f00 	cmp.w	sl, #0
 8006f2a:	f280 80d6 	bge.w	80070da <__kernel_rem_pio2+0x472>
 8006f2e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006f80 <__kernel_rem_pio2+0x318>
 8006f32:	462e      	mov	r6, r5
 8006f34:	2e00      	cmp	r6, #0
 8006f36:	f2c0 8104 	blt.w	8007142 <__kernel_rem_pio2+0x4da>
 8006f3a:	ab72      	add	r3, sp, #456	; 0x1c8
 8006f3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006f40:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006fa8 <__kernel_rem_pio2+0x340>
 8006f44:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006f48:	f04f 0800 	mov.w	r8, #0
 8006f4c:	1baf      	subs	r7, r5, r6
 8006f4e:	e0ea      	b.n	8007126 <__kernel_rem_pio2+0x4be>
 8006f50:	f04f 0b02 	mov.w	fp, #2
 8006f54:	e759      	b.n	8006e0a <__kernel_rem_pio2+0x1a2>
 8006f56:	f8d8 3000 	ldr.w	r3, [r8]
 8006f5a:	b955      	cbnz	r5, 8006f72 <__kernel_rem_pio2+0x30a>
 8006f5c:	b123      	cbz	r3, 8006f68 <__kernel_rem_pio2+0x300>
 8006f5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006f62:	f8c8 3000 	str.w	r3, [r8]
 8006f66:	2301      	movs	r3, #1
 8006f68:	3201      	adds	r2, #1
 8006f6a:	f108 0804 	add.w	r8, r8, #4
 8006f6e:	461d      	mov	r5, r3
 8006f70:	e752      	b.n	8006e18 <__kernel_rem_pio2+0x1b0>
 8006f72:	1acb      	subs	r3, r1, r3
 8006f74:	f8c8 3000 	str.w	r3, [r8]
 8006f78:	462b      	mov	r3, r5
 8006f7a:	e7f5      	b.n	8006f68 <__kernel_rem_pio2+0x300>
 8006f7c:	f3af 8000 	nop.w
	...
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	08008248 	.word	0x08008248
 8006f94:	40200000 	.word	0x40200000
 8006f98:	3ff00000 	.word	0x3ff00000
 8006f9c:	3e700000 	.word	0x3e700000
 8006fa0:	41700000 	.word	0x41700000
 8006fa4:	3fe00000 	.word	0x3fe00000
 8006fa8:	08008208 	.word	0x08008208
 8006fac:	1e62      	subs	r2, r4, #1
 8006fae:	ab0e      	add	r3, sp, #56	; 0x38
 8006fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006fb8:	a90e      	add	r1, sp, #56	; 0x38
 8006fba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006fbe:	e739      	b.n	8006e34 <__kernel_rem_pio2+0x1cc>
 8006fc0:	1e62      	subs	r2, r4, #1
 8006fc2:	ab0e      	add	r3, sp, #56	; 0x38
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006fcc:	e7f4      	b.n	8006fb8 <__kernel_rem_pio2+0x350>
 8006fce:	a90e      	add	r1, sp, #56	; 0x38
 8006fd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	e789      	b.n	8006eee <__kernel_rem_pio2+0x286>
 8006fda:	3301      	adds	r3, #1
 8006fdc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	d0fa      	beq.n	8006fda <__kernel_rem_pio2+0x372>
 8006fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fe6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006fea:	446a      	add	r2, sp
 8006fec:	3a98      	subs	r2, #152	; 0x98
 8006fee:	920a      	str	r2, [sp, #40]	; 0x28
 8006ff0:	9a08      	ldr	r2, [sp, #32]
 8006ff2:	18e3      	adds	r3, r4, r3
 8006ff4:	18a5      	adds	r5, r4, r2
 8006ff6:	aa22      	add	r2, sp, #136	; 0x88
 8006ff8:	f104 0801 	add.w	r8, r4, #1
 8006ffc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007000:	9304      	str	r3, [sp, #16]
 8007002:	9b04      	ldr	r3, [sp, #16]
 8007004:	4543      	cmp	r3, r8
 8007006:	da04      	bge.n	8007012 <__kernel_rem_pio2+0x3aa>
 8007008:	461c      	mov	r4, r3
 800700a:	e6a3      	b.n	8006d54 <__kernel_rem_pio2+0xec>
 800700c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800700e:	2301      	movs	r3, #1
 8007010:	e7e4      	b.n	8006fdc <__kernel_rem_pio2+0x374>
 8007012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007014:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007018:	f7f9 fa8c 	bl	8000534 <__aeabi_i2d>
 800701c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007022:	46ab      	mov	fp, r5
 8007024:	461c      	mov	r4, r3
 8007026:	f04f 0900 	mov.w	r9, #0
 800702a:	2600      	movs	r6, #0
 800702c:	2700      	movs	r7, #0
 800702e:	9b06      	ldr	r3, [sp, #24]
 8007030:	4599      	cmp	r9, r3
 8007032:	dd06      	ble.n	8007042 <__kernel_rem_pio2+0x3da>
 8007034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007036:	e8e3 6702 	strd	r6, r7, [r3], #8
 800703a:	f108 0801 	add.w	r8, r8, #1
 800703e:	930a      	str	r3, [sp, #40]	; 0x28
 8007040:	e7df      	b.n	8007002 <__kernel_rem_pio2+0x39a>
 8007042:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007046:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800704a:	f7f9 fadd 	bl	8000608 <__aeabi_dmul>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4630      	mov	r0, r6
 8007054:	4639      	mov	r1, r7
 8007056:	f7f9 f921 	bl	800029c <__adddf3>
 800705a:	f109 0901 	add.w	r9, r9, #1
 800705e:	4606      	mov	r6, r0
 8007060:	460f      	mov	r7, r1
 8007062:	e7e4      	b.n	800702e <__kernel_rem_pio2+0x3c6>
 8007064:	3d01      	subs	r5, #1
 8007066:	e748      	b.n	8006efa <__kernel_rem_pio2+0x292>
 8007068:	ec47 6b10 	vmov	d0, r6, r7
 800706c:	f1ca 0000 	rsb	r0, sl, #0
 8007070:	f000 fa92 	bl	8007598 <scalbn>
 8007074:	ec57 6b10 	vmov	r6, r7, d0
 8007078:	4ba0      	ldr	r3, [pc, #640]	; (80072fc <__kernel_rem_pio2+0x694>)
 800707a:	ee10 0a10 	vmov	r0, s0
 800707e:	2200      	movs	r2, #0
 8007080:	4639      	mov	r1, r7
 8007082:	f7f9 fd47 	bl	8000b14 <__aeabi_dcmpge>
 8007086:	b1f8      	cbz	r0, 80070c8 <__kernel_rem_pio2+0x460>
 8007088:	4b9d      	ldr	r3, [pc, #628]	; (8007300 <__kernel_rem_pio2+0x698>)
 800708a:	2200      	movs	r2, #0
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 faba 	bl	8000608 <__aeabi_dmul>
 8007094:	f7f9 fd68 	bl	8000b68 <__aeabi_d2iz>
 8007098:	4680      	mov	r8, r0
 800709a:	f7f9 fa4b 	bl	8000534 <__aeabi_i2d>
 800709e:	4b97      	ldr	r3, [pc, #604]	; (80072fc <__kernel_rem_pio2+0x694>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	f7f9 fab1 	bl	8000608 <__aeabi_dmul>
 80070a6:	460b      	mov	r3, r1
 80070a8:	4602      	mov	r2, r0
 80070aa:	4639      	mov	r1, r7
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7f9 f8f3 	bl	8000298 <__aeabi_dsub>
 80070b2:	f7f9 fd59 	bl	8000b68 <__aeabi_d2iz>
 80070b6:	1c65      	adds	r5, r4, #1
 80070b8:	ab0e      	add	r3, sp, #56	; 0x38
 80070ba:	f10a 0a18 	add.w	sl, sl, #24
 80070be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070c2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80070c6:	e720      	b.n	8006f0a <__kernel_rem_pio2+0x2a2>
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 fd4c 	bl	8000b68 <__aeabi_d2iz>
 80070d0:	ab0e      	add	r3, sp, #56	; 0x38
 80070d2:	4625      	mov	r5, r4
 80070d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070d8:	e717      	b.n	8006f0a <__kernel_rem_pio2+0x2a2>
 80070da:	ab0e      	add	r3, sp, #56	; 0x38
 80070dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80070e0:	f7f9 fa28 	bl	8000534 <__aeabi_i2d>
 80070e4:	4632      	mov	r2, r6
 80070e6:	463b      	mov	r3, r7
 80070e8:	f7f9 fa8e 	bl	8000608 <__aeabi_dmul>
 80070ec:	4b84      	ldr	r3, [pc, #528]	; (8007300 <__kernel_rem_pio2+0x698>)
 80070ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80070f2:	2200      	movs	r2, #0
 80070f4:	4630      	mov	r0, r6
 80070f6:	4639      	mov	r1, r7
 80070f8:	f7f9 fa86 	bl	8000608 <__aeabi_dmul>
 80070fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007100:	4606      	mov	r6, r0
 8007102:	460f      	mov	r7, r1
 8007104:	e70f      	b.n	8006f26 <__kernel_rem_pio2+0x2be>
 8007106:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800710a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800710e:	f7f9 fa7b 	bl	8000608 <__aeabi_dmul>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800711a:	f7f9 f8bf 	bl	800029c <__adddf3>
 800711e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007122:	f108 0801 	add.w	r8, r8, #1
 8007126:	9b02      	ldr	r3, [sp, #8]
 8007128:	4598      	cmp	r8, r3
 800712a:	dc01      	bgt.n	8007130 <__kernel_rem_pio2+0x4c8>
 800712c:	45b8      	cmp	r8, r7
 800712e:	ddea      	ble.n	8007106 <__kernel_rem_pio2+0x49e>
 8007130:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007134:	ab4a      	add	r3, sp, #296	; 0x128
 8007136:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800713a:	ed87 7b00 	vstr	d7, [r7]
 800713e:	3e01      	subs	r6, #1
 8007140:	e6f8      	b.n	8006f34 <__kernel_rem_pio2+0x2cc>
 8007142:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007144:	2b02      	cmp	r3, #2
 8007146:	dc0b      	bgt.n	8007160 <__kernel_rem_pio2+0x4f8>
 8007148:	2b00      	cmp	r3, #0
 800714a:	dc35      	bgt.n	80071b8 <__kernel_rem_pio2+0x550>
 800714c:	d059      	beq.n	8007202 <__kernel_rem_pio2+0x59a>
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	f003 0007 	and.w	r0, r3, #7
 8007154:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007158:	ecbd 8b02 	vpop	{d8}
 800715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007160:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007162:	2b03      	cmp	r3, #3
 8007164:	d1f3      	bne.n	800714e <__kernel_rem_pio2+0x4e6>
 8007166:	ab4a      	add	r3, sp, #296	; 0x128
 8007168:	4423      	add	r3, r4
 800716a:	9306      	str	r3, [sp, #24]
 800716c:	461c      	mov	r4, r3
 800716e:	469a      	mov	sl, r3
 8007170:	9502      	str	r5, [sp, #8]
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f1aa 0a08 	sub.w	sl, sl, #8
 800717a:	dc6b      	bgt.n	8007254 <__kernel_rem_pio2+0x5ec>
 800717c:	46aa      	mov	sl, r5
 800717e:	f1ba 0f01 	cmp.w	sl, #1
 8007182:	f1a4 0408 	sub.w	r4, r4, #8
 8007186:	f300 8085 	bgt.w	8007294 <__kernel_rem_pio2+0x62c>
 800718a:	9c06      	ldr	r4, [sp, #24]
 800718c:	2000      	movs	r0, #0
 800718e:	3408      	adds	r4, #8
 8007190:	2100      	movs	r1, #0
 8007192:	2d01      	cmp	r5, #1
 8007194:	f300 809d 	bgt.w	80072d2 <__kernel_rem_pio2+0x66a>
 8007198:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800719c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80071a0:	f1bb 0f00 	cmp.w	fp, #0
 80071a4:	f040 809b 	bne.w	80072de <__kernel_rem_pio2+0x676>
 80071a8:	9b01      	ldr	r3, [sp, #4]
 80071aa:	e9c3 5600 	strd	r5, r6, [r3]
 80071ae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80071b2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80071b6:	e7ca      	b.n	800714e <__kernel_rem_pio2+0x4e6>
 80071b8:	3408      	adds	r4, #8
 80071ba:	ab4a      	add	r3, sp, #296	; 0x128
 80071bc:	441c      	add	r4, r3
 80071be:	462e      	mov	r6, r5
 80071c0:	2000      	movs	r0, #0
 80071c2:	2100      	movs	r1, #0
 80071c4:	2e00      	cmp	r6, #0
 80071c6:	da36      	bge.n	8007236 <__kernel_rem_pio2+0x5ce>
 80071c8:	f1bb 0f00 	cmp.w	fp, #0
 80071cc:	d039      	beq.n	8007242 <__kernel_rem_pio2+0x5da>
 80071ce:	4602      	mov	r2, r0
 80071d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071d4:	9c01      	ldr	r4, [sp, #4]
 80071d6:	e9c4 2300 	strd	r2, r3, [r4]
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80071e2:	f7f9 f859 	bl	8000298 <__aeabi_dsub>
 80071e6:	ae4c      	add	r6, sp, #304	; 0x130
 80071e8:	2401      	movs	r4, #1
 80071ea:	42a5      	cmp	r5, r4
 80071ec:	da2c      	bge.n	8007248 <__kernel_rem_pio2+0x5e0>
 80071ee:	f1bb 0f00 	cmp.w	fp, #0
 80071f2:	d002      	beq.n	80071fa <__kernel_rem_pio2+0x592>
 80071f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071f8:	4619      	mov	r1, r3
 80071fa:	9b01      	ldr	r3, [sp, #4]
 80071fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007200:	e7a5      	b.n	800714e <__kernel_rem_pio2+0x4e6>
 8007202:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007206:	eb0d 0403 	add.w	r4, sp, r3
 800720a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800720e:	2000      	movs	r0, #0
 8007210:	2100      	movs	r1, #0
 8007212:	2d00      	cmp	r5, #0
 8007214:	da09      	bge.n	800722a <__kernel_rem_pio2+0x5c2>
 8007216:	f1bb 0f00 	cmp.w	fp, #0
 800721a:	d002      	beq.n	8007222 <__kernel_rem_pio2+0x5ba>
 800721c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007220:	4619      	mov	r1, r3
 8007222:	9b01      	ldr	r3, [sp, #4]
 8007224:	e9c3 0100 	strd	r0, r1, [r3]
 8007228:	e791      	b.n	800714e <__kernel_rem_pio2+0x4e6>
 800722a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800722e:	f7f9 f835 	bl	800029c <__adddf3>
 8007232:	3d01      	subs	r5, #1
 8007234:	e7ed      	b.n	8007212 <__kernel_rem_pio2+0x5aa>
 8007236:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800723a:	f7f9 f82f 	bl	800029c <__adddf3>
 800723e:	3e01      	subs	r6, #1
 8007240:	e7c0      	b.n	80071c4 <__kernel_rem_pio2+0x55c>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	e7c5      	b.n	80071d4 <__kernel_rem_pio2+0x56c>
 8007248:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800724c:	f7f9 f826 	bl	800029c <__adddf3>
 8007250:	3401      	adds	r4, #1
 8007252:	e7ca      	b.n	80071ea <__kernel_rem_pio2+0x582>
 8007254:	e9da 8900 	ldrd	r8, r9, [sl]
 8007258:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800725c:	9b02      	ldr	r3, [sp, #8]
 800725e:	3b01      	subs	r3, #1
 8007260:	9302      	str	r3, [sp, #8]
 8007262:	4632      	mov	r2, r6
 8007264:	463b      	mov	r3, r7
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	f7f9 f817 	bl	800029c <__adddf3>
 800726e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4640      	mov	r0, r8
 8007278:	4649      	mov	r1, r9
 800727a:	f7f9 f80d 	bl	8000298 <__aeabi_dsub>
 800727e:	4632      	mov	r2, r6
 8007280:	463b      	mov	r3, r7
 8007282:	f7f9 f80b 	bl	800029c <__adddf3>
 8007286:	ed9d 7b08 	vldr	d7, [sp, #32]
 800728a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800728e:	ed8a 7b00 	vstr	d7, [sl]
 8007292:	e76e      	b.n	8007172 <__kernel_rem_pio2+0x50a>
 8007294:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007298:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800729c:	4640      	mov	r0, r8
 800729e:	4632      	mov	r2, r6
 80072a0:	463b      	mov	r3, r7
 80072a2:	4649      	mov	r1, r9
 80072a4:	f7f8 fffa 	bl	800029c <__adddf3>
 80072a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4640      	mov	r0, r8
 80072b2:	4649      	mov	r1, r9
 80072b4:	f7f8 fff0 	bl	8000298 <__aeabi_dsub>
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	f7f8 ffee 	bl	800029c <__adddf3>
 80072c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072c8:	ed84 7b00 	vstr	d7, [r4]
 80072cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072d0:	e755      	b.n	800717e <__kernel_rem_pio2+0x516>
 80072d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80072d6:	f7f8 ffe1 	bl	800029c <__adddf3>
 80072da:	3d01      	subs	r5, #1
 80072dc:	e759      	b.n	8007192 <__kernel_rem_pio2+0x52a>
 80072de:	9b01      	ldr	r3, [sp, #4]
 80072e0:	9a01      	ldr	r2, [sp, #4]
 80072e2:	601d      	str	r5, [r3, #0]
 80072e4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80072e8:	605c      	str	r4, [r3, #4]
 80072ea:	609f      	str	r7, [r3, #8]
 80072ec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80072f0:	60d3      	str	r3, [r2, #12]
 80072f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f6:	6110      	str	r0, [r2, #16]
 80072f8:	6153      	str	r3, [r2, #20]
 80072fa:	e728      	b.n	800714e <__kernel_rem_pio2+0x4e6>
 80072fc:	41700000 	.word	0x41700000
 8007300:	3e700000 	.word	0x3e700000
 8007304:	00000000 	.word	0x00000000

08007308 <__kernel_sin>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	ed2d 8b04 	vpush	{d8-d9}
 8007310:	eeb0 8a41 	vmov.f32	s16, s2
 8007314:	eef0 8a61 	vmov.f32	s17, s3
 8007318:	ec55 4b10 	vmov	r4, r5, d0
 800731c:	b083      	sub	sp, #12
 800731e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007322:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007326:	9001      	str	r0, [sp, #4]
 8007328:	da06      	bge.n	8007338 <__kernel_sin+0x30>
 800732a:	ee10 0a10 	vmov	r0, s0
 800732e:	4629      	mov	r1, r5
 8007330:	f7f9 fc1a 	bl	8000b68 <__aeabi_d2iz>
 8007334:	2800      	cmp	r0, #0
 8007336:	d051      	beq.n	80073dc <__kernel_sin+0xd4>
 8007338:	4622      	mov	r2, r4
 800733a:	462b      	mov	r3, r5
 800733c:	4620      	mov	r0, r4
 800733e:	4629      	mov	r1, r5
 8007340:	f7f9 f962 	bl	8000608 <__aeabi_dmul>
 8007344:	4682      	mov	sl, r0
 8007346:	468b      	mov	fp, r1
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4620      	mov	r0, r4
 800734e:	4629      	mov	r1, r5
 8007350:	f7f9 f95a 	bl	8000608 <__aeabi_dmul>
 8007354:	a341      	add	r3, pc, #260	; (adr r3, 800745c <__kernel_sin+0x154>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	4680      	mov	r8, r0
 800735c:	4689      	mov	r9, r1
 800735e:	4650      	mov	r0, sl
 8007360:	4659      	mov	r1, fp
 8007362:	f7f9 f951 	bl	8000608 <__aeabi_dmul>
 8007366:	a33f      	add	r3, pc, #252	; (adr r3, 8007464 <__kernel_sin+0x15c>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f7f8 ff94 	bl	8000298 <__aeabi_dsub>
 8007370:	4652      	mov	r2, sl
 8007372:	465b      	mov	r3, fp
 8007374:	f7f9 f948 	bl	8000608 <__aeabi_dmul>
 8007378:	a33c      	add	r3, pc, #240	; (adr r3, 800746c <__kernel_sin+0x164>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f7f8 ff8d 	bl	800029c <__adddf3>
 8007382:	4652      	mov	r2, sl
 8007384:	465b      	mov	r3, fp
 8007386:	f7f9 f93f 	bl	8000608 <__aeabi_dmul>
 800738a:	a33a      	add	r3, pc, #232	; (adr r3, 8007474 <__kernel_sin+0x16c>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 ff82 	bl	8000298 <__aeabi_dsub>
 8007394:	4652      	mov	r2, sl
 8007396:	465b      	mov	r3, fp
 8007398:	f7f9 f936 	bl	8000608 <__aeabi_dmul>
 800739c:	a337      	add	r3, pc, #220	; (adr r3, 800747c <__kernel_sin+0x174>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f8 ff7b 	bl	800029c <__adddf3>
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	4606      	mov	r6, r0
 80073aa:	460f      	mov	r7, r1
 80073ac:	b9eb      	cbnz	r3, 80073ea <__kernel_sin+0xe2>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4650      	mov	r0, sl
 80073b4:	4659      	mov	r1, fp
 80073b6:	f7f9 f927 	bl	8000608 <__aeabi_dmul>
 80073ba:	a325      	add	r3, pc, #148	; (adr r3, 8007450 <__kernel_sin+0x148>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f7f8 ff6a 	bl	8000298 <__aeabi_dsub>
 80073c4:	4642      	mov	r2, r8
 80073c6:	464b      	mov	r3, r9
 80073c8:	f7f9 f91e 	bl	8000608 <__aeabi_dmul>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4620      	mov	r0, r4
 80073d2:	4629      	mov	r1, r5
 80073d4:	f7f8 ff62 	bl	800029c <__adddf3>
 80073d8:	4604      	mov	r4, r0
 80073da:	460d      	mov	r5, r1
 80073dc:	ec45 4b10 	vmov	d0, r4, r5
 80073e0:	b003      	add	sp, #12
 80073e2:	ecbd 8b04 	vpop	{d8-d9}
 80073e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ea:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <__kernel_sin+0x150>)
 80073ec:	ec51 0b18 	vmov	r0, r1, d8
 80073f0:	2200      	movs	r2, #0
 80073f2:	f7f9 f909 	bl	8000608 <__aeabi_dmul>
 80073f6:	4632      	mov	r2, r6
 80073f8:	ec41 0b19 	vmov	d9, r0, r1
 80073fc:	463b      	mov	r3, r7
 80073fe:	4640      	mov	r0, r8
 8007400:	4649      	mov	r1, r9
 8007402:	f7f9 f901 	bl	8000608 <__aeabi_dmul>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	ec51 0b19 	vmov	r0, r1, d9
 800740e:	f7f8 ff43 	bl	8000298 <__aeabi_dsub>
 8007412:	4652      	mov	r2, sl
 8007414:	465b      	mov	r3, fp
 8007416:	f7f9 f8f7 	bl	8000608 <__aeabi_dmul>
 800741a:	ec53 2b18 	vmov	r2, r3, d8
 800741e:	f7f8 ff3b 	bl	8000298 <__aeabi_dsub>
 8007422:	a30b      	add	r3, pc, #44	; (adr r3, 8007450 <__kernel_sin+0x148>)
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	4606      	mov	r6, r0
 800742a:	460f      	mov	r7, r1
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f9 f8ea 	bl	8000608 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f8 ff2e 	bl	800029c <__adddf3>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f8 ff26 	bl	8000298 <__aeabi_dsub>
 800744c:	e7c4      	b.n	80073d8 <__kernel_sin+0xd0>
 800744e:	bf00      	nop
 8007450:	55555549 	.word	0x55555549
 8007454:	3fc55555 	.word	0x3fc55555
 8007458:	3fe00000 	.word	0x3fe00000
 800745c:	5acfd57c 	.word	0x5acfd57c
 8007460:	3de5d93a 	.word	0x3de5d93a
 8007464:	8a2b9ceb 	.word	0x8a2b9ceb
 8007468:	3e5ae5e6 	.word	0x3e5ae5e6
 800746c:	57b1fe7d 	.word	0x57b1fe7d
 8007470:	3ec71de3 	.word	0x3ec71de3
 8007474:	19c161d5 	.word	0x19c161d5
 8007478:	3f2a01a0 	.word	0x3f2a01a0
 800747c:	1110f8a6 	.word	0x1110f8a6
 8007480:	3f811111 	.word	0x3f811111

08007484 <fabs>:
 8007484:	ec51 0b10 	vmov	r0, r1, d0
 8007488:	ee10 2a10 	vmov	r2, s0
 800748c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007490:	ec43 2b10 	vmov	d0, r2, r3
 8007494:	4770      	bx	lr
	...

08007498 <floor>:
 8007498:	ec51 0b10 	vmov	r0, r1, d0
 800749c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80074a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80074a8:	2e13      	cmp	r6, #19
 80074aa:	ee10 5a10 	vmov	r5, s0
 80074ae:	ee10 8a10 	vmov	r8, s0
 80074b2:	460c      	mov	r4, r1
 80074b4:	dc32      	bgt.n	800751c <floor+0x84>
 80074b6:	2e00      	cmp	r6, #0
 80074b8:	da14      	bge.n	80074e4 <floor+0x4c>
 80074ba:	a333      	add	r3, pc, #204	; (adr r3, 8007588 <floor+0xf0>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f8 feec 	bl	800029c <__adddf3>
 80074c4:	2200      	movs	r2, #0
 80074c6:	2300      	movs	r3, #0
 80074c8:	f7f9 fb2e 	bl	8000b28 <__aeabi_dcmpgt>
 80074cc:	b138      	cbz	r0, 80074de <floor+0x46>
 80074ce:	2c00      	cmp	r4, #0
 80074d0:	da57      	bge.n	8007582 <floor+0xea>
 80074d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80074d6:	431d      	orrs	r5, r3
 80074d8:	d001      	beq.n	80074de <floor+0x46>
 80074da:	4c2d      	ldr	r4, [pc, #180]	; (8007590 <floor+0xf8>)
 80074dc:	2500      	movs	r5, #0
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	e025      	b.n	8007530 <floor+0x98>
 80074e4:	4f2b      	ldr	r7, [pc, #172]	; (8007594 <floor+0xfc>)
 80074e6:	4137      	asrs	r7, r6
 80074e8:	ea01 0307 	and.w	r3, r1, r7
 80074ec:	4303      	orrs	r3, r0
 80074ee:	d01f      	beq.n	8007530 <floor+0x98>
 80074f0:	a325      	add	r3, pc, #148	; (adr r3, 8007588 <floor+0xf0>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f8 fed1 	bl	800029c <__adddf3>
 80074fa:	2200      	movs	r2, #0
 80074fc:	2300      	movs	r3, #0
 80074fe:	f7f9 fb13 	bl	8000b28 <__aeabi_dcmpgt>
 8007502:	2800      	cmp	r0, #0
 8007504:	d0eb      	beq.n	80074de <floor+0x46>
 8007506:	2c00      	cmp	r4, #0
 8007508:	bfbe      	ittt	lt
 800750a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800750e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007512:	19a4      	addlt	r4, r4, r6
 8007514:	ea24 0407 	bic.w	r4, r4, r7
 8007518:	2500      	movs	r5, #0
 800751a:	e7e0      	b.n	80074de <floor+0x46>
 800751c:	2e33      	cmp	r6, #51	; 0x33
 800751e:	dd0b      	ble.n	8007538 <floor+0xa0>
 8007520:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007524:	d104      	bne.n	8007530 <floor+0x98>
 8007526:	ee10 2a10 	vmov	r2, s0
 800752a:	460b      	mov	r3, r1
 800752c:	f7f8 feb6 	bl	800029c <__adddf3>
 8007530:	ec41 0b10 	vmov	d0, r0, r1
 8007534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007538:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800753c:	f04f 33ff 	mov.w	r3, #4294967295
 8007540:	fa23 f707 	lsr.w	r7, r3, r7
 8007544:	4207      	tst	r7, r0
 8007546:	d0f3      	beq.n	8007530 <floor+0x98>
 8007548:	a30f      	add	r3, pc, #60	; (adr r3, 8007588 <floor+0xf0>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f8 fea5 	bl	800029c <__adddf3>
 8007552:	2200      	movs	r2, #0
 8007554:	2300      	movs	r3, #0
 8007556:	f7f9 fae7 	bl	8000b28 <__aeabi_dcmpgt>
 800755a:	2800      	cmp	r0, #0
 800755c:	d0bf      	beq.n	80074de <floor+0x46>
 800755e:	2c00      	cmp	r4, #0
 8007560:	da02      	bge.n	8007568 <floor+0xd0>
 8007562:	2e14      	cmp	r6, #20
 8007564:	d103      	bne.n	800756e <floor+0xd6>
 8007566:	3401      	adds	r4, #1
 8007568:	ea25 0507 	bic.w	r5, r5, r7
 800756c:	e7b7      	b.n	80074de <floor+0x46>
 800756e:	2301      	movs	r3, #1
 8007570:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007574:	fa03 f606 	lsl.w	r6, r3, r6
 8007578:	4435      	add	r5, r6
 800757a:	4545      	cmp	r5, r8
 800757c:	bf38      	it	cc
 800757e:	18e4      	addcc	r4, r4, r3
 8007580:	e7f2      	b.n	8007568 <floor+0xd0>
 8007582:	2500      	movs	r5, #0
 8007584:	462c      	mov	r4, r5
 8007586:	e7aa      	b.n	80074de <floor+0x46>
 8007588:	8800759c 	.word	0x8800759c
 800758c:	7e37e43c 	.word	0x7e37e43c
 8007590:	bff00000 	.word	0xbff00000
 8007594:	000fffff 	.word	0x000fffff

08007598 <scalbn>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	ec55 4b10 	vmov	r4, r5, d0
 800759e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80075a2:	4606      	mov	r6, r0
 80075a4:	462b      	mov	r3, r5
 80075a6:	b99a      	cbnz	r2, 80075d0 <scalbn+0x38>
 80075a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80075ac:	4323      	orrs	r3, r4
 80075ae:	d036      	beq.n	800761e <scalbn+0x86>
 80075b0:	4b39      	ldr	r3, [pc, #228]	; (8007698 <scalbn+0x100>)
 80075b2:	4629      	mov	r1, r5
 80075b4:	ee10 0a10 	vmov	r0, s0
 80075b8:	2200      	movs	r2, #0
 80075ba:	f7f9 f825 	bl	8000608 <__aeabi_dmul>
 80075be:	4b37      	ldr	r3, [pc, #220]	; (800769c <scalbn+0x104>)
 80075c0:	429e      	cmp	r6, r3
 80075c2:	4604      	mov	r4, r0
 80075c4:	460d      	mov	r5, r1
 80075c6:	da10      	bge.n	80075ea <scalbn+0x52>
 80075c8:	a32b      	add	r3, pc, #172	; (adr r3, 8007678 <scalbn+0xe0>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	e03a      	b.n	8007646 <scalbn+0xae>
 80075d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80075d4:	428a      	cmp	r2, r1
 80075d6:	d10c      	bne.n	80075f2 <scalbn+0x5a>
 80075d8:	ee10 2a10 	vmov	r2, s0
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f8 fe5c 	bl	800029c <__adddf3>
 80075e4:	4604      	mov	r4, r0
 80075e6:	460d      	mov	r5, r1
 80075e8:	e019      	b.n	800761e <scalbn+0x86>
 80075ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075ee:	460b      	mov	r3, r1
 80075f0:	3a36      	subs	r2, #54	; 0x36
 80075f2:	4432      	add	r2, r6
 80075f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075f8:	428a      	cmp	r2, r1
 80075fa:	dd08      	ble.n	800760e <scalbn+0x76>
 80075fc:	2d00      	cmp	r5, #0
 80075fe:	a120      	add	r1, pc, #128	; (adr r1, 8007680 <scalbn+0xe8>)
 8007600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007604:	da1c      	bge.n	8007640 <scalbn+0xa8>
 8007606:	a120      	add	r1, pc, #128	; (adr r1, 8007688 <scalbn+0xf0>)
 8007608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800760c:	e018      	b.n	8007640 <scalbn+0xa8>
 800760e:	2a00      	cmp	r2, #0
 8007610:	dd08      	ble.n	8007624 <scalbn+0x8c>
 8007612:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007616:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800761a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800761e:	ec45 4b10 	vmov	d0, r4, r5
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007628:	da19      	bge.n	800765e <scalbn+0xc6>
 800762a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800762e:	429e      	cmp	r6, r3
 8007630:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007634:	dd0a      	ble.n	800764c <scalbn+0xb4>
 8007636:	a112      	add	r1, pc, #72	; (adr r1, 8007680 <scalbn+0xe8>)
 8007638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e2      	bne.n	8007606 <scalbn+0x6e>
 8007640:	a30f      	add	r3, pc, #60	; (adr r3, 8007680 <scalbn+0xe8>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f8 ffdf 	bl	8000608 <__aeabi_dmul>
 800764a:	e7cb      	b.n	80075e4 <scalbn+0x4c>
 800764c:	a10a      	add	r1, pc, #40	; (adr r1, 8007678 <scalbn+0xe0>)
 800764e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0b8      	beq.n	80075c8 <scalbn+0x30>
 8007656:	a10e      	add	r1, pc, #56	; (adr r1, 8007690 <scalbn+0xf8>)
 8007658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800765c:	e7b4      	b.n	80075c8 <scalbn+0x30>
 800765e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007662:	3236      	adds	r2, #54	; 0x36
 8007664:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007668:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800766c:	4620      	mov	r0, r4
 800766e:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <scalbn+0x108>)
 8007670:	2200      	movs	r2, #0
 8007672:	e7e8      	b.n	8007646 <scalbn+0xae>
 8007674:	f3af 8000 	nop.w
 8007678:	c2f8f359 	.word	0xc2f8f359
 800767c:	01a56e1f 	.word	0x01a56e1f
 8007680:	8800759c 	.word	0x8800759c
 8007684:	7e37e43c 	.word	0x7e37e43c
 8007688:	8800759c 	.word	0x8800759c
 800768c:	fe37e43c 	.word	0xfe37e43c
 8007690:	c2f8f359 	.word	0xc2f8f359
 8007694:	81a56e1f 	.word	0x81a56e1f
 8007698:	43500000 	.word	0x43500000
 800769c:	ffff3cb0 	.word	0xffff3cb0
 80076a0:	3c900000 	.word	0x3c900000

080076a4 <_close>:
 80076a4:	4b02      	ldr	r3, [pc, #8]	; (80076b0 <_close+0xc>)
 80076a6:	2258      	movs	r2, #88	; 0x58
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	4770      	bx	lr
 80076b0:	20000238 	.word	0x20000238

080076b4 <_fstat>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	; (80076c0 <_fstat+0xc>)
 80076b6:	2258      	movs	r2, #88	; 0x58
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295
 80076be:	4770      	bx	lr
 80076c0:	20000238 	.word	0x20000238

080076c4 <_getpid>:
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <_getpid+0xc>)
 80076c6:	2258      	movs	r2, #88	; 0x58
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	f04f 30ff 	mov.w	r0, #4294967295
 80076ce:	4770      	bx	lr
 80076d0:	20000238 	.word	0x20000238

080076d4 <_isatty>:
 80076d4:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <_isatty+0xc>)
 80076d6:	2258      	movs	r2, #88	; 0x58
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	2000      	movs	r0, #0
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20000238 	.word	0x20000238

080076e4 <_kill>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <_kill+0xc>)
 80076e6:	2258      	movs	r2, #88	; 0x58
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	4770      	bx	lr
 80076f0:	20000238 	.word	0x20000238

080076f4 <_lseek>:
 80076f4:	4b02      	ldr	r3, [pc, #8]	; (8007700 <_lseek+0xc>)
 80076f6:	2258      	movs	r2, #88	; 0x58
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	f04f 30ff 	mov.w	r0, #4294967295
 80076fe:	4770      	bx	lr
 8007700:	20000238 	.word	0x20000238

08007704 <_read>:
 8007704:	4b02      	ldr	r3, [pc, #8]	; (8007710 <_read+0xc>)
 8007706:	2258      	movs	r2, #88	; 0x58
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	f04f 30ff 	mov.w	r0, #4294967295
 800770e:	4770      	bx	lr
 8007710:	20000238 	.word	0x20000238

08007714 <_sbrk>:
 8007714:	4a04      	ldr	r2, [pc, #16]	; (8007728 <_sbrk+0x14>)
 8007716:	6811      	ldr	r1, [r2, #0]
 8007718:	4603      	mov	r3, r0
 800771a:	b909      	cbnz	r1, 8007720 <_sbrk+0xc>
 800771c:	4903      	ldr	r1, [pc, #12]	; (800772c <_sbrk+0x18>)
 800771e:	6011      	str	r1, [r2, #0]
 8007720:	6810      	ldr	r0, [r2, #0]
 8007722:	4403      	add	r3, r0
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4770      	bx	lr
 8007728:	20000240 	.word	0x20000240
 800772c:	20000248 	.word	0x20000248

08007730 <_write>:
 8007730:	4b02      	ldr	r3, [pc, #8]	; (800773c <_write+0xc>)
 8007732:	2258      	movs	r2, #88	; 0x58
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	f04f 30ff 	mov.w	r0, #4294967295
 800773a:	4770      	bx	lr
 800773c:	20000238 	.word	0x20000238

08007740 <_exit>:
 8007740:	e7fe      	b.n	8007740 <_exit>
	...

08007744 <_init>:
 8007744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007746:	bf00      	nop
 8007748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774a:	bc08      	pop	{r3}
 800774c:	469e      	mov	lr, r3
 800774e:	4770      	bx	lr

08007750 <_fini>:
 8007750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007752:	bf00      	nop
 8007754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007756:	bc08      	pop	{r3}
 8007758:	469e      	mov	lr, r3
 800775a:	4770      	bx	lr
