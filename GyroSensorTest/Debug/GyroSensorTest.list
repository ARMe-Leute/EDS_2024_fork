
GyroSensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  08008990  08008990  00018990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f8  080094f8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009500  08009500  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009504  08009504  00019504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  200001f0  080096f8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080096f8  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078b6  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189b  00000000  00000000  00027ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00029378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  00029a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000625c  00000000  00000000  0002a050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00051898  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00081b44  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003130  00000000  00000000  00081b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e188  00000000  00000000  00084cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00092e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00092f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008974 	.word	0x08008974

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08008974 	.word	0x08008974

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <i2cActivate>:
// Init hardware



void i2cActivate()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 8000f62:	4b30      	ldr	r3, [pc, #192]	; (8001024 <i2cActivate+0xc8>)
 8000f64:	60fb      	str	r3, [r7, #12]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <i2cActivate+0xcc>)
 8000f68:	60bb      	str	r3, [r7, #8]
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <i2cActivate+0xd0>)
 8000f6c:	607b      	str	r3, [r7, #4]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f002 fb72 	bl	8003658 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f002 f85f 	bl	8003038 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f002 f920 	bl	80031c4 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8000f84:	2204      	movs	r2, #4
 8000f86:	2108      	movs	r1, #8
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f002 f9bd 	bl	8003308 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8000f8e:	2202      	movs	r2, #2
 8000f90:	2109      	movs	r1, #9
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f002 f916 	bl	80031c4 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8000f98:	2204      	movs	r2, #4
 8000f9a:	2109      	movs	r1, #9
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f002 f9b3 	bl	8003308 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f002 fa17 	bl	80033da <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8000fac:	2201      	movs	r2, #1
 8000fae:	2109      	movs	r1, #9
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f002 fa12 	bl	80033da <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	2211      	movs	r2, #17
 8000fba:	2100      	movs	r1, #0
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f002 fbfd 	bl	80037bc <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f002 fd2d 	bl	8003a22 <i2cEnableDevice>
#ifdef BALA2024

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 8000fc8:	68b8      	ldr	r0, [r7, #8]
 8000fca:	f002 fb45 	bl	8003658 <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 8000fce:	2202      	movs	r2, #2
 8000fd0:	210a      	movs	r1, #10
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f002 f8f6 	bl	80031c4 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 8000fd8:	2204      	movs	r2, #4
 8000fda:	210a      	movs	r1, #10
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f002 f993 	bl	8003308 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f002 f8ec 	bl	80031c4 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 8000fec:	2209      	movs	r2, #9
 8000fee:	2103      	movs	r1, #3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f002 f989 	bl	8003308 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	210a      	movs	r1, #10
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f002 f9ed 	bl	80033da <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 8001000:	2201      	movs	r2, #1
 8001002:	2103      	movs	r1, #3
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f002 f9e8 	bl	80033da <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 800100a:	2300      	movs	r3, #0
 800100c:	2211      	movs	r2, #17
 800100e:	2100      	movs	r1, #0
 8001010:	68b8      	ldr	r0, [r7, #8]
 8001012:	f002 fbd3 	bl	80037bc <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f002 fd03 	bl	8003a22 <i2cEnableDevice>
#endif /* BALA2024 */
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40005400 	.word	0x40005400
 8001028:	40005800 	.word	0x40005800
 800102c:	40020400 	.word	0x40020400

08001030 <ledActivate>:




void ledActivate(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <ledActivate+0x80>)
 8001036:	f002 f861 	bl	80030fc <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 800103a:	2201      	movs	r2, #1
 800103c:	210f      	movs	r1, #15
 800103e:	481c      	ldr	r0, [pc, #112]	; (80010b0 <ledActivate+0x80>)
 8001040:	f002 f8c0 	bl	80031c4 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8001044:	2200      	movs	r2, #0
 8001046:	210f      	movs	r1, #15
 8001048:	4819      	ldr	r0, [pc, #100]	; (80010b0 <ledActivate+0x80>)
 800104a:	f002 f9c6 	bl	80033da <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 800104e:	2201      	movs	r2, #1
 8001050:	210f      	movs	r1, #15
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <ledActivate+0x80>)
 8001054:	f002 fa0a 	bl	800346c <gpioSelectPushPullMode>
    LED_red_off;
 8001058:	210f      	movs	r1, #15
 800105a:	4815      	ldr	r0, [pc, #84]	; (80010b0 <ledActivate+0x80>)
 800105c:	f002 f8fd 	bl	800325a <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8001060:	2201      	movs	r2, #1
 8001062:	210e      	movs	r1, #14
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <ledActivate+0x80>)
 8001066:	f002 f8ad 	bl	80031c4 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 800106a:	2200      	movs	r2, #0
 800106c:	210e      	movs	r1, #14
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <ledActivate+0x80>)
 8001070:	f002 f9b3 	bl	80033da <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8001074:	2201      	movs	r2, #1
 8001076:	210e      	movs	r1, #14
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <ledActivate+0x80>)
 800107a:	f002 f9f7 	bl	800346c <gpioSelectPushPullMode>
    LED_green_off;
 800107e:	210e      	movs	r1, #14
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <ledActivate+0x80>)
 8001082:	f002 f8ea 	bl	800325a <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8001086:	2201      	movs	r2, #1
 8001088:	210d      	movs	r1, #13
 800108a:	4809      	ldr	r0, [pc, #36]	; (80010b0 <ledActivate+0x80>)
 800108c:	f002 f89a 	bl	80031c4 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8001090:	2200      	movs	r2, #0
 8001092:	210d      	movs	r1, #13
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <ledActivate+0x80>)
 8001096:	f002 f9a0 	bl	80033da <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 800109a:	2201      	movs	r2, #1
 800109c:	210d      	movs	r1, #13
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <ledActivate+0x80>)
 80010a0:	f002 f9e4 	bl	800346c <gpioSelectPushPullMode>
    LED_blue_off;
 80010a4:	210d      	movs	r1, #13
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <ledActivate+0x80>)
 80010a8:	f002 f8d7 	bl	800325a <gpioSetPin>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020400 	.word	0x40020400

080010b4 <BALOsetup>:

void BALOsetup(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 80010b8:	f7ff ffba 	bl	8001030 <ledActivate>
   i2cActivate();
 80010bc:	f7ff ff4e 	bl	8000f5c <i2cActivate>

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <AlBeOszi>:



uint16_t AlBeOszi(float *AlphaBeta)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

// Variables for Oszi Function
const int16_t oszi[3] = {70,50,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
const uint16_t osziColor = tft_GREY;
 80010cc:	f641 1323 	movw	r3, #6435	; 0x1923
 80010d0:	82fb      	strh	r3, [r7, #22]
const uint16_t aColor = tft_YELLOW;
 80010d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80010d6:	82bb      	strh	r3, [r7, #20]
const uint16_t bColor = tft_MAGENTA;
 80010d8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80010dc:	827b      	strh	r3, [r7, #18]

static int16_t timepos = 0;

// kleines Oszi als Zeitmitschrieb
	if (AlphaBeta[0] > 1) {AlphaBeta[0]= 1;}
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	dd03      	ble.n	80010fa <AlBeOszi+0x36>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010f8:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[0] < -1) {AlphaBeta[0]= -1;}
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	d502      	bpl.n	8001114 <AlBeOszi+0x50>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a5f      	ldr	r2, [pc, #380]	; (8001290 <AlBeOszi+0x1cc>)
 8001112:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] > 1) {AlphaBeta[1]= 1;}
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3304      	adds	r3, #4
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	dd04      	ble.n	8001134 <AlBeOszi+0x70>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001132:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] < -1) {AlphaBeta[1]= -1;}
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3304      	adds	r3, #4
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	d503      	bpl.n	8001152 <AlBeOszi+0x8e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3304      	adds	r3, #4
 800114e:	4a50      	ldr	r2, [pc, #320]	; (8001290 <AlBeOszi+0x1cc>)
 8001150:	601a      	str	r2, [r3, #0]
	int16_t Ya = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[0]);			// - ST7735 y = 0 upper line inverter direct to y Scale
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <AlBeOszi+0x1d0>)
 8001154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <AlBeOszi+0x1d0>)
 800115c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001160:	3b01      	subs	r3, #1
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b21b      	sxth	r3, r3
 800117e:	b29b      	uxth	r3, r3
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	b29b      	uxth	r3, r3
 8001184:	823b      	strh	r3, [r7, #16]
	int16_t Yb = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[1]);
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <AlBeOszi+0x1d0>)
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <AlBeOszi+0x1d0>)
 8001190:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001194:	3b01      	subs	r3, #1
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3304      	adds	r3, #4
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ae:	ee17 3a90 	vmov	r3, s15
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	81fb      	strh	r3, [r7, #14]
	int16_t osziHight = oszi[1]*2;
 80011bc:	4b35      	ldr	r3, [pc, #212]	; (8001294 <AlBeOszi+0x1d0>)
 80011be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	81bb      	strh	r3, [r7, #12]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <AlBeOszi+0x1d4>)
 80011cc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <AlBeOszi+0x1d0>)
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <AlBeOszi+0x1d0>)
 80011da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	b219      	sxth	r1, r3
 80011e6:	8afb      	ldrh	r3, [r7, #22]
 80011e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011ec:	f000 ff3a 	bl	8002064 <tftDrawFastVLine>
	if (Ya == Yb)
 80011f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d10a      	bne.n	8001212 <AlBeOszi+0x14e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <AlBeOszi+0x1d4>)
 80011fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001202:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fe6c 	bl	8001ee8 <tftDrawPixel>
 8001210:	e011      	b.n	8001236 <AlBeOszi+0x172>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <AlBeOszi+0x1d4>)
 8001214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001218:	8aba      	ldrh	r2, [r7, #20]
 800121a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fe62 	bl	8001ee8 <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <AlBeOszi+0x1d4>)
 8001226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122a:	8a7a      	ldrh	r2, [r7, #18]
 800122c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fe59 	bl	8001ee8 <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <AlBeOszi+0x1d4>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b29b      	uxth	r3, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <AlBeOszi+0x1d4>)
 8001246:	801a      	strh	r2, [r3, #0]
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <AlBeOszi+0x1d4>)
 800124a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <AlBeOszi+0x1d0>)
 8001250:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	dd02      	ble.n	800125e <AlBeOszi+0x19a>
	{
		timepos = 0;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <AlBeOszi+0x1d4>)
 800125a:	2200      	movs	r2, #0
 800125c:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <AlBeOszi+0x1d4>)
 8001260:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <AlBeOszi+0x1d0>)
 8001266:	f9b3 1000 	ldrsh.w	r1, [r3]
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <AlBeOszi+0x1d0>)
 800126c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001270:	0fda      	lsrs	r2, r3, #31
 8001272:	4413      	add	r3, r2
 8001274:	105b      	asrs	r3, r3, #1
 8001276:	b21a      	sxth	r2, r3
 8001278:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800127c:	f000 fef2 	bl	8002064 <tftDrawFastVLine>
	return timepos;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <AlBeOszi+0x1d4>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	b29b      	uxth	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	bf800000 	.word	0xbf800000
 8001294:	080089a8 	.word	0x080089a8
 8001298:	2000020c 	.word	0x2000020c

0800129c <mpuInit>:
 * @warning
 * - Modifying the I2C address may require hardware adjustments (e.g., soldering the AD0 pin).
 * - Disabling both gyroscope and accelerometer may lead to an unusable sensor state.
 */

int8_t mpuInit(MPU6050_t* sensor, I2C_TypeDef* i2cBus, uint8_t i2cAddr, uint8_t gyroScale, uint8_t accelRange, uint8_t lPconfig, uint8_t restart) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	460b      	mov	r3, r1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	4613      	mov	r3, r2
 80012b0:	71bb      	strb	r3, [r7, #6]

	sensor->i2c = i2cBus;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	601a      	str	r2, [r3, #0]

	if(i2cAddr == i2cAddr_MPU6050) {
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b68      	cmp	r3, #104	; 0x68
 80012bc:	d103      	bne.n	80012c6 <mpuInit+0x2a>
		sensor->i2c_address = i2cAddr;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	711a      	strb	r2, [r3, #4]
 80012c4:	e002      	b.n	80012cc <mpuInit+0x30>
		/**
		 * To change I2C Address of the MPU6050, the AD0-Pin of the sensor must be set high
		 * This pin is not connected to the board
		 * therefore, the standard address is always used to prevent communication errors.
		 */
		sensor->i2c_address = (uint8_t) i2cAddr_MPU6050;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2268      	movs	r2, #104	; 0x68
 80012ca:	711a      	strb	r2, [r3, #4]
	}

	uint8_t gyroReturn;
	switch (gyroScale) {
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d834      	bhi.n	800133c <mpuInit+0xa0>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <mpuInit+0x3c>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001307 	.word	0x08001307
 80012e4:	08001319 	.word	0x08001319
 80012e8:	0800132b 	.word	0x0800132b
	case 0:
		sensor->gyro_scale = (uint8_t) DISABLE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	22ff      	movs	r2, #255	; 0xff
 80012f0:	715a      	strb	r2, [r3, #5]
		break;
 80012f2:	e02c      	b.n	800134e <mpuInit+0xb2>
	case 1:
		sensor->gyro_scale = (uint8_t) MPU6050_GYRO_FSCALE_250;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	715a      	strb	r2, [r3, #5]
		sensor->gyro_scale_factor = (float) 1 / 131;	// 131 LSB/°/s
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4ab3      	ldr	r2, [pc, #716]	; (80015cc <mpuInit+0x330>)
 80012fe:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	75fb      	strb	r3, [r7, #23]
		break;
 8001304:	e023      	b.n	800134e <mpuInit+0xb2>
	case 2:
		sensor->gyro_scale = (uint8_t) MPU6050_GYRO_FSCALE_500;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2208      	movs	r2, #8
 800130a:	715a      	strb	r2, [r3, #5]
		sensor->gyro_scale_factor = (float) 1 / 65.5;	// 65.5 LSB/°/s
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4ab0      	ldr	r2, [pc, #704]	; (80015d0 <mpuInit+0x334>)
 8001310:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]
		break;
 8001316:	e01a      	b.n	800134e <mpuInit+0xb2>
	case 3:
		sensor->gyro_scale = (uint8_t) MPU6050_GYRO_FSCALE_1000;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2210      	movs	r2, #16
 800131c:	715a      	strb	r2, [r3, #5]
		sensor->gyro_scale_factor = (float) 1 / 32.8;	// 35.8 LSB/°/s
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4aac      	ldr	r2, [pc, #688]	; (80015d4 <mpuInit+0x338>)
 8001322:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	75fb      	strb	r3, [r7, #23]
		break;
 8001328:	e011      	b.n	800134e <mpuInit+0xb2>
	case 4:
		sensor->gyro_scale = (uint8_t) MPU6050_GYRO_FSCALE_2000;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2218      	movs	r2, #24
 800132e:	715a      	strb	r2, [r3, #5]
		sensor->gyro_scale_factor = (float) 1 / 16.4;	// 16.4 LSB/°/s
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4aa9      	ldr	r2, [pc, #676]	; (80015d8 <mpuInit+0x33c>)
 8001334:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	75fb      	strb	r3, [r7, #23]
		break;
 800133a:	e008      	b.n	800134e <mpuInit+0xb2>
	default:
		sensor->gyro_scale = (uint8_t) MPU6050_GYRO_FSCALE_250;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	715a      	strb	r2, [r3, #5]
		sensor->gyro_scale_factor = (float) 1 / 131;	// 131 LSB/°/s
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4aa1      	ldr	r2, [pc, #644]	; (80015cc <mpuInit+0x330>)
 8001346:	609a      	str	r2, [r3, #8]
		gyroReturn = 2;							// Error handling for wrong user input
 8001348:	2302      	movs	r3, #2
 800134a:	75fb      	strb	r3, [r7, #23]
		break;
 800134c:	bf00      	nop
	}

	uint8_t accelReturn;
	switch (accelRange) {
 800134e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001352:	2b10      	cmp	r3, #16
 8001354:	f200 8083 	bhi.w	800145e <mpuInit+0x1c2>
 8001358:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <mpuInit+0xc4>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	080013a5 	.word	0x080013a5
 8001364:	080013ab 	.word	0x080013ab
 8001368:	080013bf 	.word	0x080013bf
 800136c:	080013d3 	.word	0x080013d3
 8001370:	080013e7 	.word	0x080013e7
 8001374:	080013fb 	.word	0x080013fb
 8001378:	0800140f 	.word	0x0800140f
 800137c:	08001423 	.word	0x08001423
 8001380:	08001437 	.word	0x08001437
 8001384:	0800145f 	.word	0x0800145f
 8001388:	0800145f 	.word	0x0800145f
 800138c:	0800145f 	.word	0x0800145f
 8001390:	0800145f 	.word	0x0800145f
 8001394:	0800145f 	.word	0x0800145f
 8001398:	0800145f 	.word	0x0800145f
 800139c:	0800145f 	.word	0x0800145f
 80013a0:	0800144b 	.word	0x0800144b
	case 0:
		sensor->accel_range = (uint8_t) DISABLE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	22ff      	movs	r2, #255	; 0xff
 80013a8:	731a      	strb	r2, [r3, #12]
	case 1:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_2;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 16384;		// 16384 LSB/g
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80013b6:	611a      	str	r2, [r3, #16]
		accelReturn = 3;
 80013b8:	2303      	movs	r3, #3
 80013ba:	75bb      	strb	r3, [r7, #22]
		break;
 80013bc:	e059      	b.n	8001472 <mpuInit+0x1d6>
	case 2:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_2;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 16384;		// 16384 LSB/g
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80013ca:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	75bb      	strb	r3, [r7, #22]
		break;
 80013d0:	e04f      	b.n	8001472 <mpuInit+0x1d6>
	case 3:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_4;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2208      	movs	r2, #8
 80013d6:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 8192;		// 8192 LSB/g
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80013de:	611a      	str	r2, [r3, #16]
		accelReturn = 3;
 80013e0:	2303      	movs	r3, #3
 80013e2:	75bb      	strb	r3, [r7, #22]
		break;
 80013e4:	e045      	b.n	8001472 <mpuInit+0x1d6>
	case 4:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_4;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2208      	movs	r2, #8
 80013ea:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 8192;		// 8192 LSB/g
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80013f2:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75bb      	strb	r3, [r7, #22]
		break;
 80013f8:	e03b      	b.n	8001472 <mpuInit+0x1d6>
	case 5:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_8;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2210      	movs	r2, #16
 80013fe:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 4096;		// 4096 LSB/g
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001406:	611a      	str	r2, [r3, #16]
		accelReturn = 3;
 8001408:	2303      	movs	r3, #3
 800140a:	75bb      	strb	r3, [r7, #22]
		break;
 800140c:	e031      	b.n	8001472 <mpuInit+0x1d6>
	case 6:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_8;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2210      	movs	r2, #16
 8001412:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 4096;		// 4096 LSB/g
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800141a:	611a      	str	r2, [r3, #16]
		accelReturn = 3;
 800141c:	2303      	movs	r3, #3
 800141e:	75bb      	strb	r3, [r7, #22]
		break;
 8001420:	e027      	b.n	8001472 <mpuInit+0x1d6>
	case 7:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_8;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2210      	movs	r2, #16
 8001426:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 4096;		// 4096 LSB/g
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800142e:	611a      	str	r2, [r3, #16]
		accelReturn = 3;
 8001430:	2303      	movs	r3, #3
 8001432:	75bb      	strb	r3, [r7, #22]
		break;
 8001434:	e01d      	b.n	8001472 <mpuInit+0x1d6>
	case 8:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_8;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2210      	movs	r2, #16
 800143a:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 4096;		// 4096 LSB/g
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001442:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	75bb      	strb	r3, [r7, #22]
		break;
 8001448:	e013      	b.n	8001472 <mpuInit+0x1d6>
	case 16:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_16;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2218      	movs	r2, #24
 800144e:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 2048;		// 2048 LSB/g
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001456:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	75bb      	strb	r3, [r7, #22]
		break;
 800145c:	e009      	b.n	8001472 <mpuInit+0x1d6>
	default:
		sensor->accel_range = (uint8_t) MPU6050_ACCEL_RANGE_16;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2218      	movs	r2, #24
 8001462:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 2048;		// 2048 LSB/g
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800146a:	611a      	str	r2, [r3, #16]
		accelReturn = 3;
 800146c:	2303      	movs	r3, #3
 800146e:	75bb      	strb	r3, [r7, #22]
		break;
 8001470:	bf00      	nop
	}

	switch (lPconfig) {
 8001472:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001476:	2b06      	cmp	r3, #6
 8001478:	d828      	bhi.n	80014cc <mpuInit+0x230>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <mpuInit+0x1e4>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	0800149d 	.word	0x0800149d
 8001484:	080014a5 	.word	0x080014a5
 8001488:	080014ad 	.word	0x080014ad
 800148c:	080014b5 	.word	0x080014b5
 8001490:	080014bd 	.word	0x080014bd
 8001494:	080014cd 	.word	0x080014cd
 8001498:	080014c5 	.word	0x080014c5
	case MPU6050_LPBW_260:
		sensor->low_pass_filt_config = (uint8_t) MPU6050_LPBW_260;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	751a      	strb	r2, [r3, #20]
		break;
 80014a2:	e017      	b.n	80014d4 <mpuInit+0x238>
	case MPU6050_LPBW_184:
		sensor->low_pass_filt_config = (uint8_t) MPU6050_LPBW_184;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	751a      	strb	r2, [r3, #20]
		break;
 80014aa:	e013      	b.n	80014d4 <mpuInit+0x238>
	case MPU6050_LPBW_94:
		sensor->low_pass_filt_config = (uint8_t) MPU6050_LPBW_94;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2202      	movs	r2, #2
 80014b0:	751a      	strb	r2, [r3, #20]
		break;
 80014b2:	e00f      	b.n	80014d4 <mpuInit+0x238>
	case MPU6050_LPBW_44:
		sensor->low_pass_filt_config = (uint8_t) MPU6050_LPBW_44;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2203      	movs	r2, #3
 80014b8:	751a      	strb	r2, [r3, #20]
		break;
 80014ba:	e00b      	b.n	80014d4 <mpuInit+0x238>
	case MPU6050_LPBW_21:
		sensor->low_pass_filt_config = (uint8_t) MPU6050_LPBW_21;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2204      	movs	r2, #4
 80014c0:	751a      	strb	r2, [r3, #20]
		break;
 80014c2:	e007      	b.n	80014d4 <mpuInit+0x238>
	case MPU6050_LPBW_5:
		sensor->low_pass_filt_config = (uint8_t) MPU6050_LPBW_5;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2206      	movs	r2, #6
 80014c8:	751a      	strb	r2, [r3, #20]
		break;
 80014ca:	e003      	b.n	80014d4 <mpuInit+0x238>
	default:
		sensor->low_pass_filt_config = (uint8_t) MPU6050_LPBW_260;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	751a      	strb	r2, [r3, #20]
		break;
 80014d2:	bf00      	nop
	}

	sensor->temperature_factor = (float) 1 / 340;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a41      	ldr	r2, [pc, #260]	; (80015dc <mpuInit+0x340>)
 80014d8:	61da      	str	r2, [r3, #28]
	sensor->temperature_offset = (float) 36.35;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4a40      	ldr	r2, [pc, #256]	; (80015e0 <mpuInit+0x344>)
 80014de:	621a      	str	r2, [r3, #32]

	static int8_t step = -6;

	//TF for (int8_t i = step; i < 0; i++) {

		switch (step) {
 80014e0:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <mpuInit+0x348>)
 80014e2:	f993 3000 	ldrsb.w	r3, [r3]
 80014e6:	3306      	adds	r3, #6
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	f200 80a6 	bhi.w	800163a <mpuInit+0x39e>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <mpuInit+0x258>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	0800150d 	.word	0x0800150d
 80014f8:	08001521 	.word	0x08001521
 80014fc:	08001541 	.word	0x08001541
 8001500:	080015bd 	.word	0x080015bd
 8001504:	08001603 	.word	0x08001603
 8001508:	0800162d 	.word	0x0800162d
		case -6:		// CLK Speed von I2C auf 400kHz
			i2cSetClkSpd(sensor->i2c, I2C_CLOCK_1Mz); //set I2C Clock 1Mz
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2104      	movs	r1, #4
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f8d4 	bl	80036c0 <i2cSetClkSpd>
			step = -5;
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <mpuInit+0x348>)
 800151a:	22fb      	movs	r2, #251	; 0xfb
 800151c:	701a      	strb	r2, [r3, #0]
			break;
 800151e:	e08f      	b.n	8001640 <mpuInit+0x3a4>

		case -5:		// SW Reset
			if (restart != 0)
 8001520:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <mpuInit+0x29c>
			{
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_SWRESET)); // reboot memory content
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	7919      	ldrb	r1, [r3, #4]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	226b      	movs	r2, #107	; 0x6b
 8001534:	f002 f992 	bl	800385c <i2cSendByteToSlaveReg>
				//i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_MST_CTRL, (MPU6050_MST_P_NSR));
			}
			step = -4;
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <mpuInit+0x348>)
 800153a:	22fc      	movs	r2, #252	; 0xfc
 800153c:	701a      	strb	r2, [r3, #0]
			break;
 800153e:	e07f      	b.n	8001640 <mpuInit+0x3a4>

		case -4:
			// PWR Mngt
			if (sensor->accel_range == (uint8_t) DISABLE) { // Disable acceleration measurement
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	7b1b      	ldrb	r3, [r3, #12]
 8001544:	2bff      	cmp	r3, #255	; 0xff
 8001546:	d110      	bne.n	800156a <mpuInit+0x2ce>
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	7919      	ldrb	r1, [r3, #4]
 8001550:	2300      	movs	r3, #0
 8001552:	226b      	movs	r2, #107	; 0x6b
 8001554:	f002 f982 	bl	800385c <i2cSendByteToSlaveReg>
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00000111));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	7919      	ldrb	r1, [r3, #4]
 8001560:	2307      	movs	r3, #7
 8001562:	226c      	movs	r2, #108	; 0x6c
 8001564:	f002 f97a 	bl	800385c <i2cSendByteToSlaveReg>
 8001568:	e024      	b.n	80015b4 <mpuInit+0x318>
			}
			else {
				if (sensor->gyro_scale == (uint8_t) DISABLE) { // Disable gyroscope
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	795b      	ldrb	r3, [r3, #5]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d110      	bne.n	8001594 <mpuInit+0x2f8>
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	7919      	ldrb	r1, [r3, #4]
 800157a:	2300      	movs	r3, #0
 800157c:	226b      	movs	r2, #107	; 0x6b
 800157e:	f002 f96d 	bl	800385c <i2cSendByteToSlaveReg>
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00111000));
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	7919      	ldrb	r1, [r3, #4]
 800158a:	2338      	movs	r3, #56	; 0x38
 800158c:	226c      	movs	r2, #108	; 0x6c
 800158e:	f002 f965 	bl	800385c <i2cSendByteToSlaveReg>
 8001592:	e00f      	b.n	80015b4 <mpuInit+0x318>
				}
				else { // enable all measurements
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	7919      	ldrb	r1, [r3, #4]
 800159c:	2300      	movs	r3, #0
 800159e:	226b      	movs	r2, #107	; 0x6b
 80015a0:	f002 f95c 	bl	800385c <i2cSendByteToSlaveReg>
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00000000));
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	7919      	ldrb	r1, [r3, #4]
 80015ac:	2300      	movs	r3, #0
 80015ae:	226c      	movs	r2, #108	; 0x6c
 80015b0:	f002 f954 	bl	800385c <i2cSendByteToSlaveReg>
				}
			}
			step = -3;
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <mpuInit+0x348>)
 80015b6:	22fd      	movs	r2, #253	; 0xfd
 80015b8:	701a      	strb	r2, [r3, #0]
			break;
 80015ba:	e041      	b.n	8001640 <mpuInit+0x3a4>

		case -3:
			// GYRO Config
			if (sensor->gyro_scale == DISABLE) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	2bff      	cmp	r3, #255	; 0xff
 80015c2:	d111      	bne.n	80015e8 <mpuInit+0x34c>
				step=-2;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <mpuInit+0x348>)
 80015c6:	22fe      	movs	r2, #254	; 0xfe
 80015c8:	701a      	strb	r2, [r3, #0]
			}
			else {
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_GYRO_CONFIG, sensor->gyro_scale); 	// set scale range of gyroscope
				step = -2;
			}
			break;
 80015ca:	e039      	b.n	8001640 <mpuInit+0x3a4>
 80015cc:	3bfa232d 	.word	0x3bfa232d
 80015d0:	3c7a232d 	.word	0x3c7a232d
 80015d4:	3cf9c190 	.word	0x3cf9c190
 80015d8:	3d79c190 	.word	0x3d79c190
 80015dc:	3b40c0c1 	.word	0x3b40c0c1
 80015e0:	42116666 	.word	0x42116666
 80015e4:	20000000 	.word	0x20000000
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_GYRO_CONFIG, sensor->gyro_scale); 	// set scale range of gyroscope
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	7919      	ldrb	r1, [r3, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	221b      	movs	r2, #27
 80015f6:	f002 f931 	bl	800385c <i2cSendByteToSlaveReg>
				step = -2;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <mpuInit+0x3d0>)
 80015fc:	22fe      	movs	r2, #254	; 0xfe
 80015fe:	701a      	strb	r2, [r3, #0]
			break;
 8001600:	e01e      	b.n	8001640 <mpuInit+0x3a4>

		case -2:
			// ACCEL Config
			if (sensor->accel_range == DISABLE) {
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	7b1b      	ldrb	r3, [r3, #12]
 8001606:	2bff      	cmp	r3, #255	; 0xff
 8001608:	d103      	bne.n	8001612 <mpuInit+0x376>
				step = -1;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <mpuInit+0x3d0>)
 800160c:	22ff      	movs	r2, #255	; 0xff
 800160e:	701a      	strb	r2, [r3, #0]
			}
			else {
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_ACCEL_CONFIG, sensor->accel_range);	// set scale range of accelerometer
				step = -1;
			}
			break;
 8001610:	e016      	b.n	8001640 <mpuInit+0x3a4>
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_ACCEL_CONFIG, sensor->accel_range);	// set scale range of accelerometer
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	7919      	ldrb	r1, [r3, #4]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	7b1b      	ldrb	r3, [r3, #12]
 800161e:	221c      	movs	r2, #28
 8001620:	f002 f91c 	bl	800385c <i2cSendByteToSlaveReg>
				step = -1;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <mpuInit+0x3d0>)
 8001626:	22ff      	movs	r2, #255	; 0xff
 8001628:	701a      	strb	r2, [r3, #0]
			break;
 800162a:	e009      	b.n	8001640 <mpuInit+0x3a4>

		case -1:	// LowPass Config
			mpuInitLowpassFilter(sensor);
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 f90c 	bl	800184a <mpuInitLowpassFilter>
			step = 0;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <mpuInit+0x3d0>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
			break;
 8001638:	e002      	b.n	8001640 <mpuInit+0x3a4>

		default:
			step = -5;
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <mpuInit+0x3d0>)
 800163c:	22fb      	movs	r2, #251	; 0xfb
 800163e:	701a      	strb	r2, [r3, #0]
		}
	//TF }

	int8_t returnValue = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	757b      	strb	r3, [r7, #21]
	if(step != 0) {
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <mpuInit+0x3d0>)
 8001646:	f993 3000 	ldrsb.w	r3, [r3]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <mpuInit+0x3ba>
		returnValue = step;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <mpuInit+0x3d0>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	757b      	strb	r3, [r7, #21]
 8001654:	e004      	b.n	8001660 <mpuInit+0x3c4>
		/**
		 * I2C initialization error
		 */
	}
	else {
		returnValue = gyroReturn + accelReturn;
 8001656:	7dfa      	ldrb	r2, [r7, #23]
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	4413      	add	r3, r2
 800165c:	b2db      	uxtb	r3, r3
 800165e:	757b      	strb	r3, [r7, #21]
		/**
		 * Wrong user input for gyroscope and/or acceleration measurement
		 */
	}
	return returnValue;
 8001660:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000000 	.word	0x20000000

08001670 <mpuGetAcceleration>:
 *
 * @note
 * - Ensure the MPU6050 sensor has been properly initialized using `initMPU` before calling this function.
 * - This function assumes the accelerometer is properly configured during initialization.
 */
int16_t mpuGetAcceleration(MPU6050_t* sensor) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]
	I2C_RETURN_CODE_t i2c_return;
	uint8_t readBuffer[6];
	int16_t XYZ[3], *xyz;
	xyz = &XYZ[0];
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	61bb      	str	r3, [r7, #24]

	if (sensor->accel_range != (uint8_t) DISABLE) {
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7b1b      	ldrb	r3, [r3, #12]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d05c      	beq.n	8001740 <mpuGetAcceleration+0xd0>

	i2cBurstRegRead(sensor->i2c, sensor->i2c_address, MPU6050_AccXYZ,readBuffer, 6);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7919      	ldrb	r1, [r3, #4]
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2206      	movs	r2, #6
 8001694:	9200      	str	r2, [sp, #0]
 8001696:	223b      	movs	r2, #59	; 0x3b
 8001698:	f002 f92e 	bl	80038f8 <i2cBurstRegRead>
	*xyz = (readBuffer[0]<<8) + readBuffer[1];
 800169c:	7c3b      	ldrb	r3, [r7, #16]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	7c7b      	ldrb	r3, [r7, #17]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	801a      	strh	r2, [r3, #0]
	xyz++;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	3302      	adds	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
	*xyz = (readBuffer[2]<<8) + readBuffer[3];
 80016b8:	7cbb      	ldrb	r3, [r7, #18]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b29a      	uxth	r2, r3
 80016c0:	7cfb      	ldrb	r3, [r7, #19]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	801a      	strh	r2, [r3, #0]
	xyz++;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	3302      	adds	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
	*xyz = (readBuffer[4]<<8) + readBuffer[5];
 80016d4:	7d3b      	ldrb	r3, [r7, #20]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b29a      	uxth	r2, r3
 80016dc:	7d7b      	ldrb	r3, [r7, #21]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	801a      	strh	r2, [r3, #0]
		i2c_return = i2cBurstRegRead(sensor->i2c, sensor->i2c_address, MPU6050_AccXYZ, readBuffer, 6);
		X = ((readBuffer[0]<<8) | readBuffer[1]);
		Y = ((readBuffer[2]<<8) | readBuffer[3]);
		Z = ((readBuffer[4]<<8) | readBuffer[5]);
*/
		sensor->accel_xyz[0] = (float) XYZ[0] * sensor->accel_range_factor;
 80016ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		sensor->accel_xyz[1] = (float) XYZ[1] * sensor->accel_range_factor;
 8001706:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 7a04 	vldr	s15, [r3, #16]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		sensor->accel_xyz[2] = (float) XYZ[2] * sensor->accel_range_factor;
 8001722:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	edd3 7a04 	vldr	s15, [r3, #16]
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800173e:	e001      	b.n	8001744 <mpuGetAcceleration+0xd4>
	}
	else
	{
		i2c_return = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	77fb      	strb	r3, [r7, #31]
	}
	return (int16_t)i2c_return;
 8001744:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001748:	b21b      	sxth	r3, r3
}
 800174a:	4618      	mov	r0, r3
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <mpuGetAngleFromAcceleration>:
 * 2. Computes tilt angles in radians:
 *    - `AlphaBeta[0]`: Tilt angle in the X-Z plane (alpha) using the formula `atan2(X, Z)`.
 *    - `AlphaBeta[1]`: Tilt angle in the Y-Z plane (beta) using the formula `atan2(Y, Z)`.
 * 3. The calculated angles are stored in the `alpha_beta` array for further use.
 */
int16_t mpuGetAngleFromAcceleration(MPU6050_t* sensor) {
 8001752:	b5b0      	push	{r4, r5, r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	int16_t returnValue = mpuGetAcceleration(sensor);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff88 	bl	8001670 <mpuGetAcceleration>
 8001760:	4603      	mov	r3, r0
 8001762:	81fb      	strh	r3, [r7, #14]

	sensor->alpha_beta[0] = atan2(sensor->accel_xyz[0], sensor->accel_xyz[2]);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fef5 	bl	8000558 <__aeabi_f2d>
 800176e:	4604      	mov	r4, r0
 8001770:	460d      	mov	r5, r1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe feee 	bl	8000558 <__aeabi_f2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	ec43 2b11 	vmov	d1, r2, r3
 8001784:	ec45 4b10 	vmov	d0, r4, r5
 8001788:	f005 fe3e 	bl	8007408 <atan2>
 800178c:	ec53 2b10 	vmov	r2, r3, d0
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fa10 	bl	8000bb8 <__aeabi_d2f>
 8001798:	4602      	mov	r2, r0
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c
	sensor->alpha_beta[1] = atan2(sensor->accel_xyz[1], sensor->accel_xyz[2]);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fed8 	bl	8000558 <__aeabi_f2d>
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fed1 	bl	8000558 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	ec43 2b11 	vmov	d1, r2, r3
 80017be:	ec45 4b10 	vmov	d0, r4, r5
 80017c2:	f005 fe21 	bl	8007408 <atan2>
 80017c6:	ec53 2b10 	vmov	r2, r3, d0
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f9f3 	bl	8000bb8 <__aeabi_d2f>
 80017d2:	4602      	mov	r2, r0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40

	return returnValue;
 80017d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}

080017e4 <mpuGetTemperature>:
 *
 * @note
 * - Ensure the MPU6050 sensor has been properly initialized using `MPU_init` before calling this function.
 * - The temperature measurement reflects the internal sensor temperature, which may not correspond to the ambient temperature.
 */
int16_t mpuGetTemperature(MPU6050_t* sensor) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[2];
	int16_t rawTemp;
	I2C_RETURN_CODE_t i2cReturn;
	i2cReturn = i2cBurstRegRead(sensor->i2c, sensor->i2c_address, MPU6050_Temp, readBuffer, 2);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7919      	ldrb	r1, [r3, #4]
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	2202      	movs	r2, #2
 80017fa:	9200      	str	r2, [sp, #0]
 80017fc:	2241      	movs	r2, #65	; 0x41
 80017fe:	f002 f87b 	bl	80038f8 <i2cBurstRegRead>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
	rawTemp = (int16_t) (readBuffer[0]<<8) + readBuffer[1];
 8001806:	7a3b      	ldrb	r3, [r7, #8]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b29a      	uxth	r2, r3
 800180c:	7a7b      	ldrb	r3, [r7, #9]
 800180e:	b29b      	uxth	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	81bb      	strh	r3, [r7, #12]
	sensor->temperature_out = (float) rawTemp * sensor->temperature_factor + sensor->temperature_offset;
 8001816:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a07 	vldr	s15, [r3, #28]
 8001828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edc3 7a06 	vstr	s15, [r3, #24]
	return (int16_t) i2cReturn;
 800183c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001840:	b21b      	sxth	r3, r3
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <mpuInitLowpassFilter>:
 *
 * @note
 * - Ensure the MPU6050 sensor is properly initialized and powered before calling this function.
 * - Refer to the MPU6050 datasheet for valid DLPF configuration values and their corresponding cutoff frequencies.
 */
void mpuInitLowpassFilter(MPU6050_t* sensor) {
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_CONFIG, sensor->low_pass_filt_config);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7919      	ldrb	r1, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7d1b      	ldrb	r3, [r3, #20]
 800185e:	221a      	movs	r2, #26
 8001860:	f001 fffc 	bl	800385c <i2cSendByteToSlaveReg>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 80018ac:	482b      	ldr	r0, [pc, #172]	; (800195c <initRotaryPushButton+0xb4>)
 80018ae:	f001 fbc3 	bl	8003038 <gpioInitPort>
	gpioInitPort(GPIOB);
 80018b2:	482b      	ldr	r0, [pc, #172]	; (8001960 <initRotaryPushButton+0xb8>)
 80018b4:	f001 fbc0 	bl	8003038 <gpioInitPort>
	gpioInitPort(GPIOC);
 80018b8:	482a      	ldr	r0, [pc, #168]	; (8001964 <initRotaryPushButton+0xbc>)
 80018ba:	f001 fbbd 	bl	8003038 <gpioInitPort>
	gpioInitPort(GPIOD);
 80018be:	482a      	ldr	r0, [pc, #168]	; (8001968 <initRotaryPushButton+0xc0>)
 80018c0:	f001 fbba 	bl	8003038 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <initRotaryPushButton+0xc4>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <initRotaryPushButton+0xc4>)
 80018ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d2:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	4821      	ldr	r0, [pc, #132]	; (8001960 <initRotaryPushButton+0xb8>)
 80018da:	f001 fc73 	bl	80031c4 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 80018de:	2201      	movs	r2, #1
 80018e0:	2100      	movs	r1, #0
 80018e2:	481f      	ldr	r0, [pc, #124]	; (8001960 <initRotaryPushButton+0xb8>)
 80018e4:	f001 fdc2 	bl	800346c <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2101      	movs	r1, #1
 80018ec:	481c      	ldr	r0, [pc, #112]	; (8001960 <initRotaryPushButton+0xb8>)
 80018ee:	f001 fc69 	bl	80031c4 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2101      	movs	r1, #1
 80018f6:	481a      	ldr	r0, [pc, #104]	; (8001960 <initRotaryPushButton+0xb8>)
 80018f8:	f001 fdb8 	bl	800346c <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 80018fc:	2200      	movs	r2, #0
 80018fe:	210a      	movs	r1, #10
 8001900:	4816      	ldr	r0, [pc, #88]	; (800195c <initRotaryPushButton+0xb4>)
 8001902:	f001 fc5f 	bl	80031c4 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 8001906:	2201      	movs	r2, #1
 8001908:	210a      	movs	r1, #10
 800190a:	4814      	ldr	r0, [pc, #80]	; (800195c <initRotaryPushButton+0xb4>)
 800190c:	f001 fdae 	bl	800346c <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 8001910:	f001 f93c 	bl	8002b8c <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 8001914:	2100      	movs	r1, #0
 8001916:	4812      	ldr	r0, [pc, #72]	; (8001960 <initRotaryPushButton+0xb8>)
 8001918:	f001 f954 	bl	8002bc4 <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 800191c:	210a      	movs	r1, #10
 800191e:	480f      	ldr	r0, [pc, #60]	; (800195c <initRotaryPushButton+0xb4>)
 8001920:	f001 f950 	bl	8002bc4 <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 8001924:	2000      	movs	r0, #0
 8001926:	f001 fa01 	bl	8002d2c <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 800192a:	200a      	movs	r0, #10
 800192c:	f001 f9fe 	bl	8002d2c <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 8001930:	2101      	movs	r1, #1
 8001932:	2000      	movs	r0, #0
 8001934:	f001 fa1c 	bl	8002d70 <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 8001938:	2100      	movs	r1, #0
 800193a:	200a      	movs	r0, #10
 800193c:	f001 fa18 	bl	8002d70 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 8001940:	2006      	movs	r0, #6
 8001942:	f7ff ff93 	bl	800186c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 8001946:	2028      	movs	r0, #40	; 0x28
 8001948:	f7ff ff90 	bl	800186c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800194c:	b662      	cpsie	i
}
 800194e:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <initRotaryPushButton+0xc8>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	40020800 	.word	0x40020800
 8001968:	40020c00 	.word	0x40020c00
 800196c:	40023800 	.word	0x40023800
 8001970:	20000215 	.word	0x20000215

08001974 <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8001978:	4815      	ldr	r0, [pc, #84]	; (80019d0 <initRotaryPushButtonLED+0x5c>)
 800197a:	f001 fb5d 	bl	8003038 <gpioInitPort>
	gpioInitPort(GPIOB);
 800197e:	4815      	ldr	r0, [pc, #84]	; (80019d4 <initRotaryPushButtonLED+0x60>)
 8001980:	f001 fb5a 	bl	8003038 <gpioInitPort>
	gpioInitPort(GPIOC);
 8001984:	4814      	ldr	r0, [pc, #80]	; (80019d8 <initRotaryPushButtonLED+0x64>)
 8001986:	f001 fb57 	bl	8003038 <gpioInitPort>
	gpioInitPort(GPIOD);
 800198a:	4814      	ldr	r0, [pc, #80]	; (80019dc <initRotaryPushButtonLED+0x68>)
 800198c:	f001 fb54 	bl	8003038 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 8001990:	2201      	movs	r2, #1
 8001992:	210f      	movs	r1, #15
 8001994:	480f      	ldr	r0, [pc, #60]	; (80019d4 <initRotaryPushButtonLED+0x60>)
 8001996:	f001 fc15 	bl	80031c4 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 800199a:	2201      	movs	r2, #1
 800199c:	210e      	movs	r1, #14
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <initRotaryPushButtonLED+0x60>)
 80019a0:	f001 fc10 	bl	80031c4 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 80019a4:	2201      	movs	r2, #1
 80019a6:	210d      	movs	r1, #13
 80019a8:	480a      	ldr	r0, [pc, #40]	; (80019d4 <initRotaryPushButtonLED+0x60>)
 80019aa:	f001 fc0b 	bl	80031c4 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 80019ae:	210f      	movs	r1, #15
 80019b0:	4808      	ldr	r0, [pc, #32]	; (80019d4 <initRotaryPushButtonLED+0x60>)
 80019b2:	f001 fc52 	bl	800325a <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 80019b6:	210e      	movs	r1, #14
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <initRotaryPushButtonLED+0x60>)
 80019ba:	f001 fc4e 	bl	800325a <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 80019be:	210d      	movs	r1, #13
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <initRotaryPushButtonLED+0x60>)
 80019c2:	f001 fc4a 	bl	800325a <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <initRotaryPushButtonLED+0x6c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	20000216 	.word	0x20000216

080019e4 <setRotaryColor>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setRotaryColor(LED_COLOR_t color)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 80019ee:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <setRotaryColor+0x120>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <setRotaryColor+0x1c>
	{
		initRotaryPushButtonLED();
 80019fc:	f7ff ffba 	bl	8001974 <initRotaryPushButtonLED>
	}

	switch(color)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b07      	cmp	r3, #7
 8001a04:	d87a      	bhi.n	8001afc <setRotaryColor+0x118>
 8001a06:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <setRotaryColor+0x28>)
 8001a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0c:	08001a2d 	.word	0x08001a2d
 8001a10:	08001a47 	.word	0x08001a47
 8001a14:	08001a61 	.word	0x08001a61
 8001a18:	08001a7b 	.word	0x08001a7b
 8001a1c:	08001a95 	.word	0x08001a95
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001ac9 	.word	0x08001ac9
 8001a28:	08001ae3 	.word	0x08001ae3
	{
		/* Set LED color to BLACK */
		case LED_BLACK:
			gpioSetPin(LED_RED_ADR);
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	4836      	ldr	r0, [pc, #216]	; (8001b08 <setRotaryColor+0x124>)
 8001a30:	f001 fc13 	bl	800325a <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 8001a34:	210e      	movs	r1, #14
 8001a36:	4834      	ldr	r0, [pc, #208]	; (8001b08 <setRotaryColor+0x124>)
 8001a38:	f001 fc0f 	bl	800325a <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001a3c:	210d      	movs	r1, #13
 8001a3e:	4832      	ldr	r0, [pc, #200]	; (8001b08 <setRotaryColor+0x124>)
 8001a40:	f001 fc0b 	bl	800325a <gpioSetPin>
			break;
 8001a44:	e05a      	b.n	8001afc <setRotaryColor+0x118>

		/* Set LED color to RED */
		case LED_RED:
			gpioResetPin(LED_RED_ADR);
 8001a46:	210f      	movs	r1, #15
 8001a48:	482f      	ldr	r0, [pc, #188]	; (8001b08 <setRotaryColor+0x124>)
 8001a4a:	f001 fc31 	bl	80032b0 <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 8001a4e:	210e      	movs	r1, #14
 8001a50:	482d      	ldr	r0, [pc, #180]	; (8001b08 <setRotaryColor+0x124>)
 8001a52:	f001 fc02 	bl	800325a <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001a56:	210d      	movs	r1, #13
 8001a58:	482b      	ldr	r0, [pc, #172]	; (8001b08 <setRotaryColor+0x124>)
 8001a5a:	f001 fbfe 	bl	800325a <gpioSetPin>
			break;
 8001a5e:	e04d      	b.n	8001afc <setRotaryColor+0x118>

		/* Set LED color to GREEN */
		case LED_GREEN:
			gpioSetPin(LED_RED_ADR);
 8001a60:	210f      	movs	r1, #15
 8001a62:	4829      	ldr	r0, [pc, #164]	; (8001b08 <setRotaryColor+0x124>)
 8001a64:	f001 fbf9 	bl	800325a <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 8001a68:	210e      	movs	r1, #14
 8001a6a:	4827      	ldr	r0, [pc, #156]	; (8001b08 <setRotaryColor+0x124>)
 8001a6c:	f001 fc20 	bl	80032b0 <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001a70:	210d      	movs	r1, #13
 8001a72:	4825      	ldr	r0, [pc, #148]	; (8001b08 <setRotaryColor+0x124>)
 8001a74:	f001 fbf1 	bl	800325a <gpioSetPin>
			break;
 8001a78:	e040      	b.n	8001afc <setRotaryColor+0x118>

		/* Set LED color to BLUE */
		case LED_BLUE:
			gpioSetPin(LED_RED_ADR);
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	4822      	ldr	r0, [pc, #136]	; (8001b08 <setRotaryColor+0x124>)
 8001a7e:	f001 fbec 	bl	800325a <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 8001a82:	210e      	movs	r1, #14
 8001a84:	4820      	ldr	r0, [pc, #128]	; (8001b08 <setRotaryColor+0x124>)
 8001a86:	f001 fbe8 	bl	800325a <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 8001a8a:	210d      	movs	r1, #13
 8001a8c:	481e      	ldr	r0, [pc, #120]	; (8001b08 <setRotaryColor+0x124>)
 8001a8e:	f001 fc0f 	bl	80032b0 <gpioResetPin>
			break;
 8001a92:	e033      	b.n	8001afc <setRotaryColor+0x118>

		/* Set LED color to MAGENTA */
		case LED_MAGENTA:
			gpioResetPin(LED_RED_ADR);
 8001a94:	210f      	movs	r1, #15
 8001a96:	481c      	ldr	r0, [pc, #112]	; (8001b08 <setRotaryColor+0x124>)
 8001a98:	f001 fc0a 	bl	80032b0 <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 8001a9c:	210e      	movs	r1, #14
 8001a9e:	481a      	ldr	r0, [pc, #104]	; (8001b08 <setRotaryColor+0x124>)
 8001aa0:	f001 fbdb 	bl	800325a <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 8001aa4:	210d      	movs	r1, #13
 8001aa6:	4818      	ldr	r0, [pc, #96]	; (8001b08 <setRotaryColor+0x124>)
 8001aa8:	f001 fc02 	bl	80032b0 <gpioResetPin>
			break;
 8001aac:	e026      	b.n	8001afc <setRotaryColor+0x118>

		/* Set LED color to CYAN */
		case LED_CYAN:
			gpioSetPin(LED_RED_ADR);
 8001aae:	210f      	movs	r1, #15
 8001ab0:	4815      	ldr	r0, [pc, #84]	; (8001b08 <setRotaryColor+0x124>)
 8001ab2:	f001 fbd2 	bl	800325a <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 8001ab6:	210e      	movs	r1, #14
 8001ab8:	4813      	ldr	r0, [pc, #76]	; (8001b08 <setRotaryColor+0x124>)
 8001aba:	f001 fbf9 	bl	80032b0 <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 8001abe:	210d      	movs	r1, #13
 8001ac0:	4811      	ldr	r0, [pc, #68]	; (8001b08 <setRotaryColor+0x124>)
 8001ac2:	f001 fbf5 	bl	80032b0 <gpioResetPin>
			break;
 8001ac6:	e019      	b.n	8001afc <setRotaryColor+0x118>

		/* Set LED color to YELLOW */
		case LED_YELLOW:
			gpioResetPin(LED_RED_ADR);
 8001ac8:	210f      	movs	r1, #15
 8001aca:	480f      	ldr	r0, [pc, #60]	; (8001b08 <setRotaryColor+0x124>)
 8001acc:	f001 fbf0 	bl	80032b0 <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 8001ad0:	210e      	movs	r1, #14
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <setRotaryColor+0x124>)
 8001ad4:	f001 fbec 	bl	80032b0 <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001ad8:	210d      	movs	r1, #13
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <setRotaryColor+0x124>)
 8001adc:	f001 fbbd 	bl	800325a <gpioSetPin>
			break;
 8001ae0:	e00c      	b.n	8001afc <setRotaryColor+0x118>

		/* Set LED color to WHITE */
		case LED_WHITE:
			gpioResetPin(LED_RED_ADR);
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	4808      	ldr	r0, [pc, #32]	; (8001b08 <setRotaryColor+0x124>)
 8001ae6:	f001 fbe3 	bl	80032b0 <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 8001aea:	210e      	movs	r1, #14
 8001aec:	4806      	ldr	r0, [pc, #24]	; (8001b08 <setRotaryColor+0x124>)
 8001aee:	f001 fbdf 	bl	80032b0 <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 8001af2:	210d      	movs	r1, #13
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <setRotaryColor+0x124>)
 8001af6:	f001 fbdb 	bl	80032b0 <gpioResetPin>
			break;
 8001afa:	bf00      	nop
	}
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000216 	.word	0x20000216
 8001b08:	40020400 	.word	0x40020400

08001b0c <EXTI0_IRQHandler>:




void ROTARY_A_HANDLER(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 8001b10:	2101      	movs	r1, #1
 8001b12:	480f      	ldr	r0, [pc, #60]	; (8001b50 <EXTI0_IRQHandler+0x44>)
 8001b14:	f001 fd07 	bl	8003526 <gpioGetPinState>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <EXTI0_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <EXTI0_IRQHandler+0x48>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <EXTI0_IRQHandler+0x48>)
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e004      	b.n	8001b34 <EXTI0_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <EXTI0_IRQHandler+0x48>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <EXTI0_IRQHandler+0x48>)
 8001b32:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <EXTI0_IRQHandler+0x4c>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <EXTI0_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <EXTI0_IRQHandler+0x4c>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <EXTI0_IRQHandler+0x4c>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6153      	str	r3, [r2, #20]
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020400 	.word	0x40020400
 8001b54:	20000210 	.word	0x20000210
 8001b58:	40013c00 	.word	0x40013c00

08001b5c <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <EXTI15_10_IRQHandler+0x2c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <EXTI15_10_IRQHandler+0x30>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <EXTI15_10_IRQHandler+0x30>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <EXTI15_10_IRQHandler+0x30>)
 8001b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7c:	6153      	str	r3, [r2, #20]
	}
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	20000214 	.word	0x20000214
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <delayms+0x18>)
 8001b9c:	f002 fbc4 	bl	8004328 <systickDelay>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000238 	.word	0x20000238

08001bac <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <tftSPISenddata+0x20>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <tftSPISenddata+0x24>)
 8001bc0:	f002 faa3 	bl	800410a <spiWriteByte>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 8001bde:	2105      	movs	r1, #5
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <tftSendCmd+0x24>)
 8001be2:	f001 fb65 	bl	80032b0 <gpioResetPin>
    tftSPISenddata(cmd);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ffdf 	bl	8001bac <tftSPISenddata>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40020400 	.word	0x40020400

08001bfc <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 8001c06:	2105      	movs	r1, #5
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <tftSendData+0x24>)
 8001c0a:	f001 fb26 	bl	800325a <gpioSetPin>
    tftSPISenddata(data);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ffcb 	bl	8001bac <tftSPISenddata>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020400 	.word	0x40020400

08001c24 <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 8001c2a:	4825      	ldr	r0, [pc, #148]	; (8001cc0 <spiInit+0x9c>)
 8001c2c:	f001 fa66 	bl	80030fc <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8001c30:	2201      	movs	r2, #1
 8001c32:	2104      	movs	r1, #4
 8001c34:	4822      	ldr	r0, [pc, #136]	; (8001cc0 <spiInit+0x9c>)
 8001c36:	f001 fac5 	bl	80031c4 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8001c3a:	4821      	ldr	r0, [pc, #132]	; (8001cc0 <spiInit+0x9c>)
 8001c3c:	f001 fa5e 	bl	80030fc <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8001c40:	2201      	movs	r2, #1
 8001c42:	2105      	movs	r1, #5
 8001c44:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <spiInit+0x9c>)
 8001c46:	f001 fabd 	bl	80031c4 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8001c4a:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <spiInit+0xa0>)
 8001c4c:	f001 f9f4 	bl	8003038 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8001c50:	2201      	movs	r2, #1
 8001c52:	210f      	movs	r1, #15
 8001c54:	481b      	ldr	r0, [pc, #108]	; (8001cc4 <spiInit+0xa0>)
 8001c56:	f001 fab5 	bl	80031c4 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	4819      	ldr	r0, [pc, #100]	; (8001cc4 <spiInit+0xa0>)
 8001c60:	f001 fc04 	bl	800346c <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <spiInit+0xa0>)
 8001c66:	f001 f9e7 	bl	8003038 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <spiInit+0xa0>)
 8001c70:	f001 faa8 	bl	80031c4 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8001c74:	2205      	movs	r2, #5
 8001c76:	2105      	movs	r1, #5
 8001c78:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <spiInit+0xa0>)
 8001c7a:	f001 fb45 	bl	8003308 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 8001c7e:	2202      	movs	r2, #2
 8001c80:	2107      	movs	r1, #7
 8001c82:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <spiInit+0xa0>)
 8001c84:	f001 fa9e 	bl	80031c4 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8001c88:	2205      	movs	r2, #5
 8001c8a:	2107      	movs	r1, #7
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <spiInit+0xa0>)
 8001c8e:	f001 fb3b 	bl	8003308 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <spiInit+0xa4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 f9dc 	bl	8004054 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <spiInit+0xa4>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9303      	str	r3, [sp, #12]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2301      	movs	r3, #1
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	f002 f8df 	bl	8003e78 <spiInitSPI>

}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	20000008 	.word	0x20000008

08001ccc <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 8001cde:	e033      	b.n	8001d48 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff73 	bl	8001bd4 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8001cf8:	7bbb      	ldrb	r3, [r7, #14]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d08:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8001d0a:	e006      	b.n	8001d1a <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff71 	bl	8001bfc <tftSendData>
		while(numArgs--) {                   //   For each argument...
 8001d1a:	7bbb      	ldrb	r3, [r7, #14]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	73ba      	strb	r2, [r7, #14]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f3      	bne.n	8001d0c <commandList+0x40>
		}

		if(ms) {
 8001d24:	89bb      	ldrh	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00e      	beq.n	8001d48 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001d34:	89bb      	ldrh	r3, [r7, #12]
 8001d36:	2bff      	cmp	r3, #255	; 0xff
 8001d38:	d102      	bne.n	8001d40 <commandList+0x74>
 8001d3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d3e:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8001d40:	89bb      	ldrh	r3, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff24 	bl	8001b90 <delayms>
	while(numCommands--) {                 // For each command...
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	73fa      	strb	r2, [r7, #15]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1c6      	bne.n	8001ce0 <commandList+0x14>
		}
	}
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8001d64:	210f      	movs	r1, #15
 8001d66:	480c      	ldr	r0, [pc, #48]	; (8001d98 <commonInit+0x3c>)
 8001d68:	f001 faa2 	bl	80032b0 <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	480b      	ldr	r0, [pc, #44]	; (8001d9c <commonInit+0x40>)
 8001d70:	f001 fa9e 	bl	80032b0 <gpioResetPin>
	delayms(50);  //default value 500
 8001d74:	2032      	movs	r0, #50	; 0x32
 8001d76:	f7ff ff0b 	bl	8001b90 <delayms>
	ST7735_RST1;
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4807      	ldr	r0, [pc, #28]	; (8001d9c <commonInit+0x40>)
 8001d7e:	f001 fa6c 	bl	800325a <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <commonInit+0x32>
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff9f 	bl	8001ccc <commandList>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400

08001da0 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 8001daa:	2032      	movs	r0, #50	; 0x32
 8001dac:	f7ff fef0 	bl	8001b90 <delayms>
	commonInit(Rcmd1);
 8001db0:	4811      	ldr	r0, [pc, #68]	; (8001df8 <tftInitR+0x58>)
 8001db2:	f7ff ffd3 	bl	8001d5c <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 8001dbc:	480f      	ldr	r0, [pc, #60]	; (8001dfc <tftInitR+0x5c>)
 8001dbe:	f7ff ff85 	bl	8001ccc <commandList>
		//Starting position of rows and columns
		colstart = 2;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <tftInitR+0x60>)
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <tftInitR+0x64>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e002      	b.n	8001dd6 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <tftInitR+0x68>)
 8001dd2:	f7ff ff7b 	bl	8001ccc <commandList>
	}
	commandList(Rcmd3);
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <tftInitR+0x6c>)
 8001dd8:	f7ff ff78 	bl	8001ccc <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d105      	bne.n	8001dee <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 8001de2:	2036      	movs	r0, #54	; 0x36
 8001de4:	f7ff fef6 	bl	8001bd4 <tftSendCmd>
		tftSendData(0xC0);
 8001de8:	20c0      	movs	r0, #192	; 0xc0
 8001dea:	f7ff ff07 	bl	8001bfc <tftSendData>
	}

	//  tabcolor = options;
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08008e28 	.word	0x08008e28
 8001dfc:	08008e64 	.word	0x08008e64
 8001e00:	20000218 	.word	0x20000218
 8001e04:	2000021c 	.word	0x2000021c
 8001e08:	08008e74 	.word	0x08008e74
 8001e0c:	08008e84 	.word	0x08008e84

08001e10 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4604      	mov	r4, r0
 8001e18:	4608      	mov	r0, r1
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	4603      	mov	r3, r0
 8001e24:	71bb      	strb	r3, [r7, #6]
 8001e26:	460b      	mov	r3, r1
 8001e28:	717b      	strb	r3, [r7, #5]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 8001e2e:	202a      	movs	r0, #42	; 0x2a
 8001e30:	f7ff fed0 	bl	8001bd4 <tftSendCmd>
	tftSendData(0x00);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff fee1 	bl	8001bfc <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <tftSetAddrWindow+0x98>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4413      	add	r3, r2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fed8 	bl	8001bfc <tftSendData>
	tftSendData(0x00);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fed5 	bl	8001bfc <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <tftSetAddrWindow+0x98>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	797b      	ldrb	r3, [r7, #5]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fecc 	bl	8001bfc <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8001e64:	202b      	movs	r0, #43	; 0x2b
 8001e66:	f7ff feb5 	bl	8001bd4 <tftSendCmd>
	tftSendData(0x00);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff fec6 	bl	8001bfc <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <tftSetAddrWindow+0x9c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	4413      	add	r3, r2
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff febd 	bl	8001bfc <tftSendData>
	tftSendData(0x00);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff feba 	bl	8001bfc <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <tftSetAddrWindow+0x9c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	793b      	ldrb	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff feb1 	bl	8001bfc <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	f7ff fe9a 	bl	8001bd4 <tftSendCmd>
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	20000218 	.word	0x20000218
 8001eac:	2000021c 	.word	0x2000021c

08001eb0 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 8001eba:	2105      	movs	r1, #5
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <tftPushColor+0x34>)
 8001ebe:	f001 f9cc 	bl	800325a <gpioSetPin>
	putpix(color);
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fe6e 	bl	8001bac <tftSPISenddata>
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe69 	bl	8001bac <tftSPISenddata>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40020400 	.word	0x40020400

08001ee8 <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	80bb      	strh	r3, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 8001efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db22      	blt.n	8001f48 <tftDrawPixel+0x60>
 8001f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <tftDrawPixel+0x68>)
 8001f08:	8812      	ldrh	r2, [r2, #0]
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	da1c      	bge.n	8001f48 <tftDrawPixel+0x60>
 8001f0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db18      	blt.n	8001f48 <tftDrawPixel+0x60>
 8001f16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <tftDrawPixel+0x6c>)
 8001f1c:	8812      	ldrh	r2, [r2, #0]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	da12      	bge.n	8001f48 <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2d8      	uxtb	r0, r3
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	b2d9      	uxtb	r1, r3
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	88bb      	ldrh	r3, [r7, #4]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f7ff ff69 	bl	8001e10 <tftSetAddrWindow>
	tftPushColor(color);
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ffb5 	bl	8001eb0 <tftPushColor>
 8001f46:	e000      	b.n	8001f4a <tftDrawPixel+0x62>
		return;
 8001f48:	bf00      	nop
}
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000002 	.word	0x20000002
 8001f54:	20000004 	.word	0x20000004

08001f58 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4623      	mov	r3, r4
 8001f68:	80fb      	strh	r3, [r7, #6]
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80bb      	strh	r3, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	807b      	strh	r3, [r7, #2]
 8001f72:	4613      	mov	r3, r2
 8001f74:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8001f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7a:	4a37      	ldr	r2, [pc, #220]	; (8002058 <tftFillRect+0x100>)
 8001f7c:	8812      	ldrh	r2, [r2, #0]
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	da65      	bge.n	800204e <tftFillRect+0xf6>
 8001f82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f86:	4a35      	ldr	r2, [pc, #212]	; (800205c <tftFillRect+0x104>)
 8001f88:	8812      	ldrh	r2, [r2, #0]
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	da5f      	bge.n	800204e <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 8001f8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <tftFillRect+0x100>)
 8001f9a:	8812      	ldrh	r2, [r2, #0]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	dd05      	ble.n	8001fac <tftFillRect+0x54>
		{
		w = width  - x;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <tftFillRect+0x100>)
 8001fa2:	881a      	ldrh	r2, [r3, #0]
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8001fac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001fb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a29      	ldr	r2, [pc, #164]	; (800205c <tftFillRect+0x104>)
 8001fb8:	8812      	ldrh	r2, [r2, #0]
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	dd05      	ble.n	8001fca <tftFillRect+0x72>
		{
		h = height - y;
 8001fbe:	4b27      	ldr	r3, [pc, #156]	; (800205c <tftFillRect+0x104>)
 8001fc0:	881a      	ldrh	r2, [r3, #0]
 8001fc2:	88bb      	ldrh	r3, [r7, #4]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	b2d8      	uxtb	r0, r3
 8001fce:	88bb      	ldrh	r3, [r7, #4]
 8001fd0:	b2d9      	uxtb	r1, r3
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b2dc      	uxtb	r4, r3
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	883b      	ldrh	r3, [r7, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	f7ff ff0c 	bl	8001e10 <tftSetAddrWindow>

	ST7735_DC1;
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	4819      	ldr	r0, [pc, #100]	; (8002060 <tftFillRect+0x108>)
 8001ffc:	f001 f92d 	bl	800325a <gpioSetPin>
	for(y=h; y>0; y--)
 8002000:	883b      	ldrh	r3, [r7, #0]
 8002002:	80bb      	strh	r3, [r7, #4]
 8002004:	e01e      	b.n	8002044 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	80fb      	strh	r3, [r7, #6]
 800200a:	e011      	b.n	8002030 <tftFillRect+0xd8>
		{
			putpix(color);
 800200c:	8b3b      	ldrh	r3, [r7, #24]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fdc9 	bl	8001bac <tftSPISenddata>
 800201a:	8b3b      	ldrh	r3, [r7, #24]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fdc4 	bl	8001bac <tftSPISenddata>
		for(x=w; x>0; x--)
 8002024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29b      	uxth	r3, r3
 800202e:	80fb      	strh	r3, [r7, #6]
 8002030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002034:	2b00      	cmp	r3, #0
 8002036:	dce9      	bgt.n	800200c <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 8002038:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29b      	uxth	r3, r3
 8002042:	80bb      	strh	r3, [r7, #4]
 8002044:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	dcdc      	bgt.n	8002006 <tftFillRect+0xae>
 800204c:	e000      	b.n	8002050 <tftFillRect+0xf8>
		return;
 800204e:	bf00      	nop
		}
	}
}
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	20000002 	.word	0x20000002
 800205c:	20000004 	.word	0x20000004
 8002060:	40020400 	.word	0x40020400

08002064 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4604      	mov	r4, r0
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4623      	mov	r3, r4
 8002074:	80fb      	strh	r3, [r7, #6]
 8002076:	4603      	mov	r3, r0
 8002078:	80bb      	strh	r3, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	807b      	strh	r3, [r7, #2]
 800207e:	4613      	mov	r3, r2
 8002080:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8002082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002086:	4a24      	ldr	r2, [pc, #144]	; (8002118 <tftDrawFastVLine+0xb4>)
 8002088:	8812      	ldrh	r2, [r2, #0]
 800208a:	4293      	cmp	r3, r2
 800208c:	da3f      	bge.n	800210e <tftDrawFastVLine+0xaa>
 800208e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002092:	4a22      	ldr	r2, [pc, #136]	; (800211c <tftDrawFastVLine+0xb8>)
 8002094:	8812      	ldrh	r2, [r2, #0]
 8002096:	4293      	cmp	r3, r2
 8002098:	da39      	bge.n	800210e <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 800209a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800209e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <tftDrawFastVLine+0xb8>)
 80020a6:	8812      	ldrh	r2, [r2, #0]
 80020a8:	4293      	cmp	r3, r2
 80020aa:	dd05      	ble.n	80020b8 <tftDrawFastVLine+0x54>
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <tftDrawFastVLine+0xb8>)
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	88bb      	ldrh	r3, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	b2d8      	uxtb	r0, r3
 80020bc:	88bb      	ldrh	r3, [r7, #4]
 80020be:	b2d9      	uxtb	r1, r3
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	b2dc      	uxtb	r4, r3
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4622      	mov	r2, r4
 80020d6:	f7ff fe9b 	bl	8001e10 <tftSetAddrWindow>

	ST7735_DC1;
 80020da:	2105      	movs	r1, #5
 80020dc:	4810      	ldr	r0, [pc, #64]	; (8002120 <tftDrawFastVLine+0xbc>)
 80020de:	f001 f8bc 	bl	800325a <gpioSetPin>
	while (h--) {
 80020e2:	e00b      	b.n	80020fc <tftDrawFastVLine+0x98>
		putpix(color);
 80020e4:	883b      	ldrh	r3, [r7, #0]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fd5d 	bl	8001bac <tftSPISenddata>
 80020f2:	883b      	ldrh	r3, [r7, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fd58 	bl	8001bac <tftSPISenddata>
	while (h--) {
 80020fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002100:	b29a      	uxth	r2, r3
 8002102:	3a01      	subs	r2, #1
 8002104:	b292      	uxth	r2, r2
 8002106:	807a      	strh	r2, [r7, #2]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1eb      	bne.n	80020e4 <tftDrawFastVLine+0x80>
 800210c:	e000      	b.n	8002110 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 800210e:	bf00      	nop
	}
}
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop
 8002118:	20000002 	.word	0x20000002
 800211c:	20000004 	.word	0x20000004
 8002120:	40020400 	.word	0x40020400

08002124 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <tftSetFont+0x40>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <tftSetFont+0x40>)
 8002138:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	785a      	ldrb	r2, [r3, #1]
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <tftSetFont+0x40>)
 8002140:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	789a      	ldrb	r2, [r3, #2]
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <tftSetFont+0x40>)
 8002148:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3303      	adds	r3, #3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <tftSetFont+0x40>)
 8002154:	811a      	strh	r2, [r3, #8]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000224 	.word	0x20000224

08002168 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8002176:	4b74      	ldr	r3, [pc, #464]	; (8002348 <tftPrintChar+0x1e0>)
 8002178:	791b      	ldrb	r3, [r3, #4]
 800217a:	2b07      	cmp	r3, #7
 800217c:	d803      	bhi.n	8002186 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 800217e:	4b72      	ldr	r3, [pc, #456]	; (8002348 <tftPrintChar+0x1e0>)
 8002180:	791b      	ldrb	r3, [r3, #4]
 8002182:	77bb      	strb	r3, [r7, #30]
 8002184:	e003      	b.n	800218e <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8002186:	4b70      	ldr	r3, [pc, #448]	; (8002348 <tftPrintChar+0x1e0>)
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 800218e:	4b6f      	ldr	r3, [pc, #444]	; (800234c <tftPrintChar+0x1e4>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d15e      	bne.n	8002254 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	b2d8      	uxtb	r0, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	b2d9      	uxtb	r1, r3
 800219e:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <tftPrintChar+0x1e0>)
 80021a0:	791a      	ldrb	r2, [r3, #4]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b2dc      	uxtb	r4, r3
 80021ae:	4b66      	ldr	r3, [pc, #408]	; (8002348 <tftPrintChar+0x1e0>)
 80021b0:	795a      	ldrb	r2, [r3, #5]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4622      	mov	r2, r4
 80021c0:	f7ff fe26 	bl	8001e10 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	4a60      	ldr	r2, [pc, #384]	; (8002348 <tftPrintChar+0x1e0>)
 80021c8:	7992      	ldrb	r2, [r2, #6]
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	7fbb      	ldrb	r3, [r7, #30]
 80021d0:	b299      	uxth	r1, r3
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <tftPrintChar+0x1e0>)
 80021d4:	795b      	ldrb	r3, [r3, #5]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	fb11 f303 	smulbb	r3, r1, r3
 80021dc:	b29b      	uxth	r3, r3
 80021de:	fb12 f303 	smulbb	r3, r2, r3
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3304      	adds	r3, #4
 80021e6:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	83bb      	strh	r3, [r7, #28]
 80021ec:	e029      	b.n	8002242 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 80021ee:	4b56      	ldr	r3, [pc, #344]	; (8002348 <tftPrintChar+0x1e0>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	8b7b      	ldrh	r3, [r7, #26]
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	77fb      	strb	r3, [r7, #31]
 80021fe:	e017      	b.n	8002230 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8002200:	7cfa      	ldrb	r2, [r7, #19]
 8002202:	7ffb      	ldrb	r3, [r7, #31]
 8002204:	f1c3 0307 	rsb	r3, r3, #7
 8002208:	fa42 f303 	asr.w	r3, r2, r3
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8002214:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <tftPrintChar+0x1e8>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fe49 	bl	8001eb0 <tftPushColor>
 800221e:	e004      	b.n	800222a <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8002220:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <tftPrintChar+0x1ec>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fe43 	bl	8001eb0 <tftPushColor>
			for(i=0;i<8;i++)
 800222a:	7ffb      	ldrb	r3, [r7, #31]
 800222c:	3301      	adds	r3, #1
 800222e:	77fb      	strb	r3, [r7, #31]
 8002230:	7ffb      	ldrb	r3, [r7, #31]
 8002232:	2b07      	cmp	r3, #7
 8002234:	d9e4      	bls.n	8002200 <tftPrintChar+0x98>
				}
			}
			temp++;
 8002236:	8b7b      	ldrh	r3, [r7, #26]
 8002238:	3301      	adds	r3, #1
 800223a:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 800223c:	8bbb      	ldrh	r3, [r7, #28]
 800223e:	3301      	adds	r3, #1
 8002240:	83bb      	strh	r3, [r7, #28]
 8002242:	8bba      	ldrh	r2, [r7, #28]
 8002244:	7fbb      	ldrb	r3, [r7, #30]
 8002246:	4940      	ldr	r1, [pc, #256]	; (8002348 <tftPrintChar+0x1e0>)
 8002248:	7949      	ldrb	r1, [r1, #5]
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	429a      	cmp	r2, r3
 8002250:	dbcd      	blt.n	80021ee <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8002252:	e075      	b.n	8002340 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <tftPrintChar+0x1e0>)
 8002258:	7992      	ldrb	r2, [r2, #6]
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	b29a      	uxth	r2, r3
 800225e:	7fbb      	ldrb	r3, [r7, #30]
 8002260:	b299      	uxth	r1, r3
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <tftPrintChar+0x1e0>)
 8002264:	795b      	ldrb	r3, [r3, #5]
 8002266:	b29b      	uxth	r3, r3
 8002268:	fb11 f303 	smulbb	r3, r1, r3
 800226c:	b29b      	uxth	r3, r3
 800226e:	fb12 f303 	smulbb	r3, r2, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	3304      	adds	r3, #4
 8002276:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002278:	2300      	movs	r3, #0
 800227a:	83bb      	strh	r3, [r7, #28]
 800227c:	e05a      	b.n	8002334 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e04b      	b.n	800231c <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8002284:	4b30      	ldr	r3, [pc, #192]	; (8002348 <tftPrintChar+0x1e0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	8b79      	ldrh	r1, [r7, #26]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	440a      	add	r2, r1
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8002294:	2300      	movs	r3, #0
 8002296:	77fb      	strb	r3, [r7, #31]
 8002298:	e03a      	b.n	8002310 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	7ffb      	ldrb	r3, [r7, #31]
 80022a0:	4413      	add	r3, r2
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	b2d8      	uxtb	r0, r3
 80022b0:	8bbb      	ldrh	r3, [r7, #28]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	b2d9      	uxtb	r1, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	7ffb      	ldrb	r3, [r7, #31]
 80022c2:	4413      	add	r3, r2
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	b2dc      	uxtb	r4, r3
 80022d6:	8bbb      	ldrh	r3, [r7, #28]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	4413      	add	r3, r2
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4622      	mov	r2, r4
 80022e8:	f7ff fd92 	bl	8001e10 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 80022ec:	7cfa      	ldrb	r2, [r7, #19]
 80022ee:	7ffb      	ldrb	r3, [r7, #31]
 80022f0:	f1c3 0307 	rsb	r3, r3, #7
 80022f4:	fa42 f303 	asr.w	r3, r2, r3
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <tftPrintChar+0x1e8>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdd3 	bl	8001eb0 <tftPushColor>
				for(i=0;i<8;i++)
 800230a:	7ffb      	ldrb	r3, [r7, #31]
 800230c:	3301      	adds	r3, #1
 800230e:	77fb      	strb	r3, [r7, #31]
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	2b07      	cmp	r3, #7
 8002314:	d9c1      	bls.n	800229a <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3301      	adds	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	7fbb      	ldrb	r3, [r7, #30]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	dbaf      	blt.n	8002284 <tftPrintChar+0x11c>
			temp+=(fz);
 8002324:	7fbb      	ldrb	r3, [r7, #30]
 8002326:	b29a      	uxth	r2, r3
 8002328:	8b7b      	ldrh	r3, [r7, #26]
 800232a:	4413      	add	r3, r2
 800232c:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 800232e:	8bbb      	ldrh	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	83bb      	strh	r3, [r7, #28]
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <tftPrintChar+0x1e0>)
 8002336:	795b      	ldrb	r3, [r3, #5]
 8002338:	b29b      	uxth	r3, r3
 800233a:	8bba      	ldrh	r2, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	d39e      	bcc.n	800227e <tftPrintChar+0x116>
}
 8002340:	bf00      	nop
 8002342:	3724      	adds	r7, #36	; 0x24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	20000224 	.word	0x20000224
 800234c:	20000230 	.word	0x20000230
 8002350:	2000000c 	.word	0x2000000c
 8002354:	20000232 	.word	0x20000232

08002358 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8002358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800235c:	b08e      	sub	sp, #56	; 0x38
 800235e:	af00      	add	r7, sp, #0
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 800236a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800236c:	f7fe f8e2 	bl	8000534 <__aeabi_i2d>
 8002370:	a395      	add	r3, pc, #596	; (adr r3, 80025c8 <tftRotateChar+0x270>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe f947 	bl	8000608 <__aeabi_dmul>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8002382:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <tftRotateChar+0x260>)
 8002384:	791b      	ldrb	r3, [r3, #4]
 8002386:	2b07      	cmp	r3, #7
 8002388:	d804      	bhi.n	8002394 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <tftRotateChar+0x260>)
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002392:	e017      	b.n	80023c4 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8002394:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <tftRotateChar+0x260>)
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	4a85      	ldr	r2, [pc, #532]	; (80025b8 <tftRotateChar+0x260>)
 80023a2:	7992      	ldrb	r2, [r2, #6]
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023ac:	b299      	uxth	r1, r3
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <tftRotateChar+0x260>)
 80023b0:	795b      	ldrb	r3, [r3, #5]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	fb11 f303 	smulbb	r3, r1, r3
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	fb12 f303 	smulbb	r3, r2, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3304      	adds	r3, #4
 80023c2:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80023ca:	e0e6      	b.n	800259a <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d0:	e0d2      	b.n	8002578 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 80023d2:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <tftRotateChar+0x260>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80023d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023da:	440a      	add	r2, r1
 80023dc:	4413      	add	r3, r2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023e8:	e0be      	b.n	8002568 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 80023ea:	68b8      	ldr	r0, [r7, #8]
 80023ec:	f7fe f8a2 	bl	8000534 <__aeabi_i2d>
 80023f0:	4604      	mov	r4, r0
 80023f2:	460d      	mov	r5, r1
 80023f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	441a      	add	r2, r3
 80023fe:	4b6e      	ldr	r3, [pc, #440]	; (80025b8 <tftRotateChar+0x260>)
 8002400:	791b      	ldrb	r3, [r3, #4]
 8002402:	4619      	mov	r1, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe f891 	bl	8000534 <__aeabi_i2d>
 8002412:	4680      	mov	r8, r0
 8002414:	4689      	mov	r9, r1
 8002416:	ed97 0b08 	vldr	d0, [r7, #32]
 800241a:	f004 ff49 	bl	80072b0 <cos>
 800241e:	ec53 2b10 	vmov	r2, r3, d0
 8002422:	4640      	mov	r0, r8
 8002424:	4649      	mov	r1, r9
 8002426:	f7fe f8ef 	bl	8000608 <__aeabi_dmul>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4692      	mov	sl, r2
 8002430:	469b      	mov	fp, r3
 8002432:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f87c 	bl	8000534 <__aeabi_i2d>
 800243c:	4680      	mov	r8, r0
 800243e:	4689      	mov	r9, r1
 8002440:	ed97 0b08 	vldr	d0, [r7, #32]
 8002444:	f004 ff88 	bl	8007358 <sin>
 8002448:	ec53 2b10 	vmov	r2, r3, d0
 800244c:	4640      	mov	r0, r8
 800244e:	4649      	mov	r1, r9
 8002450:	f7fe f8da 	bl	8000608 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4650      	mov	r0, sl
 800245a:	4659      	mov	r1, fp
 800245c:	f7fd ff1c 	bl	8000298 <__aeabi_dsub>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4620      	mov	r0, r4
 8002466:	4629      	mov	r1, r5
 8002468:	f7fd ff18 	bl	800029c <__adddf3>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb78 	bl	8000b68 <__aeabi_d2iz>
 8002478:	4603      	mov	r3, r0
 800247a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fe f859 	bl	8000534 <__aeabi_i2d>
 8002482:	4604      	mov	r4, r0
 8002484:	460d      	mov	r5, r1
 8002486:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe f852 	bl	8000534 <__aeabi_i2d>
 8002490:	4680      	mov	r8, r0
 8002492:	4689      	mov	r9, r1
 8002494:	ed97 0b08 	vldr	d0, [r7, #32]
 8002498:	f004 ff0a 	bl	80072b0 <cos>
 800249c:	ec53 2b10 	vmov	r2, r3, d0
 80024a0:	4640      	mov	r0, r8
 80024a2:	4649      	mov	r1, r9
 80024a4:	f7fe f8b0 	bl	8000608 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4692      	mov	sl, r2
 80024ae:	469b      	mov	fp, r3
 80024b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	441a      	add	r2, r3
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <tftRotateChar+0x260>)
 80024bc:	791b      	ldrb	r3, [r3, #4]
 80024be:	4619      	mov	r1, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f833 	bl	8000534 <__aeabi_i2d>
 80024ce:	4680      	mov	r8, r0
 80024d0:	4689      	mov	r9, r1
 80024d2:	ed97 0b08 	vldr	d0, [r7, #32]
 80024d6:	f004 ff3f 	bl	8007358 <sin>
 80024da:	ec53 2b10 	vmov	r2, r3, d0
 80024de:	4640      	mov	r0, r8
 80024e0:	4649      	mov	r1, r9
 80024e2:	f7fe f891 	bl	8000608 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4650      	mov	r0, sl
 80024ec:	4659      	mov	r1, fp
 80024ee:	f7fd fed5 	bl	800029c <__adddf3>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4620      	mov	r0, r4
 80024f8:	4629      	mov	r1, r5
 80024fa:	f7fd fecf 	bl	800029c <__adddf3>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb2f 	bl	8000b68 <__aeabi_d2iz>
 800250a:	4603      	mov	r3, r0
 800250c:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	b2d8      	uxtb	r0, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	b2d9      	uxtb	r1, r3
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3301      	adds	r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3301      	adds	r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f7ff fc73 	bl	8001e10 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 800252a:	7ffa      	ldrb	r2, [r7, #31]
 800252c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002530:	f1c3 0307 	rsb	r3, r3, #7
 8002534:	fa42 f303 	asr.w	r3, r2, r3
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <tftRotateChar+0x264>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fcb3 	bl	8001eb0 <tftPushColor>
 800254a:	e008      	b.n	800255e <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <tftRotateChar+0x268>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <tftRotateChar+0x26c>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fca9 	bl	8001eb0 <tftPushColor>
			for(i=0;i<8;i++)
 800255e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002562:	3301      	adds	r3, #1
 8002564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800256c:	2b07      	cmp	r3, #7
 800256e:	f67f af3c 	bls.w	80023ea <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	3301      	adds	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002578:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800257c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257e:	429a      	cmp	r2, r3
 8002580:	f6ff af27 	blt.w	80023d2 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8002584:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002588:	b29a      	uxth	r2, r3
 800258a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800258c:	4413      	add	r3, r2
 800258e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8002590:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002594:	3301      	adds	r3, #1
 8002596:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <tftRotateChar+0x260>)
 800259c:	795b      	ldrb	r3, [r3, #5]
 800259e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025a2:	429a      	cmp	r2, r3
 80025a4:	f4ff af12 	bcc.w	80023cc <tftRotateChar+0x74>
	}
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3738      	adds	r7, #56	; 0x38
 80025ae:	46bd      	mov	sp, r7
 80025b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b4:	f3af 8000 	nop.w
 80025b8:	20000224 	.word	0x20000224
 80025bc:	2000000c 	.word	0x2000000c
 80025c0:	20000230 	.word	0x20000230
 80025c4:	20000232 	.word	0x20000232
 80025c8:	1eb851ec 	.word	0x1eb851ec
 80025cc:	3f91eb85 	.word	0x3f91eb85

080025d0 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7fd fdf8 	bl	80001e0 <strlen>
 80025f0:	4603      	mov	r3, r0
 80025f2:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f113 0f02 	cmn.w	r3, #2
 80025fa:	d10a      	bne.n	8002612 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 80025fc:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <tftPrint+0x128>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <tftPrint+0x12c>)
 8002604:	791b      	ldrb	r3, [r3, #4]
 8002606:	4619      	mov	r1, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d10d      	bne.n	8002636 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 800261a:	4b39      	ldr	r3, [pc, #228]	; (8002700 <tftPrint+0x130>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	4b36      	ldr	r3, [pc, #216]	; (80026fc <tftPrint+0x12c>)
 8002622:	791b      	ldrb	r3, [r3, #4]
 8002624:	4619      	mov	r1, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	0fda      	lsrs	r2, r3, #31
 8002630:	4413      	add	r3, r2
 8002632:	105b      	asrs	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e053      	b.n	80026e4 <tftPrint+0x114>
	{
		lettercount++;
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	3301      	adds	r3, #1
 8002640:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d112      	bne.n	800266e <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	60fa      	str	r2, [r7, #12]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	69f9      	ldr	r1, [r7, #28]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fd87 	bl	8002168 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 800265a:	4b28      	ldr	r3, [pc, #160]	; (80026fc <tftPrint+0x12c>)
 800265c:	791b      	ldrb	r3, [r3, #4]
 800265e:	461a      	mov	r2, r3
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	e00a      	b.n	8002684 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	60fa      	str	r2, [r7, #12]
 8002674:	7818      	ldrb	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	f7ff fe6a 	bl	8002358 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8002684:	f000 f8c4 	bl	8002810 <tftGetWidth>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <tftPrint+0x12c>)
 800268e:	791b      	ldrb	r3, [r3, #4]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	4293      	cmp	r3, r2
 800269c:	db1f      	blt.n	80026de <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <tftPrint+0x12c>)
 80026a8:	795b      	ldrb	r3, [r3, #5]
 80026aa:	461a      	mov	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 80026b2:	f000 f8b9 	bl	8002828 <tftGetHeight>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <tftPrint+0x12c>)
 80026bc:	795b      	ldrb	r3, [r3, #5]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	dd09      	ble.n	80026da <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 80026c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026ca:	f7ff fa61 	bl	8001b90 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 80026ce:	2000      	movs	r0, #0
 80026d0:	f000 f834 	bl	800273c <tftFillScreen>
				y=0; // start at top left of new Page
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	e001      	b.n	80026de <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	3301      	adds	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	dba7      	blt.n	800263c <tftPrint+0x6c>
			}

		}

	}
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000002 	.word	0x20000002
 80026fc:	20000224 	.word	0x20000224
 8002700:	20000004 	.word	0x20000004

08002704 <tftPrintColor>:
void tftPrintColor(char *st, int x, int y, uint16_t FontColor)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	807b      	strh	r3, [r7, #2]
	uint16_t _fg_old = _fg;
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <tftPrintColor+0x34>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	82fb      	strh	r3, [r7, #22]
	_fg = FontColor;
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <tftPrintColor+0x34>)
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	8013      	strh	r3, [r2, #0]
	tftPrint(st, x, y, 0);
 800271e:	2300      	movs	r3, #0
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f7ff ff53 	bl	80025d0 <tftPrint>
	_fg = _fg_old;
 800272a:	4a03      	ldr	r2, [pc, #12]	; (8002738 <tftPrintColor+0x34>)
 800272c:	8afb      	ldrh	r3, [r7, #22]
 800272e:	8013      	strh	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	2000000c 	.word	0x2000000c

0800273c <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af02      	add	r7, sp, #8
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <tftFillScreen+0x2c>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b21a      	sxth	r2, r3
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <tftFillScreen+0x30>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b219      	sxth	r1, r3
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	460b      	mov	r3, r1
 8002758:	2100      	movs	r1, #0
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff fbfc 	bl	8001f58 <tftFillRect>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000002 	.word	0x20000002
 800276c:	20000004 	.word	0x20000004

08002770 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 8002782:	2036      	movs	r0, #54	; 0x36
 8002784:	f7ff fa26 	bl	8001bd4 <tftSendCmd>

	switch (rotation)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d836      	bhi.n	80027fc <tftSetRotation+0x8c>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <tftSetRotation+0x24>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027b9 	.word	0x080027b9
 800279c:	080027cd 	.word	0x080027cd
 80027a0:	080027e1 	.word	0x080027e1
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80027a4:	20c0      	movs	r0, #192	; 0xc0
 80027a6:	f7ff fa29 	bl	8001bfc <tftSendData>
		width  = ST7735_TFTWIDTH;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <tftSetRotation+0x94>)
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <tftSetRotation+0x98>)
 80027b2:	22a0      	movs	r2, #160	; 0xa0
 80027b4:	801a      	strh	r2, [r3, #0]
		break;
 80027b6:	e01d      	b.n	80027f4 <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80027b8:	20a0      	movs	r0, #160	; 0xa0
 80027ba:	f7ff fa1f 	bl	8001bfc <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <tftSetRotation+0x94>)
 80027c0:	22a0      	movs	r2, #160	; 0xa0
 80027c2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <tftSetRotation+0x98>)
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	801a      	strh	r2, [r3, #0]
		   break;
 80027ca:	e013      	b.n	80027f4 <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7ff fa15 	bl	8001bfc <tftSendData>
		   width  = ST7735_TFTWIDTH;
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <tftSetRotation+0x94>)
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <tftSetRotation+0x98>)
 80027da:	22a0      	movs	r2, #160	; 0xa0
 80027dc:	801a      	strh	r2, [r3, #0]
		   break;
 80027de:	e009      	b.n	80027f4 <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80027e0:	2060      	movs	r0, #96	; 0x60
 80027e2:	f7ff fa0b 	bl	8001bfc <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <tftSetRotation+0x94>)
 80027e8:	22a0      	movs	r2, #160	; 0xa0
 80027ea:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <tftSetRotation+0x98>)
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	801a      	strh	r2, [r3, #0]
		   break;
 80027f2:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80027f4:	4a05      	ldr	r2, [pc, #20]	; (800280c <tftSetRotation+0x9c>)
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	7013      	strb	r3, [r2, #0]
 80027fa:	e000      	b.n	80027fe <tftSetRotation+0x8e>
		   return;
 80027fc:	bf00      	nop
}
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000002 	.word	0x20000002
 8002808:	20000004 	.word	0x20000004
 800280c:	20000220 	.word	0x20000220

08002810 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <tftGetWidth+0x14>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	20000002 	.word	0x20000002

08002828 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <tftGetHeight+0x14>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	20000004 	.word	0x20000004

08002840 <main>:

// Step task time in milliseconds
#define StepTaskTime 6

int main(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b09e      	sub	sp, #120	; 0x78
 8002844:	af04      	add	r7, sp, #16
    // Task scheduling parameters
    uint32_t i2cTaskTime = 50UL; // I2C task period
 8002846:	2332      	movs	r3, #50	; 0x32
 8002848:	663b      	str	r3, [r7, #96]	; 0x60
    uint32_t temperatureRefresh = (i2cTaskTime * 0.2f);
 800284a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002854:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002a40 <main+0x200>
 8002858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002860:	ee17 3a90 	vmov	r3, s15
 8002864:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint8_t i = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    // Sensor data structure and other variables
    MPU6050_t MPU1;
    float anglefactor = 180 / _pi; // Conversion factor from radians to degrees
 800286c:	4b75      	ldr	r3, [pc, #468]	; (8002a44 <main+0x204>)
 800286e:	65bb      	str	r3, [r7, #88]	; 0x58
    float alphaBeta[2];            // Array to store angle data
    char output[10];               // Buffer for temperature output string
    int8_t ReturnVal=-1;
 8002870:	23ff      	movs	r3, #255	; 0xff
 8002872:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    // Initialize display and peripherals
    BALOsetup();
 8002876:	f7fe fc1d 	bl	80010b4 <BALOsetup>
    LED_red_on;
 800287a:	210f      	movs	r1, #15
 800287c:	4872      	ldr	r0, [pc, #456]	; (8002a48 <main+0x208>)
 800287e:	f000 fd17 	bl	80032b0 <gpioResetPin>
    systickInit(SYSTICK_1MS);      // Initialize SysTick timer
 8002882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002886:	f001 fccd 	bl	8004224 <systickInit>
    spiInit();                     // Initialize SPI
 800288a:	f7ff f9cb 	bl	8001c24 <spiInit>
    tftInitR(INITR_REDTAB);        // Initialize TFT display
 800288e:	2001      	movs	r0, #1
 8002890:	f7ff fa86 	bl	8001da0 <tftInitR>

    // Set up display properties
    tftSetRotation(LANDSCAPE_FLIP);
 8002894:	2003      	movs	r0, #3
 8002896:	f7ff ff6b 	bl	8002770 <tftSetRotation>
    tftSetFont((uint8_t *)&SmallFont[0]);
 800289a:	486c      	ldr	r0, [pc, #432]	; (8002a4c <main+0x20c>)
 800289c:	f7ff fc42 	bl	8002124 <tftSetFont>
    tftFillScreen(tft_BLACK);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff ff4b 	bl	800273c <tftFillScreen>

    // Initialize rotary push button
    initRotaryPushButton();
 80028a6:	f7fe ffff 	bl	80018a8 <initRotaryPushButton>

    // Set timer interval
    systickSetMillis(&I2C_Timer, i2cTaskTime);
 80028aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80028ac:	4868      	ldr	r0, [pc, #416]	; (8002a50 <main+0x210>)
 80028ae:	f001 fcab 	bl	8004208 <systickSetMillis>

    // Initial display message

    tftPrintColor((char *)"MPU6050 Tmp.:", 0, 0, tft_MAGENTA);
 80028b2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	4866      	ldr	r0, [pc, #408]	; (8002a54 <main+0x214>)
 80028bc:	f7ff ff22 	bl	8002704 <tftPrintColor>
	#define 	MPUi2c 		I2C1
#endif
// this is the Init run
	do
	{
		if (timerTrigger == true)
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <main+0x218>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <main+0x96>
	        {
	            systickUpdateTimerList((uint32_t *)timerList, arraySize);
 80028c8:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <main+0x21c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	4863      	ldr	r0, [pc, #396]	; (8002a60 <main+0x220>)
 80028d2:	f001 fcff 	bl	80042d4 <systickUpdateTimerList>
	        }

	        // Check if I2C task is due
	        if (isSystickExpired(I2C_Timer))
 80028d6:	4b5e      	ldr	r3, [pc, #376]	; (8002a50 <main+0x210>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 fcc4 	bl	8004268 <isSystickExpired>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d013      	beq.n	800290e <main+0xce>
	        {

	        	// Reset I2C timer
				systickSetTicktime(&I2C_Timer, i2cTaskTime);
 80028e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80028e8:	4859      	ldr	r0, [pc, #356]	; (8002a50 <main+0x210>)
 80028ea:	f001 fcaf 	bl	800424c <systickSetTicktime>
				ReturnVal = mpuInit(&MPU1, MPUi2c, i2cAddr_MPU6050, 2, 3, MPU6050_LPBW_5, RESTART);
 80028ee:	f107 0014 	add.w	r0, r7, #20
 80028f2:	2301      	movs	r3, #1
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	2306      	movs	r3, #6
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2303      	movs	r3, #3
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2302      	movs	r3, #2
 8002900:	2268      	movs	r2, #104	; 0x68
 8002902:	4958      	ldr	r1, [pc, #352]	; (8002a64 <main+0x224>)
 8002904:	f7fe fcca 	bl	800129c <mpuInit>
 8002908:	4603      	mov	r3, r0
 800290a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	        }
	} while (ReturnVal < 0);
 800290e:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
 8002912:	2b00      	cmp	r3, #0
 8002914:	dbd4      	blt.n	80028c0 <main+0x80>
	LED_red_off;
 8002916:	210f      	movs	r1, #15
 8002918:	484b      	ldr	r0, [pc, #300]	; (8002a48 <main+0x208>)
 800291a:	f000 fc9e 	bl	800325a <gpioSetPin>
	// Reset I2C timer
	systickSetTicktime(&I2C_Timer, i2cTaskTime);
 800291e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002920:	484b      	ldr	r0, [pc, #300]	; (8002a50 <main+0x210>)
 8002922:	f001 fc93 	bl	800424c <systickSetTicktime>
    while (1)
    {
        // Update timers if the trigger is set
        //TF if (timerTrigger && testVal >= 0)
    	if (timerTrigger == true)
 8002926:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <main+0x218>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <main+0xfc>
        {
            systickUpdateTimerList((uint32_t *)timerList, arraySize);
 800292e:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <main+0x21c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4619      	mov	r1, r3
 8002936:	484a      	ldr	r0, [pc, #296]	; (8002a60 <main+0x220>)
 8002938:	f001 fccc 	bl	80042d4 <systickUpdateTimerList>
        }

        // Check if I2C task is due
        if (isSystickExpired(I2C_Timer))
 800293c:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <main+0x210>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fc91 	bl	8004268 <isSystickExpired>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ec      	beq.n	8002926 <main+0xe6>
        {

        	// Reset I2C timer
            systickSetTicktime(&I2C_Timer, i2cTaskTime);
 800294c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800294e:	4840      	ldr	r0, [pc, #256]	; (8002a50 <main+0x210>)
 8002950:	f001 fc7c 	bl	800424c <systickSetTicktime>


            // Read angles from MPU6050
            ReturnVal = mpuGetAngleFromAcceleration(&MPU1);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe fefa 	bl	8001752 <mpuGetAngleFromAcceleration>
 800295e:	4603      	mov	r3, r0
 8002960:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            alphaBeta[0] = MPU1.alpha_beta[0];
 8002964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002966:	60fb      	str	r3, [r7, #12]
            alphaBeta[1] = MPU1.alpha_beta[1];
 8002968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296a:	613b      	str	r3, [r7, #16]

            // Update LED color based on angle thresholds
            if ((alphaBeta[0] * anglefactor < -10) || (alphaBeta[0] * anglefactor > 10) ||
 800296c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002970:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002978:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800297c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	d426      	bmi.n	80029d4 <main+0x194>
 8002986:	ed97 7a03 	vldr	s14, [r7, #12]
 800298a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002992:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	dc19      	bgt.n	80029d4 <main+0x194>
                (alphaBeta[1] * anglefactor < -10) || (alphaBeta[1] * anglefactor > 10))
 80029a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80029a4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80029a8:	ee67 7a27 	vmul.f32	s15, s14, s15
            if ((alphaBeta[0] * anglefactor < -10) || (alphaBeta[0] * anglefactor > 10) ||
 80029ac:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80029b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b8:	d40c      	bmi.n	80029d4 <main+0x194>
                (alphaBeta[1] * anglefactor < -10) || (alphaBeta[1] * anglefactor > 10))
 80029ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80029be:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d2:	dd03      	ble.n	80029dc <main+0x19c>
            {
                setRotaryColor(LED_CYAN); // Deviations greater than ±10° trigger cyan
 80029d4:	2005      	movs	r0, #5
 80029d6:	f7ff f805 	bl	80019e4 <setRotaryColor>
 80029da:	e002      	b.n	80029e2 <main+0x1a2>
            }
            else
            {
                setRotaryColor(LED_GREEN); // Otherwise, set green
 80029dc:	2002      	movs	r0, #2
 80029de:	f7ff f801 	bl	80019e4 <setRotaryColor>
            }

            // Display angle values on the oscilloscope
            AlBeOszi(alphaBeta);
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fb6c 	bl	80010c4 <AlBeOszi>

            // Update temperature periodically
            i++;
 80029ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029f0:	3301      	adds	r3, #1
 80029f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (i % temperatureRefresh == 0)
 80029f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a00:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002a02:	fb01 f202 	mul.w	r2, r1, r2
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d18c      	bne.n	8002926 <main+0xe6>
            {
                mpuGetTemperature(&MPU1);
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fee7 	bl	80017e4 <mpuGetTemperature>
                sprintf(output, "%.1f C", MPU1.temperature_out);
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fd9d 	bl	8000558 <__aeabi_f2d>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4638      	mov	r0, r7
 8002a24:	4910      	ldr	r1, [pc, #64]	; (8002a68 <main+0x228>)
 8002a26:	f002 f9cb 	bl	8004dc0 <siprintf>
                tftPrintColor((char *)output, (ST7735_TFTWIDTH - 20), 0, tft_MAGENTA);
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002a30:	2200      	movs	r2, #0
 8002a32:	216c      	movs	r1, #108	; 0x6c
 8002a34:	f7ff fe66 	bl	8002704 <tftPrintColor>
                i = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    	if (timerTrigger == true)
 8002a3e:	e772      	b.n	8002926 <main+0xe6>
 8002a40:	3e4ccccd 	.word	0x3e4ccccd
 8002a44:	426539f3 	.word	0x426539f3
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	080089b0 	.word	0x080089b0
 8002a50:	2000023c 	.word	0x2000023c
 8002a54:	08008990 	.word	0x08008990
 8002a58:	20000234 	.word	0x20000234
 8002a5c:	20000018 	.word	0x20000018
 8002a60:	20000010 	.word	0x20000010
 8002a64:	40005800 	.word	0x40005800
 8002a68:	080089a0 	.word	0x080089a0

08002a6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a70:	f001 fc7e 	bl	8004370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a74:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a76:	490d      	ldr	r1, [pc, #52]	; (8002aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <LoopForever+0xe>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a8c:	4c0a      	ldr	r4, [pc, #40]	; (8002ab8 <LoopForever+0x16>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a9a:	f001 fcfb 	bl	8004494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a9e:	f7ff fecf 	bl	8002840 <main>

08002aa2 <LoopForever>:

LoopForever:
  b LoopForever
 8002aa2:	e7fe      	b.n	8002aa2 <LoopForever>
  ldr   r0, =_estack
 8002aa4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002ab0:	08009508 	.word	0x08009508
  ldr r2, =_sbss
 8002ab4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002ab8:	20000254 	.word	0x20000254

08002abc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002abc:	e7fe      	b.n	8002abc <ADC_IRQHandler>

08002abe <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d03e      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d03b      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d038      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d035      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d032      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d02f      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d02c      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b07      	cmp	r3, #7
 8002af6:	d029      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d026      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d023      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	2b0a      	cmp	r3, #10
 8002b08:	d020      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	2b0b      	cmp	r3, #11
 8002b0e:	d01d      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d01a      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	2b0d      	cmp	r3, #13
 8002b1a:	d017      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	2b0e      	cmp	r3, #14
 8002b20:	d014      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d011      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d00e      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b11      	cmp	r3, #17
 8002b32:	d00b      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d008      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	2b14      	cmp	r3, #20
 8002b3e:	d005      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	2b15      	cmp	r3, #21
 8002b44:	d002      	beq.n	8002b4c <extiVerifyIrqNum+0x8e>
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	2b16      	cmp	r3, #22
 8002b4a:	d101      	bne.n	8002b50 <extiVerifyIrqNum+0x92>
    {
        return true;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <extiVerifyIrqNum+0x94>
    }
    return false;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <extiVerifyTrigger+0x1c>
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d002      	beq.n	8002b7a <extiVerifyTrigger+0x1c>
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d101      	bne.n	8002b7e <extiVerifyTrigger+0x20>
    {
        return true;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <extiVerifyTrigger+0x22>
    }
    return false;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 8002b92:	2300      	movs	r3, #0
 8002b94:	71fb      	strb	r3, [r7, #7]
 8002b96:	e008      	b.n	8002baa <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <extiInit+0x34>)
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	71fb      	strb	r3, [r7, #7]
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d9f3      	bls.n	8002b98 <extiInit+0xc>
    }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40013800 	.word	0x40013800

08002bc4 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f937 	bl	8002e50 <gpioVerifyPort>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 8002bee:	23ff      	movs	r3, #255	; 0xff
 8002bf0:	e08a      	b.n	8002d08 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f95d 	bl	8002eb4 <gpioVerifyPin>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f083 0301 	eor.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8002c06:	23fe      	movs	r3, #254	; 0xfe
 8002c08:	e07e      	b.n	8002d08 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d841      	bhi.n	8002c94 <extiConfigIrq+0xd0>
 8002c10:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <extiConfigIrq+0x54>)
 8002c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c16:	bf00      	nop
 8002c18:	08002c59 	.word	0x08002c59
 8002c1c:	08002c59 	.word	0x08002c59
 8002c20:	08002c59 	.word	0x08002c59
 8002c24:	08002c59 	.word	0x08002c59
 8002c28:	08002c65 	.word	0x08002c65
 8002c2c:	08002c65 	.word	0x08002c65
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08002c65 	.word	0x08002c65
 8002c38:	08002c75 	.word	0x08002c75
 8002c3c:	08002c75 	.word	0x08002c75
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08002c75 	.word	0x08002c75
 8002c48:	08002c85 	.word	0x08002c85
 8002c4c:	08002c85 	.word	0x08002c85
 8002c50:	08002c85 	.word	0x08002c85
 8002c54:	08002c85 	.word	0x08002c85
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	73fb      	strb	r3, [r7, #15]
            break;
 8002c62:	e017      	b.n	8002c94 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	3b04      	subs	r3, #4
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	73bb      	strb	r3, [r7, #14]
            index = 1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
            break;
 8002c72:	e00f      	b.n	8002c94 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	3b08      	subs	r3, #8
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	73fb      	strb	r3, [r7, #15]
            break;
 8002c82:	e007      	b.n	8002c94 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	3b0c      	subs	r3, #12
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	73fb      	strb	r3, [r7, #15]
            break;
 8002c92:	bf00      	nop
    }

    if (GPIOA == port)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <extiConfigIrq+0x14c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d102      	bne.n	8002ca2 <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	737b      	strb	r3, [r7, #13]
 8002ca0:	e021      	b.n	8002ce6 <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <extiConfigIrq+0x150>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d102      	bne.n	8002cb0 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 8002caa:	2301      	movs	r3, #1
 8002cac:	737b      	strb	r3, [r7, #13]
 8002cae:	e01a      	b.n	8002ce6 <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <extiConfigIrq+0x154>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d102      	bne.n	8002cbe <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	737b      	strb	r3, [r7, #13]
 8002cbc:	e013      	b.n	8002ce6 <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a16      	ldr	r2, [pc, #88]	; (8002d1c <extiConfigIrq+0x158>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d102      	bne.n	8002ccc <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	737b      	strb	r3, [r7, #13]
 8002cca:	e00c      	b.n	8002ce6 <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <extiConfigIrq+0x15c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d102      	bne.n	8002cda <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	737b      	strb	r3, [r7, #13]
 8002cd8:	e005      	b.n	8002ce6 <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a11      	ldr	r2, [pc, #68]	; (8002d24 <extiConfigIrq+0x160>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <extiConfigIrq+0x164>)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	3302      	adds	r3, #2
 8002cec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cf0:	7b79      	ldrb	r1, [r7, #13]
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	490b      	ldr	r1, [pc, #44]	; (8002d28 <extiConfigIrq+0x164>)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	4302      	orrs	r2, r0
 8002d00:	3302      	adds	r3, #2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40021c00 	.word	0x40021c00
 8002d28:	40013800 	.word	0x40013800

08002d2c <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fec0 	bl	8002abe <extiVerifyIrqNum>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8002d4a:	23d8      	movs	r3, #216	; 0xd8
 8002d4c:	e00a      	b.n	8002d64 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <extiEnableIrq+0x40>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	79fa      	ldrb	r2, [r7, #7]
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <extiEnableIrq+0x40>)
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40013c00 	.word	0x40013c00

08002d70 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	460a      	mov	r2, r1
 8002d7a:	71fb      	strb	r3, [r7, #7]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe9b 	bl	8002abe <extiVerifyIrqNum>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 8002d94:	23d8      	movs	r3, #216	; 0xd8
 8002d96:	e055      	b.n	8002e44 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 8002d98:	79bb      	ldrb	r3, [r7, #6]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fedf 	bl	8002b5e <extiVerifyTrigger>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f083 0301 	eor.w	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 8002dac:	23d7      	movs	r3, #215	; 0xd7
 8002dae:	e049      	b.n	8002e44 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 8002db0:	79bb      	ldrb	r3, [r7, #6]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d115      	bne.n	8002de2 <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8002db6:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	79fa      	ldrb	r2, [r7, #7]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	79fa      	ldrb	r2, [r7, #7]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	43d2      	mvns	r2, r2
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002ddc:	400b      	ands	r3, r1
 8002dde:	60d3      	str	r3, [r2, #12]
 8002de0:	e02f      	b.n	8002e42 <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 8002de2:	79bb      	ldrb	r3, [r7, #6]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d115      	bne.n	8002e14 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	79fa      	ldrb	r2, [r7, #7]
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4611      	mov	r1, r2
 8002df6:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	79fa      	ldrb	r2, [r7, #7]
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	43d2      	mvns	r2, r2
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002e0e:	400b      	ands	r3, r1
 8002e10:	6093      	str	r3, [r2, #8]
 8002e12:	e016      	b.n	8002e42 <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8002e14:	79bb      	ldrb	r3, [r7, #6]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d113      	bne.n	8002e42 <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	79fa      	ldrb	r2, [r7, #7]
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4611      	mov	r1, r2
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	79fa      	ldrb	r2, [r7, #7]
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4a03      	ldr	r2, [pc, #12]	; (8002e4c <extiSetTriggerEdge+0xdc>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <gpioVerifyPort+0x4c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <gpioVerifyPort+0x38>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a0f      	ldr	r2, [pc, #60]	; (8002ea0 <gpioVerifyPort+0x50>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00f      	beq.n	8002e88 <gpioVerifyPort+0x38>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <gpioVerifyPort+0x54>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00b      	beq.n	8002e88 <gpioVerifyPort+0x38>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <gpioVerifyPort+0x58>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <gpioVerifyPort+0x5c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d003      	beq.n	8002e88 <gpioVerifyPort+0x38>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <gpioVerifyPort+0x60>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d101      	bne.n	8002e8c <gpioVerifyPort+0x3c>
    {
        return true;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <gpioVerifyPort+0x3e>
    }
    return false;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	40020c00 	.word	0x40020c00
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40021c00 	.word	0x40021c00

08002eb4 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d02c      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d029      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d026      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d023      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d020      	beq.n	8002f1e <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	d01d      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d01a      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	2b07      	cmp	r3, #7
 8002eec:	d017      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d014      	beq.n	8002f1e <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	2b09      	cmp	r3, #9
 8002ef8:	d011      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	2b0a      	cmp	r3, #10
 8002efe:	d00e      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	2b0b      	cmp	r3, #11
 8002f04:	d00b      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	d008      	beq.n	8002f1e <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	2b0d      	cmp	r3, #13
 8002f10:	d005      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2b0e      	cmp	r3, #14
 8002f16:	d002      	beq.n	8002f1e <gpioVerifyPin+0x6a>
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	d101      	bne.n	8002f22 <gpioVerifyPin+0x6e>
    {
        return true;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <gpioVerifyPin+0x70>
    }
    return false;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02c      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d029      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d026      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d023      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d020      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d01d      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d01a      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b07      	cmp	r3, #7
 8002f68:	d017      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d014      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2b09      	cmp	r3, #9
 8002f74:	d011      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2b0a      	cmp	r3, #10
 8002f7a:	d00e      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	2b0b      	cmp	r3, #11
 8002f80:	d00b      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d008      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2b0d      	cmp	r3, #13
 8002f8c:	d005      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	2b0e      	cmp	r3, #14
 8002f92:	d002      	beq.n	8002f9a <gpioVerifyAltFunc+0x6a>
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	d101      	bne.n	8002f9e <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <gpioVerifyPinMode+0x22>
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d005      	beq.n	8002fce <gpioVerifyPinMode+0x22>
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d002      	beq.n	8002fce <gpioVerifyPinMode+0x22>
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d101      	bne.n	8002fd2 <gpioVerifyPinMode+0x26>
    {
        return true;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <gpioVerifyPinMode+0x28>
    }

    return false;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <gpioVerifyOutputType+0x16>
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <gpioVerifyOutputType+0x1a>
    {
        return true;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <gpioVerifyOutputType+0x1c>
    }

    return false;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <gpioVerifyPushPullMode+0x1c>
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d002      	beq.n	8003024 <gpioVerifyPushPullMode+0x1c>
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d101      	bne.n	8003028 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff05 	bl	8002e50 <gpioVerifyPort>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d042      	beq.n	80030d2 <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <gpioInitPort+0xa8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d106      	bne.n	8003062 <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003054:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <gpioInitPort+0xac>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <gpioInitPort+0xac>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6313      	str	r3, [r2, #48]	; 0x30
 8003060:	e035      	b.n	80030ce <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <gpioInitPort+0xb0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d106      	bne.n	8003078 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <gpioInitPort+0xac>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <gpioInitPort+0xac>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	e02a      	b.n	80030ce <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <gpioInitPort+0xb4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d106      	bne.n	800308e <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <gpioInitPort+0xac>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <gpioInitPort+0xac>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6313      	str	r3, [r2, #48]	; 0x30
 800308c:	e01f      	b.n	80030ce <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <gpioInitPort+0xb8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d106      	bne.n	80030a4 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <gpioInitPort+0xac>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <gpioInitPort+0xac>)
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	e014      	b.n	80030ce <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <gpioInitPort+0xbc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d106      	bne.n	80030ba <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80030ac:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <gpioInitPort+0xac>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <gpioInitPort+0xac>)
 80030b2:	f043 0310 	orr.w	r3, r3, #16
 80030b6:	6313      	str	r3, [r2, #48]	; 0x30
 80030b8:	e009      	b.n	80030ce <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <gpioInitPort+0xc0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d105      	bne.n	80030ce <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <gpioInitPort+0xac>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <gpioInitPort+0xac>)
 80030c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e001      	b.n	80030d6 <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40020000 	.word	0x40020000
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40021c00 	.word	0x40021c00

080030fc <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fea3 	bl	8002e50 <gpioVerifyPort>
 800310a:	4603      	mov	r3, r0
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
 800311a:	e041      	b.n	80031a0 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <gpioSelectPort+0xac>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d106      	bne.n	8003132 <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <gpioSelectPort+0xb0>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <gpioSelectPort+0xb0>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6313      	str	r3, [r2, #48]	; 0x30
 8003130:	e035      	b.n	800319e <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <gpioSelectPort+0xb4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d106      	bne.n	8003148 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <gpioSelectPort+0xb0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <gpioSelectPort+0xb0>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	e02a      	b.n	800319e <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <gpioSelectPort+0xb8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d106      	bne.n	800315e <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <gpioSelectPort+0xb0>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <gpioSelectPort+0xb0>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	6313      	str	r3, [r2, #48]	; 0x30
 800315c:	e01f      	b.n	800319e <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <gpioSelectPort+0xbc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d106      	bne.n	8003174 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <gpioSelectPort+0xb0>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <gpioSelectPort+0xb0>)
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	e014      	b.n	800319e <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a11      	ldr	r2, [pc, #68]	; (80031bc <gpioSelectPort+0xc0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d106      	bne.n	800318a <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <gpioSelectPort+0xb0>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <gpioSelectPort+0xb0>)
 8003182:	f043 0310 	orr.w	r3, r3, #16
 8003186:	6313      	str	r3, [r2, #48]	; 0x30
 8003188:	e009      	b.n	800319e <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <gpioSelectPort+0xc4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d105      	bne.n	800319e <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <gpioSelectPort+0xb0>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <gpioSelectPort+0xb0>)
 8003198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40020800 	.word	0x40020800
 80031b8:	40020c00 	.word	0x40020c00
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40021c00 	.word	0x40021c00

080031c4 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
 80031d0:	4613      	mov	r3, r2
 80031d2:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fe3b 	bl	8002e50 <gpioVerifyPort>
 80031da:	4603      	mov	r3, r0
 80031dc:	f083 0301 	eor.w	r3, r3, #1
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	e032      	b.n	8003252 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fe60 	bl	8002eb4 <gpioVerifyPin>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f083 0301 	eor.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003200:	f06f 0301 	mvn.w	r3, #1
 8003204:	e025      	b.n	8003252 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8003206:	78bb      	ldrb	r3, [r7, #2]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fecf 	bl	8002fac <gpioVerifyPinMode>
 800320e:	4603      	mov	r3, r0
 8003210:	f083 0301 	eor.w	r3, r3, #1
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 800321a:	f06f 0305 	mvn.w	r3, #5
 800321e:	e018      	b.n	8003252 <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	0052      	lsls	r2, r2, #1
 8003228:	2103      	movs	r1, #3
 800322a:	fa01 f202 	lsl.w	r2, r1, r2
 800322e:	43d2      	mvns	r2, r2
 8003230:	401a      	ands	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8003236:	78bb      	ldrb	r3, [r7, #2]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78b9      	ldrb	r1, [r7, #2]
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	0052      	lsls	r2, r2, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fdf2 	bl	8002e50 <gpioVerifyPort>
 800326c:	4603      	mov	r3, r0
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	e014      	b.n	80032a8 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fe17 	bl	8002eb4 <gpioVerifyPin>
 8003286:	4603      	mov	r3, r0
 8003288:	f083 0301 	eor.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003292:	f06f 0301 	mvn.w	r3, #1
 8003296:	e007      	b.n	80032a8 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	2201      	movs	r2, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff fdc7 	bl	8002e50 <gpioVerifyPort>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	e015      	b.n	8003300 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fdec 	bl	8002eb4 <gpioVerifyPin>
 80032dc:	4603      	mov	r3, r0
 80032de:	f083 0301 	eor.w	r3, r3, #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80032e8:	f06f 0301 	mvn.w	r3, #1
 80032ec:	e008      	b.n	8003300 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	3310      	adds	r3, #16
 80032f2:	2201      	movs	r2, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
 8003314:	4613      	mov	r3, r2
 8003316:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fd99 	bl	8002e50 <gpioVerifyPort>
 800331e:	4603      	mov	r3, r0
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e050      	b.n	80033d2 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fdbe 	bl	8002eb4 <gpioVerifyPin>
 8003338:	4603      	mov	r3, r0
 800333a:	f083 0301 	eor.w	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8003344:	f06f 0301 	mvn.w	r3, #1
 8003348:	e043      	b.n	80033d2 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 800334a:	78bb      	ldrb	r3, [r7, #2]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fdef 	bl	8002f30 <gpioVerifyAltFunc>
 8003352:	4603      	mov	r3, r0
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 800335e:	f06f 0302 	mvn.w	r3, #2
 8003362:	e036      	b.n	80033d2 <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	2202      	movs	r2, #2
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff2a 	bl	80031c4 <gpioSelectPinMode>

	if (pin <= PIN7)
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	2b07      	cmp	r3, #7
 8003374:	d815      	bhi.n	80033a2 <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	210f      	movs	r1, #15
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	43d2      	mvns	r2, r2
 8003386:	401a      	ands	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	78b9      	ldrb	r1, [r7, #2]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]
 80033a0:	e016      	b.n	80033d0 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	3a08      	subs	r2, #8
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	210f      	movs	r1, #15
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	43d2      	mvns	r2, r2
 80033b4:	401a      	ands	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	78b9      	ldrb	r1, [r7, #2]
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	3a08      	subs	r2, #8
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]
 80033e6:	4613      	mov	r3, r2
 80033e8:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fd30 	bl	8002e50 <gpioVerifyPort>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	e030      	b.n	8003464 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fd55 	bl	8002eb4 <gpioVerifyPin>
 800340a:	4603      	mov	r3, r0
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8003416:	f06f 0301 	mvn.w	r3, #1
 800341a:	e023      	b.n	8003464 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 800341c:	78bb      	ldrb	r3, [r7, #2]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fdde 	bl	8002fe0 <gpioVerifyOutputType>
 8003424:	4603      	mov	r3, r0
 8003426:	f083 0301 	eor.w	r3, r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8003430:	f06f 0303 	mvn.w	r3, #3
 8003434:	e016      	b.n	8003464 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	43d2      	mvns	r2, r2
 8003444:	401a      	ands	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 800344a:	78bb      	ldrb	r3, [r7, #2]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d108      	bne.n	8003462 <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f202 	lsl.w	r2, r1, r2
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
 8003478:	4613      	mov	r3, r2
 800347a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fce7 	bl	8002e50 <gpioVerifyPort>
 8003482:	4603      	mov	r3, r0
 8003484:	f083 0301 	eor.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	e044      	b.n	800351e <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fd0c 	bl	8002eb4 <gpioVerifyPin>
 800349c:	4603      	mov	r3, r0
 800349e:	f083 0301 	eor.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80034a8:	f06f 0301 	mvn.w	r3, #1
 80034ac:	e037      	b.n	800351e <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 80034ae:	78bb      	ldrb	r3, [r7, #2]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fda9 	bl	8003008 <gpioVerifyPushPullMode>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f083 0301 	eor.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 80034c2:	f06f 0306 	mvn.w	r3, #6
 80034c6:	e02a      	b.n	800351e <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	0052      	lsls	r2, r2, #1
 80034d0:	2103      	movs	r1, #3
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	43d2      	mvns	r2, r2
 80034d8:	401a      	ands	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11a      	bne.n	800351c <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 80034e6:	78bb      	ldrb	r3, [r7, #2]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10a      	bne.n	8003502 <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	0052      	lsls	r2, r2, #1
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f202 	lsl.w	r2, r1, r2
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	60da      	str	r2, [r3, #12]
 8003500:	e00c      	b.n	800351c <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8003502:	78bb      	ldrb	r3, [r7, #2]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d109      	bne.n	800351c <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	0052      	lsls	r2, r2, #1
 8003510:	2102      	movs	r1, #2
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f202 	lsl.w	r2, r1, r2
 800353e:	4013      	ands	r3, r2
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	2101      	movs	r1, #1
 8003544:	fa01 f202 	lsl.w	r2, r1, r2
 8003548:	4293      	cmp	r3, r2
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8003572:	bf00      	nop
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f9      	beq.n	8003574 <__i2c_start+0x16>
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 80035a2:	bf00      	nop
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f9      	beq.n	80035a4 <__i2c_stop+0x16>
 }
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 80035c6:	bf00      	nop
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	4313      	orrs	r3, r2
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ed      	bne.n	80035c8 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8003602:	bf00      	nop
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f9      	beq.n	8003604 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e002      	b.n	800361c <__i2c_Chk_TX_empty+0x22>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3301      	adds	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b13      	cmp	r3, #19
 8003620:	d9f9      	bls.n	8003616 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8003622:	bf00      	nop
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <i2cVerifyDutyCycle+0x16>
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <i2cSelectI2C+0x58>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d106      	bne.n	8003676 <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <i2cSelectI2C+0x5c>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <i2cSelectI2C+0x5c>)
 800366e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003672:	6413      	str	r3, [r2, #64]	; 0x40
 8003674:	e014      	b.n	80036a0 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <i2cSelectI2C+0x60>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d106      	bne.n	800368c <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <i2cSelectI2C+0x5c>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <i2cSelectI2C+0x5c>)
 8003684:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	e009      	b.n	80036a0 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <i2cSelectI2C+0x64>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d105      	bne.n	80036a0 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <i2cSelectI2C+0x5c>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a06      	ldr	r2, [pc, #24]	; (80036b4 <i2cSelectI2C+0x5c>)
 800369a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40005400 	.word	0x40005400
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40005800 	.word	0x40005800
 80036bc:	40005c00 	.word	0x40005c00

080036c0 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <i2cSetClkSpd+0x2a>
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d008      	beq.n	80036ea <i2cSetClkSpd+0x2a>
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d005      	beq.n	80036ea <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d002      	beq.n	80036ea <i2cSetClkSpd+0x2a>
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d160      	bne.n	80037ac <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 80036ea:	bf00      	nop
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f9      	bne.n	80036ec <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003706:	f023 030f 	bic.w	r3, r3, #15
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	61da      	str	r2, [r3, #28]
    	switch (spd)
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d836      	bhi.n	800378e <i2cSetClkSpd+0xce>
 8003720:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <i2cSetClkSpd+0x68>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	0800373d 	.word	0x0800373d
 800372c:	0800374b 	.word	0x0800374b
 8003730:	08003759 	.word	0x08003759
 8003734:	08003767 	.word	0x08003767
 8003738:	08003775 	.word	0x08003775
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	61da      	str	r2, [r3, #28]
				break;
 8003748:	e02e      	b.n	80037a8 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	61da      	str	r2, [r3, #28]
    			break;
 8003756:	e027      	b.n	80037a8 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	61da      	str	r2, [r3, #28]
    				break;
 8003764:	e020      	b.n	80037a8 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f043 0214 	orr.w	r2, r3, #20
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	61da      	str	r2, [r3, #28]
    			break;
 8003772:	e019      	b.n	80037a8 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f043 0205 	orr.w	r2, r3, #5
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	61da      	str	r2, [r3, #28]
				break;
 800378c:	e00c      	b.n	80037a8 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	61da      	str	r2, [r3, #28]
    			break;
 80037a6:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e001      	b.n	80037b0 <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 80037ac:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	4608      	mov	r0, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	461a      	mov	r2, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	70fb      	strb	r3, [r7, #3]
 80037ce:	460b      	mov	r3, r1
 80037d0:	70bb      	strb	r3, [r7, #2]
 80037d2:	4613      	mov	r3, r2
 80037d4:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff29 	bl	8003630 <i2cVerifyDutyCycle>
 80037de:	4603      	mov	r3, r0
 80037e0:	f083 0301 	eor.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 80037ea:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 80037ee:	e02f      	b.n	8003850 <i2cInitI2C+0x94>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037f6:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 0201 	bic.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 800380a:	f000 fa49 	bl	8003ca0 <rccGetPclk1Freq>
 800380e:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a11      	ldr	r2, [pc, #68]	; (8003858 <i2cInitI2C+0x9c>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	0c9a      	lsrs	r2, r3, #18
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2211      	movs	r2, #17
 8003822:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff3f 	bl	80036c0 <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	431bde83 	.word	0x431bde83

0800385c <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4603      	mov	r3, r0
 800386c:	70fb      	strb	r3, [r7, #3]
 800386e:	460b      	mov	r3, r1
 8003870:	70bb      	strb	r3, [r7, #2]
 8003872:	4613      	mov	r3, r2
 8003874:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8003876:	bf00      	nop
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f9      	bne.n	8003878 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff fe6a 	bl	800355e <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800388a:	bf00      	nop
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f9      	beq.n	800388c <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	461a      	mov	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 80038a2:	bf00      	nop
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f9      	beq.n	80038a4 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fe84 	bl	80035be <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fe9f 	bl	80035fa <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 80038bc:	78ba      	ldrb	r2, [r7, #2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fe99 	bl	80035fa <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fe78 	bl	80035be <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 80038ce:	787a      	ldrb	r2, [r7, #1]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 80038d4:	bf00      	nop
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f9      	beq.n	80038d6 <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fe6b 	bl	80035be <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fe50 	bl	800358e <__i2c_stop>


    return I2C_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	72fb      	strb	r3, [r7, #11]
 8003906:	4613      	mov	r3, r2
 8003908:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 800390a:	bf00      	nop
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f9      	bne.n	800390c <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7ff fe20 	bl	800355e <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800391e:	bf00      	nop
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f9      	beq.n	8003920 <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 800392c:	7afb      	ldrb	r3, [r7, #11]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	461a      	mov	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003936:	bf00      	nop
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f9      	beq.n	8003938 <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff fe3a 	bl	80035be <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 800394a:	7aba      	ldrb	r2, [r7, #10]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff fe52 	bl	80035fa <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 8003956:	bf00      	nop
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f9      	beq.n	8003958 <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fe2a 	bl	80035be <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8003976:	bf00      	nop
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f9      	beq.n	8003978 <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	461a      	mov	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003992:	bf00      	nop
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f9      	beq.n	8003994 <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 80039ac:	e02e      	b.n	8003a0c <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 80039ae:	7e3b      	ldrb	r3, [r7, #24]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d117      	bne.n	80039e4 <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fdfc 	bl	80035be <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80039c6:	bf00      	nop
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f9      	beq.n	80039c8 <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6919      	ldr	r1, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	b2ca      	uxtb	r2, r1
 80039e0:	701a      	strb	r2, [r3, #0]
            break;
 80039e2:	e016      	b.n	8003a12 <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7ff fdea 	bl	80035be <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80039ea:	bf00      	nop
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f9      	beq.n	80039ec <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6919      	ldr	r1, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	b2ca      	uxtb	r2, r1
 8003a04:	701a      	strb	r2, [r3, #0]
            num--;
 8003a06:	7e3b      	ldrb	r3, [r7, #24]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8003a0c:	7e3b      	ldrb	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1cd      	bne.n	80039ae <i2cBurstRegRead+0xb6>
        }
    }
    //__i2c_dummy_read_SR1_SR2(i2c);
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fdbb 	bl	800358e <__i2c_stop>

    return I2C_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8003a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a48:	b094      	sub	sp, #80	; 0x50
 8003a4a:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8003a50:	2300      	movs	r3, #0
 8003a52:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8003a54:	2300      	movs	r3, #0
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5c:	4b79      	ldr	r3, [pc, #484]	; (8003c44 <rccGetSysClock+0x200>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d00d      	beq.n	8003a84 <rccGetSysClock+0x40>
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	f200 80e1 	bhi.w	8003c30 <rccGetSysClock+0x1ec>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <rccGetSysClock+0x34>
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d003      	beq.n	8003a7e <rccGetSysClock+0x3a>
 8003a76:	e0db      	b.n	8003c30 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 8003a78:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <rccGetSysClock+0x204>)
 8003a7a:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003a7c:	e0db      	b.n	8003c36 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 8003a7e:	4b73      	ldr	r3, [pc, #460]	; (8003c4c <rccGetSysClock+0x208>)
 8003a80:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003a82:	e0d8      	b.n	8003c36 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a84:	4b6f      	ldr	r3, [pc, #444]	; (8003c44 <rccGetSysClock+0x200>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	; (8003c44 <rccGetSysClock+0x200>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d063      	beq.n	8003b62 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003a9a:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <rccGetSysClock+0x200>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30
 8003aae:	2300      	movs	r3, #0
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	f04f 0000 	mov.w	r0, #0
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	0159      	lsls	r1, r3, #5
 8003ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac8:	0150      	lsls	r0, r2, #5
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4621      	mov	r1, r4
 8003ad0:	1a51      	subs	r1, r2, r1
 8003ad2:	6139      	str	r1, [r7, #16]
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae8:	4659      	mov	r1, fp
 8003aea:	018b      	lsls	r3, r1, #6
 8003aec:	4651      	mov	r1, sl
 8003aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af2:	4651      	mov	r1, sl
 8003af4:	018a      	lsls	r2, r1, #6
 8003af6:	4651      	mov	r1, sl
 8003af8:	ebb2 0801 	subs.w	r8, r2, r1
 8003afc:	4659      	mov	r1, fp
 8003afe:	eb63 0901 	sbc.w	r9, r3, r1
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b16:	4690      	mov	r8, r2
 8003b18:	4699      	mov	r9, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	eb18 0303 	adds.w	r3, r8, r3
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	462b      	mov	r3, r5
 8003b24:	eb49 0303 	adc.w	r3, r9, r3
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b36:	4629      	mov	r1, r5
 8003b38:	024b      	lsls	r3, r1, #9
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b40:	4621      	mov	r1, r4
 8003b42:	024a      	lsls	r2, r1, #9
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b54:	f7fd f880 	bl	8000c58 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b60:	e058      	b.n	8003c14 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003b62:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <rccGetSysClock+0x200>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	099b      	lsrs	r3, r3, #6
 8003b68:	2200      	movs	r2, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b72:	623b      	str	r3, [r7, #32]
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
 8003b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	f04f 0000 	mov.w	r0, #0
 8003b84:	f04f 0100 	mov.w	r1, #0
 8003b88:	0159      	lsls	r1, r3, #5
 8003b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8e:	0150      	lsls	r0, r2, #5
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4641      	mov	r1, r8
 8003b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	00eb      	lsls	r3, r5, #3
 8003bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bca:	00e2      	lsls	r2, r4, #3
 8003bcc:	4614      	mov	r4, r2
 8003bce:	461d      	mov	r5, r3
 8003bd0:	4643      	mov	r3, r8
 8003bd2:	18e3      	adds	r3, r4, r3
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	eb45 0303 	adc.w	r3, r5, r3
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bea:	4629      	mov	r1, r5
 8003bec:	028b      	lsls	r3, r1, #10
 8003bee:	4621      	mov	r1, r4
 8003bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	028a      	lsls	r2, r1, #10
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	61fa      	str	r2, [r7, #28]
 8003c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c08:	f7fd f826 	bl	8000c58 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003c10:	4613      	mov	r3, r2
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <rccGetSysClock+0x200>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8003c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003c2e:	e002      	b.n	8003c36 <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <rccGetSysClock+0x204>)
 8003c32:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003c34:	bf00      	nop
    }

    return sysClock;
 8003c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3750      	adds	r7, #80	; 0x50
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	007a1200 	.word	0x007a1200

08003c50 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8003c56:	f7ff fef5 	bl	8003a44 <rccGetSysClock>
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <rccGetHclkFreq+0x44>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c64:	22f0      	movs	r2, #240	; 0xf0
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	fa92 f2a2 	rbit	r2, r2
 8003c6e:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	fab2 f282 	clz	r2, r2
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	40d3      	lsrs	r3, r2
 8003c7a:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <rccGetHclkFreq+0x48>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c82:	4a06      	ldr	r2, [pc, #24]	; (8003c9c <rccGetHclkFreq+0x4c>)
 8003c84:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <rccGetHclkFreq+0x4c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08008eb0 	.word	0x08008eb0
 8003c9c:	2000001c 	.word	0x2000001c

08003ca0 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003ca6:	f7ff ffd3 	bl	8003c50 <rccGetHclkFreq>
 8003caa:	4601      	mov	r1, r0
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <rccGetPclk1Freq+0x3c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003cb4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003cb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	fa92 f2a2 	rbit	r2, r2
 8003cc0:	603a      	str	r2, [r7, #0]
  return result;
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	40d3      	lsrs	r3, r2
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <rccGetPclk1Freq+0x40>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	08008eb0 	.word	0x08008eb0

08003ce4 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8003cec:	bf00      	nop
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f9      	beq.n	8003cee <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	81fb      	strh	r3, [r7, #14]
 8003cfe:	e002      	b.n	8003d06 <__spi_Chk_TX_empty+0x22>
 8003d00:	89fb      	ldrh	r3, [r7, #14]
 8003d02:	3301      	adds	r3, #1
 8003d04:	81fb      	strh	r3, [r7, #14]
 8003d06:	89fb      	ldrh	r3, [r7, #14]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d9f9      	bls.n	8003d00 <__spi_Chk_TX_empty+0x1c>

}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8003d22:	bf00      	nop
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f9      	bne.n	8003d24 <__spi_Chk_notBSY+0xa>
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <spiVerifySPI+0x3c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00b      	beq.n	8003d68 <spiVerifySPI+0x28>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <spiVerifySPI+0x40>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <spiVerifySPI+0x28>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <spiVerifySPI+0x44>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <spiVerifySPI+0x28>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <spiVerifySPI+0x48>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <spiVerifySPI+0x2c>
    {
        return true;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <spiVerifySPI+0x2e>
    }
    return false;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40013000 	.word	0x40013000
 8003d80:	40003800 	.word	0x40003800
 8003d84:	40003c00 	.word	0x40003c00
 8003d88:	40013400 	.word	0x40013400

08003d8c <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d014      	beq.n	8003dc6 <spiVerifyClkDivider+0x3a>
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d011      	beq.n	8003dc6 <spiVerifyClkDivider+0x3a>
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d00e      	beq.n	8003dc6 <spiVerifyClkDivider+0x3a>
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d00b      	beq.n	8003dc6 <spiVerifyClkDivider+0x3a>
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d008      	beq.n	8003dc6 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d005      	beq.n	8003dc6 <spiVerifyClkDivider+0x3a>
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	d002      	beq.n	8003dc6 <spiVerifyClkDivider+0x3a>
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	2b07      	cmp	r3, #7
 8003dc4:	d101      	bne.n	8003dca <spiVerifyClkDivider+0x3e>
    {
        return true;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <spiVerifyClkDivider+0x40>
    }
    return false;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d002      	beq.n	8003dee <spiVerifySSM+0x16>
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <spiVerifySSM+0x1a>
    {
        return true;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <spiVerifySSM+0x1c>
    }
    return false;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <spiVerifyOpMode+0x16>
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <spiVerifyOpMode+0x1a>
    {
        return true;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <spiVerifyOpMode+0x1c>
    }
    return false;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <spiVerifyPhase+0x16>
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <spiVerifyPhase+0x1a>
    {
        return true;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <spiVerifyPhase+0x1c>
    }
    return false;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <spiVerifyIdlePolarity+0x16>
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	70fb      	strb	r3, [r7, #3]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	70bb      	strb	r3, [r7, #2]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff77 	bl	8003d8c <spiVerifyClkDivider>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f083 0301 	eor.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8003eaa:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8003eae:	e0cc      	b.n	800404a <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff90 	bl	8003dd8 <spiVerifySSM>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f083 0301 	eor.w	r3, r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8003ec4:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8003ec8:	e0bf      	b.n	800404a <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8003eca:	7f3b      	ldrb	r3, [r7, #28]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff97 	bl	8003e00 <spiVerifyOpMode>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f083 0301 	eor.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8003ede:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8003ee2:	e0b2      	b.n	800404a <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8003ee4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff9d 	bl	8003e28 <spiVerifyPhase>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f083 0301 	eor.w	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 8003efa:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8003efe:	e0a4      	b.n	800404a <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8003f00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ffa3 	bl	8003e50 <spiVerifyIdlePolarity>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f083 0301 	eor.w	r3, r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 8003f16:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8003f1a:	e096      	b.n	800404a <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	2b07      	cmp	r3, #7
 8003f20:	d83a      	bhi.n	8003f98 <spiInitSPI+0x120>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <spiInitSPI+0xb0>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f49 	.word	0x08003f49
 8003f2c:	08003f53 	.word	0x08003f53
 8003f30:	08003f5d 	.word	0x08003f5d
 8003f34:	08003f67 	.word	0x08003f67
 8003f38:	08003f71 	.word	0x08003f71
 8003f3c:	08003f7b 	.word	0x08003f7b
 8003f40:	08003f85 	.word	0x08003f85
 8003f44:	08003f8f 	.word	0x08003f8f
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003f48:	89fb      	ldrh	r3, [r7, #14]
 8003f4a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003f4e:	81fb      	strh	r3, [r7, #14]
            break;
 8003f50:	e027      	b.n	8003fa2 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	81fb      	strh	r3, [r7, #14]
            break;
 8003f5a:	e022      	b.n	8003fa2 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8003f5c:	89fb      	ldrh	r3, [r7, #14]
 8003f5e:	f043 0310 	orr.w	r3, r3, #16
 8003f62:	81fb      	strh	r3, [r7, #14]
            break;
 8003f64:	e01d      	b.n	8003fa2 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003f66:	89fb      	ldrh	r3, [r7, #14]
 8003f68:	f043 0318 	orr.w	r3, r3, #24
 8003f6c:	81fb      	strh	r3, [r7, #14]
            break;
 8003f6e:	e018      	b.n	8003fa2 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	f043 0320 	orr.w	r3, r3, #32
 8003f76:	81fb      	strh	r3, [r7, #14]
            break;
 8003f78:	e013      	b.n	8003fa2 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003f80:	81fb      	strh	r3, [r7, #14]
            break;
 8003f82:	e00e      	b.n	8003fa2 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8003f84:	89fb      	ldrh	r3, [r7, #14]
 8003f86:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003f8a:	81fb      	strh	r3, [r7, #14]
            break;
 8003f8c:	e009      	b.n	8003fa2 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003f8e:	89fb      	ldrh	r3, [r7, #14]
 8003f90:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003f94:	81fb      	strh	r3, [r7, #14]
            break;
 8003f96:	e004      	b.n	8003fa2 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003f98:	89fb      	ldrh	r3, [r7, #14]
 8003f9a:	f043 0318 	orr.w	r3, r3, #24
 8003f9e:	81fb      	strh	r3, [r7, #14]
            break;
 8003fa0:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8003fa2:	78bb      	ldrb	r3, [r7, #2]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8003fa8:	89fb      	ldrh	r3, [r7, #14]
 8003faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fae:	81fb      	strh	r3, [r7, #14]
 8003fb0:	e003      	b.n	8003fba <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8003fb2:	89fb      	ldrh	r3, [r7, #14]
 8003fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fb8:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8003fba:	787b      	ldrb	r3, [r7, #1]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d110      	bne.n	8003fe2 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fc6:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8003fc8:	7e3b      	ldrb	r3, [r7, #24]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d104      	bne.n	8003fd8 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8003fce:	89fb      	ldrh	r3, [r7, #14]
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	81fb      	strh	r3, [r7, #14]
 8003fd6:	e008      	b.n	8003fea <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8003fd8:	89fb      	ldrh	r3, [r7, #14]
 8003fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fde:	81fb      	strh	r3, [r7, #14]
 8003fe0:	e003      	b.n	8003fea <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe8:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8003fea:	7f3b      	ldrb	r3, [r7, #28]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8003ff0:	89fb      	ldrh	r3, [r7, #14]
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	81fb      	strh	r3, [r7, #14]
 8003ff8:	e003      	b.n	8004002 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
 8003ffc:	f023 0304 	bic.w	r3, r3, #4
 8004000:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8004002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 800400a:	89fb      	ldrh	r3, [r7, #14]
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	81fb      	strh	r3, [r7, #14]
 8004012:	e003      	b.n	800401c <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8004014:	89fb      	ldrh	r3, [r7, #14]
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 800401c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004020:	2b00      	cmp	r3, #0
 8004022:	d104      	bne.n	800402e <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8004024:	89fb      	ldrh	r3, [r7, #14]
 8004026:	f023 0302 	bic.w	r3, r3, #2
 800402a:	81fb      	strh	r3, [r7, #14]
 800402c:	e003      	b.n	8004036 <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 800402e:	89fb      	ldrh	r3, [r7, #14]
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8004036:	89fa      	ldrh	r2, [r7, #14]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f846 	bl	80040d4 <spiEnableSPI>

    return SPI_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop

08004054 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <spiSelectSPI+0x6c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d106      	bne.n	8004072 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <spiSelectSPI+0x70>)
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	4a16      	ldr	r2, [pc, #88]	; (80040c4 <spiSelectSPI+0x70>)
 800406a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800406e:	6453      	str	r3, [r2, #68]	; 0x44
 8004070:	e01f      	b.n	80040b2 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <spiSelectSPI+0x74>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d106      	bne.n	8004088 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <spiSelectSPI+0x70>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <spiSelectSPI+0x70>)
 8004080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004084:	6413      	str	r3, [r2, #64]	; 0x40
 8004086:	e014      	b.n	80040b2 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a10      	ldr	r2, [pc, #64]	; (80040cc <spiSelectSPI+0x78>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d106      	bne.n	800409e <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <spiSelectSPI+0x70>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <spiSelectSPI+0x70>)
 8004096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409a:	6413      	str	r3, [r2, #64]	; 0x40
 800409c:	e009      	b.n	80040b2 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <spiSelectSPI+0x7c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d105      	bne.n	80040b2 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <spiSelectSPI+0x70>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <spiSelectSPI+0x70>)
 80040ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040b0:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40013000 	.word	0x40013000
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40003800 	.word	0x40003800
 80040cc:	40003c00 	.word	0x40003c00
 80040d0:	40013400 	.word	0x40013400

080040d4 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fe2f 	bl	8003d40 <spiVerifySPI>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 80040ee:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 80040f2:	e006      	b.n	8004102 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	4611      	mov	r1, r2
 8004116:	461a      	mov	r2, r3
 8004118:	460b      	mov	r3, r1
 800411a:	71fb      	strb	r3, [r7, #7]
 800411c:	4613      	mov	r3, r2
 800411e:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fec6 	bl	8002eb4 <gpioVerifyPin>
 8004128:	4603      	mov	r3, r0
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8004134:	f06f 0301 	mvn.w	r3, #1
 8004138:	e016      	b.n	8004168 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff fdd2 	bl	8003ce4 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	4619      	mov	r1, r3
 8004144:	68b8      	ldr	r0, [r7, #8]
 8004146:	f7ff f8b3 	bl	80032b0 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 800414a:	79ba      	ldrb	r2, [r7, #6]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fdc7 	bl	8003ce4 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff fddf 	bl	8003d1a <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	4619      	mov	r1, r3
 8004160:	68b8      	ldr	r0, [r7, #8]
 8004162:	f7ff f87a 	bl	800325a <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	db0a      	blt.n	800419a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	490c      	ldr	r1, [pc, #48]	; (80041bc <__NVIC_SetPriority+0x4c>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	440b      	add	r3, r1
 8004194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004198:	e00a      	b.n	80041b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <__NVIC_SetPriority+0x50>)
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3b04      	subs	r3, #4
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	440b      	add	r3, r1
 80041ae:	761a      	strb	r2, [r3, #24]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d4:	d301      	bcc.n	80041da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041d6:	2301      	movs	r3, #1
 80041d8:	e00f      	b.n	80041fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <SysTick_Config+0x40>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041e2:	210f      	movs	r1, #15
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	f7ff ffc2 	bl	8004170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <SysTick_Config+0x40>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <SysTick_Config+0x40>)
 80041f4:	2207      	movs	r2, #7
 80041f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	e000e010 	.word	0xe000e010

08004208 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	601a      	str	r2, [r3, #0]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 800422c:	f000 f8b2 	bl	8004394 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <systickInit+0x24>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ffc2 	bl	80041c4 <SysTick_Config>
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	2000001c 	.word	0x2000001c

0800424c <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8004270:	2300      	movs	r3, #0
 8004272:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <isSystickExpired+0x16>
	{
		timerState = true;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <SysTick_Handler+0x14>)
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	20000234 	.word	0x20000234

080042a4 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <systickUpdateTimer+0x1a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1e5a      	subs	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 80042be:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <systickUpdateTimer+0x2c>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	20000234 	.word	0x20000234

080042d4 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	e011      	b.n	800430a <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <systickUpdateTimerList+0x30>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	1e5a      	subs	r2, r3, #1
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	3301      	adds	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	429a      	cmp	r2, r3
 8004310:	d3e9      	bcc.n	80042e6 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <systickUpdateTimerList+0x50>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	20000234 	.word	0x20000234

08004328 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff67 	bl	8004208 <systickSetMillis>
    while (!isSystickExpired(*timer))
 800433a:	e006      	b.n	800434a <systickDelay+0x22>
    {
        if (timerTrigger == true)
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <systickDelay+0x44>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ffad 	bl	80042a4 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff8a 	bl	8004268 <isSystickExpired>
 8004354:	4603      	mov	r3, r0
 8004356:	f083 0301 	eor.w	r3, r3, #1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ed      	bne.n	800433c <systickDelay+0x14>
        }
    }
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000234 	.word	0x20000234

08004370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <SystemInit+0x20>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <SystemInit+0x20>)
 800437c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	2302      	movs	r3, #2
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	2302      	movs	r3, #2
 80043ac:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80043ae:	4b34      	ldr	r3, [pc, #208]	; (8004480 <SystemCoreClockUpdate+0xec>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d011      	beq.n	80043e2 <SystemCoreClockUpdate+0x4e>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d844      	bhi.n	800444e <SystemCoreClockUpdate+0xba>
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <SystemCoreClockUpdate+0x3e>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d004      	beq.n	80043da <SystemCoreClockUpdate+0x46>
 80043d0:	e03d      	b.n	800444e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <SystemCoreClockUpdate+0xf0>)
 80043d4:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <SystemCoreClockUpdate+0xf4>)
 80043d6:	601a      	str	r2, [r3, #0]
      break;
 80043d8:	e03d      	b.n	8004456 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80043da:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <SystemCoreClockUpdate+0xf0>)
 80043dc:	4a2b      	ldr	r2, [pc, #172]	; (800448c <SystemCoreClockUpdate+0xf8>)
 80043de:	601a      	str	r2, [r3, #0]
      break;
 80043e0:	e039      	b.n	8004456 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80043e2:	4b27      	ldr	r3, [pc, #156]	; (8004480 <SystemCoreClockUpdate+0xec>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	0d9b      	lsrs	r3, r3, #22
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ee:	4b24      	ldr	r3, [pc, #144]	; (8004480 <SystemCoreClockUpdate+0xec>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80043fe:	4a23      	ldr	r2, [pc, #140]	; (800448c <SystemCoreClockUpdate+0xf8>)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <SystemCoreClockUpdate+0xec>)
 8004408:	6852      	ldr	r2, [r2, #4]
 800440a:	0992      	lsrs	r2, r2, #6
 800440c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004410:	fb02 f303 	mul.w	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e00b      	b.n	8004430 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <SystemCoreClockUpdate+0xf4>)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	4a17      	ldr	r2, [pc, #92]	; (8004480 <SystemCoreClockUpdate+0xec>)
 8004422:	6852      	ldr	r2, [r2, #4]
 8004424:	0992      	lsrs	r2, r2, #6
 8004426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004430:	4b13      	ldr	r3, [pc, #76]	; (8004480 <SystemCoreClockUpdate+0xec>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	3301      	adds	r3, #1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <SystemCoreClockUpdate+0xf0>)
 800444a:	6013      	str	r3, [r2, #0]
      break;
 800444c:	e003      	b.n	8004456 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <SystemCoreClockUpdate+0xf0>)
 8004450:	4a0d      	ldr	r2, [pc, #52]	; (8004488 <SystemCoreClockUpdate+0xf4>)
 8004452:	601a      	str	r2, [r3, #0]
      break;
 8004454:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <SystemCoreClockUpdate+0xec>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <SystemCoreClockUpdate+0xfc>)
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <SystemCoreClockUpdate+0xf0>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <SystemCoreClockUpdate+0xf0>)
 8004472:	6013      	str	r3, [r2, #0]
}
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40023800 	.word	0x40023800
 8004484:	2000001c 	.word	0x2000001c
 8004488:	00f42400 	.word	0x00f42400
 800448c:	007a1200 	.word	0x007a1200
 8004490:	08008ec0 	.word	0x08008ec0

08004494 <__libc_init_array>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4d0d      	ldr	r5, [pc, #52]	; (80044cc <__libc_init_array+0x38>)
 8004498:	4c0d      	ldr	r4, [pc, #52]	; (80044d0 <__libc_init_array+0x3c>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	2600      	movs	r6, #0
 80044a0:	42a6      	cmp	r6, r4
 80044a2:	d109      	bne.n	80044b8 <__libc_init_array+0x24>
 80044a4:	4d0b      	ldr	r5, [pc, #44]	; (80044d4 <__libc_init_array+0x40>)
 80044a6:	4c0c      	ldr	r4, [pc, #48]	; (80044d8 <__libc_init_array+0x44>)
 80044a8:	f004 fa64 	bl	8008974 <_init>
 80044ac:	1b64      	subs	r4, r4, r5
 80044ae:	10a4      	asrs	r4, r4, #2
 80044b0:	2600      	movs	r6, #0
 80044b2:	42a6      	cmp	r6, r4
 80044b4:	d105      	bne.n	80044c2 <__libc_init_array+0x2e>
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044bc:	4798      	blx	r3
 80044be:	3601      	adds	r6, #1
 80044c0:	e7ee      	b.n	80044a0 <__libc_init_array+0xc>
 80044c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c6:	4798      	blx	r3
 80044c8:	3601      	adds	r6, #1
 80044ca:	e7f2      	b.n	80044b2 <__libc_init_array+0x1e>
 80044cc:	08009500 	.word	0x08009500
 80044d0:	08009500 	.word	0x08009500
 80044d4:	08009500 	.word	0x08009500
 80044d8:	08009504 	.word	0x08009504

080044dc <memset>:
 80044dc:	4402      	add	r2, r0
 80044de:	4603      	mov	r3, r0
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d100      	bne.n	80044e6 <memset+0xa>
 80044e4:	4770      	bx	lr
 80044e6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ea:	e7f9      	b.n	80044e0 <memset+0x4>

080044ec <__cvt>:
 80044ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	ec55 4b10 	vmov	r4, r5, d0
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	460e      	mov	r6, r1
 80044f8:	4619      	mov	r1, r3
 80044fa:	462b      	mov	r3, r5
 80044fc:	bfbb      	ittet	lt
 80044fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004502:	461d      	movlt	r5, r3
 8004504:	2300      	movge	r3, #0
 8004506:	232d      	movlt	r3, #45	; 0x2d
 8004508:	700b      	strb	r3, [r1, #0]
 800450a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800450c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004510:	4691      	mov	r9, r2
 8004512:	f023 0820 	bic.w	r8, r3, #32
 8004516:	bfbc      	itt	lt
 8004518:	4622      	movlt	r2, r4
 800451a:	4614      	movlt	r4, r2
 800451c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004520:	d005      	beq.n	800452e <__cvt+0x42>
 8004522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004526:	d100      	bne.n	800452a <__cvt+0x3e>
 8004528:	3601      	adds	r6, #1
 800452a:	2102      	movs	r1, #2
 800452c:	e000      	b.n	8004530 <__cvt+0x44>
 800452e:	2103      	movs	r1, #3
 8004530:	ab03      	add	r3, sp, #12
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	ab02      	add	r3, sp, #8
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	ec45 4b10 	vmov	d0, r4, r5
 800453c:	4653      	mov	r3, sl
 800453e:	4632      	mov	r2, r6
 8004540:	f000 fcea 	bl	8004f18 <_dtoa_r>
 8004544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004548:	4607      	mov	r7, r0
 800454a:	d102      	bne.n	8004552 <__cvt+0x66>
 800454c:	f019 0f01 	tst.w	r9, #1
 8004550:	d022      	beq.n	8004598 <__cvt+0xac>
 8004552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004556:	eb07 0906 	add.w	r9, r7, r6
 800455a:	d110      	bne.n	800457e <__cvt+0x92>
 800455c:	783b      	ldrb	r3, [r7, #0]
 800455e:	2b30      	cmp	r3, #48	; 0x30
 8004560:	d10a      	bne.n	8004578 <__cvt+0x8c>
 8004562:	2200      	movs	r2, #0
 8004564:	2300      	movs	r3, #0
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f7fc fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800456e:	b918      	cbnz	r0, 8004578 <__cvt+0x8c>
 8004570:	f1c6 0601 	rsb	r6, r6, #1
 8004574:	f8ca 6000 	str.w	r6, [sl]
 8004578:	f8da 3000 	ldr.w	r3, [sl]
 800457c:	4499      	add	r9, r3
 800457e:	2200      	movs	r2, #0
 8004580:	2300      	movs	r3, #0
 8004582:	4620      	mov	r0, r4
 8004584:	4629      	mov	r1, r5
 8004586:	f7fc faa7 	bl	8000ad8 <__aeabi_dcmpeq>
 800458a:	b108      	cbz	r0, 8004590 <__cvt+0xa4>
 800458c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004590:	2230      	movs	r2, #48	; 0x30
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	454b      	cmp	r3, r9
 8004596:	d307      	bcc.n	80045a8 <__cvt+0xbc>
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800459c:	1bdb      	subs	r3, r3, r7
 800459e:	4638      	mov	r0, r7
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	b004      	add	sp, #16
 80045a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a8:	1c59      	adds	r1, r3, #1
 80045aa:	9103      	str	r1, [sp, #12]
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e7f0      	b.n	8004592 <__cvt+0xa6>

080045b0 <__exponent>:
 80045b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045b2:	4603      	mov	r3, r0
 80045b4:	2900      	cmp	r1, #0
 80045b6:	bfb8      	it	lt
 80045b8:	4249      	neglt	r1, r1
 80045ba:	f803 2b02 	strb.w	r2, [r3], #2
 80045be:	bfb4      	ite	lt
 80045c0:	222d      	movlt	r2, #45	; 0x2d
 80045c2:	222b      	movge	r2, #43	; 0x2b
 80045c4:	2909      	cmp	r1, #9
 80045c6:	7042      	strb	r2, [r0, #1]
 80045c8:	dd2a      	ble.n	8004620 <__exponent+0x70>
 80045ca:	f10d 0407 	add.w	r4, sp, #7
 80045ce:	46a4      	mov	ip, r4
 80045d0:	270a      	movs	r7, #10
 80045d2:	46a6      	mov	lr, r4
 80045d4:	460a      	mov	r2, r1
 80045d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80045da:	fb07 1516 	mls	r5, r7, r6, r1
 80045de:	3530      	adds	r5, #48	; 0x30
 80045e0:	2a63      	cmp	r2, #99	; 0x63
 80045e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80045e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045ea:	4631      	mov	r1, r6
 80045ec:	dcf1      	bgt.n	80045d2 <__exponent+0x22>
 80045ee:	3130      	adds	r1, #48	; 0x30
 80045f0:	f1ae 0502 	sub.w	r5, lr, #2
 80045f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045f8:	1c44      	adds	r4, r0, #1
 80045fa:	4629      	mov	r1, r5
 80045fc:	4561      	cmp	r1, ip
 80045fe:	d30a      	bcc.n	8004616 <__exponent+0x66>
 8004600:	f10d 0209 	add.w	r2, sp, #9
 8004604:	eba2 020e 	sub.w	r2, r2, lr
 8004608:	4565      	cmp	r5, ip
 800460a:	bf88      	it	hi
 800460c:	2200      	movhi	r2, #0
 800460e:	4413      	add	r3, r2
 8004610:	1a18      	subs	r0, r3, r0
 8004612:	b003      	add	sp, #12
 8004614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800461a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800461e:	e7ed      	b.n	80045fc <__exponent+0x4c>
 8004620:	2330      	movs	r3, #48	; 0x30
 8004622:	3130      	adds	r1, #48	; 0x30
 8004624:	7083      	strb	r3, [r0, #2]
 8004626:	70c1      	strb	r1, [r0, #3]
 8004628:	1d03      	adds	r3, r0, #4
 800462a:	e7f1      	b.n	8004610 <__exponent+0x60>

0800462c <_printf_float>:
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	ed2d 8b02 	vpush	{d8}
 8004634:	b08d      	sub	sp, #52	; 0x34
 8004636:	460c      	mov	r4, r1
 8004638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800463c:	4616      	mov	r6, r2
 800463e:	461f      	mov	r7, r3
 8004640:	4605      	mov	r5, r0
 8004642:	f001 fa57 	bl	8005af4 <_localeconv_r>
 8004646:	f8d0 a000 	ldr.w	sl, [r0]
 800464a:	4650      	mov	r0, sl
 800464c:	f7fb fdc8 	bl	80001e0 <strlen>
 8004650:	2300      	movs	r3, #0
 8004652:	930a      	str	r3, [sp, #40]	; 0x28
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	9305      	str	r3, [sp, #20]
 8004658:	f8d8 3000 	ldr.w	r3, [r8]
 800465c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004660:	3307      	adds	r3, #7
 8004662:	f023 0307 	bic.w	r3, r3, #7
 8004666:	f103 0208 	add.w	r2, r3, #8
 800466a:	f8c8 2000 	str.w	r2, [r8]
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004676:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800467a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800467e:	9307      	str	r3, [sp, #28]
 8004680:	f8cd 8018 	str.w	r8, [sp, #24]
 8004684:	ee08 0a10 	vmov	s16, r0
 8004688:	4b9f      	ldr	r3, [pc, #636]	; (8004908 <_printf_float+0x2dc>)
 800468a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	f7fc fa53 	bl	8000b3c <__aeabi_dcmpun>
 8004696:	bb88      	cbnz	r0, 80046fc <_printf_float+0xd0>
 8004698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800469c:	4b9a      	ldr	r3, [pc, #616]	; (8004908 <_printf_float+0x2dc>)
 800469e:	f04f 32ff 	mov.w	r2, #4294967295
 80046a2:	f7fc fa2d 	bl	8000b00 <__aeabi_dcmple>
 80046a6:	bb48      	cbnz	r0, 80046fc <_printf_float+0xd0>
 80046a8:	2200      	movs	r2, #0
 80046aa:	2300      	movs	r3, #0
 80046ac:	4640      	mov	r0, r8
 80046ae:	4649      	mov	r1, r9
 80046b0:	f7fc fa1c 	bl	8000aec <__aeabi_dcmplt>
 80046b4:	b110      	cbz	r0, 80046bc <_printf_float+0x90>
 80046b6:	232d      	movs	r3, #45	; 0x2d
 80046b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046bc:	4b93      	ldr	r3, [pc, #588]	; (800490c <_printf_float+0x2e0>)
 80046be:	4894      	ldr	r0, [pc, #592]	; (8004910 <_printf_float+0x2e4>)
 80046c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80046c4:	bf94      	ite	ls
 80046c6:	4698      	movls	r8, r3
 80046c8:	4680      	movhi	r8, r0
 80046ca:	2303      	movs	r3, #3
 80046cc:	6123      	str	r3, [r4, #16]
 80046ce:	9b05      	ldr	r3, [sp, #20]
 80046d0:	f023 0204 	bic.w	r2, r3, #4
 80046d4:	6022      	str	r2, [r4, #0]
 80046d6:	f04f 0900 	mov.w	r9, #0
 80046da:	9700      	str	r7, [sp, #0]
 80046dc:	4633      	mov	r3, r6
 80046de:	aa0b      	add	r2, sp, #44	; 0x2c
 80046e0:	4621      	mov	r1, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 f9d8 	bl	8004a98 <_printf_common>
 80046e8:	3001      	adds	r0, #1
 80046ea:	f040 8090 	bne.w	800480e <_printf_float+0x1e2>
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	b00d      	add	sp, #52	; 0x34
 80046f4:	ecbd 8b02 	vpop	{d8}
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fc fa1a 	bl	8000b3c <__aeabi_dcmpun>
 8004708:	b140      	cbz	r0, 800471c <_printf_float+0xf0>
 800470a:	464b      	mov	r3, r9
 800470c:	2b00      	cmp	r3, #0
 800470e:	bfbc      	itt	lt
 8004710:	232d      	movlt	r3, #45	; 0x2d
 8004712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004716:	487f      	ldr	r0, [pc, #508]	; (8004914 <_printf_float+0x2e8>)
 8004718:	4b7f      	ldr	r3, [pc, #508]	; (8004918 <_printf_float+0x2ec>)
 800471a:	e7d1      	b.n	80046c0 <_printf_float+0x94>
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004722:	9206      	str	r2, [sp, #24]
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	d13f      	bne.n	80047a8 <_printf_float+0x17c>
 8004728:	2306      	movs	r3, #6
 800472a:	6063      	str	r3, [r4, #4]
 800472c:	9b05      	ldr	r3, [sp, #20]
 800472e:	6861      	ldr	r1, [r4, #4]
 8004730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004734:	2300      	movs	r3, #0
 8004736:	9303      	str	r3, [sp, #12]
 8004738:	ab0a      	add	r3, sp, #40	; 0x28
 800473a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800473e:	ab09      	add	r3, sp, #36	; 0x24
 8004740:	ec49 8b10 	vmov	d0, r8, r9
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6022      	str	r2, [r4, #0]
 8004748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800474c:	4628      	mov	r0, r5
 800474e:	f7ff fecd 	bl	80044ec <__cvt>
 8004752:	9b06      	ldr	r3, [sp, #24]
 8004754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004756:	2b47      	cmp	r3, #71	; 0x47
 8004758:	4680      	mov	r8, r0
 800475a:	d108      	bne.n	800476e <_printf_float+0x142>
 800475c:	1cc8      	adds	r0, r1, #3
 800475e:	db02      	blt.n	8004766 <_printf_float+0x13a>
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	4299      	cmp	r1, r3
 8004764:	dd41      	ble.n	80047ea <_printf_float+0x1be>
 8004766:	f1ab 0b02 	sub.w	fp, fp, #2
 800476a:	fa5f fb8b 	uxtb.w	fp, fp
 800476e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004772:	d820      	bhi.n	80047b6 <_printf_float+0x18a>
 8004774:	3901      	subs	r1, #1
 8004776:	465a      	mov	r2, fp
 8004778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800477c:	9109      	str	r1, [sp, #36]	; 0x24
 800477e:	f7ff ff17 	bl	80045b0 <__exponent>
 8004782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004784:	1813      	adds	r3, r2, r0
 8004786:	2a01      	cmp	r2, #1
 8004788:	4681      	mov	r9, r0
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	dc02      	bgt.n	8004794 <_printf_float+0x168>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	07d2      	lsls	r2, r2, #31
 8004792:	d501      	bpl.n	8004798 <_printf_float+0x16c>
 8004794:	3301      	adds	r3, #1
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800479c:	2b00      	cmp	r3, #0
 800479e:	d09c      	beq.n	80046da <_printf_float+0xae>
 80047a0:	232d      	movs	r3, #45	; 0x2d
 80047a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a6:	e798      	b.n	80046da <_printf_float+0xae>
 80047a8:	9a06      	ldr	r2, [sp, #24]
 80047aa:	2a47      	cmp	r2, #71	; 0x47
 80047ac:	d1be      	bne.n	800472c <_printf_float+0x100>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1bc      	bne.n	800472c <_printf_float+0x100>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e7b9      	b.n	800472a <_printf_float+0xfe>
 80047b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80047ba:	d118      	bne.n	80047ee <_printf_float+0x1c2>
 80047bc:	2900      	cmp	r1, #0
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	dd0b      	ble.n	80047da <_printf_float+0x1ae>
 80047c2:	6121      	str	r1, [r4, #16]
 80047c4:	b913      	cbnz	r3, 80047cc <_printf_float+0x1a0>
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	07d0      	lsls	r0, r2, #31
 80047ca:	d502      	bpl.n	80047d2 <_printf_float+0x1a6>
 80047cc:	3301      	adds	r3, #1
 80047ce:	440b      	add	r3, r1
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80047d4:	f04f 0900 	mov.w	r9, #0
 80047d8:	e7de      	b.n	8004798 <_printf_float+0x16c>
 80047da:	b913      	cbnz	r3, 80047e2 <_printf_float+0x1b6>
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	07d2      	lsls	r2, r2, #31
 80047e0:	d501      	bpl.n	80047e6 <_printf_float+0x1ba>
 80047e2:	3302      	adds	r3, #2
 80047e4:	e7f4      	b.n	80047d0 <_printf_float+0x1a4>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e7f2      	b.n	80047d0 <_printf_float+0x1a4>
 80047ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f0:	4299      	cmp	r1, r3
 80047f2:	db05      	blt.n	8004800 <_printf_float+0x1d4>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	6121      	str	r1, [r4, #16]
 80047f8:	07d8      	lsls	r0, r3, #31
 80047fa:	d5ea      	bpl.n	80047d2 <_printf_float+0x1a6>
 80047fc:	1c4b      	adds	r3, r1, #1
 80047fe:	e7e7      	b.n	80047d0 <_printf_float+0x1a4>
 8004800:	2900      	cmp	r1, #0
 8004802:	bfd4      	ite	le
 8004804:	f1c1 0202 	rsble	r2, r1, #2
 8004808:	2201      	movgt	r2, #1
 800480a:	4413      	add	r3, r2
 800480c:	e7e0      	b.n	80047d0 <_printf_float+0x1a4>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	055a      	lsls	r2, r3, #21
 8004812:	d407      	bmi.n	8004824 <_printf_float+0x1f8>
 8004814:	6923      	ldr	r3, [r4, #16]
 8004816:	4642      	mov	r2, r8
 8004818:	4631      	mov	r1, r6
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	d12c      	bne.n	800487c <_printf_float+0x250>
 8004822:	e764      	b.n	80046ee <_printf_float+0xc2>
 8004824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004828:	f240 80e0 	bls.w	80049ec <_printf_float+0x3c0>
 800482c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004830:	2200      	movs	r2, #0
 8004832:	2300      	movs	r3, #0
 8004834:	f7fc f950 	bl	8000ad8 <__aeabi_dcmpeq>
 8004838:	2800      	cmp	r0, #0
 800483a:	d034      	beq.n	80048a6 <_printf_float+0x27a>
 800483c:	4a37      	ldr	r2, [pc, #220]	; (800491c <_printf_float+0x2f0>)
 800483e:	2301      	movs	r3, #1
 8004840:	4631      	mov	r1, r6
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	f43f af51 	beq.w	80046ee <_printf_float+0xc2>
 800484c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004850:	429a      	cmp	r2, r3
 8004852:	db02      	blt.n	800485a <_printf_float+0x22e>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	07d8      	lsls	r0, r3, #31
 8004858:	d510      	bpl.n	800487c <_printf_float+0x250>
 800485a:	ee18 3a10 	vmov	r3, s16
 800485e:	4652      	mov	r2, sl
 8004860:	4631      	mov	r1, r6
 8004862:	4628      	mov	r0, r5
 8004864:	47b8      	blx	r7
 8004866:	3001      	adds	r0, #1
 8004868:	f43f af41 	beq.w	80046ee <_printf_float+0xc2>
 800486c:	f04f 0800 	mov.w	r8, #0
 8004870:	f104 091a 	add.w	r9, r4, #26
 8004874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004876:	3b01      	subs	r3, #1
 8004878:	4543      	cmp	r3, r8
 800487a:	dc09      	bgt.n	8004890 <_printf_float+0x264>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	079b      	lsls	r3, r3, #30
 8004880:	f100 8105 	bmi.w	8004a8e <_printf_float+0x462>
 8004884:	68e0      	ldr	r0, [r4, #12]
 8004886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004888:	4298      	cmp	r0, r3
 800488a:	bfb8      	it	lt
 800488c:	4618      	movlt	r0, r3
 800488e:	e730      	b.n	80046f2 <_printf_float+0xc6>
 8004890:	2301      	movs	r3, #1
 8004892:	464a      	mov	r2, r9
 8004894:	4631      	mov	r1, r6
 8004896:	4628      	mov	r0, r5
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	f43f af27 	beq.w	80046ee <_printf_float+0xc2>
 80048a0:	f108 0801 	add.w	r8, r8, #1
 80048a4:	e7e6      	b.n	8004874 <_printf_float+0x248>
 80048a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dc39      	bgt.n	8004920 <_printf_float+0x2f4>
 80048ac:	4a1b      	ldr	r2, [pc, #108]	; (800491c <_printf_float+0x2f0>)
 80048ae:	2301      	movs	r3, #1
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f af19 	beq.w	80046ee <_printf_float+0xc2>
 80048bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d102      	bne.n	80048ca <_printf_float+0x29e>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	d5d8      	bpl.n	800487c <_printf_float+0x250>
 80048ca:	ee18 3a10 	vmov	r3, s16
 80048ce:	4652      	mov	r2, sl
 80048d0:	4631      	mov	r1, r6
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b8      	blx	r7
 80048d6:	3001      	adds	r0, #1
 80048d8:	f43f af09 	beq.w	80046ee <_printf_float+0xc2>
 80048dc:	f04f 0900 	mov.w	r9, #0
 80048e0:	f104 0a1a 	add.w	sl, r4, #26
 80048e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e6:	425b      	negs	r3, r3
 80048e8:	454b      	cmp	r3, r9
 80048ea:	dc01      	bgt.n	80048f0 <_printf_float+0x2c4>
 80048ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ee:	e792      	b.n	8004816 <_printf_float+0x1ea>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4652      	mov	r2, sl
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f aef7 	beq.w	80046ee <_printf_float+0xc2>
 8004900:	f109 0901 	add.w	r9, r9, #1
 8004904:	e7ee      	b.n	80048e4 <_printf_float+0x2b8>
 8004906:	bf00      	nop
 8004908:	7fefffff 	.word	0x7fefffff
 800490c:	08008ed4 	.word	0x08008ed4
 8004910:	08008ed8 	.word	0x08008ed8
 8004914:	08008ee0 	.word	0x08008ee0
 8004918:	08008edc 	.word	0x08008edc
 800491c:	08008ee4 	.word	0x08008ee4
 8004920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004924:	429a      	cmp	r2, r3
 8004926:	bfa8      	it	ge
 8004928:	461a      	movge	r2, r3
 800492a:	2a00      	cmp	r2, #0
 800492c:	4691      	mov	r9, r2
 800492e:	dc37      	bgt.n	80049a0 <_printf_float+0x374>
 8004930:	f04f 0b00 	mov.w	fp, #0
 8004934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004938:	f104 021a 	add.w	r2, r4, #26
 800493c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800493e:	9305      	str	r3, [sp, #20]
 8004940:	eba3 0309 	sub.w	r3, r3, r9
 8004944:	455b      	cmp	r3, fp
 8004946:	dc33      	bgt.n	80049b0 <_printf_float+0x384>
 8004948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800494c:	429a      	cmp	r2, r3
 800494e:	db3b      	blt.n	80049c8 <_printf_float+0x39c>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	07da      	lsls	r2, r3, #31
 8004954:	d438      	bmi.n	80049c8 <_printf_float+0x39c>
 8004956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004958:	9a05      	ldr	r2, [sp, #20]
 800495a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800495c:	1a9a      	subs	r2, r3, r2
 800495e:	eba3 0901 	sub.w	r9, r3, r1
 8004962:	4591      	cmp	r9, r2
 8004964:	bfa8      	it	ge
 8004966:	4691      	movge	r9, r2
 8004968:	f1b9 0f00 	cmp.w	r9, #0
 800496c:	dc35      	bgt.n	80049da <_printf_float+0x3ae>
 800496e:	f04f 0800 	mov.w	r8, #0
 8004972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004976:	f104 0a1a 	add.w	sl, r4, #26
 800497a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	eba3 0309 	sub.w	r3, r3, r9
 8004984:	4543      	cmp	r3, r8
 8004986:	f77f af79 	ble.w	800487c <_printf_float+0x250>
 800498a:	2301      	movs	r3, #1
 800498c:	4652      	mov	r2, sl
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f aeaa 	beq.w	80046ee <_printf_float+0xc2>
 800499a:	f108 0801 	add.w	r8, r8, #1
 800499e:	e7ec      	b.n	800497a <_printf_float+0x34e>
 80049a0:	4613      	mov	r3, r2
 80049a2:	4631      	mov	r1, r6
 80049a4:	4642      	mov	r2, r8
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	d1c0      	bne.n	8004930 <_printf_float+0x304>
 80049ae:	e69e      	b.n	80046ee <_printf_float+0xc2>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4631      	mov	r1, r6
 80049b4:	4628      	mov	r0, r5
 80049b6:	9205      	str	r2, [sp, #20]
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	f43f ae97 	beq.w	80046ee <_printf_float+0xc2>
 80049c0:	9a05      	ldr	r2, [sp, #20]
 80049c2:	f10b 0b01 	add.w	fp, fp, #1
 80049c6:	e7b9      	b.n	800493c <_printf_float+0x310>
 80049c8:	ee18 3a10 	vmov	r3, s16
 80049cc:	4652      	mov	r2, sl
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	d1be      	bne.n	8004956 <_printf_float+0x32a>
 80049d8:	e689      	b.n	80046ee <_printf_float+0xc2>
 80049da:	9a05      	ldr	r2, [sp, #20]
 80049dc:	464b      	mov	r3, r9
 80049de:	4442      	add	r2, r8
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	d1c1      	bne.n	800496e <_printf_float+0x342>
 80049ea:	e680      	b.n	80046ee <_printf_float+0xc2>
 80049ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ee:	2a01      	cmp	r2, #1
 80049f0:	dc01      	bgt.n	80049f6 <_printf_float+0x3ca>
 80049f2:	07db      	lsls	r3, r3, #31
 80049f4:	d538      	bpl.n	8004a68 <_printf_float+0x43c>
 80049f6:	2301      	movs	r3, #1
 80049f8:	4642      	mov	r2, r8
 80049fa:	4631      	mov	r1, r6
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b8      	blx	r7
 8004a00:	3001      	adds	r0, #1
 8004a02:	f43f ae74 	beq.w	80046ee <_printf_float+0xc2>
 8004a06:	ee18 3a10 	vmov	r3, s16
 8004a0a:	4652      	mov	r2, sl
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4628      	mov	r0, r5
 8004a10:	47b8      	blx	r7
 8004a12:	3001      	adds	r0, #1
 8004a14:	f43f ae6b 	beq.w	80046ee <_printf_float+0xc2>
 8004a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f7fc f85a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a24:	b9d8      	cbnz	r0, 8004a5e <_printf_float+0x432>
 8004a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a28:	f108 0201 	add.w	r2, r8, #1
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	d10e      	bne.n	8004a56 <_printf_float+0x42a>
 8004a38:	e659      	b.n	80046ee <_printf_float+0xc2>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4652      	mov	r2, sl
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	f43f ae52 	beq.w	80046ee <_printf_float+0xc2>
 8004a4a:	f108 0801 	add.w	r8, r8, #1
 8004a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a50:	3b01      	subs	r3, #1
 8004a52:	4543      	cmp	r3, r8
 8004a54:	dcf1      	bgt.n	8004a3a <_printf_float+0x40e>
 8004a56:	464b      	mov	r3, r9
 8004a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a5c:	e6dc      	b.n	8004818 <_printf_float+0x1ec>
 8004a5e:	f04f 0800 	mov.w	r8, #0
 8004a62:	f104 0a1a 	add.w	sl, r4, #26
 8004a66:	e7f2      	b.n	8004a4e <_printf_float+0x422>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4642      	mov	r2, r8
 8004a6c:	e7df      	b.n	8004a2e <_printf_float+0x402>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	464a      	mov	r2, r9
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f ae38 	beq.w	80046ee <_printf_float+0xc2>
 8004a7e:	f108 0801 	add.w	r8, r8, #1
 8004a82:	68e3      	ldr	r3, [r4, #12]
 8004a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a86:	1a5b      	subs	r3, r3, r1
 8004a88:	4543      	cmp	r3, r8
 8004a8a:	dcf0      	bgt.n	8004a6e <_printf_float+0x442>
 8004a8c:	e6fa      	b.n	8004884 <_printf_float+0x258>
 8004a8e:	f04f 0800 	mov.w	r8, #0
 8004a92:	f104 0919 	add.w	r9, r4, #25
 8004a96:	e7f4      	b.n	8004a82 <_printf_float+0x456>

08004a98 <_printf_common>:
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	4699      	mov	r9, r3
 8004aa0:	688a      	ldr	r2, [r1, #8]
 8004aa2:	690b      	ldr	r3, [r1, #16]
 8004aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	bfb8      	it	lt
 8004aac:	4613      	movlt	r3, r2
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	b10a      	cbz	r2, 8004abe <_printf_common+0x26>
 8004aba:	3301      	adds	r3, #1
 8004abc:	6033      	str	r3, [r6, #0]
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	0699      	lsls	r1, r3, #26
 8004ac2:	bf42      	ittt	mi
 8004ac4:	6833      	ldrmi	r3, [r6, #0]
 8004ac6:	3302      	addmi	r3, #2
 8004ac8:	6033      	strmi	r3, [r6, #0]
 8004aca:	6825      	ldr	r5, [r4, #0]
 8004acc:	f015 0506 	ands.w	r5, r5, #6
 8004ad0:	d106      	bne.n	8004ae0 <_printf_common+0x48>
 8004ad2:	f104 0a19 	add.w	sl, r4, #25
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	6832      	ldr	r2, [r6, #0]
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	42ab      	cmp	r3, r5
 8004ade:	dc26      	bgt.n	8004b2e <_printf_common+0x96>
 8004ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ae4:	1e13      	subs	r3, r2, #0
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	bf18      	it	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	0692      	lsls	r2, r2, #26
 8004aee:	d42b      	bmi.n	8004b48 <_printf_common+0xb0>
 8004af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004af4:	4649      	mov	r1, r9
 8004af6:	4638      	mov	r0, r7
 8004af8:	47c0      	blx	r8
 8004afa:	3001      	adds	r0, #1
 8004afc:	d01e      	beq.n	8004b3c <_printf_common+0xa4>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	68e5      	ldr	r5, [r4, #12]
 8004b02:	6832      	ldr	r2, [r6, #0]
 8004b04:	f003 0306 	and.w	r3, r3, #6
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	bf08      	it	eq
 8004b0c:	1aad      	subeq	r5, r5, r2
 8004b0e:	68a3      	ldr	r3, [r4, #8]
 8004b10:	6922      	ldr	r2, [r4, #16]
 8004b12:	bf0c      	ite	eq
 8004b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b18:	2500      	movne	r5, #0
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	bfc4      	itt	gt
 8004b1e:	1a9b      	subgt	r3, r3, r2
 8004b20:	18ed      	addgt	r5, r5, r3
 8004b22:	2600      	movs	r6, #0
 8004b24:	341a      	adds	r4, #26
 8004b26:	42b5      	cmp	r5, r6
 8004b28:	d11a      	bne.n	8004b60 <_printf_common+0xc8>
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e008      	b.n	8004b40 <_printf_common+0xa8>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4652      	mov	r2, sl
 8004b32:	4649      	mov	r1, r9
 8004b34:	4638      	mov	r0, r7
 8004b36:	47c0      	blx	r8
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d103      	bne.n	8004b44 <_printf_common+0xac>
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b44:	3501      	adds	r5, #1
 8004b46:	e7c6      	b.n	8004ad6 <_printf_common+0x3e>
 8004b48:	18e1      	adds	r1, r4, r3
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	2030      	movs	r0, #48	; 0x30
 8004b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b52:	4422      	add	r2, r4
 8004b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	e7c7      	b.n	8004af0 <_printf_common+0x58>
 8004b60:	2301      	movs	r3, #1
 8004b62:	4622      	mov	r2, r4
 8004b64:	4649      	mov	r1, r9
 8004b66:	4638      	mov	r0, r7
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d0e6      	beq.n	8004b3c <_printf_common+0xa4>
 8004b6e:	3601      	adds	r6, #1
 8004b70:	e7d9      	b.n	8004b26 <_printf_common+0x8e>
	...

08004b74 <_printf_i>:
 8004b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	7e0f      	ldrb	r7, [r1, #24]
 8004b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b7c:	2f78      	cmp	r7, #120	; 0x78
 8004b7e:	4691      	mov	r9, r2
 8004b80:	4680      	mov	r8, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	469a      	mov	sl, r3
 8004b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b8a:	d807      	bhi.n	8004b9c <_printf_i+0x28>
 8004b8c:	2f62      	cmp	r7, #98	; 0x62
 8004b8e:	d80a      	bhi.n	8004ba6 <_printf_i+0x32>
 8004b90:	2f00      	cmp	r7, #0
 8004b92:	f000 80d8 	beq.w	8004d46 <_printf_i+0x1d2>
 8004b96:	2f58      	cmp	r7, #88	; 0x58
 8004b98:	f000 80a3 	beq.w	8004ce2 <_printf_i+0x16e>
 8004b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ba4:	e03a      	b.n	8004c1c <_printf_i+0xa8>
 8004ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004baa:	2b15      	cmp	r3, #21
 8004bac:	d8f6      	bhi.n	8004b9c <_printf_i+0x28>
 8004bae:	a101      	add	r1, pc, #4	; (adr r1, 8004bb4 <_printf_i+0x40>)
 8004bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bb4:	08004c0d 	.word	0x08004c0d
 8004bb8:	08004c21 	.word	0x08004c21
 8004bbc:	08004b9d 	.word	0x08004b9d
 8004bc0:	08004b9d 	.word	0x08004b9d
 8004bc4:	08004b9d 	.word	0x08004b9d
 8004bc8:	08004b9d 	.word	0x08004b9d
 8004bcc:	08004c21 	.word	0x08004c21
 8004bd0:	08004b9d 	.word	0x08004b9d
 8004bd4:	08004b9d 	.word	0x08004b9d
 8004bd8:	08004b9d 	.word	0x08004b9d
 8004bdc:	08004b9d 	.word	0x08004b9d
 8004be0:	08004d2d 	.word	0x08004d2d
 8004be4:	08004c51 	.word	0x08004c51
 8004be8:	08004d0f 	.word	0x08004d0f
 8004bec:	08004b9d 	.word	0x08004b9d
 8004bf0:	08004b9d 	.word	0x08004b9d
 8004bf4:	08004d4f 	.word	0x08004d4f
 8004bf8:	08004b9d 	.word	0x08004b9d
 8004bfc:	08004c51 	.word	0x08004c51
 8004c00:	08004b9d 	.word	0x08004b9d
 8004c04:	08004b9d 	.word	0x08004b9d
 8004c08:	08004d17 	.word	0x08004d17
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	1d1a      	adds	r2, r3, #4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	602a      	str	r2, [r5, #0]
 8004c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0a3      	b.n	8004d68 <_printf_i+0x1f4>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	6829      	ldr	r1, [r5, #0]
 8004c24:	0606      	lsls	r6, r0, #24
 8004c26:	f101 0304 	add.w	r3, r1, #4
 8004c2a:	d50a      	bpl.n	8004c42 <_printf_i+0xce>
 8004c2c:	680e      	ldr	r6, [r1, #0]
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	2e00      	cmp	r6, #0
 8004c32:	da03      	bge.n	8004c3c <_printf_i+0xc8>
 8004c34:	232d      	movs	r3, #45	; 0x2d
 8004c36:	4276      	negs	r6, r6
 8004c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3c:	485e      	ldr	r0, [pc, #376]	; (8004db8 <_printf_i+0x244>)
 8004c3e:	230a      	movs	r3, #10
 8004c40:	e019      	b.n	8004c76 <_printf_i+0x102>
 8004c42:	680e      	ldr	r6, [r1, #0]
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c4a:	bf18      	it	ne
 8004c4c:	b236      	sxthne	r6, r6
 8004c4e:	e7ef      	b.n	8004c30 <_printf_i+0xbc>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	1d19      	adds	r1, r3, #4
 8004c56:	6029      	str	r1, [r5, #0]
 8004c58:	0601      	lsls	r1, r0, #24
 8004c5a:	d501      	bpl.n	8004c60 <_printf_i+0xec>
 8004c5c:	681e      	ldr	r6, [r3, #0]
 8004c5e:	e002      	b.n	8004c66 <_printf_i+0xf2>
 8004c60:	0646      	lsls	r6, r0, #25
 8004c62:	d5fb      	bpl.n	8004c5c <_printf_i+0xe8>
 8004c64:	881e      	ldrh	r6, [r3, #0]
 8004c66:	4854      	ldr	r0, [pc, #336]	; (8004db8 <_printf_i+0x244>)
 8004c68:	2f6f      	cmp	r7, #111	; 0x6f
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2308      	moveq	r3, #8
 8004c6e:	230a      	movne	r3, #10
 8004c70:	2100      	movs	r1, #0
 8004c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c76:	6865      	ldr	r5, [r4, #4]
 8004c78:	60a5      	str	r5, [r4, #8]
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	bfa2      	ittt	ge
 8004c7e:	6821      	ldrge	r1, [r4, #0]
 8004c80:	f021 0104 	bicge.w	r1, r1, #4
 8004c84:	6021      	strge	r1, [r4, #0]
 8004c86:	b90e      	cbnz	r6, 8004c8c <_printf_i+0x118>
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	d04d      	beq.n	8004d28 <_printf_i+0x1b4>
 8004c8c:	4615      	mov	r5, r2
 8004c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c92:	fb03 6711 	mls	r7, r3, r1, r6
 8004c96:	5dc7      	ldrb	r7, [r0, r7]
 8004c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c9c:	4637      	mov	r7, r6
 8004c9e:	42bb      	cmp	r3, r7
 8004ca0:	460e      	mov	r6, r1
 8004ca2:	d9f4      	bls.n	8004c8e <_printf_i+0x11a>
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d10b      	bne.n	8004cc0 <_printf_i+0x14c>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	07de      	lsls	r6, r3, #31
 8004cac:	d508      	bpl.n	8004cc0 <_printf_i+0x14c>
 8004cae:	6923      	ldr	r3, [r4, #16]
 8004cb0:	6861      	ldr	r1, [r4, #4]
 8004cb2:	4299      	cmp	r1, r3
 8004cb4:	bfde      	ittt	le
 8004cb6:	2330      	movle	r3, #48	; 0x30
 8004cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cc0:	1b52      	subs	r2, r2, r5
 8004cc2:	6122      	str	r2, [r4, #16]
 8004cc4:	f8cd a000 	str.w	sl, [sp]
 8004cc8:	464b      	mov	r3, r9
 8004cca:	aa03      	add	r2, sp, #12
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4640      	mov	r0, r8
 8004cd0:	f7ff fee2 	bl	8004a98 <_printf_common>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d14c      	bne.n	8004d72 <_printf_i+0x1fe>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	b004      	add	sp, #16
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	4835      	ldr	r0, [pc, #212]	; (8004db8 <_printf_i+0x244>)
 8004ce4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ce8:	6829      	ldr	r1, [r5, #0]
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cf0:	6029      	str	r1, [r5, #0]
 8004cf2:	061d      	lsls	r5, r3, #24
 8004cf4:	d514      	bpl.n	8004d20 <_printf_i+0x1ac>
 8004cf6:	07df      	lsls	r7, r3, #31
 8004cf8:	bf44      	itt	mi
 8004cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004cfe:	6023      	strmi	r3, [r4, #0]
 8004d00:	b91e      	cbnz	r6, 8004d0a <_printf_i+0x196>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	f023 0320 	bic.w	r3, r3, #32
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	2310      	movs	r3, #16
 8004d0c:	e7b0      	b.n	8004c70 <_printf_i+0xfc>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	f043 0320 	orr.w	r3, r3, #32
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	2378      	movs	r3, #120	; 0x78
 8004d18:	4828      	ldr	r0, [pc, #160]	; (8004dbc <_printf_i+0x248>)
 8004d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d1e:	e7e3      	b.n	8004ce8 <_printf_i+0x174>
 8004d20:	0659      	lsls	r1, r3, #25
 8004d22:	bf48      	it	mi
 8004d24:	b2b6      	uxthmi	r6, r6
 8004d26:	e7e6      	b.n	8004cf6 <_printf_i+0x182>
 8004d28:	4615      	mov	r5, r2
 8004d2a:	e7bb      	b.n	8004ca4 <_printf_i+0x130>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	6826      	ldr	r6, [r4, #0]
 8004d30:	6961      	ldr	r1, [r4, #20]
 8004d32:	1d18      	adds	r0, r3, #4
 8004d34:	6028      	str	r0, [r5, #0]
 8004d36:	0635      	lsls	r5, r6, #24
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0x1cc>
 8004d3c:	6019      	str	r1, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0x1d2>
 8004d40:	0670      	lsls	r0, r6, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0x1c8>
 8004d44:	8019      	strh	r1, [r3, #0]
 8004d46:	2300      	movs	r3, #0
 8004d48:	6123      	str	r3, [r4, #16]
 8004d4a:	4615      	mov	r5, r2
 8004d4c:	e7ba      	b.n	8004cc4 <_printf_i+0x150>
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	1d1a      	adds	r2, r3, #4
 8004d52:	602a      	str	r2, [r5, #0]
 8004d54:	681d      	ldr	r5, [r3, #0]
 8004d56:	6862      	ldr	r2, [r4, #4]
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f7fb fa48 	bl	80001f0 <memchr>
 8004d60:	b108      	cbz	r0, 8004d66 <_printf_i+0x1f2>
 8004d62:	1b40      	subs	r0, r0, r5
 8004d64:	6060      	str	r0, [r4, #4]
 8004d66:	6863      	ldr	r3, [r4, #4]
 8004d68:	6123      	str	r3, [r4, #16]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d70:	e7a8      	b.n	8004cc4 <_printf_i+0x150>
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	462a      	mov	r2, r5
 8004d76:	4649      	mov	r1, r9
 8004d78:	4640      	mov	r0, r8
 8004d7a:	47d0      	blx	sl
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d0ab      	beq.n	8004cd8 <_printf_i+0x164>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	079b      	lsls	r3, r3, #30
 8004d84:	d413      	bmi.n	8004dae <_printf_i+0x23a>
 8004d86:	68e0      	ldr	r0, [r4, #12]
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	4298      	cmp	r0, r3
 8004d8c:	bfb8      	it	lt
 8004d8e:	4618      	movlt	r0, r3
 8004d90:	e7a4      	b.n	8004cdc <_printf_i+0x168>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4632      	mov	r2, r6
 8004d96:	4649      	mov	r1, r9
 8004d98:	4640      	mov	r0, r8
 8004d9a:	47d0      	blx	sl
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d09b      	beq.n	8004cd8 <_printf_i+0x164>
 8004da0:	3501      	adds	r5, #1
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	9903      	ldr	r1, [sp, #12]
 8004da6:	1a5b      	subs	r3, r3, r1
 8004da8:	42ab      	cmp	r3, r5
 8004daa:	dcf2      	bgt.n	8004d92 <_printf_i+0x21e>
 8004dac:	e7eb      	b.n	8004d86 <_printf_i+0x212>
 8004dae:	2500      	movs	r5, #0
 8004db0:	f104 0619 	add.w	r6, r4, #25
 8004db4:	e7f5      	b.n	8004da2 <_printf_i+0x22e>
 8004db6:	bf00      	nop
 8004db8:	08008ee6 	.word	0x08008ee6
 8004dbc:	08008ef7 	.word	0x08008ef7

08004dc0 <siprintf>:
 8004dc0:	b40e      	push	{r1, r2, r3}
 8004dc2:	b500      	push	{lr}
 8004dc4:	b09c      	sub	sp, #112	; 0x70
 8004dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc8:	9002      	str	r0, [sp, #8]
 8004dca:	9006      	str	r0, [sp, #24]
 8004dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dd0:	4809      	ldr	r0, [pc, #36]	; (8004df8 <siprintf+0x38>)
 8004dd2:	9107      	str	r1, [sp, #28]
 8004dd4:	9104      	str	r1, [sp, #16]
 8004dd6:	4909      	ldr	r1, [pc, #36]	; (8004dfc <siprintf+0x3c>)
 8004dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ddc:	9105      	str	r1, [sp, #20]
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	a902      	add	r1, sp, #8
 8004de4:	f001 fb76 	bl	80064d4 <_svfiprintf_r>
 8004de8:	9b02      	ldr	r3, [sp, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	b01c      	add	sp, #112	; 0x70
 8004df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df4:	b003      	add	sp, #12
 8004df6:	4770      	bx	lr
 8004df8:	20000020 	.word	0x20000020
 8004dfc:	ffff0208 	.word	0xffff0208

08004e00 <quorem>:
 8004e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	6903      	ldr	r3, [r0, #16]
 8004e06:	690c      	ldr	r4, [r1, #16]
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	f2c0 8081 	blt.w	8004f12 <quorem+0x112>
 8004e10:	3c01      	subs	r4, #1
 8004e12:	f101 0814 	add.w	r8, r1, #20
 8004e16:	f100 0514 	add.w	r5, r0, #20
 8004e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e34:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e38:	d331      	bcc.n	8004e9e <quorem+0x9e>
 8004e3a:	f04f 0e00 	mov.w	lr, #0
 8004e3e:	4640      	mov	r0, r8
 8004e40:	46ac      	mov	ip, r5
 8004e42:	46f2      	mov	sl, lr
 8004e44:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e48:	b293      	uxth	r3, r2
 8004e4a:	fb06 e303 	mla	r3, r6, r3, lr
 8004e4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	ebaa 0303 	sub.w	r3, sl, r3
 8004e58:	f8dc a000 	ldr.w	sl, [ip]
 8004e5c:	0c12      	lsrs	r2, r2, #16
 8004e5e:	fa13 f38a 	uxtah	r3, r3, sl
 8004e62:	fb06 e202 	mla	r2, r6, r2, lr
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	9b00      	ldr	r3, [sp, #0]
 8004e6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e78:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e7c:	4581      	cmp	r9, r0
 8004e7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e82:	f84c 3b04 	str.w	r3, [ip], #4
 8004e86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e8a:	d2db      	bcs.n	8004e44 <quorem+0x44>
 8004e8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e90:	b92b      	cbnz	r3, 8004e9e <quorem+0x9e>
 8004e92:	9b01      	ldr	r3, [sp, #4]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	429d      	cmp	r5, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	d32e      	bcc.n	8004efa <quorem+0xfa>
 8004e9c:	613c      	str	r4, [r7, #16]
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f001 f8c4 	bl	800602c <__mcmp>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	db24      	blt.n	8004ef2 <quorem+0xf2>
 8004ea8:	3601      	adds	r6, #1
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f04f 0c00 	mov.w	ip, #0
 8004eb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004eb4:	f8d0 e000 	ldr.w	lr, [r0]
 8004eb8:	b293      	uxth	r3, r2
 8004eba:	ebac 0303 	sub.w	r3, ip, r3
 8004ebe:	0c12      	lsrs	r2, r2, #16
 8004ec0:	fa13 f38e 	uxtah	r3, r3, lr
 8004ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ed2:	45c1      	cmp	r9, r8
 8004ed4:	f840 3b04 	str.w	r3, [r0], #4
 8004ed8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004edc:	d2e8      	bcs.n	8004eb0 <quorem+0xb0>
 8004ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ee6:	b922      	cbnz	r2, 8004ef2 <quorem+0xf2>
 8004ee8:	3b04      	subs	r3, #4
 8004eea:	429d      	cmp	r5, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	d30a      	bcc.n	8004f06 <quorem+0x106>
 8004ef0:	613c      	str	r4, [r7, #16]
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	b003      	add	sp, #12
 8004ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	d1cc      	bne.n	8004e9c <quorem+0x9c>
 8004f02:	3c01      	subs	r4, #1
 8004f04:	e7c7      	b.n	8004e96 <quorem+0x96>
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <quorem+0xf0>
 8004f0e:	3c01      	subs	r4, #1
 8004f10:	e7eb      	b.n	8004eea <quorem+0xea>
 8004f12:	2000      	movs	r0, #0
 8004f14:	e7ee      	b.n	8004ef4 <quorem+0xf4>
	...

08004f18 <_dtoa_r>:
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	ed2d 8b04 	vpush	{d8-d9}
 8004f20:	ec57 6b10 	vmov	r6, r7, d0
 8004f24:	b093      	sub	sp, #76	; 0x4c
 8004f26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f2c:	9106      	str	r1, [sp, #24]
 8004f2e:	ee10 aa10 	vmov	sl, s0
 8004f32:	4604      	mov	r4, r0
 8004f34:	9209      	str	r2, [sp, #36]	; 0x24
 8004f36:	930c      	str	r3, [sp, #48]	; 0x30
 8004f38:	46bb      	mov	fp, r7
 8004f3a:	b975      	cbnz	r5, 8004f5a <_dtoa_r+0x42>
 8004f3c:	2010      	movs	r0, #16
 8004f3e:	f000 fddd 	bl	8005afc <malloc>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6260      	str	r0, [r4, #36]	; 0x24
 8004f46:	b920      	cbnz	r0, 8004f52 <_dtoa_r+0x3a>
 8004f48:	4ba7      	ldr	r3, [pc, #668]	; (80051e8 <_dtoa_r+0x2d0>)
 8004f4a:	21ea      	movs	r1, #234	; 0xea
 8004f4c:	48a7      	ldr	r0, [pc, #668]	; (80051ec <_dtoa_r+0x2d4>)
 8004f4e:	f001 fbd1 	bl	80066f4 <__assert_func>
 8004f52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f56:	6005      	str	r5, [r0, #0]
 8004f58:	60c5      	str	r5, [r0, #12]
 8004f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	b151      	cbz	r1, 8004f76 <_dtoa_r+0x5e>
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	604a      	str	r2, [r1, #4]
 8004f64:	2301      	movs	r3, #1
 8004f66:	4093      	lsls	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 fe1c 	bl	8005ba8 <_Bfree>
 8004f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	1e3b      	subs	r3, r7, #0
 8004f78:	bfaa      	itet	ge
 8004f7a:	2300      	movge	r3, #0
 8004f7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004f80:	f8c8 3000 	strge.w	r3, [r8]
 8004f84:	4b9a      	ldr	r3, [pc, #616]	; (80051f0 <_dtoa_r+0x2d8>)
 8004f86:	bfbc      	itt	lt
 8004f88:	2201      	movlt	r2, #1
 8004f8a:	f8c8 2000 	strlt.w	r2, [r8]
 8004f8e:	ea33 030b 	bics.w	r3, r3, fp
 8004f92:	d11b      	bne.n	8004fcc <_dtoa_r+0xb4>
 8004f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f96:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fa0:	4333      	orrs	r3, r6
 8004fa2:	f000 8592 	beq.w	8005aca <_dtoa_r+0xbb2>
 8004fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fa8:	b963      	cbnz	r3, 8004fc4 <_dtoa_r+0xac>
 8004faa:	4b92      	ldr	r3, [pc, #584]	; (80051f4 <_dtoa_r+0x2dc>)
 8004fac:	e022      	b.n	8004ff4 <_dtoa_r+0xdc>
 8004fae:	4b92      	ldr	r3, [pc, #584]	; (80051f8 <_dtoa_r+0x2e0>)
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	9801      	ldr	r0, [sp, #4]
 8004fba:	b013      	add	sp, #76	; 0x4c
 8004fbc:	ecbd 8b04 	vpop	{d8-d9}
 8004fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc4:	4b8b      	ldr	r3, [pc, #556]	; (80051f4 <_dtoa_r+0x2dc>)
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	3303      	adds	r3, #3
 8004fca:	e7f3      	b.n	8004fb4 <_dtoa_r+0x9c>
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	4659      	mov	r1, fp
 8004fd4:	f7fb fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd8:	ec4b ab19 	vmov	d9, sl, fp
 8004fdc:	4680      	mov	r8, r0
 8004fde:	b158      	cbz	r0, 8004ff8 <_dtoa_r+0xe0>
 8004fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 856b 	beq.w	8005ac4 <_dtoa_r+0xbac>
 8004fee:	4883      	ldr	r0, [pc, #524]	; (80051fc <_dtoa_r+0x2e4>)
 8004ff0:	6018      	str	r0, [r3, #0]
 8004ff2:	1e43      	subs	r3, r0, #1
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	e7df      	b.n	8004fb8 <_dtoa_r+0xa0>
 8004ff8:	ec4b ab10 	vmov	d0, sl, fp
 8004ffc:	aa10      	add	r2, sp, #64	; 0x40
 8004ffe:	a911      	add	r1, sp, #68	; 0x44
 8005000:	4620      	mov	r0, r4
 8005002:	f001 f8b9 	bl	8006178 <__d2b>
 8005006:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800500a:	ee08 0a10 	vmov	s16, r0
 800500e:	2d00      	cmp	r5, #0
 8005010:	f000 8084 	beq.w	800511c <_dtoa_r+0x204>
 8005014:	ee19 3a90 	vmov	r3, s19
 8005018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800501c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005020:	4656      	mov	r6, sl
 8005022:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800502a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800502e:	4b74      	ldr	r3, [pc, #464]	; (8005200 <_dtoa_r+0x2e8>)
 8005030:	2200      	movs	r2, #0
 8005032:	4630      	mov	r0, r6
 8005034:	4639      	mov	r1, r7
 8005036:	f7fb f92f 	bl	8000298 <__aeabi_dsub>
 800503a:	a365      	add	r3, pc, #404	; (adr r3, 80051d0 <_dtoa_r+0x2b8>)
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f7fb fae2 	bl	8000608 <__aeabi_dmul>
 8005044:	a364      	add	r3, pc, #400	; (adr r3, 80051d8 <_dtoa_r+0x2c0>)
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f7fb f927 	bl	800029c <__adddf3>
 800504e:	4606      	mov	r6, r0
 8005050:	4628      	mov	r0, r5
 8005052:	460f      	mov	r7, r1
 8005054:	f7fb fa6e 	bl	8000534 <__aeabi_i2d>
 8005058:	a361      	add	r3, pc, #388	; (adr r3, 80051e0 <_dtoa_r+0x2c8>)
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f7fb fad3 	bl	8000608 <__aeabi_dmul>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4630      	mov	r0, r6
 8005068:	4639      	mov	r1, r7
 800506a:	f7fb f917 	bl	800029c <__adddf3>
 800506e:	4606      	mov	r6, r0
 8005070:	460f      	mov	r7, r1
 8005072:	f7fb fd79 	bl	8000b68 <__aeabi_d2iz>
 8005076:	2200      	movs	r2, #0
 8005078:	9000      	str	r0, [sp, #0]
 800507a:	2300      	movs	r3, #0
 800507c:	4630      	mov	r0, r6
 800507e:	4639      	mov	r1, r7
 8005080:	f7fb fd34 	bl	8000aec <__aeabi_dcmplt>
 8005084:	b150      	cbz	r0, 800509c <_dtoa_r+0x184>
 8005086:	9800      	ldr	r0, [sp, #0]
 8005088:	f7fb fa54 	bl	8000534 <__aeabi_i2d>
 800508c:	4632      	mov	r2, r6
 800508e:	463b      	mov	r3, r7
 8005090:	f7fb fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 8005094:	b910      	cbnz	r0, 800509c <_dtoa_r+0x184>
 8005096:	9b00      	ldr	r3, [sp, #0]
 8005098:	3b01      	subs	r3, #1
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	9b00      	ldr	r3, [sp, #0]
 800509e:	2b16      	cmp	r3, #22
 80050a0:	d85a      	bhi.n	8005158 <_dtoa_r+0x240>
 80050a2:	9a00      	ldr	r2, [sp, #0]
 80050a4:	4b57      	ldr	r3, [pc, #348]	; (8005204 <_dtoa_r+0x2ec>)
 80050a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	ec51 0b19 	vmov	r0, r1, d9
 80050b2:	f7fb fd1b 	bl	8000aec <__aeabi_dcmplt>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d050      	beq.n	800515c <_dtoa_r+0x244>
 80050ba:	9b00      	ldr	r3, [sp, #0]
 80050bc:	3b01      	subs	r3, #1
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	2300      	movs	r3, #0
 80050c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050c6:	1b5d      	subs	r5, r3, r5
 80050c8:	1e6b      	subs	r3, r5, #1
 80050ca:	9305      	str	r3, [sp, #20]
 80050cc:	bf45      	ittet	mi
 80050ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80050d2:	9304      	strmi	r3, [sp, #16]
 80050d4:	2300      	movpl	r3, #0
 80050d6:	2300      	movmi	r3, #0
 80050d8:	bf4c      	ite	mi
 80050da:	9305      	strmi	r3, [sp, #20]
 80050dc:	9304      	strpl	r3, [sp, #16]
 80050de:	9b00      	ldr	r3, [sp, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	db3d      	blt.n	8005160 <_dtoa_r+0x248>
 80050e4:	9b05      	ldr	r3, [sp, #20]
 80050e6:	9a00      	ldr	r2, [sp, #0]
 80050e8:	920a      	str	r2, [sp, #40]	; 0x28
 80050ea:	4413      	add	r3, r2
 80050ec:	9305      	str	r3, [sp, #20]
 80050ee:	2300      	movs	r3, #0
 80050f0:	9307      	str	r3, [sp, #28]
 80050f2:	9b06      	ldr	r3, [sp, #24]
 80050f4:	2b09      	cmp	r3, #9
 80050f6:	f200 8089 	bhi.w	800520c <_dtoa_r+0x2f4>
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	bfc4      	itt	gt
 80050fe:	3b04      	subgt	r3, #4
 8005100:	9306      	strgt	r3, [sp, #24]
 8005102:	9b06      	ldr	r3, [sp, #24]
 8005104:	f1a3 0302 	sub.w	r3, r3, #2
 8005108:	bfcc      	ite	gt
 800510a:	2500      	movgt	r5, #0
 800510c:	2501      	movle	r5, #1
 800510e:	2b03      	cmp	r3, #3
 8005110:	f200 8087 	bhi.w	8005222 <_dtoa_r+0x30a>
 8005114:	e8df f003 	tbb	[pc, r3]
 8005118:	59383a2d 	.word	0x59383a2d
 800511c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005120:	441d      	add	r5, r3
 8005122:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005126:	2b20      	cmp	r3, #32
 8005128:	bfc1      	itttt	gt
 800512a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800512e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005132:	fa0b f303 	lslgt.w	r3, fp, r3
 8005136:	fa26 f000 	lsrgt.w	r0, r6, r0
 800513a:	bfda      	itte	le
 800513c:	f1c3 0320 	rsble	r3, r3, #32
 8005140:	fa06 f003 	lslle.w	r0, r6, r3
 8005144:	4318      	orrgt	r0, r3
 8005146:	f7fb f9e5 	bl	8000514 <__aeabi_ui2d>
 800514a:	2301      	movs	r3, #1
 800514c:	4606      	mov	r6, r0
 800514e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005152:	3d01      	subs	r5, #1
 8005154:	930e      	str	r3, [sp, #56]	; 0x38
 8005156:	e76a      	b.n	800502e <_dtoa_r+0x116>
 8005158:	2301      	movs	r3, #1
 800515a:	e7b2      	b.n	80050c2 <_dtoa_r+0x1aa>
 800515c:	900b      	str	r0, [sp, #44]	; 0x2c
 800515e:	e7b1      	b.n	80050c4 <_dtoa_r+0x1ac>
 8005160:	9b04      	ldr	r3, [sp, #16]
 8005162:	9a00      	ldr	r2, [sp, #0]
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	9304      	str	r3, [sp, #16]
 8005168:	4253      	negs	r3, r2
 800516a:	9307      	str	r3, [sp, #28]
 800516c:	2300      	movs	r3, #0
 800516e:	930a      	str	r3, [sp, #40]	; 0x28
 8005170:	e7bf      	b.n	80050f2 <_dtoa_r+0x1da>
 8005172:	2300      	movs	r3, #0
 8005174:	9308      	str	r3, [sp, #32]
 8005176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	dc55      	bgt.n	8005228 <_dtoa_r+0x310>
 800517c:	2301      	movs	r3, #1
 800517e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005182:	461a      	mov	r2, r3
 8005184:	9209      	str	r2, [sp, #36]	; 0x24
 8005186:	e00c      	b.n	80051a2 <_dtoa_r+0x28a>
 8005188:	2301      	movs	r3, #1
 800518a:	e7f3      	b.n	8005174 <_dtoa_r+0x25c>
 800518c:	2300      	movs	r3, #0
 800518e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005190:	9308      	str	r3, [sp, #32]
 8005192:	9b00      	ldr	r3, [sp, #0]
 8005194:	4413      	add	r3, r2
 8005196:	9302      	str	r3, [sp, #8]
 8005198:	3301      	adds	r3, #1
 800519a:	2b01      	cmp	r3, #1
 800519c:	9303      	str	r3, [sp, #12]
 800519e:	bfb8      	it	lt
 80051a0:	2301      	movlt	r3, #1
 80051a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80051a4:	2200      	movs	r2, #0
 80051a6:	6042      	str	r2, [r0, #4]
 80051a8:	2204      	movs	r2, #4
 80051aa:	f102 0614 	add.w	r6, r2, #20
 80051ae:	429e      	cmp	r6, r3
 80051b0:	6841      	ldr	r1, [r0, #4]
 80051b2:	d93d      	bls.n	8005230 <_dtoa_r+0x318>
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 fcb7 	bl	8005b28 <_Balloc>
 80051ba:	9001      	str	r0, [sp, #4]
 80051bc:	2800      	cmp	r0, #0
 80051be:	d13b      	bne.n	8005238 <_dtoa_r+0x320>
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <_dtoa_r+0x2f0>)
 80051c2:	4602      	mov	r2, r0
 80051c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051c8:	e6c0      	b.n	8004f4c <_dtoa_r+0x34>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e7df      	b.n	800518e <_dtoa_r+0x276>
 80051ce:	bf00      	nop
 80051d0:	636f4361 	.word	0x636f4361
 80051d4:	3fd287a7 	.word	0x3fd287a7
 80051d8:	8b60c8b3 	.word	0x8b60c8b3
 80051dc:	3fc68a28 	.word	0x3fc68a28
 80051e0:	509f79fb 	.word	0x509f79fb
 80051e4:	3fd34413 	.word	0x3fd34413
 80051e8:	08008f15 	.word	0x08008f15
 80051ec:	08008f2c 	.word	0x08008f2c
 80051f0:	7ff00000 	.word	0x7ff00000
 80051f4:	08008f11 	.word	0x08008f11
 80051f8:	08008f08 	.word	0x08008f08
 80051fc:	08008ee5 	.word	0x08008ee5
 8005200:	3ff80000 	.word	0x3ff80000
 8005204:	08009020 	.word	0x08009020
 8005208:	08008f87 	.word	0x08008f87
 800520c:	2501      	movs	r5, #1
 800520e:	2300      	movs	r3, #0
 8005210:	9306      	str	r3, [sp, #24]
 8005212:	9508      	str	r5, [sp, #32]
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800521c:	2200      	movs	r2, #0
 800521e:	2312      	movs	r3, #18
 8005220:	e7b0      	b.n	8005184 <_dtoa_r+0x26c>
 8005222:	2301      	movs	r3, #1
 8005224:	9308      	str	r3, [sp, #32]
 8005226:	e7f5      	b.n	8005214 <_dtoa_r+0x2fc>
 8005228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800522e:	e7b8      	b.n	80051a2 <_dtoa_r+0x28a>
 8005230:	3101      	adds	r1, #1
 8005232:	6041      	str	r1, [r0, #4]
 8005234:	0052      	lsls	r2, r2, #1
 8005236:	e7b8      	b.n	80051aa <_dtoa_r+0x292>
 8005238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800523a:	9a01      	ldr	r2, [sp, #4]
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	2b0e      	cmp	r3, #14
 8005242:	f200 809d 	bhi.w	8005380 <_dtoa_r+0x468>
 8005246:	2d00      	cmp	r5, #0
 8005248:	f000 809a 	beq.w	8005380 <_dtoa_r+0x468>
 800524c:	9b00      	ldr	r3, [sp, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	dd32      	ble.n	80052b8 <_dtoa_r+0x3a0>
 8005252:	4ab7      	ldr	r2, [pc, #732]	; (8005530 <_dtoa_r+0x618>)
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800525c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005260:	9b00      	ldr	r3, [sp, #0]
 8005262:	05d8      	lsls	r0, r3, #23
 8005264:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005268:	d516      	bpl.n	8005298 <_dtoa_r+0x380>
 800526a:	4bb2      	ldr	r3, [pc, #712]	; (8005534 <_dtoa_r+0x61c>)
 800526c:	ec51 0b19 	vmov	r0, r1, d9
 8005270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005274:	f7fb faf2 	bl	800085c <__aeabi_ddiv>
 8005278:	f007 070f 	and.w	r7, r7, #15
 800527c:	4682      	mov	sl, r0
 800527e:	468b      	mov	fp, r1
 8005280:	2503      	movs	r5, #3
 8005282:	4eac      	ldr	r6, [pc, #688]	; (8005534 <_dtoa_r+0x61c>)
 8005284:	b957      	cbnz	r7, 800529c <_dtoa_r+0x384>
 8005286:	4642      	mov	r2, r8
 8005288:	464b      	mov	r3, r9
 800528a:	4650      	mov	r0, sl
 800528c:	4659      	mov	r1, fp
 800528e:	f7fb fae5 	bl	800085c <__aeabi_ddiv>
 8005292:	4682      	mov	sl, r0
 8005294:	468b      	mov	fp, r1
 8005296:	e028      	b.n	80052ea <_dtoa_r+0x3d2>
 8005298:	2502      	movs	r5, #2
 800529a:	e7f2      	b.n	8005282 <_dtoa_r+0x36a>
 800529c:	07f9      	lsls	r1, r7, #31
 800529e:	d508      	bpl.n	80052b2 <_dtoa_r+0x39a>
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052a8:	f7fb f9ae 	bl	8000608 <__aeabi_dmul>
 80052ac:	3501      	adds	r5, #1
 80052ae:	4680      	mov	r8, r0
 80052b0:	4689      	mov	r9, r1
 80052b2:	107f      	asrs	r7, r7, #1
 80052b4:	3608      	adds	r6, #8
 80052b6:	e7e5      	b.n	8005284 <_dtoa_r+0x36c>
 80052b8:	f000 809b 	beq.w	80053f2 <_dtoa_r+0x4da>
 80052bc:	9b00      	ldr	r3, [sp, #0]
 80052be:	4f9d      	ldr	r7, [pc, #628]	; (8005534 <_dtoa_r+0x61c>)
 80052c0:	425e      	negs	r6, r3
 80052c2:	4b9b      	ldr	r3, [pc, #620]	; (8005530 <_dtoa_r+0x618>)
 80052c4:	f006 020f 	and.w	r2, r6, #15
 80052c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	ec51 0b19 	vmov	r0, r1, d9
 80052d4:	f7fb f998 	bl	8000608 <__aeabi_dmul>
 80052d8:	1136      	asrs	r6, r6, #4
 80052da:	4682      	mov	sl, r0
 80052dc:	468b      	mov	fp, r1
 80052de:	2300      	movs	r3, #0
 80052e0:	2502      	movs	r5, #2
 80052e2:	2e00      	cmp	r6, #0
 80052e4:	d17a      	bne.n	80053dc <_dtoa_r+0x4c4>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1d3      	bne.n	8005292 <_dtoa_r+0x37a>
 80052ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8082 	beq.w	80053f6 <_dtoa_r+0x4de>
 80052f2:	4b91      	ldr	r3, [pc, #580]	; (8005538 <_dtoa_r+0x620>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	4650      	mov	r0, sl
 80052f8:	4659      	mov	r1, fp
 80052fa:	f7fb fbf7 	bl	8000aec <__aeabi_dcmplt>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d079      	beq.n	80053f6 <_dtoa_r+0x4de>
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d076      	beq.n	80053f6 <_dtoa_r+0x4de>
 8005308:	9b02      	ldr	r3, [sp, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dd36      	ble.n	800537c <_dtoa_r+0x464>
 800530e:	9b00      	ldr	r3, [sp, #0]
 8005310:	4650      	mov	r0, sl
 8005312:	4659      	mov	r1, fp
 8005314:	1e5f      	subs	r7, r3, #1
 8005316:	2200      	movs	r2, #0
 8005318:	4b88      	ldr	r3, [pc, #544]	; (800553c <_dtoa_r+0x624>)
 800531a:	f7fb f975 	bl	8000608 <__aeabi_dmul>
 800531e:	9e02      	ldr	r6, [sp, #8]
 8005320:	4682      	mov	sl, r0
 8005322:	468b      	mov	fp, r1
 8005324:	3501      	adds	r5, #1
 8005326:	4628      	mov	r0, r5
 8005328:	f7fb f904 	bl	8000534 <__aeabi_i2d>
 800532c:	4652      	mov	r2, sl
 800532e:	465b      	mov	r3, fp
 8005330:	f7fb f96a 	bl	8000608 <__aeabi_dmul>
 8005334:	4b82      	ldr	r3, [pc, #520]	; (8005540 <_dtoa_r+0x628>)
 8005336:	2200      	movs	r2, #0
 8005338:	f7fa ffb0 	bl	800029c <__adddf3>
 800533c:	46d0      	mov	r8, sl
 800533e:	46d9      	mov	r9, fp
 8005340:	4682      	mov	sl, r0
 8005342:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005346:	2e00      	cmp	r6, #0
 8005348:	d158      	bne.n	80053fc <_dtoa_r+0x4e4>
 800534a:	4b7e      	ldr	r3, [pc, #504]	; (8005544 <_dtoa_r+0x62c>)
 800534c:	2200      	movs	r2, #0
 800534e:	4640      	mov	r0, r8
 8005350:	4649      	mov	r1, r9
 8005352:	f7fa ffa1 	bl	8000298 <__aeabi_dsub>
 8005356:	4652      	mov	r2, sl
 8005358:	465b      	mov	r3, fp
 800535a:	4680      	mov	r8, r0
 800535c:	4689      	mov	r9, r1
 800535e:	f7fb fbe3 	bl	8000b28 <__aeabi_dcmpgt>
 8005362:	2800      	cmp	r0, #0
 8005364:	f040 8295 	bne.w	8005892 <_dtoa_r+0x97a>
 8005368:	4652      	mov	r2, sl
 800536a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	f7fb fbbb 	bl	8000aec <__aeabi_dcmplt>
 8005376:	2800      	cmp	r0, #0
 8005378:	f040 8289 	bne.w	800588e <_dtoa_r+0x976>
 800537c:	ec5b ab19 	vmov	sl, fp, d9
 8005380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005382:	2b00      	cmp	r3, #0
 8005384:	f2c0 8148 	blt.w	8005618 <_dtoa_r+0x700>
 8005388:	9a00      	ldr	r2, [sp, #0]
 800538a:	2a0e      	cmp	r2, #14
 800538c:	f300 8144 	bgt.w	8005618 <_dtoa_r+0x700>
 8005390:	4b67      	ldr	r3, [pc, #412]	; (8005530 <_dtoa_r+0x618>)
 8005392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005396:	e9d3 8900 	ldrd	r8, r9, [r3]
 800539a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	f280 80d5 	bge.w	800554c <_dtoa_r+0x634>
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f300 80d1 	bgt.w	800554c <_dtoa_r+0x634>
 80053aa:	f040 826f 	bne.w	800588c <_dtoa_r+0x974>
 80053ae:	4b65      	ldr	r3, [pc, #404]	; (8005544 <_dtoa_r+0x62c>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	4640      	mov	r0, r8
 80053b4:	4649      	mov	r1, r9
 80053b6:	f7fb f927 	bl	8000608 <__aeabi_dmul>
 80053ba:	4652      	mov	r2, sl
 80053bc:	465b      	mov	r3, fp
 80053be:	f7fb fba9 	bl	8000b14 <__aeabi_dcmpge>
 80053c2:	9e03      	ldr	r6, [sp, #12]
 80053c4:	4637      	mov	r7, r6
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f040 8245 	bne.w	8005856 <_dtoa_r+0x93e>
 80053cc:	9d01      	ldr	r5, [sp, #4]
 80053ce:	2331      	movs	r3, #49	; 0x31
 80053d0:	f805 3b01 	strb.w	r3, [r5], #1
 80053d4:	9b00      	ldr	r3, [sp, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	e240      	b.n	800585e <_dtoa_r+0x946>
 80053dc:	07f2      	lsls	r2, r6, #31
 80053de:	d505      	bpl.n	80053ec <_dtoa_r+0x4d4>
 80053e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e4:	f7fb f910 	bl	8000608 <__aeabi_dmul>
 80053e8:	3501      	adds	r5, #1
 80053ea:	2301      	movs	r3, #1
 80053ec:	1076      	asrs	r6, r6, #1
 80053ee:	3708      	adds	r7, #8
 80053f0:	e777      	b.n	80052e2 <_dtoa_r+0x3ca>
 80053f2:	2502      	movs	r5, #2
 80053f4:	e779      	b.n	80052ea <_dtoa_r+0x3d2>
 80053f6:	9f00      	ldr	r7, [sp, #0]
 80053f8:	9e03      	ldr	r6, [sp, #12]
 80053fa:	e794      	b.n	8005326 <_dtoa_r+0x40e>
 80053fc:	9901      	ldr	r1, [sp, #4]
 80053fe:	4b4c      	ldr	r3, [pc, #304]	; (8005530 <_dtoa_r+0x618>)
 8005400:	4431      	add	r1, r6
 8005402:	910d      	str	r1, [sp, #52]	; 0x34
 8005404:	9908      	ldr	r1, [sp, #32]
 8005406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800540a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800540e:	2900      	cmp	r1, #0
 8005410:	d043      	beq.n	800549a <_dtoa_r+0x582>
 8005412:	494d      	ldr	r1, [pc, #308]	; (8005548 <_dtoa_r+0x630>)
 8005414:	2000      	movs	r0, #0
 8005416:	f7fb fa21 	bl	800085c <__aeabi_ddiv>
 800541a:	4652      	mov	r2, sl
 800541c:	465b      	mov	r3, fp
 800541e:	f7fa ff3b 	bl	8000298 <__aeabi_dsub>
 8005422:	9d01      	ldr	r5, [sp, #4]
 8005424:	4682      	mov	sl, r0
 8005426:	468b      	mov	fp, r1
 8005428:	4649      	mov	r1, r9
 800542a:	4640      	mov	r0, r8
 800542c:	f7fb fb9c 	bl	8000b68 <__aeabi_d2iz>
 8005430:	4606      	mov	r6, r0
 8005432:	f7fb f87f 	bl	8000534 <__aeabi_i2d>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4640      	mov	r0, r8
 800543c:	4649      	mov	r1, r9
 800543e:	f7fa ff2b 	bl	8000298 <__aeabi_dsub>
 8005442:	3630      	adds	r6, #48	; 0x30
 8005444:	f805 6b01 	strb.w	r6, [r5], #1
 8005448:	4652      	mov	r2, sl
 800544a:	465b      	mov	r3, fp
 800544c:	4680      	mov	r8, r0
 800544e:	4689      	mov	r9, r1
 8005450:	f7fb fb4c 	bl	8000aec <__aeabi_dcmplt>
 8005454:	2800      	cmp	r0, #0
 8005456:	d163      	bne.n	8005520 <_dtoa_r+0x608>
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	4936      	ldr	r1, [pc, #216]	; (8005538 <_dtoa_r+0x620>)
 800545e:	2000      	movs	r0, #0
 8005460:	f7fa ff1a 	bl	8000298 <__aeabi_dsub>
 8005464:	4652      	mov	r2, sl
 8005466:	465b      	mov	r3, fp
 8005468:	f7fb fb40 	bl	8000aec <__aeabi_dcmplt>
 800546c:	2800      	cmp	r0, #0
 800546e:	f040 80b5 	bne.w	80055dc <_dtoa_r+0x6c4>
 8005472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005474:	429d      	cmp	r5, r3
 8005476:	d081      	beq.n	800537c <_dtoa_r+0x464>
 8005478:	4b30      	ldr	r3, [pc, #192]	; (800553c <_dtoa_r+0x624>)
 800547a:	2200      	movs	r2, #0
 800547c:	4650      	mov	r0, sl
 800547e:	4659      	mov	r1, fp
 8005480:	f7fb f8c2 	bl	8000608 <__aeabi_dmul>
 8005484:	4b2d      	ldr	r3, [pc, #180]	; (800553c <_dtoa_r+0x624>)
 8005486:	4682      	mov	sl, r0
 8005488:	468b      	mov	fp, r1
 800548a:	4640      	mov	r0, r8
 800548c:	4649      	mov	r1, r9
 800548e:	2200      	movs	r2, #0
 8005490:	f7fb f8ba 	bl	8000608 <__aeabi_dmul>
 8005494:	4680      	mov	r8, r0
 8005496:	4689      	mov	r9, r1
 8005498:	e7c6      	b.n	8005428 <_dtoa_r+0x510>
 800549a:	4650      	mov	r0, sl
 800549c:	4659      	mov	r1, fp
 800549e:	f7fb f8b3 	bl	8000608 <__aeabi_dmul>
 80054a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054a4:	9d01      	ldr	r5, [sp, #4]
 80054a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80054a8:	4682      	mov	sl, r0
 80054aa:	468b      	mov	fp, r1
 80054ac:	4649      	mov	r1, r9
 80054ae:	4640      	mov	r0, r8
 80054b0:	f7fb fb5a 	bl	8000b68 <__aeabi_d2iz>
 80054b4:	4606      	mov	r6, r0
 80054b6:	f7fb f83d 	bl	8000534 <__aeabi_i2d>
 80054ba:	3630      	adds	r6, #48	; 0x30
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4640      	mov	r0, r8
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fa fee8 	bl	8000298 <__aeabi_dsub>
 80054c8:	f805 6b01 	strb.w	r6, [r5], #1
 80054cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ce:	429d      	cmp	r5, r3
 80054d0:	4680      	mov	r8, r0
 80054d2:	4689      	mov	r9, r1
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	d124      	bne.n	8005524 <_dtoa_r+0x60c>
 80054da:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <_dtoa_r+0x630>)
 80054dc:	4650      	mov	r0, sl
 80054de:	4659      	mov	r1, fp
 80054e0:	f7fa fedc 	bl	800029c <__adddf3>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4640      	mov	r0, r8
 80054ea:	4649      	mov	r1, r9
 80054ec:	f7fb fb1c 	bl	8000b28 <__aeabi_dcmpgt>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d173      	bne.n	80055dc <_dtoa_r+0x6c4>
 80054f4:	4652      	mov	r2, sl
 80054f6:	465b      	mov	r3, fp
 80054f8:	4913      	ldr	r1, [pc, #76]	; (8005548 <_dtoa_r+0x630>)
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fa fecc 	bl	8000298 <__aeabi_dsub>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4640      	mov	r0, r8
 8005506:	4649      	mov	r1, r9
 8005508:	f7fb faf0 	bl	8000aec <__aeabi_dcmplt>
 800550c:	2800      	cmp	r0, #0
 800550e:	f43f af35 	beq.w	800537c <_dtoa_r+0x464>
 8005512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005514:	1e6b      	subs	r3, r5, #1
 8005516:	930f      	str	r3, [sp, #60]	; 0x3c
 8005518:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800551c:	2b30      	cmp	r3, #48	; 0x30
 800551e:	d0f8      	beq.n	8005512 <_dtoa_r+0x5fa>
 8005520:	9700      	str	r7, [sp, #0]
 8005522:	e049      	b.n	80055b8 <_dtoa_r+0x6a0>
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <_dtoa_r+0x624>)
 8005526:	f7fb f86f 	bl	8000608 <__aeabi_dmul>
 800552a:	4680      	mov	r8, r0
 800552c:	4689      	mov	r9, r1
 800552e:	e7bd      	b.n	80054ac <_dtoa_r+0x594>
 8005530:	08009020 	.word	0x08009020
 8005534:	08008ff8 	.word	0x08008ff8
 8005538:	3ff00000 	.word	0x3ff00000
 800553c:	40240000 	.word	0x40240000
 8005540:	401c0000 	.word	0x401c0000
 8005544:	40140000 	.word	0x40140000
 8005548:	3fe00000 	.word	0x3fe00000
 800554c:	9d01      	ldr	r5, [sp, #4]
 800554e:	4656      	mov	r6, sl
 8005550:	465f      	mov	r7, fp
 8005552:	4642      	mov	r2, r8
 8005554:	464b      	mov	r3, r9
 8005556:	4630      	mov	r0, r6
 8005558:	4639      	mov	r1, r7
 800555a:	f7fb f97f 	bl	800085c <__aeabi_ddiv>
 800555e:	f7fb fb03 	bl	8000b68 <__aeabi_d2iz>
 8005562:	4682      	mov	sl, r0
 8005564:	f7fa ffe6 	bl	8000534 <__aeabi_i2d>
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	f7fb f84c 	bl	8000608 <__aeabi_dmul>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4630      	mov	r0, r6
 8005576:	4639      	mov	r1, r7
 8005578:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800557c:	f7fa fe8c 	bl	8000298 <__aeabi_dsub>
 8005580:	f805 6b01 	strb.w	r6, [r5], #1
 8005584:	9e01      	ldr	r6, [sp, #4]
 8005586:	9f03      	ldr	r7, [sp, #12]
 8005588:	1bae      	subs	r6, r5, r6
 800558a:	42b7      	cmp	r7, r6
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	d135      	bne.n	80055fe <_dtoa_r+0x6e6>
 8005592:	f7fa fe83 	bl	800029c <__adddf3>
 8005596:	4642      	mov	r2, r8
 8005598:	464b      	mov	r3, r9
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	f7fb fac3 	bl	8000b28 <__aeabi_dcmpgt>
 80055a2:	b9d0      	cbnz	r0, 80055da <_dtoa_r+0x6c2>
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	4630      	mov	r0, r6
 80055aa:	4639      	mov	r1, r7
 80055ac:	f7fb fa94 	bl	8000ad8 <__aeabi_dcmpeq>
 80055b0:	b110      	cbz	r0, 80055b8 <_dtoa_r+0x6a0>
 80055b2:	f01a 0f01 	tst.w	sl, #1
 80055b6:	d110      	bne.n	80055da <_dtoa_r+0x6c2>
 80055b8:	4620      	mov	r0, r4
 80055ba:	ee18 1a10 	vmov	r1, s16
 80055be:	f000 faf3 	bl	8005ba8 <_Bfree>
 80055c2:	2300      	movs	r3, #0
 80055c4:	9800      	ldr	r0, [sp, #0]
 80055c6:	702b      	strb	r3, [r5, #0]
 80055c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055ca:	3001      	adds	r0, #1
 80055cc:	6018      	str	r0, [r3, #0]
 80055ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f43f acf1 	beq.w	8004fb8 <_dtoa_r+0xa0>
 80055d6:	601d      	str	r5, [r3, #0]
 80055d8:	e4ee      	b.n	8004fb8 <_dtoa_r+0xa0>
 80055da:	9f00      	ldr	r7, [sp, #0]
 80055dc:	462b      	mov	r3, r5
 80055de:	461d      	mov	r5, r3
 80055e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055e4:	2a39      	cmp	r2, #57	; 0x39
 80055e6:	d106      	bne.n	80055f6 <_dtoa_r+0x6de>
 80055e8:	9a01      	ldr	r2, [sp, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d1f7      	bne.n	80055de <_dtoa_r+0x6c6>
 80055ee:	9901      	ldr	r1, [sp, #4]
 80055f0:	2230      	movs	r2, #48	; 0x30
 80055f2:	3701      	adds	r7, #1
 80055f4:	700a      	strb	r2, [r1, #0]
 80055f6:	781a      	ldrb	r2, [r3, #0]
 80055f8:	3201      	adds	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	e790      	b.n	8005520 <_dtoa_r+0x608>
 80055fe:	4ba6      	ldr	r3, [pc, #664]	; (8005898 <_dtoa_r+0x980>)
 8005600:	2200      	movs	r2, #0
 8005602:	f7fb f801 	bl	8000608 <__aeabi_dmul>
 8005606:	2200      	movs	r2, #0
 8005608:	2300      	movs	r3, #0
 800560a:	4606      	mov	r6, r0
 800560c:	460f      	mov	r7, r1
 800560e:	f7fb fa63 	bl	8000ad8 <__aeabi_dcmpeq>
 8005612:	2800      	cmp	r0, #0
 8005614:	d09d      	beq.n	8005552 <_dtoa_r+0x63a>
 8005616:	e7cf      	b.n	80055b8 <_dtoa_r+0x6a0>
 8005618:	9a08      	ldr	r2, [sp, #32]
 800561a:	2a00      	cmp	r2, #0
 800561c:	f000 80d7 	beq.w	80057ce <_dtoa_r+0x8b6>
 8005620:	9a06      	ldr	r2, [sp, #24]
 8005622:	2a01      	cmp	r2, #1
 8005624:	f300 80ba 	bgt.w	800579c <_dtoa_r+0x884>
 8005628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800562a:	2a00      	cmp	r2, #0
 800562c:	f000 80b2 	beq.w	8005794 <_dtoa_r+0x87c>
 8005630:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005634:	9e07      	ldr	r6, [sp, #28]
 8005636:	9d04      	ldr	r5, [sp, #16]
 8005638:	9a04      	ldr	r2, [sp, #16]
 800563a:	441a      	add	r2, r3
 800563c:	9204      	str	r2, [sp, #16]
 800563e:	9a05      	ldr	r2, [sp, #20]
 8005640:	2101      	movs	r1, #1
 8005642:	441a      	add	r2, r3
 8005644:	4620      	mov	r0, r4
 8005646:	9205      	str	r2, [sp, #20]
 8005648:	f000 fb66 	bl	8005d18 <__i2b>
 800564c:	4607      	mov	r7, r0
 800564e:	2d00      	cmp	r5, #0
 8005650:	dd0c      	ble.n	800566c <_dtoa_r+0x754>
 8005652:	9b05      	ldr	r3, [sp, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	dd09      	ble.n	800566c <_dtoa_r+0x754>
 8005658:	42ab      	cmp	r3, r5
 800565a:	9a04      	ldr	r2, [sp, #16]
 800565c:	bfa8      	it	ge
 800565e:	462b      	movge	r3, r5
 8005660:	1ad2      	subs	r2, r2, r3
 8005662:	9204      	str	r2, [sp, #16]
 8005664:	9a05      	ldr	r2, [sp, #20]
 8005666:	1aed      	subs	r5, r5, r3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	9b07      	ldr	r3, [sp, #28]
 800566e:	b31b      	cbz	r3, 80056b8 <_dtoa_r+0x7a0>
 8005670:	9b08      	ldr	r3, [sp, #32]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80af 	beq.w	80057d6 <_dtoa_r+0x8be>
 8005678:	2e00      	cmp	r6, #0
 800567a:	dd13      	ble.n	80056a4 <_dtoa_r+0x78c>
 800567c:	4639      	mov	r1, r7
 800567e:	4632      	mov	r2, r6
 8005680:	4620      	mov	r0, r4
 8005682:	f000 fc09 	bl	8005e98 <__pow5mult>
 8005686:	ee18 2a10 	vmov	r2, s16
 800568a:	4601      	mov	r1, r0
 800568c:	4607      	mov	r7, r0
 800568e:	4620      	mov	r0, r4
 8005690:	f000 fb58 	bl	8005d44 <__multiply>
 8005694:	ee18 1a10 	vmov	r1, s16
 8005698:	4680      	mov	r8, r0
 800569a:	4620      	mov	r0, r4
 800569c:	f000 fa84 	bl	8005ba8 <_Bfree>
 80056a0:	ee08 8a10 	vmov	s16, r8
 80056a4:	9b07      	ldr	r3, [sp, #28]
 80056a6:	1b9a      	subs	r2, r3, r6
 80056a8:	d006      	beq.n	80056b8 <_dtoa_r+0x7a0>
 80056aa:	ee18 1a10 	vmov	r1, s16
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 fbf2 	bl	8005e98 <__pow5mult>
 80056b4:	ee08 0a10 	vmov	s16, r0
 80056b8:	2101      	movs	r1, #1
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 fb2c 	bl	8005d18 <__i2b>
 80056c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	4606      	mov	r6, r0
 80056c6:	f340 8088 	ble.w	80057da <_dtoa_r+0x8c2>
 80056ca:	461a      	mov	r2, r3
 80056cc:	4601      	mov	r1, r0
 80056ce:	4620      	mov	r0, r4
 80056d0:	f000 fbe2 	bl	8005e98 <__pow5mult>
 80056d4:	9b06      	ldr	r3, [sp, #24]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	4606      	mov	r6, r0
 80056da:	f340 8081 	ble.w	80057e0 <_dtoa_r+0x8c8>
 80056de:	f04f 0800 	mov.w	r8, #0
 80056e2:	6933      	ldr	r3, [r6, #16]
 80056e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80056e8:	6918      	ldr	r0, [r3, #16]
 80056ea:	f000 fac5 	bl	8005c78 <__hi0bits>
 80056ee:	f1c0 0020 	rsb	r0, r0, #32
 80056f2:	9b05      	ldr	r3, [sp, #20]
 80056f4:	4418      	add	r0, r3
 80056f6:	f010 001f 	ands.w	r0, r0, #31
 80056fa:	f000 8092 	beq.w	8005822 <_dtoa_r+0x90a>
 80056fe:	f1c0 0320 	rsb	r3, r0, #32
 8005702:	2b04      	cmp	r3, #4
 8005704:	f340 808a 	ble.w	800581c <_dtoa_r+0x904>
 8005708:	f1c0 001c 	rsb	r0, r0, #28
 800570c:	9b04      	ldr	r3, [sp, #16]
 800570e:	4403      	add	r3, r0
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	4403      	add	r3, r0
 8005716:	4405      	add	r5, r0
 8005718:	9305      	str	r3, [sp, #20]
 800571a:	9b04      	ldr	r3, [sp, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	dd07      	ble.n	8005730 <_dtoa_r+0x818>
 8005720:	ee18 1a10 	vmov	r1, s16
 8005724:	461a      	mov	r2, r3
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fc10 	bl	8005f4c <__lshift>
 800572c:	ee08 0a10 	vmov	s16, r0
 8005730:	9b05      	ldr	r3, [sp, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	dd05      	ble.n	8005742 <_dtoa_r+0x82a>
 8005736:	4631      	mov	r1, r6
 8005738:	461a      	mov	r2, r3
 800573a:	4620      	mov	r0, r4
 800573c:	f000 fc06 	bl	8005f4c <__lshift>
 8005740:	4606      	mov	r6, r0
 8005742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d06e      	beq.n	8005826 <_dtoa_r+0x90e>
 8005748:	ee18 0a10 	vmov	r0, s16
 800574c:	4631      	mov	r1, r6
 800574e:	f000 fc6d 	bl	800602c <__mcmp>
 8005752:	2800      	cmp	r0, #0
 8005754:	da67      	bge.n	8005826 <_dtoa_r+0x90e>
 8005756:	9b00      	ldr	r3, [sp, #0]
 8005758:	3b01      	subs	r3, #1
 800575a:	ee18 1a10 	vmov	r1, s16
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	220a      	movs	r2, #10
 8005762:	2300      	movs	r3, #0
 8005764:	4620      	mov	r0, r4
 8005766:	f000 fa41 	bl	8005bec <__multadd>
 800576a:	9b08      	ldr	r3, [sp, #32]
 800576c:	ee08 0a10 	vmov	s16, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 81b1 	beq.w	8005ad8 <_dtoa_r+0xbc0>
 8005776:	2300      	movs	r3, #0
 8005778:	4639      	mov	r1, r7
 800577a:	220a      	movs	r2, #10
 800577c:	4620      	mov	r0, r4
 800577e:	f000 fa35 	bl	8005bec <__multadd>
 8005782:	9b02      	ldr	r3, [sp, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	4607      	mov	r7, r0
 8005788:	f300 808e 	bgt.w	80058a8 <_dtoa_r+0x990>
 800578c:	9b06      	ldr	r3, [sp, #24]
 800578e:	2b02      	cmp	r3, #2
 8005790:	dc51      	bgt.n	8005836 <_dtoa_r+0x91e>
 8005792:	e089      	b.n	80058a8 <_dtoa_r+0x990>
 8005794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800579a:	e74b      	b.n	8005634 <_dtoa_r+0x71c>
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	1e5e      	subs	r6, r3, #1
 80057a0:	9b07      	ldr	r3, [sp, #28]
 80057a2:	42b3      	cmp	r3, r6
 80057a4:	bfbf      	itttt	lt
 80057a6:	9b07      	ldrlt	r3, [sp, #28]
 80057a8:	9607      	strlt	r6, [sp, #28]
 80057aa:	1af2      	sublt	r2, r6, r3
 80057ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80057ae:	bfb6      	itet	lt
 80057b0:	189b      	addlt	r3, r3, r2
 80057b2:	1b9e      	subge	r6, r3, r6
 80057b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80057b6:	9b03      	ldr	r3, [sp, #12]
 80057b8:	bfb8      	it	lt
 80057ba:	2600      	movlt	r6, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bfb7      	itett	lt
 80057c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80057c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80057c8:	1a9d      	sublt	r5, r3, r2
 80057ca:	2300      	movlt	r3, #0
 80057cc:	e734      	b.n	8005638 <_dtoa_r+0x720>
 80057ce:	9e07      	ldr	r6, [sp, #28]
 80057d0:	9d04      	ldr	r5, [sp, #16]
 80057d2:	9f08      	ldr	r7, [sp, #32]
 80057d4:	e73b      	b.n	800564e <_dtoa_r+0x736>
 80057d6:	9a07      	ldr	r2, [sp, #28]
 80057d8:	e767      	b.n	80056aa <_dtoa_r+0x792>
 80057da:	9b06      	ldr	r3, [sp, #24]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	dc18      	bgt.n	8005812 <_dtoa_r+0x8fa>
 80057e0:	f1ba 0f00 	cmp.w	sl, #0
 80057e4:	d115      	bne.n	8005812 <_dtoa_r+0x8fa>
 80057e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057ea:	b993      	cbnz	r3, 8005812 <_dtoa_r+0x8fa>
 80057ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80057f0:	0d1b      	lsrs	r3, r3, #20
 80057f2:	051b      	lsls	r3, r3, #20
 80057f4:	b183      	cbz	r3, 8005818 <_dtoa_r+0x900>
 80057f6:	9b04      	ldr	r3, [sp, #16]
 80057f8:	3301      	adds	r3, #1
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	9b05      	ldr	r3, [sp, #20]
 80057fe:	3301      	adds	r3, #1
 8005800:	9305      	str	r3, [sp, #20]
 8005802:	f04f 0801 	mov.w	r8, #1
 8005806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005808:	2b00      	cmp	r3, #0
 800580a:	f47f af6a 	bne.w	80056e2 <_dtoa_r+0x7ca>
 800580e:	2001      	movs	r0, #1
 8005810:	e76f      	b.n	80056f2 <_dtoa_r+0x7da>
 8005812:	f04f 0800 	mov.w	r8, #0
 8005816:	e7f6      	b.n	8005806 <_dtoa_r+0x8ee>
 8005818:	4698      	mov	r8, r3
 800581a:	e7f4      	b.n	8005806 <_dtoa_r+0x8ee>
 800581c:	f43f af7d 	beq.w	800571a <_dtoa_r+0x802>
 8005820:	4618      	mov	r0, r3
 8005822:	301c      	adds	r0, #28
 8005824:	e772      	b.n	800570c <_dtoa_r+0x7f4>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	dc37      	bgt.n	800589c <_dtoa_r+0x984>
 800582c:	9b06      	ldr	r3, [sp, #24]
 800582e:	2b02      	cmp	r3, #2
 8005830:	dd34      	ble.n	800589c <_dtoa_r+0x984>
 8005832:	9b03      	ldr	r3, [sp, #12]
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	9b02      	ldr	r3, [sp, #8]
 8005838:	b96b      	cbnz	r3, 8005856 <_dtoa_r+0x93e>
 800583a:	4631      	mov	r1, r6
 800583c:	2205      	movs	r2, #5
 800583e:	4620      	mov	r0, r4
 8005840:	f000 f9d4 	bl	8005bec <__multadd>
 8005844:	4601      	mov	r1, r0
 8005846:	4606      	mov	r6, r0
 8005848:	ee18 0a10 	vmov	r0, s16
 800584c:	f000 fbee 	bl	800602c <__mcmp>
 8005850:	2800      	cmp	r0, #0
 8005852:	f73f adbb 	bgt.w	80053cc <_dtoa_r+0x4b4>
 8005856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005858:	9d01      	ldr	r5, [sp, #4]
 800585a:	43db      	mvns	r3, r3
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	f04f 0800 	mov.w	r8, #0
 8005862:	4631      	mov	r1, r6
 8005864:	4620      	mov	r0, r4
 8005866:	f000 f99f 	bl	8005ba8 <_Bfree>
 800586a:	2f00      	cmp	r7, #0
 800586c:	f43f aea4 	beq.w	80055b8 <_dtoa_r+0x6a0>
 8005870:	f1b8 0f00 	cmp.w	r8, #0
 8005874:	d005      	beq.n	8005882 <_dtoa_r+0x96a>
 8005876:	45b8      	cmp	r8, r7
 8005878:	d003      	beq.n	8005882 <_dtoa_r+0x96a>
 800587a:	4641      	mov	r1, r8
 800587c:	4620      	mov	r0, r4
 800587e:	f000 f993 	bl	8005ba8 <_Bfree>
 8005882:	4639      	mov	r1, r7
 8005884:	4620      	mov	r0, r4
 8005886:	f000 f98f 	bl	8005ba8 <_Bfree>
 800588a:	e695      	b.n	80055b8 <_dtoa_r+0x6a0>
 800588c:	2600      	movs	r6, #0
 800588e:	4637      	mov	r7, r6
 8005890:	e7e1      	b.n	8005856 <_dtoa_r+0x93e>
 8005892:	9700      	str	r7, [sp, #0]
 8005894:	4637      	mov	r7, r6
 8005896:	e599      	b.n	80053cc <_dtoa_r+0x4b4>
 8005898:	40240000 	.word	0x40240000
 800589c:	9b08      	ldr	r3, [sp, #32]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80ca 	beq.w	8005a38 <_dtoa_r+0xb20>
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	9302      	str	r3, [sp, #8]
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	dd05      	ble.n	80058b8 <_dtoa_r+0x9a0>
 80058ac:	4639      	mov	r1, r7
 80058ae:	462a      	mov	r2, r5
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 fb4b 	bl	8005f4c <__lshift>
 80058b6:	4607      	mov	r7, r0
 80058b8:	f1b8 0f00 	cmp.w	r8, #0
 80058bc:	d05b      	beq.n	8005976 <_dtoa_r+0xa5e>
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 f931 	bl	8005b28 <_Balloc>
 80058c6:	4605      	mov	r5, r0
 80058c8:	b928      	cbnz	r0, 80058d6 <_dtoa_r+0x9be>
 80058ca:	4b87      	ldr	r3, [pc, #540]	; (8005ae8 <_dtoa_r+0xbd0>)
 80058cc:	4602      	mov	r2, r0
 80058ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058d2:	f7ff bb3b 	b.w	8004f4c <_dtoa_r+0x34>
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	3202      	adds	r2, #2
 80058da:	0092      	lsls	r2, r2, #2
 80058dc:	f107 010c 	add.w	r1, r7, #12
 80058e0:	300c      	adds	r0, #12
 80058e2:	f000 f913 	bl	8005b0c <memcpy>
 80058e6:	2201      	movs	r2, #1
 80058e8:	4629      	mov	r1, r5
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 fb2e 	bl	8005f4c <__lshift>
 80058f0:	9b01      	ldr	r3, [sp, #4]
 80058f2:	f103 0901 	add.w	r9, r3, #1
 80058f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	9305      	str	r3, [sp, #20]
 80058fe:	f00a 0301 	and.w	r3, sl, #1
 8005902:	46b8      	mov	r8, r7
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	4607      	mov	r7, r0
 8005908:	4631      	mov	r1, r6
 800590a:	ee18 0a10 	vmov	r0, s16
 800590e:	f7ff fa77 	bl	8004e00 <quorem>
 8005912:	4641      	mov	r1, r8
 8005914:	9002      	str	r0, [sp, #8]
 8005916:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800591a:	ee18 0a10 	vmov	r0, s16
 800591e:	f000 fb85 	bl	800602c <__mcmp>
 8005922:	463a      	mov	r2, r7
 8005924:	9003      	str	r0, [sp, #12]
 8005926:	4631      	mov	r1, r6
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fb9b 	bl	8006064 <__mdiff>
 800592e:	68c2      	ldr	r2, [r0, #12]
 8005930:	f109 3bff 	add.w	fp, r9, #4294967295
 8005934:	4605      	mov	r5, r0
 8005936:	bb02      	cbnz	r2, 800597a <_dtoa_r+0xa62>
 8005938:	4601      	mov	r1, r0
 800593a:	ee18 0a10 	vmov	r0, s16
 800593e:	f000 fb75 	bl	800602c <__mcmp>
 8005942:	4602      	mov	r2, r0
 8005944:	4629      	mov	r1, r5
 8005946:	4620      	mov	r0, r4
 8005948:	9207      	str	r2, [sp, #28]
 800594a:	f000 f92d 	bl	8005ba8 <_Bfree>
 800594e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005952:	ea43 0102 	orr.w	r1, r3, r2
 8005956:	9b04      	ldr	r3, [sp, #16]
 8005958:	430b      	orrs	r3, r1
 800595a:	464d      	mov	r5, r9
 800595c:	d10f      	bne.n	800597e <_dtoa_r+0xa66>
 800595e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005962:	d02a      	beq.n	80059ba <_dtoa_r+0xaa2>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	dd02      	ble.n	8005970 <_dtoa_r+0xa58>
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005970:	f88b a000 	strb.w	sl, [fp]
 8005974:	e775      	b.n	8005862 <_dtoa_r+0x94a>
 8005976:	4638      	mov	r0, r7
 8005978:	e7ba      	b.n	80058f0 <_dtoa_r+0x9d8>
 800597a:	2201      	movs	r2, #1
 800597c:	e7e2      	b.n	8005944 <_dtoa_r+0xa2c>
 800597e:	9b03      	ldr	r3, [sp, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	db04      	blt.n	800598e <_dtoa_r+0xa76>
 8005984:	9906      	ldr	r1, [sp, #24]
 8005986:	430b      	orrs	r3, r1
 8005988:	9904      	ldr	r1, [sp, #16]
 800598a:	430b      	orrs	r3, r1
 800598c:	d122      	bne.n	80059d4 <_dtoa_r+0xabc>
 800598e:	2a00      	cmp	r2, #0
 8005990:	ddee      	ble.n	8005970 <_dtoa_r+0xa58>
 8005992:	ee18 1a10 	vmov	r1, s16
 8005996:	2201      	movs	r2, #1
 8005998:	4620      	mov	r0, r4
 800599a:	f000 fad7 	bl	8005f4c <__lshift>
 800599e:	4631      	mov	r1, r6
 80059a0:	ee08 0a10 	vmov	s16, r0
 80059a4:	f000 fb42 	bl	800602c <__mcmp>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	dc03      	bgt.n	80059b4 <_dtoa_r+0xa9c>
 80059ac:	d1e0      	bne.n	8005970 <_dtoa_r+0xa58>
 80059ae:	f01a 0f01 	tst.w	sl, #1
 80059b2:	d0dd      	beq.n	8005970 <_dtoa_r+0xa58>
 80059b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059b8:	d1d7      	bne.n	800596a <_dtoa_r+0xa52>
 80059ba:	2339      	movs	r3, #57	; 0x39
 80059bc:	f88b 3000 	strb.w	r3, [fp]
 80059c0:	462b      	mov	r3, r5
 80059c2:	461d      	mov	r5, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059ca:	2a39      	cmp	r2, #57	; 0x39
 80059cc:	d071      	beq.n	8005ab2 <_dtoa_r+0xb9a>
 80059ce:	3201      	adds	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e746      	b.n	8005862 <_dtoa_r+0x94a>
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	dd07      	ble.n	80059e8 <_dtoa_r+0xad0>
 80059d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059dc:	d0ed      	beq.n	80059ba <_dtoa_r+0xaa2>
 80059de:	f10a 0301 	add.w	r3, sl, #1
 80059e2:	f88b 3000 	strb.w	r3, [fp]
 80059e6:	e73c      	b.n	8005862 <_dtoa_r+0x94a>
 80059e8:	9b05      	ldr	r3, [sp, #20]
 80059ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80059ee:	4599      	cmp	r9, r3
 80059f0:	d047      	beq.n	8005a82 <_dtoa_r+0xb6a>
 80059f2:	ee18 1a10 	vmov	r1, s16
 80059f6:	2300      	movs	r3, #0
 80059f8:	220a      	movs	r2, #10
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 f8f6 	bl	8005bec <__multadd>
 8005a00:	45b8      	cmp	r8, r7
 8005a02:	ee08 0a10 	vmov	s16, r0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	f04f 020a 	mov.w	r2, #10
 8005a0e:	4641      	mov	r1, r8
 8005a10:	4620      	mov	r0, r4
 8005a12:	d106      	bne.n	8005a22 <_dtoa_r+0xb0a>
 8005a14:	f000 f8ea 	bl	8005bec <__multadd>
 8005a18:	4680      	mov	r8, r0
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	f109 0901 	add.w	r9, r9, #1
 8005a20:	e772      	b.n	8005908 <_dtoa_r+0x9f0>
 8005a22:	f000 f8e3 	bl	8005bec <__multadd>
 8005a26:	4639      	mov	r1, r7
 8005a28:	4680      	mov	r8, r0
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	220a      	movs	r2, #10
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 f8dc 	bl	8005bec <__multadd>
 8005a34:	4607      	mov	r7, r0
 8005a36:	e7f1      	b.n	8005a1c <_dtoa_r+0xb04>
 8005a38:	9b03      	ldr	r3, [sp, #12]
 8005a3a:	9302      	str	r3, [sp, #8]
 8005a3c:	9d01      	ldr	r5, [sp, #4]
 8005a3e:	ee18 0a10 	vmov	r0, s16
 8005a42:	4631      	mov	r1, r6
 8005a44:	f7ff f9dc 	bl	8004e00 <quorem>
 8005a48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005a4c:	9b01      	ldr	r3, [sp, #4]
 8005a4e:	f805 ab01 	strb.w	sl, [r5], #1
 8005a52:	1aea      	subs	r2, r5, r3
 8005a54:	9b02      	ldr	r3, [sp, #8]
 8005a56:	4293      	cmp	r3, r2
 8005a58:	dd09      	ble.n	8005a6e <_dtoa_r+0xb56>
 8005a5a:	ee18 1a10 	vmov	r1, s16
 8005a5e:	2300      	movs	r3, #0
 8005a60:	220a      	movs	r2, #10
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f8c2 	bl	8005bec <__multadd>
 8005a68:	ee08 0a10 	vmov	s16, r0
 8005a6c:	e7e7      	b.n	8005a3e <_dtoa_r+0xb26>
 8005a6e:	9b02      	ldr	r3, [sp, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bfc8      	it	gt
 8005a74:	461d      	movgt	r5, r3
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	bfd8      	it	le
 8005a7a:	2501      	movle	r5, #1
 8005a7c:	441d      	add	r5, r3
 8005a7e:	f04f 0800 	mov.w	r8, #0
 8005a82:	ee18 1a10 	vmov	r1, s16
 8005a86:	2201      	movs	r2, #1
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 fa5f 	bl	8005f4c <__lshift>
 8005a8e:	4631      	mov	r1, r6
 8005a90:	ee08 0a10 	vmov	s16, r0
 8005a94:	f000 faca 	bl	800602c <__mcmp>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	dc91      	bgt.n	80059c0 <_dtoa_r+0xaa8>
 8005a9c:	d102      	bne.n	8005aa4 <_dtoa_r+0xb8c>
 8005a9e:	f01a 0f01 	tst.w	sl, #1
 8005aa2:	d18d      	bne.n	80059c0 <_dtoa_r+0xaa8>
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	461d      	mov	r5, r3
 8005aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aac:	2a30      	cmp	r2, #48	; 0x30
 8005aae:	d0fa      	beq.n	8005aa6 <_dtoa_r+0xb8e>
 8005ab0:	e6d7      	b.n	8005862 <_dtoa_r+0x94a>
 8005ab2:	9a01      	ldr	r2, [sp, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d184      	bne.n	80059c2 <_dtoa_r+0xaaa>
 8005ab8:	9b00      	ldr	r3, [sp, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2331      	movs	r3, #49	; 0x31
 8005ac0:	7013      	strb	r3, [r2, #0]
 8005ac2:	e6ce      	b.n	8005862 <_dtoa_r+0x94a>
 8005ac4:	4b09      	ldr	r3, [pc, #36]	; (8005aec <_dtoa_r+0xbd4>)
 8005ac6:	f7ff ba95 	b.w	8004ff4 <_dtoa_r+0xdc>
 8005aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f47f aa6e 	bne.w	8004fae <_dtoa_r+0x96>
 8005ad2:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <_dtoa_r+0xbd8>)
 8005ad4:	f7ff ba8e 	b.w	8004ff4 <_dtoa_r+0xdc>
 8005ad8:	9b02      	ldr	r3, [sp, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dcae      	bgt.n	8005a3c <_dtoa_r+0xb24>
 8005ade:	9b06      	ldr	r3, [sp, #24]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	f73f aea8 	bgt.w	8005836 <_dtoa_r+0x91e>
 8005ae6:	e7a9      	b.n	8005a3c <_dtoa_r+0xb24>
 8005ae8:	08008f87 	.word	0x08008f87
 8005aec:	08008ee4 	.word	0x08008ee4
 8005af0:	08008f08 	.word	0x08008f08

08005af4 <_localeconv_r>:
 8005af4:	4800      	ldr	r0, [pc, #0]	; (8005af8 <_localeconv_r+0x4>)
 8005af6:	4770      	bx	lr
 8005af8:	20000174 	.word	0x20000174

08005afc <malloc>:
 8005afc:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <malloc+0xc>)
 8005afe:	4601      	mov	r1, r0
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	f000 bc17 	b.w	8006334 <_malloc_r>
 8005b06:	bf00      	nop
 8005b08:	20000020 	.word	0x20000020

08005b0c <memcpy>:
 8005b0c:	440a      	add	r2, r1
 8005b0e:	4291      	cmp	r1, r2
 8005b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b14:	d100      	bne.n	8005b18 <memcpy+0xc>
 8005b16:	4770      	bx	lr
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b22:	4291      	cmp	r1, r2
 8005b24:	d1f9      	bne.n	8005b1a <memcpy+0xe>
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <_Balloc>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	b976      	cbnz	r6, 8005b50 <_Balloc+0x28>
 8005b32:	2010      	movs	r0, #16
 8005b34:	f7ff ffe2 	bl	8005afc <malloc>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6260      	str	r0, [r4, #36]	; 0x24
 8005b3c:	b920      	cbnz	r0, 8005b48 <_Balloc+0x20>
 8005b3e:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <_Balloc+0x78>)
 8005b40:	4818      	ldr	r0, [pc, #96]	; (8005ba4 <_Balloc+0x7c>)
 8005b42:	2166      	movs	r1, #102	; 0x66
 8005b44:	f000 fdd6 	bl	80066f4 <__assert_func>
 8005b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b4c:	6006      	str	r6, [r0, #0]
 8005b4e:	60c6      	str	r6, [r0, #12]
 8005b50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b52:	68f3      	ldr	r3, [r6, #12]
 8005b54:	b183      	cbz	r3, 8005b78 <_Balloc+0x50>
 8005b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b5e:	b9b8      	cbnz	r0, 8005b90 <_Balloc+0x68>
 8005b60:	2101      	movs	r1, #1
 8005b62:	fa01 f605 	lsl.w	r6, r1, r5
 8005b66:	1d72      	adds	r2, r6, #5
 8005b68:	0092      	lsls	r2, r2, #2
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 fb60 	bl	8006230 <_calloc_r>
 8005b70:	b160      	cbz	r0, 8005b8c <_Balloc+0x64>
 8005b72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b76:	e00e      	b.n	8005b96 <_Balloc+0x6e>
 8005b78:	2221      	movs	r2, #33	; 0x21
 8005b7a:	2104      	movs	r1, #4
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fb57 	bl	8006230 <_calloc_r>
 8005b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b84:	60f0      	str	r0, [r6, #12]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e4      	bne.n	8005b56 <_Balloc+0x2e>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	6802      	ldr	r2, [r0, #0]
 8005b92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b96:	2300      	movs	r3, #0
 8005b98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b9c:	e7f7      	b.n	8005b8e <_Balloc+0x66>
 8005b9e:	bf00      	nop
 8005ba0:	08008f15 	.word	0x08008f15
 8005ba4:	08008f98 	.word	0x08008f98

08005ba8 <_Bfree>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bac:	4605      	mov	r5, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	b976      	cbnz	r6, 8005bd0 <_Bfree+0x28>
 8005bb2:	2010      	movs	r0, #16
 8005bb4:	f7ff ffa2 	bl	8005afc <malloc>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6268      	str	r0, [r5, #36]	; 0x24
 8005bbc:	b920      	cbnz	r0, 8005bc8 <_Bfree+0x20>
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <_Bfree+0x3c>)
 8005bc0:	4809      	ldr	r0, [pc, #36]	; (8005be8 <_Bfree+0x40>)
 8005bc2:	218a      	movs	r1, #138	; 0x8a
 8005bc4:	f000 fd96 	bl	80066f4 <__assert_func>
 8005bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bcc:	6006      	str	r6, [r0, #0]
 8005bce:	60c6      	str	r6, [r0, #12]
 8005bd0:	b13c      	cbz	r4, 8005be2 <_Bfree+0x3a>
 8005bd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bd4:	6862      	ldr	r2, [r4, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bdc:	6021      	str	r1, [r4, #0]
 8005bde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	08008f15 	.word	0x08008f15
 8005be8:	08008f98 	.word	0x08008f98

08005bec <__multadd>:
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	690d      	ldr	r5, [r1, #16]
 8005bf2:	4607      	mov	r7, r0
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	461e      	mov	r6, r3
 8005bf8:	f101 0c14 	add.w	ip, r1, #20
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f8dc 3000 	ldr.w	r3, [ip]
 8005c02:	b299      	uxth	r1, r3
 8005c04:	fb02 6101 	mla	r1, r2, r1, r6
 8005c08:	0c1e      	lsrs	r6, r3, #16
 8005c0a:	0c0b      	lsrs	r3, r1, #16
 8005c0c:	fb02 3306 	mla	r3, r2, r6, r3
 8005c10:	b289      	uxth	r1, r1
 8005c12:	3001      	adds	r0, #1
 8005c14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c18:	4285      	cmp	r5, r0
 8005c1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005c1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c22:	dcec      	bgt.n	8005bfe <__multadd+0x12>
 8005c24:	b30e      	cbz	r6, 8005c6a <__multadd+0x7e>
 8005c26:	68a3      	ldr	r3, [r4, #8]
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	dc19      	bgt.n	8005c60 <__multadd+0x74>
 8005c2c:	6861      	ldr	r1, [r4, #4]
 8005c2e:	4638      	mov	r0, r7
 8005c30:	3101      	adds	r1, #1
 8005c32:	f7ff ff79 	bl	8005b28 <_Balloc>
 8005c36:	4680      	mov	r8, r0
 8005c38:	b928      	cbnz	r0, 8005c46 <__multadd+0x5a>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <__multadd+0x84>)
 8005c3e:	480d      	ldr	r0, [pc, #52]	; (8005c74 <__multadd+0x88>)
 8005c40:	21b5      	movs	r1, #181	; 0xb5
 8005c42:	f000 fd57 	bl	80066f4 <__assert_func>
 8005c46:	6922      	ldr	r2, [r4, #16]
 8005c48:	3202      	adds	r2, #2
 8005c4a:	f104 010c 	add.w	r1, r4, #12
 8005c4e:	0092      	lsls	r2, r2, #2
 8005c50:	300c      	adds	r0, #12
 8005c52:	f7ff ff5b 	bl	8005b0c <memcpy>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4638      	mov	r0, r7
 8005c5a:	f7ff ffa5 	bl	8005ba8 <_Bfree>
 8005c5e:	4644      	mov	r4, r8
 8005c60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c64:	3501      	adds	r5, #1
 8005c66:	615e      	str	r6, [r3, #20]
 8005c68:	6125      	str	r5, [r4, #16]
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c70:	08008f87 	.word	0x08008f87
 8005c74:	08008f98 	.word	0x08008f98

08005c78 <__hi0bits>:
 8005c78:	0c03      	lsrs	r3, r0, #16
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	b9d3      	cbnz	r3, 8005cb4 <__hi0bits+0x3c>
 8005c7e:	0400      	lsls	r0, r0, #16
 8005c80:	2310      	movs	r3, #16
 8005c82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c86:	bf04      	itt	eq
 8005c88:	0200      	lsleq	r0, r0, #8
 8005c8a:	3308      	addeq	r3, #8
 8005c8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c90:	bf04      	itt	eq
 8005c92:	0100      	lsleq	r0, r0, #4
 8005c94:	3304      	addeq	r3, #4
 8005c96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c9a:	bf04      	itt	eq
 8005c9c:	0080      	lsleq	r0, r0, #2
 8005c9e:	3302      	addeq	r3, #2
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	db05      	blt.n	8005cb0 <__hi0bits+0x38>
 8005ca4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ca8:	f103 0301 	add.w	r3, r3, #1
 8005cac:	bf08      	it	eq
 8005cae:	2320      	moveq	r3, #32
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	4770      	bx	lr
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e7e4      	b.n	8005c82 <__hi0bits+0xa>

08005cb8 <__lo0bits>:
 8005cb8:	6803      	ldr	r3, [r0, #0]
 8005cba:	f013 0207 	ands.w	r2, r3, #7
 8005cbe:	4601      	mov	r1, r0
 8005cc0:	d00b      	beq.n	8005cda <__lo0bits+0x22>
 8005cc2:	07da      	lsls	r2, r3, #31
 8005cc4:	d423      	bmi.n	8005d0e <__lo0bits+0x56>
 8005cc6:	0798      	lsls	r0, r3, #30
 8005cc8:	bf49      	itett	mi
 8005cca:	085b      	lsrmi	r3, r3, #1
 8005ccc:	089b      	lsrpl	r3, r3, #2
 8005cce:	2001      	movmi	r0, #1
 8005cd0:	600b      	strmi	r3, [r1, #0]
 8005cd2:	bf5c      	itt	pl
 8005cd4:	600b      	strpl	r3, [r1, #0]
 8005cd6:	2002      	movpl	r0, #2
 8005cd8:	4770      	bx	lr
 8005cda:	b298      	uxth	r0, r3
 8005cdc:	b9a8      	cbnz	r0, 8005d0a <__lo0bits+0x52>
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	2010      	movs	r0, #16
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	b90a      	cbnz	r2, 8005cea <__lo0bits+0x32>
 8005ce6:	3008      	adds	r0, #8
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	071a      	lsls	r2, r3, #28
 8005cec:	bf04      	itt	eq
 8005cee:	091b      	lsreq	r3, r3, #4
 8005cf0:	3004      	addeq	r0, #4
 8005cf2:	079a      	lsls	r2, r3, #30
 8005cf4:	bf04      	itt	eq
 8005cf6:	089b      	lsreq	r3, r3, #2
 8005cf8:	3002      	addeq	r0, #2
 8005cfa:	07da      	lsls	r2, r3, #31
 8005cfc:	d403      	bmi.n	8005d06 <__lo0bits+0x4e>
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	f100 0001 	add.w	r0, r0, #1
 8005d04:	d005      	beq.n	8005d12 <__lo0bits+0x5a>
 8005d06:	600b      	str	r3, [r1, #0]
 8005d08:	4770      	bx	lr
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	e7e9      	b.n	8005ce2 <__lo0bits+0x2a>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	4770      	bx	lr
 8005d12:	2020      	movs	r0, #32
 8005d14:	4770      	bx	lr
	...

08005d18 <__i2b>:
 8005d18:	b510      	push	{r4, lr}
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	f7ff ff03 	bl	8005b28 <_Balloc>
 8005d22:	4602      	mov	r2, r0
 8005d24:	b928      	cbnz	r0, 8005d32 <__i2b+0x1a>
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <__i2b+0x24>)
 8005d28:	4805      	ldr	r0, [pc, #20]	; (8005d40 <__i2b+0x28>)
 8005d2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d2e:	f000 fce1 	bl	80066f4 <__assert_func>
 8005d32:	2301      	movs	r3, #1
 8005d34:	6144      	str	r4, [r0, #20]
 8005d36:	6103      	str	r3, [r0, #16]
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	bf00      	nop
 8005d3c:	08008f87 	.word	0x08008f87
 8005d40:	08008f98 	.word	0x08008f98

08005d44 <__multiply>:
 8005d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	4691      	mov	r9, r2
 8005d4a:	690a      	ldr	r2, [r1, #16]
 8005d4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	bfb8      	it	lt
 8005d54:	460b      	movlt	r3, r1
 8005d56:	460c      	mov	r4, r1
 8005d58:	bfbc      	itt	lt
 8005d5a:	464c      	movlt	r4, r9
 8005d5c:	4699      	movlt	r9, r3
 8005d5e:	6927      	ldr	r7, [r4, #16]
 8005d60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d64:	68a3      	ldr	r3, [r4, #8]
 8005d66:	6861      	ldr	r1, [r4, #4]
 8005d68:	eb07 060a 	add.w	r6, r7, sl
 8005d6c:	42b3      	cmp	r3, r6
 8005d6e:	b085      	sub	sp, #20
 8005d70:	bfb8      	it	lt
 8005d72:	3101      	addlt	r1, #1
 8005d74:	f7ff fed8 	bl	8005b28 <_Balloc>
 8005d78:	b930      	cbnz	r0, 8005d88 <__multiply+0x44>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b44      	ldr	r3, [pc, #272]	; (8005e90 <__multiply+0x14c>)
 8005d7e:	4845      	ldr	r0, [pc, #276]	; (8005e94 <__multiply+0x150>)
 8005d80:	f240 115d 	movw	r1, #349	; 0x15d
 8005d84:	f000 fcb6 	bl	80066f4 <__assert_func>
 8005d88:	f100 0514 	add.w	r5, r0, #20
 8005d8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d90:	462b      	mov	r3, r5
 8005d92:	2200      	movs	r2, #0
 8005d94:	4543      	cmp	r3, r8
 8005d96:	d321      	bcc.n	8005ddc <__multiply+0x98>
 8005d98:	f104 0314 	add.w	r3, r4, #20
 8005d9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005da0:	f109 0314 	add.w	r3, r9, #20
 8005da4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005da8:	9202      	str	r2, [sp, #8]
 8005daa:	1b3a      	subs	r2, r7, r4
 8005dac:	3a15      	subs	r2, #21
 8005dae:	f022 0203 	bic.w	r2, r2, #3
 8005db2:	3204      	adds	r2, #4
 8005db4:	f104 0115 	add.w	r1, r4, #21
 8005db8:	428f      	cmp	r7, r1
 8005dba:	bf38      	it	cc
 8005dbc:	2204      	movcc	r2, #4
 8005dbe:	9201      	str	r2, [sp, #4]
 8005dc0:	9a02      	ldr	r2, [sp, #8]
 8005dc2:	9303      	str	r3, [sp, #12]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d80c      	bhi.n	8005de2 <__multiply+0x9e>
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	dd03      	ble.n	8005dd4 <__multiply+0x90>
 8005dcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d05a      	beq.n	8005e8a <__multiply+0x146>
 8005dd4:	6106      	str	r6, [r0, #16]
 8005dd6:	b005      	add	sp, #20
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	f843 2b04 	str.w	r2, [r3], #4
 8005de0:	e7d8      	b.n	8005d94 <__multiply+0x50>
 8005de2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005de6:	f1ba 0f00 	cmp.w	sl, #0
 8005dea:	d024      	beq.n	8005e36 <__multiply+0xf2>
 8005dec:	f104 0e14 	add.w	lr, r4, #20
 8005df0:	46a9      	mov	r9, r5
 8005df2:	f04f 0c00 	mov.w	ip, #0
 8005df6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005dfa:	f8d9 1000 	ldr.w	r1, [r9]
 8005dfe:	fa1f fb82 	uxth.w	fp, r2
 8005e02:	b289      	uxth	r1, r1
 8005e04:	fb0a 110b 	mla	r1, sl, fp, r1
 8005e08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e10:	4461      	add	r1, ip
 8005e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e16:	fb0a c20b 	mla	r2, sl, fp, ip
 8005e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e1e:	b289      	uxth	r1, r1
 8005e20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e24:	4577      	cmp	r7, lr
 8005e26:	f849 1b04 	str.w	r1, [r9], #4
 8005e2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e2e:	d8e2      	bhi.n	8005df6 <__multiply+0xb2>
 8005e30:	9a01      	ldr	r2, [sp, #4]
 8005e32:	f845 c002 	str.w	ip, [r5, r2]
 8005e36:	9a03      	ldr	r2, [sp, #12]
 8005e38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	f1b9 0f00 	cmp.w	r9, #0
 8005e42:	d020      	beq.n	8005e86 <__multiply+0x142>
 8005e44:	6829      	ldr	r1, [r5, #0]
 8005e46:	f104 0c14 	add.w	ip, r4, #20
 8005e4a:	46ae      	mov	lr, r5
 8005e4c:	f04f 0a00 	mov.w	sl, #0
 8005e50:	f8bc b000 	ldrh.w	fp, [ip]
 8005e54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005e58:	fb09 220b 	mla	r2, r9, fp, r2
 8005e5c:	4492      	add	sl, r2
 8005e5e:	b289      	uxth	r1, r1
 8005e60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005e64:	f84e 1b04 	str.w	r1, [lr], #4
 8005e68:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005e6c:	f8be 1000 	ldrh.w	r1, [lr]
 8005e70:	0c12      	lsrs	r2, r2, #16
 8005e72:	fb09 1102 	mla	r1, r9, r2, r1
 8005e76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005e7a:	4567      	cmp	r7, ip
 8005e7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e80:	d8e6      	bhi.n	8005e50 <__multiply+0x10c>
 8005e82:	9a01      	ldr	r2, [sp, #4]
 8005e84:	50a9      	str	r1, [r5, r2]
 8005e86:	3504      	adds	r5, #4
 8005e88:	e79a      	b.n	8005dc0 <__multiply+0x7c>
 8005e8a:	3e01      	subs	r6, #1
 8005e8c:	e79c      	b.n	8005dc8 <__multiply+0x84>
 8005e8e:	bf00      	nop
 8005e90:	08008f87 	.word	0x08008f87
 8005e94:	08008f98 	.word	0x08008f98

08005e98 <__pow5mult>:
 8005e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	4615      	mov	r5, r2
 8005e9e:	f012 0203 	ands.w	r2, r2, #3
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	d007      	beq.n	8005eb8 <__pow5mult+0x20>
 8005ea8:	4c25      	ldr	r4, [pc, #148]	; (8005f40 <__pow5mult+0xa8>)
 8005eaa:	3a01      	subs	r2, #1
 8005eac:	2300      	movs	r3, #0
 8005eae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005eb2:	f7ff fe9b 	bl	8005bec <__multadd>
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	10ad      	asrs	r5, r5, #2
 8005eba:	d03d      	beq.n	8005f38 <__pow5mult+0xa0>
 8005ebc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ebe:	b97c      	cbnz	r4, 8005ee0 <__pow5mult+0x48>
 8005ec0:	2010      	movs	r0, #16
 8005ec2:	f7ff fe1b 	bl	8005afc <malloc>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	6270      	str	r0, [r6, #36]	; 0x24
 8005eca:	b928      	cbnz	r0, 8005ed8 <__pow5mult+0x40>
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <__pow5mult+0xac>)
 8005ece:	481e      	ldr	r0, [pc, #120]	; (8005f48 <__pow5mult+0xb0>)
 8005ed0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ed4:	f000 fc0e 	bl	80066f4 <__assert_func>
 8005ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005edc:	6004      	str	r4, [r0, #0]
 8005ede:	60c4      	str	r4, [r0, #12]
 8005ee0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ee8:	b94c      	cbnz	r4, 8005efe <__pow5mult+0x66>
 8005eea:	f240 2171 	movw	r1, #625	; 0x271
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f7ff ff12 	bl	8005d18 <__i2b>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005efa:	4604      	mov	r4, r0
 8005efc:	6003      	str	r3, [r0, #0]
 8005efe:	f04f 0900 	mov.w	r9, #0
 8005f02:	07eb      	lsls	r3, r5, #31
 8005f04:	d50a      	bpl.n	8005f1c <__pow5mult+0x84>
 8005f06:	4639      	mov	r1, r7
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f7ff ff1a 	bl	8005d44 <__multiply>
 8005f10:	4639      	mov	r1, r7
 8005f12:	4680      	mov	r8, r0
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7ff fe47 	bl	8005ba8 <_Bfree>
 8005f1a:	4647      	mov	r7, r8
 8005f1c:	106d      	asrs	r5, r5, #1
 8005f1e:	d00b      	beq.n	8005f38 <__pow5mult+0xa0>
 8005f20:	6820      	ldr	r0, [r4, #0]
 8005f22:	b938      	cbnz	r0, 8005f34 <__pow5mult+0x9c>
 8005f24:	4622      	mov	r2, r4
 8005f26:	4621      	mov	r1, r4
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff ff0b 	bl	8005d44 <__multiply>
 8005f2e:	6020      	str	r0, [r4, #0]
 8005f30:	f8c0 9000 	str.w	r9, [r0]
 8005f34:	4604      	mov	r4, r0
 8005f36:	e7e4      	b.n	8005f02 <__pow5mult+0x6a>
 8005f38:	4638      	mov	r0, r7
 8005f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3e:	bf00      	nop
 8005f40:	080090e8 	.word	0x080090e8
 8005f44:	08008f15 	.word	0x08008f15
 8005f48:	08008f98 	.word	0x08008f98

08005f4c <__lshift>:
 8005f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f50:	460c      	mov	r4, r1
 8005f52:	6849      	ldr	r1, [r1, #4]
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f5a:	68a3      	ldr	r3, [r4, #8]
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	4691      	mov	r9, r2
 8005f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f64:	f108 0601 	add.w	r6, r8, #1
 8005f68:	42b3      	cmp	r3, r6
 8005f6a:	db0b      	blt.n	8005f84 <__lshift+0x38>
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	f7ff fddb 	bl	8005b28 <_Balloc>
 8005f72:	4605      	mov	r5, r0
 8005f74:	b948      	cbnz	r0, 8005f8a <__lshift+0x3e>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <__lshift+0xd8>)
 8005f7a:	482b      	ldr	r0, [pc, #172]	; (8006028 <__lshift+0xdc>)
 8005f7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f80:	f000 fbb8 	bl	80066f4 <__assert_func>
 8005f84:	3101      	adds	r1, #1
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	e7ee      	b.n	8005f68 <__lshift+0x1c>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f100 0114 	add.w	r1, r0, #20
 8005f90:	f100 0210 	add.w	r2, r0, #16
 8005f94:	4618      	mov	r0, r3
 8005f96:	4553      	cmp	r3, sl
 8005f98:	db37      	blt.n	800600a <__lshift+0xbe>
 8005f9a:	6920      	ldr	r0, [r4, #16]
 8005f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fa0:	f104 0314 	add.w	r3, r4, #20
 8005fa4:	f019 091f 	ands.w	r9, r9, #31
 8005fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005fb0:	d02f      	beq.n	8006012 <__lshift+0xc6>
 8005fb2:	f1c9 0e20 	rsb	lr, r9, #32
 8005fb6:	468a      	mov	sl, r1
 8005fb8:	f04f 0c00 	mov.w	ip, #0
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	fa02 f209 	lsl.w	r2, r2, r9
 8005fc2:	ea42 020c 	orr.w	r2, r2, ip
 8005fc6:	f84a 2b04 	str.w	r2, [sl], #4
 8005fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fce:	4298      	cmp	r0, r3
 8005fd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005fd4:	d8f2      	bhi.n	8005fbc <__lshift+0x70>
 8005fd6:	1b03      	subs	r3, r0, r4
 8005fd8:	3b15      	subs	r3, #21
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	3304      	adds	r3, #4
 8005fe0:	f104 0215 	add.w	r2, r4, #21
 8005fe4:	4290      	cmp	r0, r2
 8005fe6:	bf38      	it	cc
 8005fe8:	2304      	movcc	r3, #4
 8005fea:	f841 c003 	str.w	ip, [r1, r3]
 8005fee:	f1bc 0f00 	cmp.w	ip, #0
 8005ff2:	d001      	beq.n	8005ff8 <__lshift+0xac>
 8005ff4:	f108 0602 	add.w	r6, r8, #2
 8005ff8:	3e01      	subs	r6, #1
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	612e      	str	r6, [r5, #16]
 8005ffe:	4621      	mov	r1, r4
 8006000:	f7ff fdd2 	bl	8005ba8 <_Bfree>
 8006004:	4628      	mov	r0, r5
 8006006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600a:	f842 0f04 	str.w	r0, [r2, #4]!
 800600e:	3301      	adds	r3, #1
 8006010:	e7c1      	b.n	8005f96 <__lshift+0x4a>
 8006012:	3904      	subs	r1, #4
 8006014:	f853 2b04 	ldr.w	r2, [r3], #4
 8006018:	f841 2f04 	str.w	r2, [r1, #4]!
 800601c:	4298      	cmp	r0, r3
 800601e:	d8f9      	bhi.n	8006014 <__lshift+0xc8>
 8006020:	e7ea      	b.n	8005ff8 <__lshift+0xac>
 8006022:	bf00      	nop
 8006024:	08008f87 	.word	0x08008f87
 8006028:	08008f98 	.word	0x08008f98

0800602c <__mcmp>:
 800602c:	b530      	push	{r4, r5, lr}
 800602e:	6902      	ldr	r2, [r0, #16]
 8006030:	690c      	ldr	r4, [r1, #16]
 8006032:	1b12      	subs	r2, r2, r4
 8006034:	d10e      	bne.n	8006054 <__mcmp+0x28>
 8006036:	f100 0314 	add.w	r3, r0, #20
 800603a:	3114      	adds	r1, #20
 800603c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006040:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006044:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800604c:	42a5      	cmp	r5, r4
 800604e:	d003      	beq.n	8006058 <__mcmp+0x2c>
 8006050:	d305      	bcc.n	800605e <__mcmp+0x32>
 8006052:	2201      	movs	r2, #1
 8006054:	4610      	mov	r0, r2
 8006056:	bd30      	pop	{r4, r5, pc}
 8006058:	4283      	cmp	r3, r0
 800605a:	d3f3      	bcc.n	8006044 <__mcmp+0x18>
 800605c:	e7fa      	b.n	8006054 <__mcmp+0x28>
 800605e:	f04f 32ff 	mov.w	r2, #4294967295
 8006062:	e7f7      	b.n	8006054 <__mcmp+0x28>

08006064 <__mdiff>:
 8006064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	460c      	mov	r4, r1
 800606a:	4606      	mov	r6, r0
 800606c:	4611      	mov	r1, r2
 800606e:	4620      	mov	r0, r4
 8006070:	4690      	mov	r8, r2
 8006072:	f7ff ffdb 	bl	800602c <__mcmp>
 8006076:	1e05      	subs	r5, r0, #0
 8006078:	d110      	bne.n	800609c <__mdiff+0x38>
 800607a:	4629      	mov	r1, r5
 800607c:	4630      	mov	r0, r6
 800607e:	f7ff fd53 	bl	8005b28 <_Balloc>
 8006082:	b930      	cbnz	r0, 8006092 <__mdiff+0x2e>
 8006084:	4b3a      	ldr	r3, [pc, #232]	; (8006170 <__mdiff+0x10c>)
 8006086:	4602      	mov	r2, r0
 8006088:	f240 2132 	movw	r1, #562	; 0x232
 800608c:	4839      	ldr	r0, [pc, #228]	; (8006174 <__mdiff+0x110>)
 800608e:	f000 fb31 	bl	80066f4 <__assert_func>
 8006092:	2301      	movs	r3, #1
 8006094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609c:	bfa4      	itt	ge
 800609e:	4643      	movge	r3, r8
 80060a0:	46a0      	movge	r8, r4
 80060a2:	4630      	mov	r0, r6
 80060a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060a8:	bfa6      	itte	ge
 80060aa:	461c      	movge	r4, r3
 80060ac:	2500      	movge	r5, #0
 80060ae:	2501      	movlt	r5, #1
 80060b0:	f7ff fd3a 	bl	8005b28 <_Balloc>
 80060b4:	b920      	cbnz	r0, 80060c0 <__mdiff+0x5c>
 80060b6:	4b2e      	ldr	r3, [pc, #184]	; (8006170 <__mdiff+0x10c>)
 80060b8:	4602      	mov	r2, r0
 80060ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060be:	e7e5      	b.n	800608c <__mdiff+0x28>
 80060c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060c4:	6926      	ldr	r6, [r4, #16]
 80060c6:	60c5      	str	r5, [r0, #12]
 80060c8:	f104 0914 	add.w	r9, r4, #20
 80060cc:	f108 0514 	add.w	r5, r8, #20
 80060d0:	f100 0e14 	add.w	lr, r0, #20
 80060d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80060d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80060dc:	f108 0210 	add.w	r2, r8, #16
 80060e0:	46f2      	mov	sl, lr
 80060e2:	2100      	movs	r1, #0
 80060e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80060e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80060ec:	fa1f f883 	uxth.w	r8, r3
 80060f0:	fa11 f18b 	uxtah	r1, r1, fp
 80060f4:	0c1b      	lsrs	r3, r3, #16
 80060f6:	eba1 0808 	sub.w	r8, r1, r8
 80060fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80060fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006102:	fa1f f888 	uxth.w	r8, r8
 8006106:	1419      	asrs	r1, r3, #16
 8006108:	454e      	cmp	r6, r9
 800610a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800610e:	f84a 3b04 	str.w	r3, [sl], #4
 8006112:	d8e7      	bhi.n	80060e4 <__mdiff+0x80>
 8006114:	1b33      	subs	r3, r6, r4
 8006116:	3b15      	subs	r3, #21
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	3304      	adds	r3, #4
 800611e:	3415      	adds	r4, #21
 8006120:	42a6      	cmp	r6, r4
 8006122:	bf38      	it	cc
 8006124:	2304      	movcc	r3, #4
 8006126:	441d      	add	r5, r3
 8006128:	4473      	add	r3, lr
 800612a:	469e      	mov	lr, r3
 800612c:	462e      	mov	r6, r5
 800612e:	4566      	cmp	r6, ip
 8006130:	d30e      	bcc.n	8006150 <__mdiff+0xec>
 8006132:	f10c 0203 	add.w	r2, ip, #3
 8006136:	1b52      	subs	r2, r2, r5
 8006138:	f022 0203 	bic.w	r2, r2, #3
 800613c:	3d03      	subs	r5, #3
 800613e:	45ac      	cmp	ip, r5
 8006140:	bf38      	it	cc
 8006142:	2200      	movcc	r2, #0
 8006144:	441a      	add	r2, r3
 8006146:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800614a:	b17b      	cbz	r3, 800616c <__mdiff+0x108>
 800614c:	6107      	str	r7, [r0, #16]
 800614e:	e7a3      	b.n	8006098 <__mdiff+0x34>
 8006150:	f856 8b04 	ldr.w	r8, [r6], #4
 8006154:	fa11 f288 	uxtah	r2, r1, r8
 8006158:	1414      	asrs	r4, r2, #16
 800615a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800615e:	b292      	uxth	r2, r2
 8006160:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006164:	f84e 2b04 	str.w	r2, [lr], #4
 8006168:	1421      	asrs	r1, r4, #16
 800616a:	e7e0      	b.n	800612e <__mdiff+0xca>
 800616c:	3f01      	subs	r7, #1
 800616e:	e7ea      	b.n	8006146 <__mdiff+0xe2>
 8006170:	08008f87 	.word	0x08008f87
 8006174:	08008f98 	.word	0x08008f98

08006178 <__d2b>:
 8006178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800617c:	4689      	mov	r9, r1
 800617e:	2101      	movs	r1, #1
 8006180:	ec57 6b10 	vmov	r6, r7, d0
 8006184:	4690      	mov	r8, r2
 8006186:	f7ff fccf 	bl	8005b28 <_Balloc>
 800618a:	4604      	mov	r4, r0
 800618c:	b930      	cbnz	r0, 800619c <__d2b+0x24>
 800618e:	4602      	mov	r2, r0
 8006190:	4b25      	ldr	r3, [pc, #148]	; (8006228 <__d2b+0xb0>)
 8006192:	4826      	ldr	r0, [pc, #152]	; (800622c <__d2b+0xb4>)
 8006194:	f240 310a 	movw	r1, #778	; 0x30a
 8006198:	f000 faac 	bl	80066f4 <__assert_func>
 800619c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80061a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061a4:	bb35      	cbnz	r5, 80061f4 <__d2b+0x7c>
 80061a6:	2e00      	cmp	r6, #0
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	d028      	beq.n	80061fe <__d2b+0x86>
 80061ac:	4668      	mov	r0, sp
 80061ae:	9600      	str	r6, [sp, #0]
 80061b0:	f7ff fd82 	bl	8005cb8 <__lo0bits>
 80061b4:	9900      	ldr	r1, [sp, #0]
 80061b6:	b300      	cbz	r0, 80061fa <__d2b+0x82>
 80061b8:	9a01      	ldr	r2, [sp, #4]
 80061ba:	f1c0 0320 	rsb	r3, r0, #32
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	430b      	orrs	r3, r1
 80061c4:	40c2      	lsrs	r2, r0
 80061c6:	6163      	str	r3, [r4, #20]
 80061c8:	9201      	str	r2, [sp, #4]
 80061ca:	9b01      	ldr	r3, [sp, #4]
 80061cc:	61a3      	str	r3, [r4, #24]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bf14      	ite	ne
 80061d2:	2202      	movne	r2, #2
 80061d4:	2201      	moveq	r2, #1
 80061d6:	6122      	str	r2, [r4, #16]
 80061d8:	b1d5      	cbz	r5, 8006210 <__d2b+0x98>
 80061da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061de:	4405      	add	r5, r0
 80061e0:	f8c9 5000 	str.w	r5, [r9]
 80061e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061e8:	f8c8 0000 	str.w	r0, [r8]
 80061ec:	4620      	mov	r0, r4
 80061ee:	b003      	add	sp, #12
 80061f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061f8:	e7d5      	b.n	80061a6 <__d2b+0x2e>
 80061fa:	6161      	str	r1, [r4, #20]
 80061fc:	e7e5      	b.n	80061ca <__d2b+0x52>
 80061fe:	a801      	add	r0, sp, #4
 8006200:	f7ff fd5a 	bl	8005cb8 <__lo0bits>
 8006204:	9b01      	ldr	r3, [sp, #4]
 8006206:	6163      	str	r3, [r4, #20]
 8006208:	2201      	movs	r2, #1
 800620a:	6122      	str	r2, [r4, #16]
 800620c:	3020      	adds	r0, #32
 800620e:	e7e3      	b.n	80061d8 <__d2b+0x60>
 8006210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006218:	f8c9 0000 	str.w	r0, [r9]
 800621c:	6918      	ldr	r0, [r3, #16]
 800621e:	f7ff fd2b 	bl	8005c78 <__hi0bits>
 8006222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006226:	e7df      	b.n	80061e8 <__d2b+0x70>
 8006228:	08008f87 	.word	0x08008f87
 800622c:	08008f98 	.word	0x08008f98

08006230 <_calloc_r>:
 8006230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006232:	fba1 2402 	umull	r2, r4, r1, r2
 8006236:	b94c      	cbnz	r4, 800624c <_calloc_r+0x1c>
 8006238:	4611      	mov	r1, r2
 800623a:	9201      	str	r2, [sp, #4]
 800623c:	f000 f87a 	bl	8006334 <_malloc_r>
 8006240:	9a01      	ldr	r2, [sp, #4]
 8006242:	4605      	mov	r5, r0
 8006244:	b930      	cbnz	r0, 8006254 <_calloc_r+0x24>
 8006246:	4628      	mov	r0, r5
 8006248:	b003      	add	sp, #12
 800624a:	bd30      	pop	{r4, r5, pc}
 800624c:	220c      	movs	r2, #12
 800624e:	6002      	str	r2, [r0, #0]
 8006250:	2500      	movs	r5, #0
 8006252:	e7f8      	b.n	8006246 <_calloc_r+0x16>
 8006254:	4621      	mov	r1, r4
 8006256:	f7fe f941 	bl	80044dc <memset>
 800625a:	e7f4      	b.n	8006246 <_calloc_r+0x16>

0800625c <_free_r>:
 800625c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800625e:	2900      	cmp	r1, #0
 8006260:	d044      	beq.n	80062ec <_free_r+0x90>
 8006262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006266:	9001      	str	r0, [sp, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f1a1 0404 	sub.w	r4, r1, #4
 800626e:	bfb8      	it	lt
 8006270:	18e4      	addlt	r4, r4, r3
 8006272:	f000 fa9b 	bl	80067ac <__malloc_lock>
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <_free_r+0x94>)
 8006278:	9801      	ldr	r0, [sp, #4]
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	b933      	cbnz	r3, 800628c <_free_r+0x30>
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	6014      	str	r4, [r2, #0]
 8006282:	b003      	add	sp, #12
 8006284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006288:	f000 ba96 	b.w	80067b8 <__malloc_unlock>
 800628c:	42a3      	cmp	r3, r4
 800628e:	d908      	bls.n	80062a2 <_free_r+0x46>
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	1961      	adds	r1, r4, r5
 8006294:	428b      	cmp	r3, r1
 8006296:	bf01      	itttt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	1949      	addeq	r1, r1, r5
 800629e:	6021      	streq	r1, [r4, #0]
 80062a0:	e7ed      	b.n	800627e <_free_r+0x22>
 80062a2:	461a      	mov	r2, r3
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	b10b      	cbz	r3, 80062ac <_free_r+0x50>
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d9fa      	bls.n	80062a2 <_free_r+0x46>
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	1855      	adds	r5, r2, r1
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	d10b      	bne.n	80062cc <_free_r+0x70>
 80062b4:	6824      	ldr	r4, [r4, #0]
 80062b6:	4421      	add	r1, r4
 80062b8:	1854      	adds	r4, r2, r1
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	d1e0      	bne.n	8006282 <_free_r+0x26>
 80062c0:	681c      	ldr	r4, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	6053      	str	r3, [r2, #4]
 80062c6:	4421      	add	r1, r4
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	e7da      	b.n	8006282 <_free_r+0x26>
 80062cc:	d902      	bls.n	80062d4 <_free_r+0x78>
 80062ce:	230c      	movs	r3, #12
 80062d0:	6003      	str	r3, [r0, #0]
 80062d2:	e7d6      	b.n	8006282 <_free_r+0x26>
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	1961      	adds	r1, r4, r5
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf04      	itt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	bf04      	itt	eq
 80062e4:	1949      	addeq	r1, r1, r5
 80062e6:	6021      	streq	r1, [r4, #0]
 80062e8:	6054      	str	r4, [r2, #4]
 80062ea:	e7ca      	b.n	8006282 <_free_r+0x26>
 80062ec:	b003      	add	sp, #12
 80062ee:	bd30      	pop	{r4, r5, pc}
 80062f0:	20000240 	.word	0x20000240

080062f4 <sbrk_aligned>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	4e0e      	ldr	r6, [pc, #56]	; (8006330 <sbrk_aligned+0x3c>)
 80062f8:	460c      	mov	r4, r1
 80062fa:	6831      	ldr	r1, [r6, #0]
 80062fc:	4605      	mov	r5, r0
 80062fe:	b911      	cbnz	r1, 8006306 <sbrk_aligned+0x12>
 8006300:	f000 f9e8 	bl	80066d4 <_sbrk_r>
 8006304:	6030      	str	r0, [r6, #0]
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f000 f9e3 	bl	80066d4 <_sbrk_r>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d00a      	beq.n	8006328 <sbrk_aligned+0x34>
 8006312:	1cc4      	adds	r4, r0, #3
 8006314:	f024 0403 	bic.w	r4, r4, #3
 8006318:	42a0      	cmp	r0, r4
 800631a:	d007      	beq.n	800632c <sbrk_aligned+0x38>
 800631c:	1a21      	subs	r1, r4, r0
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f9d8 	bl	80066d4 <_sbrk_r>
 8006324:	3001      	adds	r0, #1
 8006326:	d101      	bne.n	800632c <sbrk_aligned+0x38>
 8006328:	f04f 34ff 	mov.w	r4, #4294967295
 800632c:	4620      	mov	r0, r4
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	20000244 	.word	0x20000244

08006334 <_malloc_r>:
 8006334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006338:	1ccd      	adds	r5, r1, #3
 800633a:	f025 0503 	bic.w	r5, r5, #3
 800633e:	3508      	adds	r5, #8
 8006340:	2d0c      	cmp	r5, #12
 8006342:	bf38      	it	cc
 8006344:	250c      	movcc	r5, #12
 8006346:	2d00      	cmp	r5, #0
 8006348:	4607      	mov	r7, r0
 800634a:	db01      	blt.n	8006350 <_malloc_r+0x1c>
 800634c:	42a9      	cmp	r1, r5
 800634e:	d905      	bls.n	800635c <_malloc_r+0x28>
 8006350:	230c      	movs	r3, #12
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	2600      	movs	r6, #0
 8006356:	4630      	mov	r0, r6
 8006358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800635c:	4e2e      	ldr	r6, [pc, #184]	; (8006418 <_malloc_r+0xe4>)
 800635e:	f000 fa25 	bl	80067ac <__malloc_lock>
 8006362:	6833      	ldr	r3, [r6, #0]
 8006364:	461c      	mov	r4, r3
 8006366:	bb34      	cbnz	r4, 80063b6 <_malloc_r+0x82>
 8006368:	4629      	mov	r1, r5
 800636a:	4638      	mov	r0, r7
 800636c:	f7ff ffc2 	bl	80062f4 <sbrk_aligned>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	4604      	mov	r4, r0
 8006374:	d14d      	bne.n	8006412 <_malloc_r+0xde>
 8006376:	6834      	ldr	r4, [r6, #0]
 8006378:	4626      	mov	r6, r4
 800637a:	2e00      	cmp	r6, #0
 800637c:	d140      	bne.n	8006400 <_malloc_r+0xcc>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	4631      	mov	r1, r6
 8006382:	4638      	mov	r0, r7
 8006384:	eb04 0803 	add.w	r8, r4, r3
 8006388:	f000 f9a4 	bl	80066d4 <_sbrk_r>
 800638c:	4580      	cmp	r8, r0
 800638e:	d13a      	bne.n	8006406 <_malloc_r+0xd2>
 8006390:	6821      	ldr	r1, [r4, #0]
 8006392:	3503      	adds	r5, #3
 8006394:	1a6d      	subs	r5, r5, r1
 8006396:	f025 0503 	bic.w	r5, r5, #3
 800639a:	3508      	adds	r5, #8
 800639c:	2d0c      	cmp	r5, #12
 800639e:	bf38      	it	cc
 80063a0:	250c      	movcc	r5, #12
 80063a2:	4629      	mov	r1, r5
 80063a4:	4638      	mov	r0, r7
 80063a6:	f7ff ffa5 	bl	80062f4 <sbrk_aligned>
 80063aa:	3001      	adds	r0, #1
 80063ac:	d02b      	beq.n	8006406 <_malloc_r+0xd2>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	442b      	add	r3, r5
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	e00e      	b.n	80063d4 <_malloc_r+0xa0>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	1b52      	subs	r2, r2, r5
 80063ba:	d41e      	bmi.n	80063fa <_malloc_r+0xc6>
 80063bc:	2a0b      	cmp	r2, #11
 80063be:	d916      	bls.n	80063ee <_malloc_r+0xba>
 80063c0:	1961      	adds	r1, r4, r5
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	6025      	str	r5, [r4, #0]
 80063c6:	bf18      	it	ne
 80063c8:	6059      	strne	r1, [r3, #4]
 80063ca:	6863      	ldr	r3, [r4, #4]
 80063cc:	bf08      	it	eq
 80063ce:	6031      	streq	r1, [r6, #0]
 80063d0:	5162      	str	r2, [r4, r5]
 80063d2:	604b      	str	r3, [r1, #4]
 80063d4:	4638      	mov	r0, r7
 80063d6:	f104 060b 	add.w	r6, r4, #11
 80063da:	f000 f9ed 	bl	80067b8 <__malloc_unlock>
 80063de:	f026 0607 	bic.w	r6, r6, #7
 80063e2:	1d23      	adds	r3, r4, #4
 80063e4:	1af2      	subs	r2, r6, r3
 80063e6:	d0b6      	beq.n	8006356 <_malloc_r+0x22>
 80063e8:	1b9b      	subs	r3, r3, r6
 80063ea:	50a3      	str	r3, [r4, r2]
 80063ec:	e7b3      	b.n	8006356 <_malloc_r+0x22>
 80063ee:	6862      	ldr	r2, [r4, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	bf0c      	ite	eq
 80063f4:	6032      	streq	r2, [r6, #0]
 80063f6:	605a      	strne	r2, [r3, #4]
 80063f8:	e7ec      	b.n	80063d4 <_malloc_r+0xa0>
 80063fa:	4623      	mov	r3, r4
 80063fc:	6864      	ldr	r4, [r4, #4]
 80063fe:	e7b2      	b.n	8006366 <_malloc_r+0x32>
 8006400:	4634      	mov	r4, r6
 8006402:	6876      	ldr	r6, [r6, #4]
 8006404:	e7b9      	b.n	800637a <_malloc_r+0x46>
 8006406:	230c      	movs	r3, #12
 8006408:	603b      	str	r3, [r7, #0]
 800640a:	4638      	mov	r0, r7
 800640c:	f000 f9d4 	bl	80067b8 <__malloc_unlock>
 8006410:	e7a1      	b.n	8006356 <_malloc_r+0x22>
 8006412:	6025      	str	r5, [r4, #0]
 8006414:	e7de      	b.n	80063d4 <_malloc_r+0xa0>
 8006416:	bf00      	nop
 8006418:	20000240 	.word	0x20000240

0800641c <__ssputs_r>:
 800641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	688e      	ldr	r6, [r1, #8]
 8006422:	429e      	cmp	r6, r3
 8006424:	4682      	mov	sl, r0
 8006426:	460c      	mov	r4, r1
 8006428:	4690      	mov	r8, r2
 800642a:	461f      	mov	r7, r3
 800642c:	d838      	bhi.n	80064a0 <__ssputs_r+0x84>
 800642e:	898a      	ldrh	r2, [r1, #12]
 8006430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006434:	d032      	beq.n	800649c <__ssputs_r+0x80>
 8006436:	6825      	ldr	r5, [r4, #0]
 8006438:	6909      	ldr	r1, [r1, #16]
 800643a:	eba5 0901 	sub.w	r9, r5, r1
 800643e:	6965      	ldr	r5, [r4, #20]
 8006440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006448:	3301      	adds	r3, #1
 800644a:	444b      	add	r3, r9
 800644c:	106d      	asrs	r5, r5, #1
 800644e:	429d      	cmp	r5, r3
 8006450:	bf38      	it	cc
 8006452:	461d      	movcc	r5, r3
 8006454:	0553      	lsls	r3, r2, #21
 8006456:	d531      	bpl.n	80064bc <__ssputs_r+0xa0>
 8006458:	4629      	mov	r1, r5
 800645a:	f7ff ff6b 	bl	8006334 <_malloc_r>
 800645e:	4606      	mov	r6, r0
 8006460:	b950      	cbnz	r0, 8006478 <__ssputs_r+0x5c>
 8006462:	230c      	movs	r3, #12
 8006464:	f8ca 3000 	str.w	r3, [sl]
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646e:	81a3      	strh	r3, [r4, #12]
 8006470:	f04f 30ff 	mov.w	r0, #4294967295
 8006474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006478:	6921      	ldr	r1, [r4, #16]
 800647a:	464a      	mov	r2, r9
 800647c:	f7ff fb46 	bl	8005b0c <memcpy>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	6126      	str	r6, [r4, #16]
 800648e:	6165      	str	r5, [r4, #20]
 8006490:	444e      	add	r6, r9
 8006492:	eba5 0509 	sub.w	r5, r5, r9
 8006496:	6026      	str	r6, [r4, #0]
 8006498:	60a5      	str	r5, [r4, #8]
 800649a:	463e      	mov	r6, r7
 800649c:	42be      	cmp	r6, r7
 800649e:	d900      	bls.n	80064a2 <__ssputs_r+0x86>
 80064a0:	463e      	mov	r6, r7
 80064a2:	6820      	ldr	r0, [r4, #0]
 80064a4:	4632      	mov	r2, r6
 80064a6:	4641      	mov	r1, r8
 80064a8:	f000 f966 	bl	8006778 <memmove>
 80064ac:	68a3      	ldr	r3, [r4, #8]
 80064ae:	1b9b      	subs	r3, r3, r6
 80064b0:	60a3      	str	r3, [r4, #8]
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	4433      	add	r3, r6
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	2000      	movs	r0, #0
 80064ba:	e7db      	b.n	8006474 <__ssputs_r+0x58>
 80064bc:	462a      	mov	r2, r5
 80064be:	f000 f981 	bl	80067c4 <_realloc_r>
 80064c2:	4606      	mov	r6, r0
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d1e1      	bne.n	800648c <__ssputs_r+0x70>
 80064c8:	6921      	ldr	r1, [r4, #16]
 80064ca:	4650      	mov	r0, sl
 80064cc:	f7ff fec6 	bl	800625c <_free_r>
 80064d0:	e7c7      	b.n	8006462 <__ssputs_r+0x46>
	...

080064d4 <_svfiprintf_r>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	4698      	mov	r8, r3
 80064da:	898b      	ldrh	r3, [r1, #12]
 80064dc:	061b      	lsls	r3, r3, #24
 80064de:	b09d      	sub	sp, #116	; 0x74
 80064e0:	4607      	mov	r7, r0
 80064e2:	460d      	mov	r5, r1
 80064e4:	4614      	mov	r4, r2
 80064e6:	d50e      	bpl.n	8006506 <_svfiprintf_r+0x32>
 80064e8:	690b      	ldr	r3, [r1, #16]
 80064ea:	b963      	cbnz	r3, 8006506 <_svfiprintf_r+0x32>
 80064ec:	2140      	movs	r1, #64	; 0x40
 80064ee:	f7ff ff21 	bl	8006334 <_malloc_r>
 80064f2:	6028      	str	r0, [r5, #0]
 80064f4:	6128      	str	r0, [r5, #16]
 80064f6:	b920      	cbnz	r0, 8006502 <_svfiprintf_r+0x2e>
 80064f8:	230c      	movs	r3, #12
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006500:	e0d1      	b.n	80066a6 <_svfiprintf_r+0x1d2>
 8006502:	2340      	movs	r3, #64	; 0x40
 8006504:	616b      	str	r3, [r5, #20]
 8006506:	2300      	movs	r3, #0
 8006508:	9309      	str	r3, [sp, #36]	; 0x24
 800650a:	2320      	movs	r3, #32
 800650c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006510:	f8cd 800c 	str.w	r8, [sp, #12]
 8006514:	2330      	movs	r3, #48	; 0x30
 8006516:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066c0 <_svfiprintf_r+0x1ec>
 800651a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800651e:	f04f 0901 	mov.w	r9, #1
 8006522:	4623      	mov	r3, r4
 8006524:	469a      	mov	sl, r3
 8006526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800652a:	b10a      	cbz	r2, 8006530 <_svfiprintf_r+0x5c>
 800652c:	2a25      	cmp	r2, #37	; 0x25
 800652e:	d1f9      	bne.n	8006524 <_svfiprintf_r+0x50>
 8006530:	ebba 0b04 	subs.w	fp, sl, r4
 8006534:	d00b      	beq.n	800654e <_svfiprintf_r+0x7a>
 8006536:	465b      	mov	r3, fp
 8006538:	4622      	mov	r2, r4
 800653a:	4629      	mov	r1, r5
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff ff6d 	bl	800641c <__ssputs_r>
 8006542:	3001      	adds	r0, #1
 8006544:	f000 80aa 	beq.w	800669c <_svfiprintf_r+0x1c8>
 8006548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800654a:	445a      	add	r2, fp
 800654c:	9209      	str	r2, [sp, #36]	; 0x24
 800654e:	f89a 3000 	ldrb.w	r3, [sl]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80a2 	beq.w	800669c <_svfiprintf_r+0x1c8>
 8006558:	2300      	movs	r3, #0
 800655a:	f04f 32ff 	mov.w	r2, #4294967295
 800655e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006562:	f10a 0a01 	add.w	sl, sl, #1
 8006566:	9304      	str	r3, [sp, #16]
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800656e:	931a      	str	r3, [sp, #104]	; 0x68
 8006570:	4654      	mov	r4, sl
 8006572:	2205      	movs	r2, #5
 8006574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006578:	4851      	ldr	r0, [pc, #324]	; (80066c0 <_svfiprintf_r+0x1ec>)
 800657a:	f7f9 fe39 	bl	80001f0 <memchr>
 800657e:	9a04      	ldr	r2, [sp, #16]
 8006580:	b9d8      	cbnz	r0, 80065ba <_svfiprintf_r+0xe6>
 8006582:	06d0      	lsls	r0, r2, #27
 8006584:	bf44      	itt	mi
 8006586:	2320      	movmi	r3, #32
 8006588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800658c:	0711      	lsls	r1, r2, #28
 800658e:	bf44      	itt	mi
 8006590:	232b      	movmi	r3, #43	; 0x2b
 8006592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006596:	f89a 3000 	ldrb.w	r3, [sl]
 800659a:	2b2a      	cmp	r3, #42	; 0x2a
 800659c:	d015      	beq.n	80065ca <_svfiprintf_r+0xf6>
 800659e:	9a07      	ldr	r2, [sp, #28]
 80065a0:	4654      	mov	r4, sl
 80065a2:	2000      	movs	r0, #0
 80065a4:	f04f 0c0a 	mov.w	ip, #10
 80065a8:	4621      	mov	r1, r4
 80065aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ae:	3b30      	subs	r3, #48	; 0x30
 80065b0:	2b09      	cmp	r3, #9
 80065b2:	d94e      	bls.n	8006652 <_svfiprintf_r+0x17e>
 80065b4:	b1b0      	cbz	r0, 80065e4 <_svfiprintf_r+0x110>
 80065b6:	9207      	str	r2, [sp, #28]
 80065b8:	e014      	b.n	80065e4 <_svfiprintf_r+0x110>
 80065ba:	eba0 0308 	sub.w	r3, r0, r8
 80065be:	fa09 f303 	lsl.w	r3, r9, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	46a2      	mov	sl, r4
 80065c8:	e7d2      	b.n	8006570 <_svfiprintf_r+0x9c>
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	1d19      	adds	r1, r3, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	9103      	str	r1, [sp, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bfbb      	ittet	lt
 80065d6:	425b      	neglt	r3, r3
 80065d8:	f042 0202 	orrlt.w	r2, r2, #2
 80065dc:	9307      	strge	r3, [sp, #28]
 80065de:	9307      	strlt	r3, [sp, #28]
 80065e0:	bfb8      	it	lt
 80065e2:	9204      	strlt	r2, [sp, #16]
 80065e4:	7823      	ldrb	r3, [r4, #0]
 80065e6:	2b2e      	cmp	r3, #46	; 0x2e
 80065e8:	d10c      	bne.n	8006604 <_svfiprintf_r+0x130>
 80065ea:	7863      	ldrb	r3, [r4, #1]
 80065ec:	2b2a      	cmp	r3, #42	; 0x2a
 80065ee:	d135      	bne.n	800665c <_svfiprintf_r+0x188>
 80065f0:	9b03      	ldr	r3, [sp, #12]
 80065f2:	1d1a      	adds	r2, r3, #4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	9203      	str	r2, [sp, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfb8      	it	lt
 80065fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006600:	3402      	adds	r4, #2
 8006602:	9305      	str	r3, [sp, #20]
 8006604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066d0 <_svfiprintf_r+0x1fc>
 8006608:	7821      	ldrb	r1, [r4, #0]
 800660a:	2203      	movs	r2, #3
 800660c:	4650      	mov	r0, sl
 800660e:	f7f9 fdef 	bl	80001f0 <memchr>
 8006612:	b140      	cbz	r0, 8006626 <_svfiprintf_r+0x152>
 8006614:	2340      	movs	r3, #64	; 0x40
 8006616:	eba0 000a 	sub.w	r0, r0, sl
 800661a:	fa03 f000 	lsl.w	r0, r3, r0
 800661e:	9b04      	ldr	r3, [sp, #16]
 8006620:	4303      	orrs	r3, r0
 8006622:	3401      	adds	r4, #1
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662a:	4826      	ldr	r0, [pc, #152]	; (80066c4 <_svfiprintf_r+0x1f0>)
 800662c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006630:	2206      	movs	r2, #6
 8006632:	f7f9 fddd 	bl	80001f0 <memchr>
 8006636:	2800      	cmp	r0, #0
 8006638:	d038      	beq.n	80066ac <_svfiprintf_r+0x1d8>
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <_svfiprintf_r+0x1f4>)
 800663c:	bb1b      	cbnz	r3, 8006686 <_svfiprintf_r+0x1b2>
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	3307      	adds	r3, #7
 8006642:	f023 0307 	bic.w	r3, r3, #7
 8006646:	3308      	adds	r3, #8
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664c:	4433      	add	r3, r6
 800664e:	9309      	str	r3, [sp, #36]	; 0x24
 8006650:	e767      	b.n	8006522 <_svfiprintf_r+0x4e>
 8006652:	fb0c 3202 	mla	r2, ip, r2, r3
 8006656:	460c      	mov	r4, r1
 8006658:	2001      	movs	r0, #1
 800665a:	e7a5      	b.n	80065a8 <_svfiprintf_r+0xd4>
 800665c:	2300      	movs	r3, #0
 800665e:	3401      	adds	r4, #1
 8006660:	9305      	str	r3, [sp, #20]
 8006662:	4619      	mov	r1, r3
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4620      	mov	r0, r4
 800666a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800666e:	3a30      	subs	r2, #48	; 0x30
 8006670:	2a09      	cmp	r2, #9
 8006672:	d903      	bls.n	800667c <_svfiprintf_r+0x1a8>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0c5      	beq.n	8006604 <_svfiprintf_r+0x130>
 8006678:	9105      	str	r1, [sp, #20]
 800667a:	e7c3      	b.n	8006604 <_svfiprintf_r+0x130>
 800667c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006680:	4604      	mov	r4, r0
 8006682:	2301      	movs	r3, #1
 8006684:	e7f0      	b.n	8006668 <_svfiprintf_r+0x194>
 8006686:	ab03      	add	r3, sp, #12
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	462a      	mov	r2, r5
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <_svfiprintf_r+0x1f8>)
 800668e:	a904      	add	r1, sp, #16
 8006690:	4638      	mov	r0, r7
 8006692:	f7fd ffcb 	bl	800462c <_printf_float>
 8006696:	1c42      	adds	r2, r0, #1
 8006698:	4606      	mov	r6, r0
 800669a:	d1d6      	bne.n	800664a <_svfiprintf_r+0x176>
 800669c:	89ab      	ldrh	r3, [r5, #12]
 800669e:	065b      	lsls	r3, r3, #25
 80066a0:	f53f af2c 	bmi.w	80064fc <_svfiprintf_r+0x28>
 80066a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066a6:	b01d      	add	sp, #116	; 0x74
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ac:	ab03      	add	r3, sp, #12
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	462a      	mov	r2, r5
 80066b2:	4b06      	ldr	r3, [pc, #24]	; (80066cc <_svfiprintf_r+0x1f8>)
 80066b4:	a904      	add	r1, sp, #16
 80066b6:	4638      	mov	r0, r7
 80066b8:	f7fe fa5c 	bl	8004b74 <_printf_i>
 80066bc:	e7eb      	b.n	8006696 <_svfiprintf_r+0x1c2>
 80066be:	bf00      	nop
 80066c0:	080090f4 	.word	0x080090f4
 80066c4:	080090fe 	.word	0x080090fe
 80066c8:	0800462d 	.word	0x0800462d
 80066cc:	0800641d 	.word	0x0800641d
 80066d0:	080090fa 	.word	0x080090fa

080066d4 <_sbrk_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d06      	ldr	r5, [pc, #24]	; (80066f0 <_sbrk_r+0x1c>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f002 f930 	bl	8008944 <_sbrk>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_sbrk_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_sbrk_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20000248 	.word	0x20000248

080066f4 <__assert_func>:
 80066f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066f6:	4614      	mov	r4, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <__assert_func+0x2c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4605      	mov	r5, r0
 8006700:	68d8      	ldr	r0, [r3, #12]
 8006702:	b14c      	cbz	r4, 8006718 <__assert_func+0x24>
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <__assert_func+0x30>)
 8006706:	9100      	str	r1, [sp, #0]
 8006708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800670c:	4906      	ldr	r1, [pc, #24]	; (8006728 <__assert_func+0x34>)
 800670e:	462b      	mov	r3, r5
 8006710:	f000 f80e 	bl	8006730 <fiprintf>
 8006714:	f000 faac 	bl	8006c70 <abort>
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <__assert_func+0x38>)
 800671a:	461c      	mov	r4, r3
 800671c:	e7f3      	b.n	8006706 <__assert_func+0x12>
 800671e:	bf00      	nop
 8006720:	20000020 	.word	0x20000020
 8006724:	08009105 	.word	0x08009105
 8006728:	08009112 	.word	0x08009112
 800672c:	08009140 	.word	0x08009140

08006730 <fiprintf>:
 8006730:	b40e      	push	{r1, r2, r3}
 8006732:	b503      	push	{r0, r1, lr}
 8006734:	4601      	mov	r1, r0
 8006736:	ab03      	add	r3, sp, #12
 8006738:	4805      	ldr	r0, [pc, #20]	; (8006750 <fiprintf+0x20>)
 800673a:	f853 2b04 	ldr.w	r2, [r3], #4
 800673e:	6800      	ldr	r0, [r0, #0]
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	f000 f897 	bl	8006874 <_vfiprintf_r>
 8006746:	b002      	add	sp, #8
 8006748:	f85d eb04 	ldr.w	lr, [sp], #4
 800674c:	b003      	add	sp, #12
 800674e:	4770      	bx	lr
 8006750:	20000020 	.word	0x20000020

08006754 <__ascii_mbtowc>:
 8006754:	b082      	sub	sp, #8
 8006756:	b901      	cbnz	r1, 800675a <__ascii_mbtowc+0x6>
 8006758:	a901      	add	r1, sp, #4
 800675a:	b142      	cbz	r2, 800676e <__ascii_mbtowc+0x1a>
 800675c:	b14b      	cbz	r3, 8006772 <__ascii_mbtowc+0x1e>
 800675e:	7813      	ldrb	r3, [r2, #0]
 8006760:	600b      	str	r3, [r1, #0]
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	1e10      	subs	r0, r2, #0
 8006766:	bf18      	it	ne
 8006768:	2001      	movne	r0, #1
 800676a:	b002      	add	sp, #8
 800676c:	4770      	bx	lr
 800676e:	4610      	mov	r0, r2
 8006770:	e7fb      	b.n	800676a <__ascii_mbtowc+0x16>
 8006772:	f06f 0001 	mvn.w	r0, #1
 8006776:	e7f8      	b.n	800676a <__ascii_mbtowc+0x16>

08006778 <memmove>:
 8006778:	4288      	cmp	r0, r1
 800677a:	b510      	push	{r4, lr}
 800677c:	eb01 0402 	add.w	r4, r1, r2
 8006780:	d902      	bls.n	8006788 <memmove+0x10>
 8006782:	4284      	cmp	r4, r0
 8006784:	4623      	mov	r3, r4
 8006786:	d807      	bhi.n	8006798 <memmove+0x20>
 8006788:	1e43      	subs	r3, r0, #1
 800678a:	42a1      	cmp	r1, r4
 800678c:	d008      	beq.n	80067a0 <memmove+0x28>
 800678e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006796:	e7f8      	b.n	800678a <memmove+0x12>
 8006798:	4402      	add	r2, r0
 800679a:	4601      	mov	r1, r0
 800679c:	428a      	cmp	r2, r1
 800679e:	d100      	bne.n	80067a2 <memmove+0x2a>
 80067a0:	bd10      	pop	{r4, pc}
 80067a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067aa:	e7f7      	b.n	800679c <memmove+0x24>

080067ac <__malloc_lock>:
 80067ac:	4801      	ldr	r0, [pc, #4]	; (80067b4 <__malloc_lock+0x8>)
 80067ae:	f000 bc1f 	b.w	8006ff0 <__retarget_lock_acquire_recursive>
 80067b2:	bf00      	nop
 80067b4:	2000024c 	.word	0x2000024c

080067b8 <__malloc_unlock>:
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <__malloc_unlock+0x8>)
 80067ba:	f000 bc1a 	b.w	8006ff2 <__retarget_lock_release_recursive>
 80067be:	bf00      	nop
 80067c0:	2000024c 	.word	0x2000024c

080067c4 <_realloc_r>:
 80067c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c8:	4680      	mov	r8, r0
 80067ca:	4614      	mov	r4, r2
 80067cc:	460e      	mov	r6, r1
 80067ce:	b921      	cbnz	r1, 80067da <_realloc_r+0x16>
 80067d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067d4:	4611      	mov	r1, r2
 80067d6:	f7ff bdad 	b.w	8006334 <_malloc_r>
 80067da:	b92a      	cbnz	r2, 80067e8 <_realloc_r+0x24>
 80067dc:	f7ff fd3e 	bl	800625c <_free_r>
 80067e0:	4625      	mov	r5, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e8:	f000 fc6a 	bl	80070c0 <_malloc_usable_size_r>
 80067ec:	4284      	cmp	r4, r0
 80067ee:	4607      	mov	r7, r0
 80067f0:	d802      	bhi.n	80067f8 <_realloc_r+0x34>
 80067f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067f6:	d812      	bhi.n	800681e <_realloc_r+0x5a>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4640      	mov	r0, r8
 80067fc:	f7ff fd9a 	bl	8006334 <_malloc_r>
 8006800:	4605      	mov	r5, r0
 8006802:	2800      	cmp	r0, #0
 8006804:	d0ed      	beq.n	80067e2 <_realloc_r+0x1e>
 8006806:	42bc      	cmp	r4, r7
 8006808:	4622      	mov	r2, r4
 800680a:	4631      	mov	r1, r6
 800680c:	bf28      	it	cs
 800680e:	463a      	movcs	r2, r7
 8006810:	f7ff f97c 	bl	8005b0c <memcpy>
 8006814:	4631      	mov	r1, r6
 8006816:	4640      	mov	r0, r8
 8006818:	f7ff fd20 	bl	800625c <_free_r>
 800681c:	e7e1      	b.n	80067e2 <_realloc_r+0x1e>
 800681e:	4635      	mov	r5, r6
 8006820:	e7df      	b.n	80067e2 <_realloc_r+0x1e>

08006822 <__sfputc_r>:
 8006822:	6893      	ldr	r3, [r2, #8]
 8006824:	3b01      	subs	r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	b410      	push	{r4}
 800682a:	6093      	str	r3, [r2, #8]
 800682c:	da08      	bge.n	8006840 <__sfputc_r+0x1e>
 800682e:	6994      	ldr	r4, [r2, #24]
 8006830:	42a3      	cmp	r3, r4
 8006832:	db01      	blt.n	8006838 <__sfputc_r+0x16>
 8006834:	290a      	cmp	r1, #10
 8006836:	d103      	bne.n	8006840 <__sfputc_r+0x1e>
 8006838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800683c:	f000 b94a 	b.w	8006ad4 <__swbuf_r>
 8006840:	6813      	ldr	r3, [r2, #0]
 8006842:	1c58      	adds	r0, r3, #1
 8006844:	6010      	str	r0, [r2, #0]
 8006846:	7019      	strb	r1, [r3, #0]
 8006848:	4608      	mov	r0, r1
 800684a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800684e:	4770      	bx	lr

08006850 <__sfputs_r>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	4606      	mov	r6, r0
 8006854:	460f      	mov	r7, r1
 8006856:	4614      	mov	r4, r2
 8006858:	18d5      	adds	r5, r2, r3
 800685a:	42ac      	cmp	r4, r5
 800685c:	d101      	bne.n	8006862 <__sfputs_r+0x12>
 800685e:	2000      	movs	r0, #0
 8006860:	e007      	b.n	8006872 <__sfputs_r+0x22>
 8006862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006866:	463a      	mov	r2, r7
 8006868:	4630      	mov	r0, r6
 800686a:	f7ff ffda 	bl	8006822 <__sfputc_r>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d1f3      	bne.n	800685a <__sfputs_r+0xa>
 8006872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006874 <_vfiprintf_r>:
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	460d      	mov	r5, r1
 800687a:	b09d      	sub	sp, #116	; 0x74
 800687c:	4614      	mov	r4, r2
 800687e:	4698      	mov	r8, r3
 8006880:	4606      	mov	r6, r0
 8006882:	b118      	cbz	r0, 800688c <_vfiprintf_r+0x18>
 8006884:	6983      	ldr	r3, [r0, #24]
 8006886:	b90b      	cbnz	r3, 800688c <_vfiprintf_r+0x18>
 8006888:	f000 fb14 	bl	8006eb4 <__sinit>
 800688c:	4b89      	ldr	r3, [pc, #548]	; (8006ab4 <_vfiprintf_r+0x240>)
 800688e:	429d      	cmp	r5, r3
 8006890:	d11b      	bne.n	80068ca <_vfiprintf_r+0x56>
 8006892:	6875      	ldr	r5, [r6, #4]
 8006894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006896:	07d9      	lsls	r1, r3, #31
 8006898:	d405      	bmi.n	80068a6 <_vfiprintf_r+0x32>
 800689a:	89ab      	ldrh	r3, [r5, #12]
 800689c:	059a      	lsls	r2, r3, #22
 800689e:	d402      	bmi.n	80068a6 <_vfiprintf_r+0x32>
 80068a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068a2:	f000 fba5 	bl	8006ff0 <__retarget_lock_acquire_recursive>
 80068a6:	89ab      	ldrh	r3, [r5, #12]
 80068a8:	071b      	lsls	r3, r3, #28
 80068aa:	d501      	bpl.n	80068b0 <_vfiprintf_r+0x3c>
 80068ac:	692b      	ldr	r3, [r5, #16]
 80068ae:	b9eb      	cbnz	r3, 80068ec <_vfiprintf_r+0x78>
 80068b0:	4629      	mov	r1, r5
 80068b2:	4630      	mov	r0, r6
 80068b4:	f000 f96e 	bl	8006b94 <__swsetup_r>
 80068b8:	b1c0      	cbz	r0, 80068ec <_vfiprintf_r+0x78>
 80068ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068bc:	07dc      	lsls	r4, r3, #31
 80068be:	d50e      	bpl.n	80068de <_vfiprintf_r+0x6a>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	b01d      	add	sp, #116	; 0x74
 80068c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ca:	4b7b      	ldr	r3, [pc, #492]	; (8006ab8 <_vfiprintf_r+0x244>)
 80068cc:	429d      	cmp	r5, r3
 80068ce:	d101      	bne.n	80068d4 <_vfiprintf_r+0x60>
 80068d0:	68b5      	ldr	r5, [r6, #8]
 80068d2:	e7df      	b.n	8006894 <_vfiprintf_r+0x20>
 80068d4:	4b79      	ldr	r3, [pc, #484]	; (8006abc <_vfiprintf_r+0x248>)
 80068d6:	429d      	cmp	r5, r3
 80068d8:	bf08      	it	eq
 80068da:	68f5      	ldreq	r5, [r6, #12]
 80068dc:	e7da      	b.n	8006894 <_vfiprintf_r+0x20>
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	0598      	lsls	r0, r3, #22
 80068e2:	d4ed      	bmi.n	80068c0 <_vfiprintf_r+0x4c>
 80068e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e6:	f000 fb84 	bl	8006ff2 <__retarget_lock_release_recursive>
 80068ea:	e7e9      	b.n	80068c0 <_vfiprintf_r+0x4c>
 80068ec:	2300      	movs	r3, #0
 80068ee:	9309      	str	r3, [sp, #36]	; 0x24
 80068f0:	2320      	movs	r3, #32
 80068f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80068fa:	2330      	movs	r3, #48	; 0x30
 80068fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ac0 <_vfiprintf_r+0x24c>
 8006900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006904:	f04f 0901 	mov.w	r9, #1
 8006908:	4623      	mov	r3, r4
 800690a:	469a      	mov	sl, r3
 800690c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006910:	b10a      	cbz	r2, 8006916 <_vfiprintf_r+0xa2>
 8006912:	2a25      	cmp	r2, #37	; 0x25
 8006914:	d1f9      	bne.n	800690a <_vfiprintf_r+0x96>
 8006916:	ebba 0b04 	subs.w	fp, sl, r4
 800691a:	d00b      	beq.n	8006934 <_vfiprintf_r+0xc0>
 800691c:	465b      	mov	r3, fp
 800691e:	4622      	mov	r2, r4
 8006920:	4629      	mov	r1, r5
 8006922:	4630      	mov	r0, r6
 8006924:	f7ff ff94 	bl	8006850 <__sfputs_r>
 8006928:	3001      	adds	r0, #1
 800692a:	f000 80aa 	beq.w	8006a82 <_vfiprintf_r+0x20e>
 800692e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006930:	445a      	add	r2, fp
 8006932:	9209      	str	r2, [sp, #36]	; 0x24
 8006934:	f89a 3000 	ldrb.w	r3, [sl]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80a2 	beq.w	8006a82 <_vfiprintf_r+0x20e>
 800693e:	2300      	movs	r3, #0
 8006940:	f04f 32ff 	mov.w	r2, #4294967295
 8006944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006948:	f10a 0a01 	add.w	sl, sl, #1
 800694c:	9304      	str	r3, [sp, #16]
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006954:	931a      	str	r3, [sp, #104]	; 0x68
 8006956:	4654      	mov	r4, sl
 8006958:	2205      	movs	r2, #5
 800695a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695e:	4858      	ldr	r0, [pc, #352]	; (8006ac0 <_vfiprintf_r+0x24c>)
 8006960:	f7f9 fc46 	bl	80001f0 <memchr>
 8006964:	9a04      	ldr	r2, [sp, #16]
 8006966:	b9d8      	cbnz	r0, 80069a0 <_vfiprintf_r+0x12c>
 8006968:	06d1      	lsls	r1, r2, #27
 800696a:	bf44      	itt	mi
 800696c:	2320      	movmi	r3, #32
 800696e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006972:	0713      	lsls	r3, r2, #28
 8006974:	bf44      	itt	mi
 8006976:	232b      	movmi	r3, #43	; 0x2b
 8006978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800697c:	f89a 3000 	ldrb.w	r3, [sl]
 8006980:	2b2a      	cmp	r3, #42	; 0x2a
 8006982:	d015      	beq.n	80069b0 <_vfiprintf_r+0x13c>
 8006984:	9a07      	ldr	r2, [sp, #28]
 8006986:	4654      	mov	r4, sl
 8006988:	2000      	movs	r0, #0
 800698a:	f04f 0c0a 	mov.w	ip, #10
 800698e:	4621      	mov	r1, r4
 8006990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006994:	3b30      	subs	r3, #48	; 0x30
 8006996:	2b09      	cmp	r3, #9
 8006998:	d94e      	bls.n	8006a38 <_vfiprintf_r+0x1c4>
 800699a:	b1b0      	cbz	r0, 80069ca <_vfiprintf_r+0x156>
 800699c:	9207      	str	r2, [sp, #28]
 800699e:	e014      	b.n	80069ca <_vfiprintf_r+0x156>
 80069a0:	eba0 0308 	sub.w	r3, r0, r8
 80069a4:	fa09 f303 	lsl.w	r3, r9, r3
 80069a8:	4313      	orrs	r3, r2
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	46a2      	mov	sl, r4
 80069ae:	e7d2      	b.n	8006956 <_vfiprintf_r+0xe2>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	1d19      	adds	r1, r3, #4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	9103      	str	r1, [sp, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bfbb      	ittet	lt
 80069bc:	425b      	neglt	r3, r3
 80069be:	f042 0202 	orrlt.w	r2, r2, #2
 80069c2:	9307      	strge	r3, [sp, #28]
 80069c4:	9307      	strlt	r3, [sp, #28]
 80069c6:	bfb8      	it	lt
 80069c8:	9204      	strlt	r2, [sp, #16]
 80069ca:	7823      	ldrb	r3, [r4, #0]
 80069cc:	2b2e      	cmp	r3, #46	; 0x2e
 80069ce:	d10c      	bne.n	80069ea <_vfiprintf_r+0x176>
 80069d0:	7863      	ldrb	r3, [r4, #1]
 80069d2:	2b2a      	cmp	r3, #42	; 0x2a
 80069d4:	d135      	bne.n	8006a42 <_vfiprintf_r+0x1ce>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	1d1a      	adds	r2, r3, #4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	9203      	str	r2, [sp, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bfb8      	it	lt
 80069e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80069e6:	3402      	adds	r4, #2
 80069e8:	9305      	str	r3, [sp, #20]
 80069ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ad0 <_vfiprintf_r+0x25c>
 80069ee:	7821      	ldrb	r1, [r4, #0]
 80069f0:	2203      	movs	r2, #3
 80069f2:	4650      	mov	r0, sl
 80069f4:	f7f9 fbfc 	bl	80001f0 <memchr>
 80069f8:	b140      	cbz	r0, 8006a0c <_vfiprintf_r+0x198>
 80069fa:	2340      	movs	r3, #64	; 0x40
 80069fc:	eba0 000a 	sub.w	r0, r0, sl
 8006a00:	fa03 f000 	lsl.w	r0, r3, r0
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	4303      	orrs	r3, r0
 8006a08:	3401      	adds	r4, #1
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a10:	482c      	ldr	r0, [pc, #176]	; (8006ac4 <_vfiprintf_r+0x250>)
 8006a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a16:	2206      	movs	r2, #6
 8006a18:	f7f9 fbea 	bl	80001f0 <memchr>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d03f      	beq.n	8006aa0 <_vfiprintf_r+0x22c>
 8006a20:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <_vfiprintf_r+0x254>)
 8006a22:	bb1b      	cbnz	r3, 8006a6c <_vfiprintf_r+0x1f8>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	3307      	adds	r3, #7
 8006a28:	f023 0307 	bic.w	r3, r3, #7
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a32:	443b      	add	r3, r7
 8006a34:	9309      	str	r3, [sp, #36]	; 0x24
 8006a36:	e767      	b.n	8006908 <_vfiprintf_r+0x94>
 8006a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	2001      	movs	r0, #1
 8006a40:	e7a5      	b.n	800698e <_vfiprintf_r+0x11a>
 8006a42:	2300      	movs	r3, #0
 8006a44:	3401      	adds	r4, #1
 8006a46:	9305      	str	r3, [sp, #20]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f04f 0c0a 	mov.w	ip, #10
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a54:	3a30      	subs	r2, #48	; 0x30
 8006a56:	2a09      	cmp	r2, #9
 8006a58:	d903      	bls.n	8006a62 <_vfiprintf_r+0x1ee>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0c5      	beq.n	80069ea <_vfiprintf_r+0x176>
 8006a5e:	9105      	str	r1, [sp, #20]
 8006a60:	e7c3      	b.n	80069ea <_vfiprintf_r+0x176>
 8006a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a66:	4604      	mov	r4, r0
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e7f0      	b.n	8006a4e <_vfiprintf_r+0x1da>
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	462a      	mov	r2, r5
 8006a72:	4b16      	ldr	r3, [pc, #88]	; (8006acc <_vfiprintf_r+0x258>)
 8006a74:	a904      	add	r1, sp, #16
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7fd fdd8 	bl	800462c <_printf_float>
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	1c78      	adds	r0, r7, #1
 8006a80:	d1d6      	bne.n	8006a30 <_vfiprintf_r+0x1bc>
 8006a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a84:	07d9      	lsls	r1, r3, #31
 8006a86:	d405      	bmi.n	8006a94 <_vfiprintf_r+0x220>
 8006a88:	89ab      	ldrh	r3, [r5, #12]
 8006a8a:	059a      	lsls	r2, r3, #22
 8006a8c:	d402      	bmi.n	8006a94 <_vfiprintf_r+0x220>
 8006a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a90:	f000 faaf 	bl	8006ff2 <__retarget_lock_release_recursive>
 8006a94:	89ab      	ldrh	r3, [r5, #12]
 8006a96:	065b      	lsls	r3, r3, #25
 8006a98:	f53f af12 	bmi.w	80068c0 <_vfiprintf_r+0x4c>
 8006a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a9e:	e711      	b.n	80068c4 <_vfiprintf_r+0x50>
 8006aa0:	ab03      	add	r3, sp, #12
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	462a      	mov	r2, r5
 8006aa6:	4b09      	ldr	r3, [pc, #36]	; (8006acc <_vfiprintf_r+0x258>)
 8006aa8:	a904      	add	r1, sp, #16
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7fe f862 	bl	8004b74 <_printf_i>
 8006ab0:	e7e4      	b.n	8006a7c <_vfiprintf_r+0x208>
 8006ab2:	bf00      	nop
 8006ab4:	0800926c 	.word	0x0800926c
 8006ab8:	0800928c 	.word	0x0800928c
 8006abc:	0800924c 	.word	0x0800924c
 8006ac0:	080090f4 	.word	0x080090f4
 8006ac4:	080090fe 	.word	0x080090fe
 8006ac8:	0800462d 	.word	0x0800462d
 8006acc:	08006851 	.word	0x08006851
 8006ad0:	080090fa 	.word	0x080090fa

08006ad4 <__swbuf_r>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	460e      	mov	r6, r1
 8006ad8:	4614      	mov	r4, r2
 8006ada:	4605      	mov	r5, r0
 8006adc:	b118      	cbz	r0, 8006ae6 <__swbuf_r+0x12>
 8006ade:	6983      	ldr	r3, [r0, #24]
 8006ae0:	b90b      	cbnz	r3, 8006ae6 <__swbuf_r+0x12>
 8006ae2:	f000 f9e7 	bl	8006eb4 <__sinit>
 8006ae6:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <__swbuf_r+0x98>)
 8006ae8:	429c      	cmp	r4, r3
 8006aea:	d12b      	bne.n	8006b44 <__swbuf_r+0x70>
 8006aec:	686c      	ldr	r4, [r5, #4]
 8006aee:	69a3      	ldr	r3, [r4, #24]
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	071a      	lsls	r2, r3, #28
 8006af6:	d52f      	bpl.n	8006b58 <__swbuf_r+0x84>
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	b36b      	cbz	r3, 8006b58 <__swbuf_r+0x84>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	1ac0      	subs	r0, r0, r3
 8006b02:	6963      	ldr	r3, [r4, #20]
 8006b04:	b2f6      	uxtb	r6, r6
 8006b06:	4283      	cmp	r3, r0
 8006b08:	4637      	mov	r7, r6
 8006b0a:	dc04      	bgt.n	8006b16 <__swbuf_r+0x42>
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f93c 	bl	8006d8c <_fflush_r>
 8006b14:	bb30      	cbnz	r0, 8006b64 <__swbuf_r+0x90>
 8006b16:	68a3      	ldr	r3, [r4, #8]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	60a3      	str	r3, [r4, #8]
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	6022      	str	r2, [r4, #0]
 8006b22:	701e      	strb	r6, [r3, #0]
 8006b24:	6963      	ldr	r3, [r4, #20]
 8006b26:	3001      	adds	r0, #1
 8006b28:	4283      	cmp	r3, r0
 8006b2a:	d004      	beq.n	8006b36 <__swbuf_r+0x62>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	07db      	lsls	r3, r3, #31
 8006b30:	d506      	bpl.n	8006b40 <__swbuf_r+0x6c>
 8006b32:	2e0a      	cmp	r6, #10
 8006b34:	d104      	bne.n	8006b40 <__swbuf_r+0x6c>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f927 	bl	8006d8c <_fflush_r>
 8006b3e:	b988      	cbnz	r0, 8006b64 <__swbuf_r+0x90>
 8006b40:	4638      	mov	r0, r7
 8006b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <__swbuf_r+0x9c>)
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d101      	bne.n	8006b4e <__swbuf_r+0x7a>
 8006b4a:	68ac      	ldr	r4, [r5, #8]
 8006b4c:	e7cf      	b.n	8006aee <__swbuf_r+0x1a>
 8006b4e:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <__swbuf_r+0xa0>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	bf08      	it	eq
 8006b54:	68ec      	ldreq	r4, [r5, #12]
 8006b56:	e7ca      	b.n	8006aee <__swbuf_r+0x1a>
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 f81a 	bl	8006b94 <__swsetup_r>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d0cb      	beq.n	8006afc <__swbuf_r+0x28>
 8006b64:	f04f 37ff 	mov.w	r7, #4294967295
 8006b68:	e7ea      	b.n	8006b40 <__swbuf_r+0x6c>
 8006b6a:	bf00      	nop
 8006b6c:	0800926c 	.word	0x0800926c
 8006b70:	0800928c 	.word	0x0800928c
 8006b74:	0800924c 	.word	0x0800924c

08006b78 <__ascii_wctomb>:
 8006b78:	b149      	cbz	r1, 8006b8e <__ascii_wctomb+0x16>
 8006b7a:	2aff      	cmp	r2, #255	; 0xff
 8006b7c:	bf85      	ittet	hi
 8006b7e:	238a      	movhi	r3, #138	; 0x8a
 8006b80:	6003      	strhi	r3, [r0, #0]
 8006b82:	700a      	strbls	r2, [r1, #0]
 8006b84:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b88:	bf98      	it	ls
 8006b8a:	2001      	movls	r0, #1
 8006b8c:	4770      	bx	lr
 8006b8e:	4608      	mov	r0, r1
 8006b90:	4770      	bx	lr
	...

08006b94 <__swsetup_r>:
 8006b94:	4b32      	ldr	r3, [pc, #200]	; (8006c60 <__swsetup_r+0xcc>)
 8006b96:	b570      	push	{r4, r5, r6, lr}
 8006b98:	681d      	ldr	r5, [r3, #0]
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	b125      	cbz	r5, 8006baa <__swsetup_r+0x16>
 8006ba0:	69ab      	ldr	r3, [r5, #24]
 8006ba2:	b913      	cbnz	r3, 8006baa <__swsetup_r+0x16>
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f985 	bl	8006eb4 <__sinit>
 8006baa:	4b2e      	ldr	r3, [pc, #184]	; (8006c64 <__swsetup_r+0xd0>)
 8006bac:	429c      	cmp	r4, r3
 8006bae:	d10f      	bne.n	8006bd0 <__swsetup_r+0x3c>
 8006bb0:	686c      	ldr	r4, [r5, #4]
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bb8:	0719      	lsls	r1, r3, #28
 8006bba:	d42c      	bmi.n	8006c16 <__swsetup_r+0x82>
 8006bbc:	06dd      	lsls	r5, r3, #27
 8006bbe:	d411      	bmi.n	8006be4 <__swsetup_r+0x50>
 8006bc0:	2309      	movs	r3, #9
 8006bc2:	6033      	str	r3, [r6, #0]
 8006bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	f04f 30ff 	mov.w	r0, #4294967295
 8006bce:	e03e      	b.n	8006c4e <__swsetup_r+0xba>
 8006bd0:	4b25      	ldr	r3, [pc, #148]	; (8006c68 <__swsetup_r+0xd4>)
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d101      	bne.n	8006bda <__swsetup_r+0x46>
 8006bd6:	68ac      	ldr	r4, [r5, #8]
 8006bd8:	e7eb      	b.n	8006bb2 <__swsetup_r+0x1e>
 8006bda:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <__swsetup_r+0xd8>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	bf08      	it	eq
 8006be0:	68ec      	ldreq	r4, [r5, #12]
 8006be2:	e7e6      	b.n	8006bb2 <__swsetup_r+0x1e>
 8006be4:	0758      	lsls	r0, r3, #29
 8006be6:	d512      	bpl.n	8006c0e <__swsetup_r+0x7a>
 8006be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bea:	b141      	cbz	r1, 8006bfe <__swsetup_r+0x6a>
 8006bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf0:	4299      	cmp	r1, r3
 8006bf2:	d002      	beq.n	8006bfa <__swsetup_r+0x66>
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7ff fb31 	bl	800625c <_free_r>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	2300      	movs	r3, #0
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f043 0308 	orr.w	r3, r3, #8
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	b94b      	cbnz	r3, 8006c2e <__swsetup_r+0x9a>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c24:	d003      	beq.n	8006c2e <__swsetup_r+0x9a>
 8006c26:	4621      	mov	r1, r4
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 fa09 	bl	8007040 <__smakebuf_r>
 8006c2e:	89a0      	ldrh	r0, [r4, #12]
 8006c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c34:	f010 0301 	ands.w	r3, r0, #1
 8006c38:	d00a      	beq.n	8006c50 <__swsetup_r+0xbc>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	6963      	ldr	r3, [r4, #20]
 8006c40:	425b      	negs	r3, r3
 8006c42:	61a3      	str	r3, [r4, #24]
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	b943      	cbnz	r3, 8006c5a <__swsetup_r+0xc6>
 8006c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c4c:	d1ba      	bne.n	8006bc4 <__swsetup_r+0x30>
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	0781      	lsls	r1, r0, #30
 8006c52:	bf58      	it	pl
 8006c54:	6963      	ldrpl	r3, [r4, #20]
 8006c56:	60a3      	str	r3, [r4, #8]
 8006c58:	e7f4      	b.n	8006c44 <__swsetup_r+0xb0>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e7f7      	b.n	8006c4e <__swsetup_r+0xba>
 8006c5e:	bf00      	nop
 8006c60:	20000020 	.word	0x20000020
 8006c64:	0800926c 	.word	0x0800926c
 8006c68:	0800928c 	.word	0x0800928c
 8006c6c:	0800924c 	.word	0x0800924c

08006c70 <abort>:
 8006c70:	b508      	push	{r3, lr}
 8006c72:	2006      	movs	r0, #6
 8006c74:	f000 fa54 	bl	8007120 <raise>
 8006c78:	2001      	movs	r0, #1
 8006c7a:	f001 fe79 	bl	8008970 <_exit>
	...

08006c80 <__sflush_r>:
 8006c80:	898a      	ldrh	r2, [r1, #12]
 8006c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c86:	4605      	mov	r5, r0
 8006c88:	0710      	lsls	r0, r2, #28
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	d458      	bmi.n	8006d40 <__sflush_r+0xc0>
 8006c8e:	684b      	ldr	r3, [r1, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc05      	bgt.n	8006ca0 <__sflush_r+0x20>
 8006c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dc02      	bgt.n	8006ca0 <__sflush_r+0x20>
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ca2:	2e00      	cmp	r6, #0
 8006ca4:	d0f9      	beq.n	8006c9a <__sflush_r+0x1a>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cac:	682f      	ldr	r7, [r5, #0]
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	d032      	beq.n	8006d18 <__sflush_r+0x98>
 8006cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	075a      	lsls	r2, r3, #29
 8006cb8:	d505      	bpl.n	8006cc6 <__sflush_r+0x46>
 8006cba:	6863      	ldr	r3, [r4, #4]
 8006cbc:	1ac0      	subs	r0, r0, r3
 8006cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cc0:	b10b      	cbz	r3, 8006cc6 <__sflush_r+0x46>
 8006cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cc4:	1ac0      	subs	r0, r0, r3
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ccc:	6a21      	ldr	r1, [r4, #32]
 8006cce:	4628      	mov	r0, r5
 8006cd0:	47b0      	blx	r6
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	d106      	bne.n	8006ce6 <__sflush_r+0x66>
 8006cd8:	6829      	ldr	r1, [r5, #0]
 8006cda:	291d      	cmp	r1, #29
 8006cdc:	d82c      	bhi.n	8006d38 <__sflush_r+0xb8>
 8006cde:	4a2a      	ldr	r2, [pc, #168]	; (8006d88 <__sflush_r+0x108>)
 8006ce0:	40ca      	lsrs	r2, r1
 8006ce2:	07d6      	lsls	r6, r2, #31
 8006ce4:	d528      	bpl.n	8006d38 <__sflush_r+0xb8>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	6062      	str	r2, [r4, #4]
 8006cea:	04d9      	lsls	r1, r3, #19
 8006cec:	6922      	ldr	r2, [r4, #16]
 8006cee:	6022      	str	r2, [r4, #0]
 8006cf0:	d504      	bpl.n	8006cfc <__sflush_r+0x7c>
 8006cf2:	1c42      	adds	r2, r0, #1
 8006cf4:	d101      	bne.n	8006cfa <__sflush_r+0x7a>
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	b903      	cbnz	r3, 8006cfc <__sflush_r+0x7c>
 8006cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8006cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cfe:	602f      	str	r7, [r5, #0]
 8006d00:	2900      	cmp	r1, #0
 8006d02:	d0ca      	beq.n	8006c9a <__sflush_r+0x1a>
 8006d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	d002      	beq.n	8006d12 <__sflush_r+0x92>
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f7ff faa5 	bl	800625c <_free_r>
 8006d12:	2000      	movs	r0, #0
 8006d14:	6360      	str	r0, [r4, #52]	; 0x34
 8006d16:	e7c1      	b.n	8006c9c <__sflush_r+0x1c>
 8006d18:	6a21      	ldr	r1, [r4, #32]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b0      	blx	r6
 8006d20:	1c41      	adds	r1, r0, #1
 8006d22:	d1c7      	bne.n	8006cb4 <__sflush_r+0x34>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0c4      	beq.n	8006cb4 <__sflush_r+0x34>
 8006d2a:	2b1d      	cmp	r3, #29
 8006d2c:	d001      	beq.n	8006d32 <__sflush_r+0xb2>
 8006d2e:	2b16      	cmp	r3, #22
 8006d30:	d101      	bne.n	8006d36 <__sflush_r+0xb6>
 8006d32:	602f      	str	r7, [r5, #0]
 8006d34:	e7b1      	b.n	8006c9a <__sflush_r+0x1a>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	e7ad      	b.n	8006c9c <__sflush_r+0x1c>
 8006d40:	690f      	ldr	r7, [r1, #16]
 8006d42:	2f00      	cmp	r7, #0
 8006d44:	d0a9      	beq.n	8006c9a <__sflush_r+0x1a>
 8006d46:	0793      	lsls	r3, r2, #30
 8006d48:	680e      	ldr	r6, [r1, #0]
 8006d4a:	bf08      	it	eq
 8006d4c:	694b      	ldreq	r3, [r1, #20]
 8006d4e:	600f      	str	r7, [r1, #0]
 8006d50:	bf18      	it	ne
 8006d52:	2300      	movne	r3, #0
 8006d54:	eba6 0807 	sub.w	r8, r6, r7
 8006d58:	608b      	str	r3, [r1, #8]
 8006d5a:	f1b8 0f00 	cmp.w	r8, #0
 8006d5e:	dd9c      	ble.n	8006c9a <__sflush_r+0x1a>
 8006d60:	6a21      	ldr	r1, [r4, #32]
 8006d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d64:	4643      	mov	r3, r8
 8006d66:	463a      	mov	r2, r7
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b0      	blx	r6
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	dc06      	bgt.n	8006d7e <__sflush_r+0xfe>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d76:	81a3      	strh	r3, [r4, #12]
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	e78e      	b.n	8006c9c <__sflush_r+0x1c>
 8006d7e:	4407      	add	r7, r0
 8006d80:	eba8 0800 	sub.w	r8, r8, r0
 8006d84:	e7e9      	b.n	8006d5a <__sflush_r+0xda>
 8006d86:	bf00      	nop
 8006d88:	20400001 	.word	0x20400001

08006d8c <_fflush_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	690b      	ldr	r3, [r1, #16]
 8006d90:	4605      	mov	r5, r0
 8006d92:	460c      	mov	r4, r1
 8006d94:	b913      	cbnz	r3, 8006d9c <_fflush_r+0x10>
 8006d96:	2500      	movs	r5, #0
 8006d98:	4628      	mov	r0, r5
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	b118      	cbz	r0, 8006da6 <_fflush_r+0x1a>
 8006d9e:	6983      	ldr	r3, [r0, #24]
 8006da0:	b90b      	cbnz	r3, 8006da6 <_fflush_r+0x1a>
 8006da2:	f000 f887 	bl	8006eb4 <__sinit>
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <_fflush_r+0x6c>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	d11b      	bne.n	8006de4 <_fflush_r+0x58>
 8006dac:	686c      	ldr	r4, [r5, #4]
 8006dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0ef      	beq.n	8006d96 <_fflush_r+0xa>
 8006db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006db8:	07d0      	lsls	r0, r2, #31
 8006dba:	d404      	bmi.n	8006dc6 <_fflush_r+0x3a>
 8006dbc:	0599      	lsls	r1, r3, #22
 8006dbe:	d402      	bmi.n	8006dc6 <_fflush_r+0x3a>
 8006dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc2:	f000 f915 	bl	8006ff0 <__retarget_lock_acquire_recursive>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	4621      	mov	r1, r4
 8006dca:	f7ff ff59 	bl	8006c80 <__sflush_r>
 8006dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dd0:	07da      	lsls	r2, r3, #31
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	d4e0      	bmi.n	8006d98 <_fflush_r+0xc>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	059b      	lsls	r3, r3, #22
 8006dda:	d4dd      	bmi.n	8006d98 <_fflush_r+0xc>
 8006ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dde:	f000 f908 	bl	8006ff2 <__retarget_lock_release_recursive>
 8006de2:	e7d9      	b.n	8006d98 <_fflush_r+0xc>
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <_fflush_r+0x70>)
 8006de6:	429c      	cmp	r4, r3
 8006de8:	d101      	bne.n	8006dee <_fflush_r+0x62>
 8006dea:	68ac      	ldr	r4, [r5, #8]
 8006dec:	e7df      	b.n	8006dae <_fflush_r+0x22>
 8006dee:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <_fflush_r+0x74>)
 8006df0:	429c      	cmp	r4, r3
 8006df2:	bf08      	it	eq
 8006df4:	68ec      	ldreq	r4, [r5, #12]
 8006df6:	e7da      	b.n	8006dae <_fflush_r+0x22>
 8006df8:	0800926c 	.word	0x0800926c
 8006dfc:	0800928c 	.word	0x0800928c
 8006e00:	0800924c 	.word	0x0800924c

08006e04 <std>:
 8006e04:	2300      	movs	r3, #0
 8006e06:	b510      	push	{r4, lr}
 8006e08:	4604      	mov	r4, r0
 8006e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e12:	6083      	str	r3, [r0, #8]
 8006e14:	8181      	strh	r1, [r0, #12]
 8006e16:	6643      	str	r3, [r0, #100]	; 0x64
 8006e18:	81c2      	strh	r2, [r0, #14]
 8006e1a:	6183      	str	r3, [r0, #24]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	2208      	movs	r2, #8
 8006e20:	305c      	adds	r0, #92	; 0x5c
 8006e22:	f7fd fb5b 	bl	80044dc <memset>
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <std+0x38>)
 8006e28:	6263      	str	r3, [r4, #36]	; 0x24
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <std+0x3c>)
 8006e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e2e:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <std+0x40>)
 8006e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <std+0x44>)
 8006e34:	6224      	str	r4, [r4, #32]
 8006e36:	6323      	str	r3, [r4, #48]	; 0x30
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08007159 	.word	0x08007159
 8006e40:	0800717b 	.word	0x0800717b
 8006e44:	080071b3 	.word	0x080071b3
 8006e48:	080071d7 	.word	0x080071d7

08006e4c <_cleanup_r>:
 8006e4c:	4901      	ldr	r1, [pc, #4]	; (8006e54 <_cleanup_r+0x8>)
 8006e4e:	f000 b8af 	b.w	8006fb0 <_fwalk_reent>
 8006e52:	bf00      	nop
 8006e54:	08006d8d 	.word	0x08006d8d

08006e58 <__sfmoreglue>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	2268      	movs	r2, #104	; 0x68
 8006e5c:	1e4d      	subs	r5, r1, #1
 8006e5e:	4355      	muls	r5, r2
 8006e60:	460e      	mov	r6, r1
 8006e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e66:	f7ff fa65 	bl	8006334 <_malloc_r>
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	b140      	cbz	r0, 8006e80 <__sfmoreglue+0x28>
 8006e6e:	2100      	movs	r1, #0
 8006e70:	e9c0 1600 	strd	r1, r6, [r0]
 8006e74:	300c      	adds	r0, #12
 8006e76:	60a0      	str	r0, [r4, #8]
 8006e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e7c:	f7fd fb2e 	bl	80044dc <memset>
 8006e80:	4620      	mov	r0, r4
 8006e82:	bd70      	pop	{r4, r5, r6, pc}

08006e84 <__sfp_lock_acquire>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__sfp_lock_acquire+0x8>)
 8006e86:	f000 b8b3 	b.w	8006ff0 <__retarget_lock_acquire_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	2000024d 	.word	0x2000024d

08006e90 <__sfp_lock_release>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__sfp_lock_release+0x8>)
 8006e92:	f000 b8ae 	b.w	8006ff2 <__retarget_lock_release_recursive>
 8006e96:	bf00      	nop
 8006e98:	2000024d 	.word	0x2000024d

08006e9c <__sinit_lock_acquire>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <__sinit_lock_acquire+0x8>)
 8006e9e:	f000 b8a7 	b.w	8006ff0 <__retarget_lock_acquire_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	2000024e 	.word	0x2000024e

08006ea8 <__sinit_lock_release>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	; (8006eb0 <__sinit_lock_release+0x8>)
 8006eaa:	f000 b8a2 	b.w	8006ff2 <__retarget_lock_release_recursive>
 8006eae:	bf00      	nop
 8006eb0:	2000024e 	.word	0x2000024e

08006eb4 <__sinit>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	f7ff fff0 	bl	8006e9c <__sinit_lock_acquire>
 8006ebc:	69a3      	ldr	r3, [r4, #24]
 8006ebe:	b11b      	cbz	r3, 8006ec8 <__sinit+0x14>
 8006ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec4:	f7ff bff0 	b.w	8006ea8 <__sinit_lock_release>
 8006ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <__sinit+0x68>)
 8006ed0:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <__sinit+0x6c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ed6:	42a3      	cmp	r3, r4
 8006ed8:	bf04      	itt	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	61a3      	streq	r3, [r4, #24]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 f820 	bl	8006f24 <__sfp>
 8006ee4:	6060      	str	r0, [r4, #4]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 f81c 	bl	8006f24 <__sfp>
 8006eec:	60a0      	str	r0, [r4, #8]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f818 	bl	8006f24 <__sfp>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	60e0      	str	r0, [r4, #12]
 8006ef8:	2104      	movs	r1, #4
 8006efa:	6860      	ldr	r0, [r4, #4]
 8006efc:	f7ff ff82 	bl	8006e04 <std>
 8006f00:	68a0      	ldr	r0, [r4, #8]
 8006f02:	2201      	movs	r2, #1
 8006f04:	2109      	movs	r1, #9
 8006f06:	f7ff ff7d 	bl	8006e04 <std>
 8006f0a:	68e0      	ldr	r0, [r4, #12]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	2112      	movs	r1, #18
 8006f10:	f7ff ff78 	bl	8006e04 <std>
 8006f14:	2301      	movs	r3, #1
 8006f16:	61a3      	str	r3, [r4, #24]
 8006f18:	e7d2      	b.n	8006ec0 <__sinit+0xc>
 8006f1a:	bf00      	nop
 8006f1c:	08008ed0 	.word	0x08008ed0
 8006f20:	08006e4d 	.word	0x08006e4d

08006f24 <__sfp>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	4607      	mov	r7, r0
 8006f28:	f7ff ffac 	bl	8006e84 <__sfp_lock_acquire>
 8006f2c:	4b1e      	ldr	r3, [pc, #120]	; (8006fa8 <__sfp+0x84>)
 8006f2e:	681e      	ldr	r6, [r3, #0]
 8006f30:	69b3      	ldr	r3, [r6, #24]
 8006f32:	b913      	cbnz	r3, 8006f3a <__sfp+0x16>
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7ff ffbd 	bl	8006eb4 <__sinit>
 8006f3a:	3648      	adds	r6, #72	; 0x48
 8006f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	d503      	bpl.n	8006f4c <__sfp+0x28>
 8006f44:	6833      	ldr	r3, [r6, #0]
 8006f46:	b30b      	cbz	r3, 8006f8c <__sfp+0x68>
 8006f48:	6836      	ldr	r6, [r6, #0]
 8006f4a:	e7f7      	b.n	8006f3c <__sfp+0x18>
 8006f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f50:	b9d5      	cbnz	r5, 8006f88 <__sfp+0x64>
 8006f52:	4b16      	ldr	r3, [pc, #88]	; (8006fac <__sfp+0x88>)
 8006f54:	60e3      	str	r3, [r4, #12]
 8006f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f5c:	f000 f847 	bl	8006fee <__retarget_lock_init_recursive>
 8006f60:	f7ff ff96 	bl	8006e90 <__sfp_lock_release>
 8006f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f6c:	6025      	str	r5, [r4, #0]
 8006f6e:	61a5      	str	r5, [r4, #24]
 8006f70:	2208      	movs	r2, #8
 8006f72:	4629      	mov	r1, r5
 8006f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f78:	f7fd fab0 	bl	80044dc <memset>
 8006f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f84:	4620      	mov	r0, r4
 8006f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f88:	3468      	adds	r4, #104	; 0x68
 8006f8a:	e7d9      	b.n	8006f40 <__sfp+0x1c>
 8006f8c:	2104      	movs	r1, #4
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f7ff ff62 	bl	8006e58 <__sfmoreglue>
 8006f94:	4604      	mov	r4, r0
 8006f96:	6030      	str	r0, [r6, #0]
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d1d5      	bne.n	8006f48 <__sfp+0x24>
 8006f9c:	f7ff ff78 	bl	8006e90 <__sfp_lock_release>
 8006fa0:	230c      	movs	r3, #12
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	e7ee      	b.n	8006f84 <__sfp+0x60>
 8006fa6:	bf00      	nop
 8006fa8:	08008ed0 	.word	0x08008ed0
 8006fac:	ffff0001 	.word	0xffff0001

08006fb0 <_fwalk_reent>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	4688      	mov	r8, r1
 8006fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fbc:	2700      	movs	r7, #0
 8006fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8006fc6:	d505      	bpl.n	8006fd4 <_fwalk_reent+0x24>
 8006fc8:	6824      	ldr	r4, [r4, #0]
 8006fca:	2c00      	cmp	r4, #0
 8006fcc:	d1f7      	bne.n	8006fbe <_fwalk_reent+0xe>
 8006fce:	4638      	mov	r0, r7
 8006fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd4:	89ab      	ldrh	r3, [r5, #12]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d907      	bls.n	8006fea <_fwalk_reent+0x3a>
 8006fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	d003      	beq.n	8006fea <_fwalk_reent+0x3a>
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	47c0      	blx	r8
 8006fe8:	4307      	orrs	r7, r0
 8006fea:	3568      	adds	r5, #104	; 0x68
 8006fec:	e7e9      	b.n	8006fc2 <_fwalk_reent+0x12>

08006fee <__retarget_lock_init_recursive>:
 8006fee:	4770      	bx	lr

08006ff0 <__retarget_lock_acquire_recursive>:
 8006ff0:	4770      	bx	lr

08006ff2 <__retarget_lock_release_recursive>:
 8006ff2:	4770      	bx	lr

08006ff4 <__swhatbuf_r>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	460e      	mov	r6, r1
 8006ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	b096      	sub	sp, #88	; 0x58
 8007000:	4614      	mov	r4, r2
 8007002:	461d      	mov	r5, r3
 8007004:	da08      	bge.n	8007018 <__swhatbuf_r+0x24>
 8007006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	061a      	lsls	r2, r3, #24
 8007010:	d410      	bmi.n	8007034 <__swhatbuf_r+0x40>
 8007012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007016:	e00e      	b.n	8007036 <__swhatbuf_r+0x42>
 8007018:	466a      	mov	r2, sp
 800701a:	f000 f903 	bl	8007224 <_fstat_r>
 800701e:	2800      	cmp	r0, #0
 8007020:	dbf1      	blt.n	8007006 <__swhatbuf_r+0x12>
 8007022:	9a01      	ldr	r2, [sp, #4]
 8007024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800702c:	425a      	negs	r2, r3
 800702e:	415a      	adcs	r2, r3
 8007030:	602a      	str	r2, [r5, #0]
 8007032:	e7ee      	b.n	8007012 <__swhatbuf_r+0x1e>
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	2000      	movs	r0, #0
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	b016      	add	sp, #88	; 0x58
 800703c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007040 <__smakebuf_r>:
 8007040:	898b      	ldrh	r3, [r1, #12]
 8007042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007044:	079d      	lsls	r5, r3, #30
 8007046:	4606      	mov	r6, r0
 8007048:	460c      	mov	r4, r1
 800704a:	d507      	bpl.n	800705c <__smakebuf_r+0x1c>
 800704c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	2301      	movs	r3, #1
 8007056:	6163      	str	r3, [r4, #20]
 8007058:	b002      	add	sp, #8
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	ab01      	add	r3, sp, #4
 800705e:	466a      	mov	r2, sp
 8007060:	f7ff ffc8 	bl	8006ff4 <__swhatbuf_r>
 8007064:	9900      	ldr	r1, [sp, #0]
 8007066:	4605      	mov	r5, r0
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff f963 	bl	8006334 <_malloc_r>
 800706e:	b948      	cbnz	r0, 8007084 <__smakebuf_r+0x44>
 8007070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007074:	059a      	lsls	r2, r3, #22
 8007076:	d4ef      	bmi.n	8007058 <__smakebuf_r+0x18>
 8007078:	f023 0303 	bic.w	r3, r3, #3
 800707c:	f043 0302 	orr.w	r3, r3, #2
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	e7e3      	b.n	800704c <__smakebuf_r+0xc>
 8007084:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <__smakebuf_r+0x7c>)
 8007086:	62b3      	str	r3, [r6, #40]	; 0x28
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	6020      	str	r0, [r4, #0]
 800708c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	9b00      	ldr	r3, [sp, #0]
 8007094:	6163      	str	r3, [r4, #20]
 8007096:	9b01      	ldr	r3, [sp, #4]
 8007098:	6120      	str	r0, [r4, #16]
 800709a:	b15b      	cbz	r3, 80070b4 <__smakebuf_r+0x74>
 800709c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a0:	4630      	mov	r0, r6
 80070a2:	f000 f8d1 	bl	8007248 <_isatty_r>
 80070a6:	b128      	cbz	r0, 80070b4 <__smakebuf_r+0x74>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f023 0303 	bic.w	r3, r3, #3
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	89a0      	ldrh	r0, [r4, #12]
 80070b6:	4305      	orrs	r5, r0
 80070b8:	81a5      	strh	r5, [r4, #12]
 80070ba:	e7cd      	b.n	8007058 <__smakebuf_r+0x18>
 80070bc:	08006e4d 	.word	0x08006e4d

080070c0 <_malloc_usable_size_r>:
 80070c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c4:	1f18      	subs	r0, r3, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfbc      	itt	lt
 80070ca:	580b      	ldrlt	r3, [r1, r0]
 80070cc:	18c0      	addlt	r0, r0, r3
 80070ce:	4770      	bx	lr

080070d0 <_raise_r>:
 80070d0:	291f      	cmp	r1, #31
 80070d2:	b538      	push	{r3, r4, r5, lr}
 80070d4:	4604      	mov	r4, r0
 80070d6:	460d      	mov	r5, r1
 80070d8:	d904      	bls.n	80070e4 <_raise_r+0x14>
 80070da:	2316      	movs	r3, #22
 80070dc:	6003      	str	r3, [r0, #0]
 80070de:	f04f 30ff 	mov.w	r0, #4294967295
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070e6:	b112      	cbz	r2, 80070ee <_raise_r+0x1e>
 80070e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070ec:	b94b      	cbnz	r3, 8007102 <_raise_r+0x32>
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 f830 	bl	8007154 <_getpid_r>
 80070f4:	462a      	mov	r2, r5
 80070f6:	4601      	mov	r1, r0
 80070f8:	4620      	mov	r0, r4
 80070fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070fe:	f000 b817 	b.w	8007130 <_kill_r>
 8007102:	2b01      	cmp	r3, #1
 8007104:	d00a      	beq.n	800711c <_raise_r+0x4c>
 8007106:	1c59      	adds	r1, r3, #1
 8007108:	d103      	bne.n	8007112 <_raise_r+0x42>
 800710a:	2316      	movs	r3, #22
 800710c:	6003      	str	r3, [r0, #0]
 800710e:	2001      	movs	r0, #1
 8007110:	e7e7      	b.n	80070e2 <_raise_r+0x12>
 8007112:	2400      	movs	r4, #0
 8007114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007118:	4628      	mov	r0, r5
 800711a:	4798      	blx	r3
 800711c:	2000      	movs	r0, #0
 800711e:	e7e0      	b.n	80070e2 <_raise_r+0x12>

08007120 <raise>:
 8007120:	4b02      	ldr	r3, [pc, #8]	; (800712c <raise+0xc>)
 8007122:	4601      	mov	r1, r0
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	f7ff bfd3 	b.w	80070d0 <_raise_r>
 800712a:	bf00      	nop
 800712c:	20000020 	.word	0x20000020

08007130 <_kill_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d07      	ldr	r5, [pc, #28]	; (8007150 <_kill_r+0x20>)
 8007134:	2300      	movs	r3, #0
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	4611      	mov	r1, r2
 800713c:	602b      	str	r3, [r5, #0]
 800713e:	f001 fbe9 	bl	8008914 <_kill>
 8007142:	1c43      	adds	r3, r0, #1
 8007144:	d102      	bne.n	800714c <_kill_r+0x1c>
 8007146:	682b      	ldr	r3, [r5, #0]
 8007148:	b103      	cbz	r3, 800714c <_kill_r+0x1c>
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	bf00      	nop
 8007150:	20000248 	.word	0x20000248

08007154 <_getpid_r>:
 8007154:	f001 bbce 	b.w	80088f4 <_getpid>

08007158 <__sread>:
 8007158:	b510      	push	{r4, lr}
 800715a:	460c      	mov	r4, r1
 800715c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007160:	f000 f894 	bl	800728c <_read_r>
 8007164:	2800      	cmp	r0, #0
 8007166:	bfab      	itete	ge
 8007168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800716a:	89a3      	ldrhlt	r3, [r4, #12]
 800716c:	181b      	addge	r3, r3, r0
 800716e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007172:	bfac      	ite	ge
 8007174:	6563      	strge	r3, [r4, #84]	; 0x54
 8007176:	81a3      	strhlt	r3, [r4, #12]
 8007178:	bd10      	pop	{r4, pc}

0800717a <__swrite>:
 800717a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800717e:	461f      	mov	r7, r3
 8007180:	898b      	ldrh	r3, [r1, #12]
 8007182:	05db      	lsls	r3, r3, #23
 8007184:	4605      	mov	r5, r0
 8007186:	460c      	mov	r4, r1
 8007188:	4616      	mov	r6, r2
 800718a:	d505      	bpl.n	8007198 <__swrite+0x1e>
 800718c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007190:	2302      	movs	r3, #2
 8007192:	2200      	movs	r2, #0
 8007194:	f000 f868 	bl	8007268 <_lseek_r>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800719e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	4632      	mov	r2, r6
 80071a6:	463b      	mov	r3, r7
 80071a8:	4628      	mov	r0, r5
 80071aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ae:	f000 b817 	b.w	80071e0 <_write_r>

080071b2 <__sseek>:
 80071b2:	b510      	push	{r4, lr}
 80071b4:	460c      	mov	r4, r1
 80071b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ba:	f000 f855 	bl	8007268 <_lseek_r>
 80071be:	1c43      	adds	r3, r0, #1
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	bf15      	itete	ne
 80071c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80071c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071ce:	81a3      	strheq	r3, [r4, #12]
 80071d0:	bf18      	it	ne
 80071d2:	81a3      	strhne	r3, [r4, #12]
 80071d4:	bd10      	pop	{r4, pc}

080071d6 <__sclose>:
 80071d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071da:	f000 b813 	b.w	8007204 <_close_r>
	...

080071e0 <_write_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d07      	ldr	r5, [pc, #28]	; (8007200 <_write_r+0x20>)
 80071e4:	4604      	mov	r4, r0
 80071e6:	4608      	mov	r0, r1
 80071e8:	4611      	mov	r1, r2
 80071ea:	2200      	movs	r2, #0
 80071ec:	602a      	str	r2, [r5, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f001 fbb6 	bl	8008960 <_write>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_write_r+0x1e>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_write_r+0x1e>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20000248 	.word	0x20000248

08007204 <_close_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d06      	ldr	r5, [pc, #24]	; (8007220 <_close_r+0x1c>)
 8007208:	2300      	movs	r3, #0
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	602b      	str	r3, [r5, #0]
 8007210:	f001 fb60 	bl	80088d4 <_close>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d102      	bne.n	800721e <_close_r+0x1a>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	b103      	cbz	r3, 800721e <_close_r+0x1a>
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	20000248 	.word	0x20000248

08007224 <_fstat_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d07      	ldr	r5, [pc, #28]	; (8007244 <_fstat_r+0x20>)
 8007228:	2300      	movs	r3, #0
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	f001 fb57 	bl	80088e4 <_fstat>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	d102      	bne.n	8007240 <_fstat_r+0x1c>
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	b103      	cbz	r3, 8007240 <_fstat_r+0x1c>
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	bd38      	pop	{r3, r4, r5, pc}
 8007242:	bf00      	nop
 8007244:	20000248 	.word	0x20000248

08007248 <_isatty_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d06      	ldr	r5, [pc, #24]	; (8007264 <_isatty_r+0x1c>)
 800724c:	2300      	movs	r3, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	602b      	str	r3, [r5, #0]
 8007254:	f001 fb56 	bl	8008904 <_isatty>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_isatty_r+0x1a>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_isatty_r+0x1a>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	20000248 	.word	0x20000248

08007268 <_lseek_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d07      	ldr	r5, [pc, #28]	; (8007288 <_lseek_r+0x20>)
 800726c:	4604      	mov	r4, r0
 800726e:	4608      	mov	r0, r1
 8007270:	4611      	mov	r1, r2
 8007272:	2200      	movs	r2, #0
 8007274:	602a      	str	r2, [r5, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f001 fb54 	bl	8008924 <_lseek>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_lseek_r+0x1e>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_lseek_r+0x1e>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	20000248 	.word	0x20000248

0800728c <_read_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d07      	ldr	r5, [pc, #28]	; (80072ac <_read_r+0x20>)
 8007290:	4604      	mov	r4, r0
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	2200      	movs	r2, #0
 8007298:	602a      	str	r2, [r5, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f001 fb4a 	bl	8008934 <_read>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_read_r+0x1e>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_read_r+0x1e>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	20000248 	.word	0x20000248

080072b0 <cos>:
 80072b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072b2:	ec53 2b10 	vmov	r2, r3, d0
 80072b6:	4826      	ldr	r0, [pc, #152]	; (8007350 <cos+0xa0>)
 80072b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072bc:	4281      	cmp	r1, r0
 80072be:	dc06      	bgt.n	80072ce <cos+0x1e>
 80072c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007348 <cos+0x98>
 80072c4:	b005      	add	sp, #20
 80072c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ca:	f000 bb79 	b.w	80079c0 <__kernel_cos>
 80072ce:	4821      	ldr	r0, [pc, #132]	; (8007354 <cos+0xa4>)
 80072d0:	4281      	cmp	r1, r0
 80072d2:	dd09      	ble.n	80072e8 <cos+0x38>
 80072d4:	ee10 0a10 	vmov	r0, s0
 80072d8:	4619      	mov	r1, r3
 80072da:	f7f8 ffdd 	bl	8000298 <__aeabi_dsub>
 80072de:	ec41 0b10 	vmov	d0, r0, r1
 80072e2:	b005      	add	sp, #20
 80072e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80072e8:	4668      	mov	r0, sp
 80072ea:	f000 f95d 	bl	80075a8 <__ieee754_rem_pio2>
 80072ee:	f000 0003 	and.w	r0, r0, #3
 80072f2:	2801      	cmp	r0, #1
 80072f4:	d00b      	beq.n	800730e <cos+0x5e>
 80072f6:	2802      	cmp	r0, #2
 80072f8:	d016      	beq.n	8007328 <cos+0x78>
 80072fa:	b9e0      	cbnz	r0, 8007336 <cos+0x86>
 80072fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007300:	ed9d 0b00 	vldr	d0, [sp]
 8007304:	f000 fb5c 	bl	80079c0 <__kernel_cos>
 8007308:	ec51 0b10 	vmov	r0, r1, d0
 800730c:	e7e7      	b.n	80072de <cos+0x2e>
 800730e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007312:	ed9d 0b00 	vldr	d0, [sp]
 8007316:	f000 ff6b 	bl	80081f0 <__kernel_sin>
 800731a:	ec53 2b10 	vmov	r2, r3, d0
 800731e:	ee10 0a10 	vmov	r0, s0
 8007322:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007326:	e7da      	b.n	80072de <cos+0x2e>
 8007328:	ed9d 1b02 	vldr	d1, [sp, #8]
 800732c:	ed9d 0b00 	vldr	d0, [sp]
 8007330:	f000 fb46 	bl	80079c0 <__kernel_cos>
 8007334:	e7f1      	b.n	800731a <cos+0x6a>
 8007336:	ed9d 1b02 	vldr	d1, [sp, #8]
 800733a:	ed9d 0b00 	vldr	d0, [sp]
 800733e:	2001      	movs	r0, #1
 8007340:	f000 ff56 	bl	80081f0 <__kernel_sin>
 8007344:	e7e0      	b.n	8007308 <cos+0x58>
 8007346:	bf00      	nop
	...
 8007350:	3fe921fb 	.word	0x3fe921fb
 8007354:	7fefffff 	.word	0x7fefffff

08007358 <sin>:
 8007358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800735a:	ec53 2b10 	vmov	r2, r3, d0
 800735e:	4828      	ldr	r0, [pc, #160]	; (8007400 <sin+0xa8>)
 8007360:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007364:	4281      	cmp	r1, r0
 8007366:	dc07      	bgt.n	8007378 <sin+0x20>
 8007368:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80073f8 <sin+0xa0>
 800736c:	2000      	movs	r0, #0
 800736e:	b005      	add	sp, #20
 8007370:	f85d eb04 	ldr.w	lr, [sp], #4
 8007374:	f000 bf3c 	b.w	80081f0 <__kernel_sin>
 8007378:	4822      	ldr	r0, [pc, #136]	; (8007404 <sin+0xac>)
 800737a:	4281      	cmp	r1, r0
 800737c:	dd09      	ble.n	8007392 <sin+0x3a>
 800737e:	ee10 0a10 	vmov	r0, s0
 8007382:	4619      	mov	r1, r3
 8007384:	f7f8 ff88 	bl	8000298 <__aeabi_dsub>
 8007388:	ec41 0b10 	vmov	d0, r0, r1
 800738c:	b005      	add	sp, #20
 800738e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007392:	4668      	mov	r0, sp
 8007394:	f000 f908 	bl	80075a8 <__ieee754_rem_pio2>
 8007398:	f000 0003 	and.w	r0, r0, #3
 800739c:	2801      	cmp	r0, #1
 800739e:	d00c      	beq.n	80073ba <sin+0x62>
 80073a0:	2802      	cmp	r0, #2
 80073a2:	d011      	beq.n	80073c8 <sin+0x70>
 80073a4:	b9f0      	cbnz	r0, 80073e4 <sin+0x8c>
 80073a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073aa:	ed9d 0b00 	vldr	d0, [sp]
 80073ae:	2001      	movs	r0, #1
 80073b0:	f000 ff1e 	bl	80081f0 <__kernel_sin>
 80073b4:	ec51 0b10 	vmov	r0, r1, d0
 80073b8:	e7e6      	b.n	8007388 <sin+0x30>
 80073ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073be:	ed9d 0b00 	vldr	d0, [sp]
 80073c2:	f000 fafd 	bl	80079c0 <__kernel_cos>
 80073c6:	e7f5      	b.n	80073b4 <sin+0x5c>
 80073c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073cc:	ed9d 0b00 	vldr	d0, [sp]
 80073d0:	2001      	movs	r0, #1
 80073d2:	f000 ff0d 	bl	80081f0 <__kernel_sin>
 80073d6:	ec53 2b10 	vmov	r2, r3, d0
 80073da:	ee10 0a10 	vmov	r0, s0
 80073de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80073e2:	e7d1      	b.n	8007388 <sin+0x30>
 80073e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073e8:	ed9d 0b00 	vldr	d0, [sp]
 80073ec:	f000 fae8 	bl	80079c0 <__kernel_cos>
 80073f0:	e7f1      	b.n	80073d6 <sin+0x7e>
 80073f2:	bf00      	nop
 80073f4:	f3af 8000 	nop.w
	...
 8007400:	3fe921fb 	.word	0x3fe921fb
 8007404:	7fefffff 	.word	0x7fefffff

08007408 <atan2>:
 8007408:	f000 b802 	b.w	8007410 <__ieee754_atan2>
 800740c:	0000      	movs	r0, r0
	...

08007410 <__ieee754_atan2>:
 8007410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007414:	ec57 6b11 	vmov	r6, r7, d1
 8007418:	4273      	negs	r3, r6
 800741a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80075a0 <__ieee754_atan2+0x190>
 800741e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007422:	4333      	orrs	r3, r6
 8007424:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007428:	4573      	cmp	r3, lr
 800742a:	ec51 0b10 	vmov	r0, r1, d0
 800742e:	ee11 8a10 	vmov	r8, s2
 8007432:	d80a      	bhi.n	800744a <__ieee754_atan2+0x3a>
 8007434:	4244      	negs	r4, r0
 8007436:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800743a:	4304      	orrs	r4, r0
 800743c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007440:	4574      	cmp	r4, lr
 8007442:	ee10 9a10 	vmov	r9, s0
 8007446:	468c      	mov	ip, r1
 8007448:	d907      	bls.n	800745a <__ieee754_atan2+0x4a>
 800744a:	4632      	mov	r2, r6
 800744c:	463b      	mov	r3, r7
 800744e:	f7f8 ff25 	bl	800029c <__adddf3>
 8007452:	ec41 0b10 	vmov	d0, r0, r1
 8007456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800745a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800745e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007462:	4334      	orrs	r4, r6
 8007464:	d103      	bne.n	800746e <__ieee754_atan2+0x5e>
 8007466:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800746a:	f000 bf81 	b.w	8008370 <atan>
 800746e:	17bc      	asrs	r4, r7, #30
 8007470:	f004 0402 	and.w	r4, r4, #2
 8007474:	ea53 0909 	orrs.w	r9, r3, r9
 8007478:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800747c:	d107      	bne.n	800748e <__ieee754_atan2+0x7e>
 800747e:	2c02      	cmp	r4, #2
 8007480:	d060      	beq.n	8007544 <__ieee754_atan2+0x134>
 8007482:	2c03      	cmp	r4, #3
 8007484:	d1e5      	bne.n	8007452 <__ieee754_atan2+0x42>
 8007486:	a142      	add	r1, pc, #264	; (adr r1, 8007590 <__ieee754_atan2+0x180>)
 8007488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800748c:	e7e1      	b.n	8007452 <__ieee754_atan2+0x42>
 800748e:	ea52 0808 	orrs.w	r8, r2, r8
 8007492:	d106      	bne.n	80074a2 <__ieee754_atan2+0x92>
 8007494:	f1bc 0f00 	cmp.w	ip, #0
 8007498:	da5f      	bge.n	800755a <__ieee754_atan2+0x14a>
 800749a:	a13f      	add	r1, pc, #252	; (adr r1, 8007598 <__ieee754_atan2+0x188>)
 800749c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a0:	e7d7      	b.n	8007452 <__ieee754_atan2+0x42>
 80074a2:	4572      	cmp	r2, lr
 80074a4:	d10f      	bne.n	80074c6 <__ieee754_atan2+0xb6>
 80074a6:	4293      	cmp	r3, r2
 80074a8:	f104 34ff 	add.w	r4, r4, #4294967295
 80074ac:	d107      	bne.n	80074be <__ieee754_atan2+0xae>
 80074ae:	2c02      	cmp	r4, #2
 80074b0:	d84c      	bhi.n	800754c <__ieee754_atan2+0x13c>
 80074b2:	4b35      	ldr	r3, [pc, #212]	; (8007588 <__ieee754_atan2+0x178>)
 80074b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80074b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80074bc:	e7c9      	b.n	8007452 <__ieee754_atan2+0x42>
 80074be:	2c02      	cmp	r4, #2
 80074c0:	d848      	bhi.n	8007554 <__ieee754_atan2+0x144>
 80074c2:	4b32      	ldr	r3, [pc, #200]	; (800758c <__ieee754_atan2+0x17c>)
 80074c4:	e7f6      	b.n	80074b4 <__ieee754_atan2+0xa4>
 80074c6:	4573      	cmp	r3, lr
 80074c8:	d0e4      	beq.n	8007494 <__ieee754_atan2+0x84>
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80074d0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074d4:	da1e      	bge.n	8007514 <__ieee754_atan2+0x104>
 80074d6:	2f00      	cmp	r7, #0
 80074d8:	da01      	bge.n	80074de <__ieee754_atan2+0xce>
 80074da:	323c      	adds	r2, #60	; 0x3c
 80074dc:	db1e      	blt.n	800751c <__ieee754_atan2+0x10c>
 80074de:	4632      	mov	r2, r6
 80074e0:	463b      	mov	r3, r7
 80074e2:	f7f9 f9bb 	bl	800085c <__aeabi_ddiv>
 80074e6:	ec41 0b10 	vmov	d0, r0, r1
 80074ea:	f001 f8e1 	bl	80086b0 <fabs>
 80074ee:	f000 ff3f 	bl	8008370 <atan>
 80074f2:	ec51 0b10 	vmov	r0, r1, d0
 80074f6:	2c01      	cmp	r4, #1
 80074f8:	d013      	beq.n	8007522 <__ieee754_atan2+0x112>
 80074fa:	2c02      	cmp	r4, #2
 80074fc:	d015      	beq.n	800752a <__ieee754_atan2+0x11a>
 80074fe:	2c00      	cmp	r4, #0
 8007500:	d0a7      	beq.n	8007452 <__ieee754_atan2+0x42>
 8007502:	a319      	add	r3, pc, #100	; (adr r3, 8007568 <__ieee754_atan2+0x158>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f7f8 fec6 	bl	8000298 <__aeabi_dsub>
 800750c:	a318      	add	r3, pc, #96	; (adr r3, 8007570 <__ieee754_atan2+0x160>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	e014      	b.n	800753e <__ieee754_atan2+0x12e>
 8007514:	a118      	add	r1, pc, #96	; (adr r1, 8007578 <__ieee754_atan2+0x168>)
 8007516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800751a:	e7ec      	b.n	80074f6 <__ieee754_atan2+0xe6>
 800751c:	2000      	movs	r0, #0
 800751e:	2100      	movs	r1, #0
 8007520:	e7e9      	b.n	80074f6 <__ieee754_atan2+0xe6>
 8007522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007526:	4619      	mov	r1, r3
 8007528:	e793      	b.n	8007452 <__ieee754_atan2+0x42>
 800752a:	a30f      	add	r3, pc, #60	; (adr r3, 8007568 <__ieee754_atan2+0x158>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f7f8 feb2 	bl	8000298 <__aeabi_dsub>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	a10d      	add	r1, pc, #52	; (adr r1, 8007570 <__ieee754_atan2+0x160>)
 800753a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800753e:	f7f8 feab 	bl	8000298 <__aeabi_dsub>
 8007542:	e786      	b.n	8007452 <__ieee754_atan2+0x42>
 8007544:	a10a      	add	r1, pc, #40	; (adr r1, 8007570 <__ieee754_atan2+0x160>)
 8007546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800754a:	e782      	b.n	8007452 <__ieee754_atan2+0x42>
 800754c:	a10c      	add	r1, pc, #48	; (adr r1, 8007580 <__ieee754_atan2+0x170>)
 800754e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007552:	e77e      	b.n	8007452 <__ieee754_atan2+0x42>
 8007554:	2000      	movs	r0, #0
 8007556:	2100      	movs	r1, #0
 8007558:	e77b      	b.n	8007452 <__ieee754_atan2+0x42>
 800755a:	a107      	add	r1, pc, #28	; (adr r1, 8007578 <__ieee754_atan2+0x168>)
 800755c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007560:	e777      	b.n	8007452 <__ieee754_atan2+0x42>
 8007562:	bf00      	nop
 8007564:	f3af 8000 	nop.w
 8007568:	33145c07 	.word	0x33145c07
 800756c:	3ca1a626 	.word	0x3ca1a626
 8007570:	54442d18 	.word	0x54442d18
 8007574:	400921fb 	.word	0x400921fb
 8007578:	54442d18 	.word	0x54442d18
 800757c:	3ff921fb 	.word	0x3ff921fb
 8007580:	54442d18 	.word	0x54442d18
 8007584:	3fe921fb 	.word	0x3fe921fb
 8007588:	080092b0 	.word	0x080092b0
 800758c:	080092c8 	.word	0x080092c8
 8007590:	54442d18 	.word	0x54442d18
 8007594:	c00921fb 	.word	0xc00921fb
 8007598:	54442d18 	.word	0x54442d18
 800759c:	bff921fb 	.word	0xbff921fb
 80075a0:	7ff00000 	.word	0x7ff00000
 80075a4:	00000000 	.word	0x00000000

080075a8 <__ieee754_rem_pio2>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ed2d 8b02 	vpush	{d8}
 80075b0:	ec55 4b10 	vmov	r4, r5, d0
 80075b4:	4bca      	ldr	r3, [pc, #808]	; (80078e0 <__ieee754_rem_pio2+0x338>)
 80075b6:	b08b      	sub	sp, #44	; 0x2c
 80075b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80075bc:	4598      	cmp	r8, r3
 80075be:	4682      	mov	sl, r0
 80075c0:	9502      	str	r5, [sp, #8]
 80075c2:	dc08      	bgt.n	80075d6 <__ieee754_rem_pio2+0x2e>
 80075c4:	2200      	movs	r2, #0
 80075c6:	2300      	movs	r3, #0
 80075c8:	ed80 0b00 	vstr	d0, [r0]
 80075cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80075d0:	f04f 0b00 	mov.w	fp, #0
 80075d4:	e028      	b.n	8007628 <__ieee754_rem_pio2+0x80>
 80075d6:	4bc3      	ldr	r3, [pc, #780]	; (80078e4 <__ieee754_rem_pio2+0x33c>)
 80075d8:	4598      	cmp	r8, r3
 80075da:	dc78      	bgt.n	80076ce <__ieee754_rem_pio2+0x126>
 80075dc:	9b02      	ldr	r3, [sp, #8]
 80075de:	4ec2      	ldr	r6, [pc, #776]	; (80078e8 <__ieee754_rem_pio2+0x340>)
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	ee10 0a10 	vmov	r0, s0
 80075e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80078a8 <__ieee754_rem_pio2+0x300>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	4629      	mov	r1, r5
 80075ee:	dd39      	ble.n	8007664 <__ieee754_rem_pio2+0xbc>
 80075f0:	f7f8 fe52 	bl	8000298 <__aeabi_dsub>
 80075f4:	45b0      	cmp	r8, r6
 80075f6:	4604      	mov	r4, r0
 80075f8:	460d      	mov	r5, r1
 80075fa:	d01b      	beq.n	8007634 <__ieee754_rem_pio2+0x8c>
 80075fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80078b0 <__ieee754_rem_pio2+0x308>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 fe49 	bl	8000298 <__aeabi_dsub>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	e9ca 2300 	strd	r2, r3, [sl]
 800760e:	4620      	mov	r0, r4
 8007610:	4629      	mov	r1, r5
 8007612:	f7f8 fe41 	bl	8000298 <__aeabi_dsub>
 8007616:	a3a6      	add	r3, pc, #664	; (adr r3, 80078b0 <__ieee754_rem_pio2+0x308>)
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	f7f8 fe3c 	bl	8000298 <__aeabi_dsub>
 8007620:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007624:	f04f 0b01 	mov.w	fp, #1
 8007628:	4658      	mov	r0, fp
 800762a:	b00b      	add	sp, #44	; 0x2c
 800762c:	ecbd 8b02 	vpop	{d8}
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	a3a0      	add	r3, pc, #640	; (adr r3, 80078b8 <__ieee754_rem_pio2+0x310>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fe2d 	bl	8000298 <__aeabi_dsub>
 800763e:	a3a0      	add	r3, pc, #640	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x318>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	4604      	mov	r4, r0
 8007646:	460d      	mov	r5, r1
 8007648:	f7f8 fe26 	bl	8000298 <__aeabi_dsub>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	e9ca 2300 	strd	r2, r3, [sl]
 8007654:	4620      	mov	r0, r4
 8007656:	4629      	mov	r1, r5
 8007658:	f7f8 fe1e 	bl	8000298 <__aeabi_dsub>
 800765c:	a398      	add	r3, pc, #608	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x318>)
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	e7db      	b.n	800761c <__ieee754_rem_pio2+0x74>
 8007664:	f7f8 fe1a 	bl	800029c <__adddf3>
 8007668:	45b0      	cmp	r8, r6
 800766a:	4604      	mov	r4, r0
 800766c:	460d      	mov	r5, r1
 800766e:	d016      	beq.n	800769e <__ieee754_rem_pio2+0xf6>
 8007670:	a38f      	add	r3, pc, #572	; (adr r3, 80078b0 <__ieee754_rem_pio2+0x308>)
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	f7f8 fe11 	bl	800029c <__adddf3>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	e9ca 2300 	strd	r2, r3, [sl]
 8007682:	4620      	mov	r0, r4
 8007684:	4629      	mov	r1, r5
 8007686:	f7f8 fe07 	bl	8000298 <__aeabi_dsub>
 800768a:	a389      	add	r3, pc, #548	; (adr r3, 80078b0 <__ieee754_rem_pio2+0x308>)
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f7f8 fe04 	bl	800029c <__adddf3>
 8007694:	f04f 3bff 	mov.w	fp, #4294967295
 8007698:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800769c:	e7c4      	b.n	8007628 <__ieee754_rem_pio2+0x80>
 800769e:	a386      	add	r3, pc, #536	; (adr r3, 80078b8 <__ieee754_rem_pio2+0x310>)
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f7f8 fdfa 	bl	800029c <__adddf3>
 80076a8:	a385      	add	r3, pc, #532	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x318>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	4604      	mov	r4, r0
 80076b0:	460d      	mov	r5, r1
 80076b2:	f7f8 fdf3 	bl	800029c <__adddf3>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	e9ca 2300 	strd	r2, r3, [sl]
 80076be:	4620      	mov	r0, r4
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7f8 fde9 	bl	8000298 <__aeabi_dsub>
 80076c6:	a37e      	add	r3, pc, #504	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x318>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	e7e0      	b.n	8007690 <__ieee754_rem_pio2+0xe8>
 80076ce:	4b87      	ldr	r3, [pc, #540]	; (80078ec <__ieee754_rem_pio2+0x344>)
 80076d0:	4598      	cmp	r8, r3
 80076d2:	f300 80d9 	bgt.w	8007888 <__ieee754_rem_pio2+0x2e0>
 80076d6:	f000 ffeb 	bl	80086b0 <fabs>
 80076da:	ec55 4b10 	vmov	r4, r5, d0
 80076de:	ee10 0a10 	vmov	r0, s0
 80076e2:	a379      	add	r3, pc, #484	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x320>)
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f8 ff8d 	bl	8000608 <__aeabi_dmul>
 80076ee:	4b80      	ldr	r3, [pc, #512]	; (80078f0 <__ieee754_rem_pio2+0x348>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7f8 fdd3 	bl	800029c <__adddf3>
 80076f6:	f7f9 fa37 	bl	8000b68 <__aeabi_d2iz>
 80076fa:	4683      	mov	fp, r0
 80076fc:	f7f8 ff1a 	bl	8000534 <__aeabi_i2d>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	ec43 2b18 	vmov	d8, r2, r3
 8007708:	a367      	add	r3, pc, #412	; (adr r3, 80078a8 <__ieee754_rem_pio2+0x300>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 ff7b 	bl	8000608 <__aeabi_dmul>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	f7f8 fdbd 	bl	8000298 <__aeabi_dsub>
 800771e:	a364      	add	r3, pc, #400	; (adr r3, 80078b0 <__ieee754_rem_pio2+0x308>)
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	4606      	mov	r6, r0
 8007726:	460f      	mov	r7, r1
 8007728:	ec51 0b18 	vmov	r0, r1, d8
 800772c:	f7f8 ff6c 	bl	8000608 <__aeabi_dmul>
 8007730:	f1bb 0f1f 	cmp.w	fp, #31
 8007734:	4604      	mov	r4, r0
 8007736:	460d      	mov	r5, r1
 8007738:	dc0d      	bgt.n	8007756 <__ieee754_rem_pio2+0x1ae>
 800773a:	4b6e      	ldr	r3, [pc, #440]	; (80078f4 <__ieee754_rem_pio2+0x34c>)
 800773c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007744:	4543      	cmp	r3, r8
 8007746:	d006      	beq.n	8007756 <__ieee754_rem_pio2+0x1ae>
 8007748:	4622      	mov	r2, r4
 800774a:	462b      	mov	r3, r5
 800774c:	4630      	mov	r0, r6
 800774e:	4639      	mov	r1, r7
 8007750:	f7f8 fda2 	bl	8000298 <__aeabi_dsub>
 8007754:	e00f      	b.n	8007776 <__ieee754_rem_pio2+0x1ce>
 8007756:	462b      	mov	r3, r5
 8007758:	4622      	mov	r2, r4
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f8 fd9b 	bl	8000298 <__aeabi_dsub>
 8007762:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800776c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007770:	f1b8 0f10 	cmp.w	r8, #16
 8007774:	dc02      	bgt.n	800777c <__ieee754_rem_pio2+0x1d4>
 8007776:	e9ca 0100 	strd	r0, r1, [sl]
 800777a:	e039      	b.n	80077f0 <__ieee754_rem_pio2+0x248>
 800777c:	a34e      	add	r3, pc, #312	; (adr r3, 80078b8 <__ieee754_rem_pio2+0x310>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	ec51 0b18 	vmov	r0, r1, d8
 8007786:	f7f8 ff3f 	bl	8000608 <__aeabi_dmul>
 800778a:	4604      	mov	r4, r0
 800778c:	460d      	mov	r5, r1
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4630      	mov	r0, r6
 8007794:	4639      	mov	r1, r7
 8007796:	f7f8 fd7f 	bl	8000298 <__aeabi_dsub>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4680      	mov	r8, r0
 80077a0:	4689      	mov	r9, r1
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	f7f8 fd77 	bl	8000298 <__aeabi_dsub>
 80077aa:	4622      	mov	r2, r4
 80077ac:	462b      	mov	r3, r5
 80077ae:	f7f8 fd73 	bl	8000298 <__aeabi_dsub>
 80077b2:	a343      	add	r3, pc, #268	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x318>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	4604      	mov	r4, r0
 80077ba:	460d      	mov	r5, r1
 80077bc:	ec51 0b18 	vmov	r0, r1, d8
 80077c0:	f7f8 ff22 	bl	8000608 <__aeabi_dmul>
 80077c4:	4622      	mov	r2, r4
 80077c6:	462b      	mov	r3, r5
 80077c8:	f7f8 fd66 	bl	8000298 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4604      	mov	r4, r0
 80077d2:	460d      	mov	r5, r1
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f8 fd5e 	bl	8000298 <__aeabi_dsub>
 80077dc:	9a03      	ldr	r2, [sp, #12]
 80077de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b31      	cmp	r3, #49	; 0x31
 80077e6:	dc24      	bgt.n	8007832 <__ieee754_rem_pio2+0x28a>
 80077e8:	e9ca 0100 	strd	r0, r1, [sl]
 80077ec:	4646      	mov	r6, r8
 80077ee:	464f      	mov	r7, r9
 80077f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80077f4:	4630      	mov	r0, r6
 80077f6:	4642      	mov	r2, r8
 80077f8:	464b      	mov	r3, r9
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f8 fd4c 	bl	8000298 <__aeabi_dsub>
 8007800:	462b      	mov	r3, r5
 8007802:	4622      	mov	r2, r4
 8007804:	f7f8 fd48 	bl	8000298 <__aeabi_dsub>
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007810:	f6bf af0a 	bge.w	8007628 <__ieee754_rem_pio2+0x80>
 8007814:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007818:	f8ca 3004 	str.w	r3, [sl, #4]
 800781c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007820:	f8ca 8000 	str.w	r8, [sl]
 8007824:	f8ca 0008 	str.w	r0, [sl, #8]
 8007828:	f8ca 300c 	str.w	r3, [sl, #12]
 800782c:	f1cb 0b00 	rsb	fp, fp, #0
 8007830:	e6fa      	b.n	8007628 <__ieee754_rem_pio2+0x80>
 8007832:	a327      	add	r3, pc, #156	; (adr r3, 80078d0 <__ieee754_rem_pio2+0x328>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	ec51 0b18 	vmov	r0, r1, d8
 800783c:	f7f8 fee4 	bl	8000608 <__aeabi_dmul>
 8007840:	4604      	mov	r4, r0
 8007842:	460d      	mov	r5, r1
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4640      	mov	r0, r8
 800784a:	4649      	mov	r1, r9
 800784c:	f7f8 fd24 	bl	8000298 <__aeabi_dsub>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4606      	mov	r6, r0
 8007856:	460f      	mov	r7, r1
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	f7f8 fd1c 	bl	8000298 <__aeabi_dsub>
 8007860:	4622      	mov	r2, r4
 8007862:	462b      	mov	r3, r5
 8007864:	f7f8 fd18 	bl	8000298 <__aeabi_dsub>
 8007868:	a31b      	add	r3, pc, #108	; (adr r3, 80078d8 <__ieee754_rem_pio2+0x330>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	4604      	mov	r4, r0
 8007870:	460d      	mov	r5, r1
 8007872:	ec51 0b18 	vmov	r0, r1, d8
 8007876:	f7f8 fec7 	bl	8000608 <__aeabi_dmul>
 800787a:	4622      	mov	r2, r4
 800787c:	462b      	mov	r3, r5
 800787e:	f7f8 fd0b 	bl	8000298 <__aeabi_dsub>
 8007882:	4604      	mov	r4, r0
 8007884:	460d      	mov	r5, r1
 8007886:	e75f      	b.n	8007748 <__ieee754_rem_pio2+0x1a0>
 8007888:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <__ieee754_rem_pio2+0x350>)
 800788a:	4598      	cmp	r8, r3
 800788c:	dd36      	ble.n	80078fc <__ieee754_rem_pio2+0x354>
 800788e:	ee10 2a10 	vmov	r2, s0
 8007892:	462b      	mov	r3, r5
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f8 fcfe 	bl	8000298 <__aeabi_dsub>
 800789c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80078a0:	e9ca 0100 	strd	r0, r1, [sl]
 80078a4:	e694      	b.n	80075d0 <__ieee754_rem_pio2+0x28>
 80078a6:	bf00      	nop
 80078a8:	54400000 	.word	0x54400000
 80078ac:	3ff921fb 	.word	0x3ff921fb
 80078b0:	1a626331 	.word	0x1a626331
 80078b4:	3dd0b461 	.word	0x3dd0b461
 80078b8:	1a600000 	.word	0x1a600000
 80078bc:	3dd0b461 	.word	0x3dd0b461
 80078c0:	2e037073 	.word	0x2e037073
 80078c4:	3ba3198a 	.word	0x3ba3198a
 80078c8:	6dc9c883 	.word	0x6dc9c883
 80078cc:	3fe45f30 	.word	0x3fe45f30
 80078d0:	2e000000 	.word	0x2e000000
 80078d4:	3ba3198a 	.word	0x3ba3198a
 80078d8:	252049c1 	.word	0x252049c1
 80078dc:	397b839a 	.word	0x397b839a
 80078e0:	3fe921fb 	.word	0x3fe921fb
 80078e4:	4002d97b 	.word	0x4002d97b
 80078e8:	3ff921fb 	.word	0x3ff921fb
 80078ec:	413921fb 	.word	0x413921fb
 80078f0:	3fe00000 	.word	0x3fe00000
 80078f4:	080092e0 	.word	0x080092e0
 80078f8:	7fefffff 	.word	0x7fefffff
 80078fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007900:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007904:	ee10 0a10 	vmov	r0, s0
 8007908:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800790c:	ee10 6a10 	vmov	r6, s0
 8007910:	460f      	mov	r7, r1
 8007912:	f7f9 f929 	bl	8000b68 <__aeabi_d2iz>
 8007916:	f7f8 fe0d 	bl	8000534 <__aeabi_i2d>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4630      	mov	r0, r6
 8007920:	4639      	mov	r1, r7
 8007922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007926:	f7f8 fcb7 	bl	8000298 <__aeabi_dsub>
 800792a:	4b23      	ldr	r3, [pc, #140]	; (80079b8 <__ieee754_rem_pio2+0x410>)
 800792c:	2200      	movs	r2, #0
 800792e:	f7f8 fe6b 	bl	8000608 <__aeabi_dmul>
 8007932:	460f      	mov	r7, r1
 8007934:	4606      	mov	r6, r0
 8007936:	f7f9 f917 	bl	8000b68 <__aeabi_d2iz>
 800793a:	f7f8 fdfb 	bl	8000534 <__aeabi_i2d>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4630      	mov	r0, r6
 8007944:	4639      	mov	r1, r7
 8007946:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800794a:	f7f8 fca5 	bl	8000298 <__aeabi_dsub>
 800794e:	4b1a      	ldr	r3, [pc, #104]	; (80079b8 <__ieee754_rem_pio2+0x410>)
 8007950:	2200      	movs	r2, #0
 8007952:	f7f8 fe59 	bl	8000608 <__aeabi_dmul>
 8007956:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800795a:	ad04      	add	r5, sp, #16
 800795c:	f04f 0803 	mov.w	r8, #3
 8007960:	46a9      	mov	r9, r5
 8007962:	2600      	movs	r6, #0
 8007964:	2700      	movs	r7, #0
 8007966:	4632      	mov	r2, r6
 8007968:	463b      	mov	r3, r7
 800796a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800796e:	46c3      	mov	fp, r8
 8007970:	3d08      	subs	r5, #8
 8007972:	f108 38ff 	add.w	r8, r8, #4294967295
 8007976:	f7f9 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800797a:	2800      	cmp	r0, #0
 800797c:	d1f3      	bne.n	8007966 <__ieee754_rem_pio2+0x3be>
 800797e:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <__ieee754_rem_pio2+0x414>)
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	2302      	movs	r3, #2
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	4622      	mov	r2, r4
 8007988:	465b      	mov	r3, fp
 800798a:	4651      	mov	r1, sl
 800798c:	4648      	mov	r0, r9
 800798e:	f000 f8df 	bl	8007b50 <__kernel_rem_pio2>
 8007992:	9b02      	ldr	r3, [sp, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	4683      	mov	fp, r0
 8007998:	f6bf ae46 	bge.w	8007628 <__ieee754_rem_pio2+0x80>
 800799c:	e9da 2100 	ldrd	r2, r1, [sl]
 80079a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079a4:	e9ca 2300 	strd	r2, r3, [sl]
 80079a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80079ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80079b4:	e73a      	b.n	800782c <__ieee754_rem_pio2+0x284>
 80079b6:	bf00      	nop
 80079b8:	41700000 	.word	0x41700000
 80079bc:	08009360 	.word	0x08009360

080079c0 <__kernel_cos>:
 80079c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	ec57 6b10 	vmov	r6, r7, d0
 80079c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80079cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80079d0:	ed8d 1b00 	vstr	d1, [sp]
 80079d4:	da07      	bge.n	80079e6 <__kernel_cos+0x26>
 80079d6:	ee10 0a10 	vmov	r0, s0
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f9 f8c4 	bl	8000b68 <__aeabi_d2iz>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f000 8088 	beq.w	8007af6 <__kernel_cos+0x136>
 80079e6:	4632      	mov	r2, r6
 80079e8:	463b      	mov	r3, r7
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f8 fe0b 	bl	8000608 <__aeabi_dmul>
 80079f2:	4b51      	ldr	r3, [pc, #324]	; (8007b38 <__kernel_cos+0x178>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	4604      	mov	r4, r0
 80079f8:	460d      	mov	r5, r1
 80079fa:	f7f8 fe05 	bl	8000608 <__aeabi_dmul>
 80079fe:	a340      	add	r3, pc, #256	; (adr r3, 8007b00 <__kernel_cos+0x140>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	4682      	mov	sl, r0
 8007a06:	468b      	mov	fp, r1
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f8 fdfc 	bl	8000608 <__aeabi_dmul>
 8007a10:	a33d      	add	r3, pc, #244	; (adr r3, 8007b08 <__kernel_cos+0x148>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fc41 	bl	800029c <__adddf3>
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	462b      	mov	r3, r5
 8007a1e:	f7f8 fdf3 	bl	8000608 <__aeabi_dmul>
 8007a22:	a33b      	add	r3, pc, #236	; (adr r3, 8007b10 <__kernel_cos+0x150>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f7f8 fc36 	bl	8000298 <__aeabi_dsub>
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	462b      	mov	r3, r5
 8007a30:	f7f8 fdea 	bl	8000608 <__aeabi_dmul>
 8007a34:	a338      	add	r3, pc, #224	; (adr r3, 8007b18 <__kernel_cos+0x158>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f7f8 fc2f 	bl	800029c <__adddf3>
 8007a3e:	4622      	mov	r2, r4
 8007a40:	462b      	mov	r3, r5
 8007a42:	f7f8 fde1 	bl	8000608 <__aeabi_dmul>
 8007a46:	a336      	add	r3, pc, #216	; (adr r3, 8007b20 <__kernel_cos+0x160>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f8 fc24 	bl	8000298 <__aeabi_dsub>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	f7f8 fdd8 	bl	8000608 <__aeabi_dmul>
 8007a58:	a333      	add	r3, pc, #204	; (adr r3, 8007b28 <__kernel_cos+0x168>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fc1d 	bl	800029c <__adddf3>
 8007a62:	4622      	mov	r2, r4
 8007a64:	462b      	mov	r3, r5
 8007a66:	f7f8 fdcf 	bl	8000608 <__aeabi_dmul>
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	f7f8 fdcb 	bl	8000608 <__aeabi_dmul>
 8007a72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a76:	4604      	mov	r4, r0
 8007a78:	460d      	mov	r5, r1
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	f7f8 fdc3 	bl	8000608 <__aeabi_dmul>
 8007a82:	460b      	mov	r3, r1
 8007a84:	4602      	mov	r2, r0
 8007a86:	4629      	mov	r1, r5
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f7f8 fc05 	bl	8000298 <__aeabi_dsub>
 8007a8e:	4b2b      	ldr	r3, [pc, #172]	; (8007b3c <__kernel_cos+0x17c>)
 8007a90:	4598      	cmp	r8, r3
 8007a92:	4606      	mov	r6, r0
 8007a94:	460f      	mov	r7, r1
 8007a96:	dc10      	bgt.n	8007aba <__kernel_cos+0xfa>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	4659      	mov	r1, fp
 8007aa0:	f7f8 fbfa 	bl	8000298 <__aeabi_dsub>
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4926      	ldr	r1, [pc, #152]	; (8007b40 <__kernel_cos+0x180>)
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f7f8 fbf4 	bl	8000298 <__aeabi_dsub>
 8007ab0:	ec41 0b10 	vmov	d0, r0, r1
 8007ab4:	b003      	add	sp, #12
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	4b22      	ldr	r3, [pc, #136]	; (8007b44 <__kernel_cos+0x184>)
 8007abc:	4920      	ldr	r1, [pc, #128]	; (8007b40 <__kernel_cos+0x180>)
 8007abe:	4598      	cmp	r8, r3
 8007ac0:	bfcc      	ite	gt
 8007ac2:	4d21      	ldrgt	r5, [pc, #132]	; (8007b48 <__kernel_cos+0x188>)
 8007ac4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007ac8:	2400      	movs	r4, #0
 8007aca:	4622      	mov	r2, r4
 8007acc:	462b      	mov	r3, r5
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f7f8 fbe2 	bl	8000298 <__aeabi_dsub>
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	4689      	mov	r9, r1
 8007ada:	462b      	mov	r3, r5
 8007adc:	4650      	mov	r0, sl
 8007ade:	4659      	mov	r1, fp
 8007ae0:	f7f8 fbda 	bl	8000298 <__aeabi_dsub>
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	f7f8 fbd6 	bl	8000298 <__aeabi_dsub>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	e7da      	b.n	8007aac <__kernel_cos+0xec>
 8007af6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007b30 <__kernel_cos+0x170>
 8007afa:	e7db      	b.n	8007ab4 <__kernel_cos+0xf4>
 8007afc:	f3af 8000 	nop.w
 8007b00:	be8838d4 	.word	0xbe8838d4
 8007b04:	bda8fae9 	.word	0xbda8fae9
 8007b08:	bdb4b1c4 	.word	0xbdb4b1c4
 8007b0c:	3e21ee9e 	.word	0x3e21ee9e
 8007b10:	809c52ad 	.word	0x809c52ad
 8007b14:	3e927e4f 	.word	0x3e927e4f
 8007b18:	19cb1590 	.word	0x19cb1590
 8007b1c:	3efa01a0 	.word	0x3efa01a0
 8007b20:	16c15177 	.word	0x16c15177
 8007b24:	3f56c16c 	.word	0x3f56c16c
 8007b28:	5555554c 	.word	0x5555554c
 8007b2c:	3fa55555 	.word	0x3fa55555
 8007b30:	00000000 	.word	0x00000000
 8007b34:	3ff00000 	.word	0x3ff00000
 8007b38:	3fe00000 	.word	0x3fe00000
 8007b3c:	3fd33332 	.word	0x3fd33332
 8007b40:	3ff00000 	.word	0x3ff00000
 8007b44:	3fe90000 	.word	0x3fe90000
 8007b48:	3fd20000 	.word	0x3fd20000
 8007b4c:	00000000 	.word	0x00000000

08007b50 <__kernel_rem_pio2>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	ed2d 8b02 	vpush	{d8}
 8007b58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007b5c:	f112 0f14 	cmn.w	r2, #20
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	9101      	str	r1, [sp, #4]
 8007b64:	4bc4      	ldr	r3, [pc, #784]	; (8007e78 <__kernel_rem_pio2+0x328>)
 8007b66:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007b68:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b6e:	9302      	str	r3, [sp, #8]
 8007b70:	9b08      	ldr	r3, [sp, #32]
 8007b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b76:	bfa8      	it	ge
 8007b78:	1ed4      	subge	r4, r2, #3
 8007b7a:	9306      	str	r3, [sp, #24]
 8007b7c:	bfb2      	itee	lt
 8007b7e:	2400      	movlt	r4, #0
 8007b80:	2318      	movge	r3, #24
 8007b82:	fb94 f4f3 	sdivge	r4, r4, r3
 8007b86:	f06f 0317 	mvn.w	r3, #23
 8007b8a:	fb04 3303 	mla	r3, r4, r3, r3
 8007b8e:	eb03 0a02 	add.w	sl, r3, r2
 8007b92:	9b02      	ldr	r3, [sp, #8]
 8007b94:	9a06      	ldr	r2, [sp, #24]
 8007b96:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007e68 <__kernel_rem_pio2+0x318>
 8007b9a:	eb03 0802 	add.w	r8, r3, r2
 8007b9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007ba0:	1aa7      	subs	r7, r4, r2
 8007ba2:	ae22      	add	r6, sp, #136	; 0x88
 8007ba4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007ba8:	2500      	movs	r5, #0
 8007baa:	4545      	cmp	r5, r8
 8007bac:	dd13      	ble.n	8007bd6 <__kernel_rem_pio2+0x86>
 8007bae:	9b08      	ldr	r3, [sp, #32]
 8007bb0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007e68 <__kernel_rem_pio2+0x318>
 8007bb4:	aa22      	add	r2, sp, #136	; 0x88
 8007bb6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007bba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	4598      	cmp	r8, r3
 8007bc6:	dc2f      	bgt.n	8007c28 <__kernel_rem_pio2+0xd8>
 8007bc8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007bcc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007bd0:	462f      	mov	r7, r5
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	e01b      	b.n	8007c0e <__kernel_rem_pio2+0xbe>
 8007bd6:	42ef      	cmn	r7, r5
 8007bd8:	d407      	bmi.n	8007bea <__kernel_rem_pio2+0x9a>
 8007bda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007bde:	f7f8 fca9 	bl	8000534 <__aeabi_i2d>
 8007be2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007be6:	3501      	adds	r5, #1
 8007be8:	e7df      	b.n	8007baa <__kernel_rem_pio2+0x5a>
 8007bea:	ec51 0b18 	vmov	r0, r1, d8
 8007bee:	e7f8      	b.n	8007be2 <__kernel_rem_pio2+0x92>
 8007bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007bf8:	f7f8 fd06 	bl	8000608 <__aeabi_dmul>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c04:	f7f8 fb4a 	bl	800029c <__adddf3>
 8007c08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c0c:	3601      	adds	r6, #1
 8007c0e:	9b06      	ldr	r3, [sp, #24]
 8007c10:	429e      	cmp	r6, r3
 8007c12:	f1a7 0708 	sub.w	r7, r7, #8
 8007c16:	ddeb      	ble.n	8007bf0 <__kernel_rem_pio2+0xa0>
 8007c18:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007c1c:	f108 0801 	add.w	r8, r8, #1
 8007c20:	ecab 7b02 	vstmia	fp!, {d7}
 8007c24:	3508      	adds	r5, #8
 8007c26:	e7cc      	b.n	8007bc2 <__kernel_rem_pio2+0x72>
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	aa0e      	add	r2, sp, #56	; 0x38
 8007c2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c30:	930d      	str	r3, [sp, #52]	; 0x34
 8007c32:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007c34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007c38:	9c02      	ldr	r4, [sp, #8]
 8007c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c3c:	00e3      	lsls	r3, r4, #3
 8007c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c40:	ab9a      	add	r3, sp, #616	; 0x268
 8007c42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007c4a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007c4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007c50:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007c54:	46c3      	mov	fp, r8
 8007c56:	46a1      	mov	r9, r4
 8007c58:	f1b9 0f00 	cmp.w	r9, #0
 8007c5c:	f1a5 0508 	sub.w	r5, r5, #8
 8007c60:	dc77      	bgt.n	8007d52 <__kernel_rem_pio2+0x202>
 8007c62:	ec47 6b10 	vmov	d0, r6, r7
 8007c66:	4650      	mov	r0, sl
 8007c68:	f000 fdae 	bl	80087c8 <scalbn>
 8007c6c:	ec57 6b10 	vmov	r6, r7, d0
 8007c70:	2200      	movs	r2, #0
 8007c72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007c76:	ee10 0a10 	vmov	r0, s0
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	f7f8 fcc4 	bl	8000608 <__aeabi_dmul>
 8007c80:	ec41 0b10 	vmov	d0, r0, r1
 8007c84:	f000 fd20 	bl	80086c8 <floor>
 8007c88:	4b7c      	ldr	r3, [pc, #496]	; (8007e7c <__kernel_rem_pio2+0x32c>)
 8007c8a:	ec51 0b10 	vmov	r0, r1, d0
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f7f8 fcba 	bl	8000608 <__aeabi_dmul>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4630      	mov	r0, r6
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	f7f8 fafc 	bl	8000298 <__aeabi_dsub>
 8007ca0:	460f      	mov	r7, r1
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	f7f8 ff60 	bl	8000b68 <__aeabi_d2iz>
 8007ca8:	9004      	str	r0, [sp, #16]
 8007caa:	f7f8 fc43 	bl	8000534 <__aeabi_i2d>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	f7f8 faef 	bl	8000298 <__aeabi_dsub>
 8007cba:	f1ba 0f00 	cmp.w	sl, #0
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	dd6d      	ble.n	8007da0 <__kernel_rem_pio2+0x250>
 8007cc4:	1e62      	subs	r2, r4, #1
 8007cc6:	ab0e      	add	r3, sp, #56	; 0x38
 8007cc8:	9d04      	ldr	r5, [sp, #16]
 8007cca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007cce:	f1ca 0118 	rsb	r1, sl, #24
 8007cd2:	fa40 f301 	asr.w	r3, r0, r1
 8007cd6:	441d      	add	r5, r3
 8007cd8:	408b      	lsls	r3, r1
 8007cda:	1ac0      	subs	r0, r0, r3
 8007cdc:	ab0e      	add	r3, sp, #56	; 0x38
 8007cde:	9504      	str	r5, [sp, #16]
 8007ce0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007ce4:	f1ca 0317 	rsb	r3, sl, #23
 8007ce8:	fa40 fb03 	asr.w	fp, r0, r3
 8007cec:	f1bb 0f00 	cmp.w	fp, #0
 8007cf0:	dd65      	ble.n	8007dbe <__kernel_rem_pio2+0x26e>
 8007cf2:	9b04      	ldr	r3, [sp, #16]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	4615      	mov	r5, r2
 8007cfc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007d00:	4294      	cmp	r4, r2
 8007d02:	f300 809c 	bgt.w	8007e3e <__kernel_rem_pio2+0x2ee>
 8007d06:	f1ba 0f00 	cmp.w	sl, #0
 8007d0a:	dd07      	ble.n	8007d1c <__kernel_rem_pio2+0x1cc>
 8007d0c:	f1ba 0f01 	cmp.w	sl, #1
 8007d10:	f000 80c0 	beq.w	8007e94 <__kernel_rem_pio2+0x344>
 8007d14:	f1ba 0f02 	cmp.w	sl, #2
 8007d18:	f000 80c6 	beq.w	8007ea8 <__kernel_rem_pio2+0x358>
 8007d1c:	f1bb 0f02 	cmp.w	fp, #2
 8007d20:	d14d      	bne.n	8007dbe <__kernel_rem_pio2+0x26e>
 8007d22:	4632      	mov	r2, r6
 8007d24:	463b      	mov	r3, r7
 8007d26:	4956      	ldr	r1, [pc, #344]	; (8007e80 <__kernel_rem_pio2+0x330>)
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f7f8 fab5 	bl	8000298 <__aeabi_dsub>
 8007d2e:	4606      	mov	r6, r0
 8007d30:	460f      	mov	r7, r1
 8007d32:	2d00      	cmp	r5, #0
 8007d34:	d043      	beq.n	8007dbe <__kernel_rem_pio2+0x26e>
 8007d36:	4650      	mov	r0, sl
 8007d38:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007e70 <__kernel_rem_pio2+0x320>
 8007d3c:	f000 fd44 	bl	80087c8 <scalbn>
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	ec53 2b10 	vmov	r2, r3, d0
 8007d48:	f7f8 faa6 	bl	8000298 <__aeabi_dsub>
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	460f      	mov	r7, r1
 8007d50:	e035      	b.n	8007dbe <__kernel_rem_pio2+0x26e>
 8007d52:	4b4c      	ldr	r3, [pc, #304]	; (8007e84 <__kernel_rem_pio2+0x334>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	4630      	mov	r0, r6
 8007d58:	4639      	mov	r1, r7
 8007d5a:	f7f8 fc55 	bl	8000608 <__aeabi_dmul>
 8007d5e:	f7f8 ff03 	bl	8000b68 <__aeabi_d2iz>
 8007d62:	f7f8 fbe7 	bl	8000534 <__aeabi_i2d>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	ec43 2b18 	vmov	d8, r2, r3
 8007d6e:	4b46      	ldr	r3, [pc, #280]	; (8007e88 <__kernel_rem_pio2+0x338>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	f7f8 fc49 	bl	8000608 <__aeabi_dmul>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 fa8b 	bl	8000298 <__aeabi_dsub>
 8007d82:	f7f8 fef1 	bl	8000b68 <__aeabi_d2iz>
 8007d86:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d8a:	f84b 0b04 	str.w	r0, [fp], #4
 8007d8e:	ec51 0b18 	vmov	r0, r1, d8
 8007d92:	f7f8 fa83 	bl	800029c <__adddf3>
 8007d96:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460f      	mov	r7, r1
 8007d9e:	e75b      	b.n	8007c58 <__kernel_rem_pio2+0x108>
 8007da0:	d106      	bne.n	8007db0 <__kernel_rem_pio2+0x260>
 8007da2:	1e63      	subs	r3, r4, #1
 8007da4:	aa0e      	add	r2, sp, #56	; 0x38
 8007da6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007daa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007dae:	e79d      	b.n	8007cec <__kernel_rem_pio2+0x19c>
 8007db0:	4b36      	ldr	r3, [pc, #216]	; (8007e8c <__kernel_rem_pio2+0x33c>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	f7f8 feae 	bl	8000b14 <__aeabi_dcmpge>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d13d      	bne.n	8007e38 <__kernel_rem_pio2+0x2e8>
 8007dbc:	4683      	mov	fp, r0
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	f7f8 fe87 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	f000 80c0 	beq.w	8007f50 <__kernel_rem_pio2+0x400>
 8007dd0:	1e65      	subs	r5, r4, #1
 8007dd2:	462b      	mov	r3, r5
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	9902      	ldr	r1, [sp, #8]
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	da6c      	bge.n	8007eb6 <__kernel_rem_pio2+0x366>
 8007ddc:	2a00      	cmp	r2, #0
 8007dde:	f000 8089 	beq.w	8007ef4 <__kernel_rem_pio2+0x3a4>
 8007de2:	ab0e      	add	r3, sp, #56	; 0x38
 8007de4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007de8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80ad 	beq.w	8007f4c <__kernel_rem_pio2+0x3fc>
 8007df2:	4650      	mov	r0, sl
 8007df4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007e70 <__kernel_rem_pio2+0x320>
 8007df8:	f000 fce6 	bl	80087c8 <scalbn>
 8007dfc:	ab9a      	add	r3, sp, #616	; 0x268
 8007dfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e02:	ec57 6b10 	vmov	r6, r7, d0
 8007e06:	00ec      	lsls	r4, r5, #3
 8007e08:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007e0c:	46aa      	mov	sl, r5
 8007e0e:	f1ba 0f00 	cmp.w	sl, #0
 8007e12:	f280 80d6 	bge.w	8007fc2 <__kernel_rem_pio2+0x472>
 8007e16:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007e68 <__kernel_rem_pio2+0x318>
 8007e1a:	462e      	mov	r6, r5
 8007e1c:	2e00      	cmp	r6, #0
 8007e1e:	f2c0 8104 	blt.w	800802a <__kernel_rem_pio2+0x4da>
 8007e22:	ab72      	add	r3, sp, #456	; 0x1c8
 8007e24:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007e28:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007e90 <__kernel_rem_pio2+0x340>
 8007e2c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007e30:	f04f 0800 	mov.w	r8, #0
 8007e34:	1baf      	subs	r7, r5, r6
 8007e36:	e0ea      	b.n	800800e <__kernel_rem_pio2+0x4be>
 8007e38:	f04f 0b02 	mov.w	fp, #2
 8007e3c:	e759      	b.n	8007cf2 <__kernel_rem_pio2+0x1a2>
 8007e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e42:	b955      	cbnz	r5, 8007e5a <__kernel_rem_pio2+0x30a>
 8007e44:	b123      	cbz	r3, 8007e50 <__kernel_rem_pio2+0x300>
 8007e46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007e4a:	f8c8 3000 	str.w	r3, [r8]
 8007e4e:	2301      	movs	r3, #1
 8007e50:	3201      	adds	r2, #1
 8007e52:	f108 0804 	add.w	r8, r8, #4
 8007e56:	461d      	mov	r5, r3
 8007e58:	e752      	b.n	8007d00 <__kernel_rem_pio2+0x1b0>
 8007e5a:	1acb      	subs	r3, r1, r3
 8007e5c:	f8c8 3000 	str.w	r3, [r8]
 8007e60:	462b      	mov	r3, r5
 8007e62:	e7f5      	b.n	8007e50 <__kernel_rem_pio2+0x300>
 8007e64:	f3af 8000 	nop.w
	...
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	080094a8 	.word	0x080094a8
 8007e7c:	40200000 	.word	0x40200000
 8007e80:	3ff00000 	.word	0x3ff00000
 8007e84:	3e700000 	.word	0x3e700000
 8007e88:	41700000 	.word	0x41700000
 8007e8c:	3fe00000 	.word	0x3fe00000
 8007e90:	08009468 	.word	0x08009468
 8007e94:	1e62      	subs	r2, r4, #1
 8007e96:	ab0e      	add	r3, sp, #56	; 0x38
 8007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007ea0:	a90e      	add	r1, sp, #56	; 0x38
 8007ea2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007ea6:	e739      	b.n	8007d1c <__kernel_rem_pio2+0x1cc>
 8007ea8:	1e62      	subs	r2, r4, #1
 8007eaa:	ab0e      	add	r3, sp, #56	; 0x38
 8007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007eb4:	e7f4      	b.n	8007ea0 <__kernel_rem_pio2+0x350>
 8007eb6:	a90e      	add	r1, sp, #56	; 0x38
 8007eb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	e789      	b.n	8007dd6 <__kernel_rem_pio2+0x286>
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007ec8:	2900      	cmp	r1, #0
 8007eca:	d0fa      	beq.n	8007ec2 <__kernel_rem_pio2+0x372>
 8007ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ece:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007ed2:	446a      	add	r2, sp
 8007ed4:	3a98      	subs	r2, #152	; 0x98
 8007ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8007ed8:	9a08      	ldr	r2, [sp, #32]
 8007eda:	18e3      	adds	r3, r4, r3
 8007edc:	18a5      	adds	r5, r4, r2
 8007ede:	aa22      	add	r2, sp, #136	; 0x88
 8007ee0:	f104 0801 	add.w	r8, r4, #1
 8007ee4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	4543      	cmp	r3, r8
 8007eee:	da04      	bge.n	8007efa <__kernel_rem_pio2+0x3aa>
 8007ef0:	461c      	mov	r4, r3
 8007ef2:	e6a3      	b.n	8007c3c <__kernel_rem_pio2+0xec>
 8007ef4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e7e4      	b.n	8007ec4 <__kernel_rem_pio2+0x374>
 8007efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007efc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007f00:	f7f8 fb18 	bl	8000534 <__aeabi_i2d>
 8007f04:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f0a:	46ab      	mov	fp, r5
 8007f0c:	461c      	mov	r4, r3
 8007f0e:	f04f 0900 	mov.w	r9, #0
 8007f12:	2600      	movs	r6, #0
 8007f14:	2700      	movs	r7, #0
 8007f16:	9b06      	ldr	r3, [sp, #24]
 8007f18:	4599      	cmp	r9, r3
 8007f1a:	dd06      	ble.n	8007f2a <__kernel_rem_pio2+0x3da>
 8007f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007f22:	f108 0801 	add.w	r8, r8, #1
 8007f26:	930a      	str	r3, [sp, #40]	; 0x28
 8007f28:	e7df      	b.n	8007eea <__kernel_rem_pio2+0x39a>
 8007f2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007f2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007f32:	f7f8 fb69 	bl	8000608 <__aeabi_dmul>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	f7f8 f9ad 	bl	800029c <__adddf3>
 8007f42:	f109 0901 	add.w	r9, r9, #1
 8007f46:	4606      	mov	r6, r0
 8007f48:	460f      	mov	r7, r1
 8007f4a:	e7e4      	b.n	8007f16 <__kernel_rem_pio2+0x3c6>
 8007f4c:	3d01      	subs	r5, #1
 8007f4e:	e748      	b.n	8007de2 <__kernel_rem_pio2+0x292>
 8007f50:	ec47 6b10 	vmov	d0, r6, r7
 8007f54:	f1ca 0000 	rsb	r0, sl, #0
 8007f58:	f000 fc36 	bl	80087c8 <scalbn>
 8007f5c:	ec57 6b10 	vmov	r6, r7, d0
 8007f60:	4ba0      	ldr	r3, [pc, #640]	; (80081e4 <__kernel_rem_pio2+0x694>)
 8007f62:	ee10 0a10 	vmov	r0, s0
 8007f66:	2200      	movs	r2, #0
 8007f68:	4639      	mov	r1, r7
 8007f6a:	f7f8 fdd3 	bl	8000b14 <__aeabi_dcmpge>
 8007f6e:	b1f8      	cbz	r0, 8007fb0 <__kernel_rem_pio2+0x460>
 8007f70:	4b9d      	ldr	r3, [pc, #628]	; (80081e8 <__kernel_rem_pio2+0x698>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fb46 	bl	8000608 <__aeabi_dmul>
 8007f7c:	f7f8 fdf4 	bl	8000b68 <__aeabi_d2iz>
 8007f80:	4680      	mov	r8, r0
 8007f82:	f7f8 fad7 	bl	8000534 <__aeabi_i2d>
 8007f86:	4b97      	ldr	r3, [pc, #604]	; (80081e4 <__kernel_rem_pio2+0x694>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f7f8 fb3d 	bl	8000608 <__aeabi_dmul>
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4602      	mov	r2, r0
 8007f92:	4639      	mov	r1, r7
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7f8 f97f 	bl	8000298 <__aeabi_dsub>
 8007f9a:	f7f8 fde5 	bl	8000b68 <__aeabi_d2iz>
 8007f9e:	1c65      	adds	r5, r4, #1
 8007fa0:	ab0e      	add	r3, sp, #56	; 0x38
 8007fa2:	f10a 0a18 	add.w	sl, sl, #24
 8007fa6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007faa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007fae:	e720      	b.n	8007df2 <__kernel_rem_pio2+0x2a2>
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	f7f8 fdd8 	bl	8000b68 <__aeabi_d2iz>
 8007fb8:	ab0e      	add	r3, sp, #56	; 0x38
 8007fba:	4625      	mov	r5, r4
 8007fbc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007fc0:	e717      	b.n	8007df2 <__kernel_rem_pio2+0x2a2>
 8007fc2:	ab0e      	add	r3, sp, #56	; 0x38
 8007fc4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007fc8:	f7f8 fab4 	bl	8000534 <__aeabi_i2d>
 8007fcc:	4632      	mov	r2, r6
 8007fce:	463b      	mov	r3, r7
 8007fd0:	f7f8 fb1a 	bl	8000608 <__aeabi_dmul>
 8007fd4:	4b84      	ldr	r3, [pc, #528]	; (80081e8 <__kernel_rem_pio2+0x698>)
 8007fd6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007fda:	2200      	movs	r2, #0
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 fb12 	bl	8000608 <__aeabi_dmul>
 8007fe4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	e70f      	b.n	8007e0e <__kernel_rem_pio2+0x2be>
 8007fee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007ff2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007ff6:	f7f8 fb07 	bl	8000608 <__aeabi_dmul>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008002:	f7f8 f94b 	bl	800029c <__adddf3>
 8008006:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800800a:	f108 0801 	add.w	r8, r8, #1
 800800e:	9b02      	ldr	r3, [sp, #8]
 8008010:	4598      	cmp	r8, r3
 8008012:	dc01      	bgt.n	8008018 <__kernel_rem_pio2+0x4c8>
 8008014:	45b8      	cmp	r8, r7
 8008016:	ddea      	ble.n	8007fee <__kernel_rem_pio2+0x49e>
 8008018:	ed9d 7b06 	vldr	d7, [sp, #24]
 800801c:	ab4a      	add	r3, sp, #296	; 0x128
 800801e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008022:	ed87 7b00 	vstr	d7, [r7]
 8008026:	3e01      	subs	r6, #1
 8008028:	e6f8      	b.n	8007e1c <__kernel_rem_pio2+0x2cc>
 800802a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800802c:	2b02      	cmp	r3, #2
 800802e:	dc0b      	bgt.n	8008048 <__kernel_rem_pio2+0x4f8>
 8008030:	2b00      	cmp	r3, #0
 8008032:	dc35      	bgt.n	80080a0 <__kernel_rem_pio2+0x550>
 8008034:	d059      	beq.n	80080ea <__kernel_rem_pio2+0x59a>
 8008036:	9b04      	ldr	r3, [sp, #16]
 8008038:	f003 0007 	and.w	r0, r3, #7
 800803c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008040:	ecbd 8b02 	vpop	{d8}
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800804a:	2b03      	cmp	r3, #3
 800804c:	d1f3      	bne.n	8008036 <__kernel_rem_pio2+0x4e6>
 800804e:	ab4a      	add	r3, sp, #296	; 0x128
 8008050:	4423      	add	r3, r4
 8008052:	9306      	str	r3, [sp, #24]
 8008054:	461c      	mov	r4, r3
 8008056:	469a      	mov	sl, r3
 8008058:	9502      	str	r5, [sp, #8]
 800805a:	9b02      	ldr	r3, [sp, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008062:	dc6b      	bgt.n	800813c <__kernel_rem_pio2+0x5ec>
 8008064:	46aa      	mov	sl, r5
 8008066:	f1ba 0f01 	cmp.w	sl, #1
 800806a:	f1a4 0408 	sub.w	r4, r4, #8
 800806e:	f300 8085 	bgt.w	800817c <__kernel_rem_pio2+0x62c>
 8008072:	9c06      	ldr	r4, [sp, #24]
 8008074:	2000      	movs	r0, #0
 8008076:	3408      	adds	r4, #8
 8008078:	2100      	movs	r1, #0
 800807a:	2d01      	cmp	r5, #1
 800807c:	f300 809d 	bgt.w	80081ba <__kernel_rem_pio2+0x66a>
 8008080:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008084:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008088:	f1bb 0f00 	cmp.w	fp, #0
 800808c:	f040 809b 	bne.w	80081c6 <__kernel_rem_pio2+0x676>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	e9c3 5600 	strd	r5, r6, [r3]
 8008096:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800809a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800809e:	e7ca      	b.n	8008036 <__kernel_rem_pio2+0x4e6>
 80080a0:	3408      	adds	r4, #8
 80080a2:	ab4a      	add	r3, sp, #296	; 0x128
 80080a4:	441c      	add	r4, r3
 80080a6:	462e      	mov	r6, r5
 80080a8:	2000      	movs	r0, #0
 80080aa:	2100      	movs	r1, #0
 80080ac:	2e00      	cmp	r6, #0
 80080ae:	da36      	bge.n	800811e <__kernel_rem_pio2+0x5ce>
 80080b0:	f1bb 0f00 	cmp.w	fp, #0
 80080b4:	d039      	beq.n	800812a <__kernel_rem_pio2+0x5da>
 80080b6:	4602      	mov	r2, r0
 80080b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080bc:	9c01      	ldr	r4, [sp, #4]
 80080be:	e9c4 2300 	strd	r2, r3, [r4]
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80080ca:	f7f8 f8e5 	bl	8000298 <__aeabi_dsub>
 80080ce:	ae4c      	add	r6, sp, #304	; 0x130
 80080d0:	2401      	movs	r4, #1
 80080d2:	42a5      	cmp	r5, r4
 80080d4:	da2c      	bge.n	8008130 <__kernel_rem_pio2+0x5e0>
 80080d6:	f1bb 0f00 	cmp.w	fp, #0
 80080da:	d002      	beq.n	80080e2 <__kernel_rem_pio2+0x592>
 80080dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080e0:	4619      	mov	r1, r3
 80080e2:	9b01      	ldr	r3, [sp, #4]
 80080e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80080e8:	e7a5      	b.n	8008036 <__kernel_rem_pio2+0x4e6>
 80080ea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80080ee:	eb0d 0403 	add.w	r4, sp, r3
 80080f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80080f6:	2000      	movs	r0, #0
 80080f8:	2100      	movs	r1, #0
 80080fa:	2d00      	cmp	r5, #0
 80080fc:	da09      	bge.n	8008112 <__kernel_rem_pio2+0x5c2>
 80080fe:	f1bb 0f00 	cmp.w	fp, #0
 8008102:	d002      	beq.n	800810a <__kernel_rem_pio2+0x5ba>
 8008104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008108:	4619      	mov	r1, r3
 800810a:	9b01      	ldr	r3, [sp, #4]
 800810c:	e9c3 0100 	strd	r0, r1, [r3]
 8008110:	e791      	b.n	8008036 <__kernel_rem_pio2+0x4e6>
 8008112:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008116:	f7f8 f8c1 	bl	800029c <__adddf3>
 800811a:	3d01      	subs	r5, #1
 800811c:	e7ed      	b.n	80080fa <__kernel_rem_pio2+0x5aa>
 800811e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008122:	f7f8 f8bb 	bl	800029c <__adddf3>
 8008126:	3e01      	subs	r6, #1
 8008128:	e7c0      	b.n	80080ac <__kernel_rem_pio2+0x55c>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	e7c5      	b.n	80080bc <__kernel_rem_pio2+0x56c>
 8008130:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008134:	f7f8 f8b2 	bl	800029c <__adddf3>
 8008138:	3401      	adds	r4, #1
 800813a:	e7ca      	b.n	80080d2 <__kernel_rem_pio2+0x582>
 800813c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008140:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	3b01      	subs	r3, #1
 8008148:	9302      	str	r3, [sp, #8]
 800814a:	4632      	mov	r2, r6
 800814c:	463b      	mov	r3, r7
 800814e:	4640      	mov	r0, r8
 8008150:	4649      	mov	r1, r9
 8008152:	f7f8 f8a3 	bl	800029c <__adddf3>
 8008156:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4640      	mov	r0, r8
 8008160:	4649      	mov	r1, r9
 8008162:	f7f8 f899 	bl	8000298 <__aeabi_dsub>
 8008166:	4632      	mov	r2, r6
 8008168:	463b      	mov	r3, r7
 800816a:	f7f8 f897 	bl	800029c <__adddf3>
 800816e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008172:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008176:	ed8a 7b00 	vstr	d7, [sl]
 800817a:	e76e      	b.n	800805a <__kernel_rem_pio2+0x50a>
 800817c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008180:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008184:	4640      	mov	r0, r8
 8008186:	4632      	mov	r2, r6
 8008188:	463b      	mov	r3, r7
 800818a:	4649      	mov	r1, r9
 800818c:	f7f8 f886 	bl	800029c <__adddf3>
 8008190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	f7f8 f87c 	bl	8000298 <__aeabi_dsub>
 80081a0:	4632      	mov	r2, r6
 80081a2:	463b      	mov	r3, r7
 80081a4:	f7f8 f87a 	bl	800029c <__adddf3>
 80081a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80081b0:	ed84 7b00 	vstr	d7, [r4]
 80081b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081b8:	e755      	b.n	8008066 <__kernel_rem_pio2+0x516>
 80081ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80081be:	f7f8 f86d 	bl	800029c <__adddf3>
 80081c2:	3d01      	subs	r5, #1
 80081c4:	e759      	b.n	800807a <__kernel_rem_pio2+0x52a>
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	9a01      	ldr	r2, [sp, #4]
 80081ca:	601d      	str	r5, [r3, #0]
 80081cc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80081d0:	605c      	str	r4, [r3, #4]
 80081d2:	609f      	str	r7, [r3, #8]
 80081d4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80081d8:	60d3      	str	r3, [r2, #12]
 80081da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081de:	6110      	str	r0, [r2, #16]
 80081e0:	6153      	str	r3, [r2, #20]
 80081e2:	e728      	b.n	8008036 <__kernel_rem_pio2+0x4e6>
 80081e4:	41700000 	.word	0x41700000
 80081e8:	3e700000 	.word	0x3e700000
 80081ec:	00000000 	.word	0x00000000

080081f0 <__kernel_sin>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	ed2d 8b04 	vpush	{d8-d9}
 80081f8:	eeb0 8a41 	vmov.f32	s16, s2
 80081fc:	eef0 8a61 	vmov.f32	s17, s3
 8008200:	ec55 4b10 	vmov	r4, r5, d0
 8008204:	b083      	sub	sp, #12
 8008206:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800820a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800820e:	9001      	str	r0, [sp, #4]
 8008210:	da06      	bge.n	8008220 <__kernel_sin+0x30>
 8008212:	ee10 0a10 	vmov	r0, s0
 8008216:	4629      	mov	r1, r5
 8008218:	f7f8 fca6 	bl	8000b68 <__aeabi_d2iz>
 800821c:	2800      	cmp	r0, #0
 800821e:	d051      	beq.n	80082c4 <__kernel_sin+0xd4>
 8008220:	4622      	mov	r2, r4
 8008222:	462b      	mov	r3, r5
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f7f8 f9ee 	bl	8000608 <__aeabi_dmul>
 800822c:	4682      	mov	sl, r0
 800822e:	468b      	mov	fp, r1
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	a341      	add	r3, pc, #260	; (adr r3, 8008344 <__kernel_sin+0x154>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	4680      	mov	r8, r0
 8008244:	4689      	mov	r9, r1
 8008246:	4650      	mov	r0, sl
 8008248:	4659      	mov	r1, fp
 800824a:	f7f8 f9dd 	bl	8000608 <__aeabi_dmul>
 800824e:	a33f      	add	r3, pc, #252	; (adr r3, 800834c <__kernel_sin+0x15c>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 f820 	bl	8000298 <__aeabi_dsub>
 8008258:	4652      	mov	r2, sl
 800825a:	465b      	mov	r3, fp
 800825c:	f7f8 f9d4 	bl	8000608 <__aeabi_dmul>
 8008260:	a33c      	add	r3, pc, #240	; (adr r3, 8008354 <__kernel_sin+0x164>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 f819 	bl	800029c <__adddf3>
 800826a:	4652      	mov	r2, sl
 800826c:	465b      	mov	r3, fp
 800826e:	f7f8 f9cb 	bl	8000608 <__aeabi_dmul>
 8008272:	a33a      	add	r3, pc, #232	; (adr r3, 800835c <__kernel_sin+0x16c>)
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f7f8 f80e 	bl	8000298 <__aeabi_dsub>
 800827c:	4652      	mov	r2, sl
 800827e:	465b      	mov	r3, fp
 8008280:	f7f8 f9c2 	bl	8000608 <__aeabi_dmul>
 8008284:	a337      	add	r3, pc, #220	; (adr r3, 8008364 <__kernel_sin+0x174>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	f7f8 f807 	bl	800029c <__adddf3>
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	4606      	mov	r6, r0
 8008292:	460f      	mov	r7, r1
 8008294:	b9eb      	cbnz	r3, 80082d2 <__kernel_sin+0xe2>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4650      	mov	r0, sl
 800829c:	4659      	mov	r1, fp
 800829e:	f7f8 f9b3 	bl	8000608 <__aeabi_dmul>
 80082a2:	a325      	add	r3, pc, #148	; (adr r3, 8008338 <__kernel_sin+0x148>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f7 fff6 	bl	8000298 <__aeabi_dsub>
 80082ac:	4642      	mov	r2, r8
 80082ae:	464b      	mov	r3, r9
 80082b0:	f7f8 f9aa 	bl	8000608 <__aeabi_dmul>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4620      	mov	r0, r4
 80082ba:	4629      	mov	r1, r5
 80082bc:	f7f7 ffee 	bl	800029c <__adddf3>
 80082c0:	4604      	mov	r4, r0
 80082c2:	460d      	mov	r5, r1
 80082c4:	ec45 4b10 	vmov	d0, r4, r5
 80082c8:	b003      	add	sp, #12
 80082ca:	ecbd 8b04 	vpop	{d8-d9}
 80082ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d2:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <__kernel_sin+0x150>)
 80082d4:	ec51 0b18 	vmov	r0, r1, d8
 80082d8:	2200      	movs	r2, #0
 80082da:	f7f8 f995 	bl	8000608 <__aeabi_dmul>
 80082de:	4632      	mov	r2, r6
 80082e0:	ec41 0b19 	vmov	d9, r0, r1
 80082e4:	463b      	mov	r3, r7
 80082e6:	4640      	mov	r0, r8
 80082e8:	4649      	mov	r1, r9
 80082ea:	f7f8 f98d 	bl	8000608 <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	ec51 0b19 	vmov	r0, r1, d9
 80082f6:	f7f7 ffcf 	bl	8000298 <__aeabi_dsub>
 80082fa:	4652      	mov	r2, sl
 80082fc:	465b      	mov	r3, fp
 80082fe:	f7f8 f983 	bl	8000608 <__aeabi_dmul>
 8008302:	ec53 2b18 	vmov	r2, r3, d8
 8008306:	f7f7 ffc7 	bl	8000298 <__aeabi_dsub>
 800830a:	a30b      	add	r3, pc, #44	; (adr r3, 8008338 <__kernel_sin+0x148>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	4606      	mov	r6, r0
 8008312:	460f      	mov	r7, r1
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f8 f976 	bl	8000608 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4630      	mov	r0, r6
 8008322:	4639      	mov	r1, r7
 8008324:	f7f7 ffba 	bl	800029c <__adddf3>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4620      	mov	r0, r4
 800832e:	4629      	mov	r1, r5
 8008330:	f7f7 ffb2 	bl	8000298 <__aeabi_dsub>
 8008334:	e7c4      	b.n	80082c0 <__kernel_sin+0xd0>
 8008336:	bf00      	nop
 8008338:	55555549 	.word	0x55555549
 800833c:	3fc55555 	.word	0x3fc55555
 8008340:	3fe00000 	.word	0x3fe00000
 8008344:	5acfd57c 	.word	0x5acfd57c
 8008348:	3de5d93a 	.word	0x3de5d93a
 800834c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008350:	3e5ae5e6 	.word	0x3e5ae5e6
 8008354:	57b1fe7d 	.word	0x57b1fe7d
 8008358:	3ec71de3 	.word	0x3ec71de3
 800835c:	19c161d5 	.word	0x19c161d5
 8008360:	3f2a01a0 	.word	0x3f2a01a0
 8008364:	1110f8a6 	.word	0x1110f8a6
 8008368:	3f811111 	.word	0x3f811111
 800836c:	00000000 	.word	0x00000000

08008370 <atan>:
 8008370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	ec55 4b10 	vmov	r4, r5, d0
 8008378:	4bc3      	ldr	r3, [pc, #780]	; (8008688 <atan+0x318>)
 800837a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800837e:	429e      	cmp	r6, r3
 8008380:	46ab      	mov	fp, r5
 8008382:	dd18      	ble.n	80083b6 <atan+0x46>
 8008384:	4bc1      	ldr	r3, [pc, #772]	; (800868c <atan+0x31c>)
 8008386:	429e      	cmp	r6, r3
 8008388:	dc01      	bgt.n	800838e <atan+0x1e>
 800838a:	d109      	bne.n	80083a0 <atan+0x30>
 800838c:	b144      	cbz	r4, 80083a0 <atan+0x30>
 800838e:	4622      	mov	r2, r4
 8008390:	462b      	mov	r3, r5
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f7 ff81 	bl	800029c <__adddf3>
 800839a:	4604      	mov	r4, r0
 800839c:	460d      	mov	r5, r1
 800839e:	e006      	b.n	80083ae <atan+0x3e>
 80083a0:	f1bb 0f00 	cmp.w	fp, #0
 80083a4:	f300 8131 	bgt.w	800860a <atan+0x29a>
 80083a8:	a59b      	add	r5, pc, #620	; (adr r5, 8008618 <atan+0x2a8>)
 80083aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083ae:	ec45 4b10 	vmov	d0, r4, r5
 80083b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b6:	4bb6      	ldr	r3, [pc, #728]	; (8008690 <atan+0x320>)
 80083b8:	429e      	cmp	r6, r3
 80083ba:	dc14      	bgt.n	80083e6 <atan+0x76>
 80083bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80083c0:	429e      	cmp	r6, r3
 80083c2:	dc0d      	bgt.n	80083e0 <atan+0x70>
 80083c4:	a396      	add	r3, pc, #600	; (adr r3, 8008620 <atan+0x2b0>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	ee10 0a10 	vmov	r0, s0
 80083ce:	4629      	mov	r1, r5
 80083d0:	f7f7 ff64 	bl	800029c <__adddf3>
 80083d4:	4baf      	ldr	r3, [pc, #700]	; (8008694 <atan+0x324>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	f7f8 fba6 	bl	8000b28 <__aeabi_dcmpgt>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d1e6      	bne.n	80083ae <atan+0x3e>
 80083e0:	f04f 3aff 	mov.w	sl, #4294967295
 80083e4:	e02b      	b.n	800843e <atan+0xce>
 80083e6:	f000 f963 	bl	80086b0 <fabs>
 80083ea:	4bab      	ldr	r3, [pc, #684]	; (8008698 <atan+0x328>)
 80083ec:	429e      	cmp	r6, r3
 80083ee:	ec55 4b10 	vmov	r4, r5, d0
 80083f2:	f300 80bf 	bgt.w	8008574 <atan+0x204>
 80083f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80083fa:	429e      	cmp	r6, r3
 80083fc:	f300 80a0 	bgt.w	8008540 <atan+0x1d0>
 8008400:	ee10 2a10 	vmov	r2, s0
 8008404:	ee10 0a10 	vmov	r0, s0
 8008408:	462b      	mov	r3, r5
 800840a:	4629      	mov	r1, r5
 800840c:	f7f7 ff46 	bl	800029c <__adddf3>
 8008410:	4ba0      	ldr	r3, [pc, #640]	; (8008694 <atan+0x324>)
 8008412:	2200      	movs	r2, #0
 8008414:	f7f7 ff40 	bl	8000298 <__aeabi_dsub>
 8008418:	2200      	movs	r2, #0
 800841a:	4606      	mov	r6, r0
 800841c:	460f      	mov	r7, r1
 800841e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008422:	4620      	mov	r0, r4
 8008424:	4629      	mov	r1, r5
 8008426:	f7f7 ff39 	bl	800029c <__adddf3>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	f7f8 fa13 	bl	800085c <__aeabi_ddiv>
 8008436:	f04f 0a00 	mov.w	sl, #0
 800843a:	4604      	mov	r4, r0
 800843c:	460d      	mov	r5, r1
 800843e:	4622      	mov	r2, r4
 8008440:	462b      	mov	r3, r5
 8008442:	4620      	mov	r0, r4
 8008444:	4629      	mov	r1, r5
 8008446:	f7f8 f8df 	bl	8000608 <__aeabi_dmul>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4680      	mov	r8, r0
 8008450:	4689      	mov	r9, r1
 8008452:	f7f8 f8d9 	bl	8000608 <__aeabi_dmul>
 8008456:	a374      	add	r3, pc, #464	; (adr r3, 8008628 <atan+0x2b8>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	4606      	mov	r6, r0
 800845e:	460f      	mov	r7, r1
 8008460:	f7f8 f8d2 	bl	8000608 <__aeabi_dmul>
 8008464:	a372      	add	r3, pc, #456	; (adr r3, 8008630 <atan+0x2c0>)
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	f7f7 ff17 	bl	800029c <__adddf3>
 800846e:	4632      	mov	r2, r6
 8008470:	463b      	mov	r3, r7
 8008472:	f7f8 f8c9 	bl	8000608 <__aeabi_dmul>
 8008476:	a370      	add	r3, pc, #448	; (adr r3, 8008638 <atan+0x2c8>)
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f7f7 ff0e 	bl	800029c <__adddf3>
 8008480:	4632      	mov	r2, r6
 8008482:	463b      	mov	r3, r7
 8008484:	f7f8 f8c0 	bl	8000608 <__aeabi_dmul>
 8008488:	a36d      	add	r3, pc, #436	; (adr r3, 8008640 <atan+0x2d0>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f7 ff05 	bl	800029c <__adddf3>
 8008492:	4632      	mov	r2, r6
 8008494:	463b      	mov	r3, r7
 8008496:	f7f8 f8b7 	bl	8000608 <__aeabi_dmul>
 800849a:	a36b      	add	r3, pc, #428	; (adr r3, 8008648 <atan+0x2d8>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f7 fefc 	bl	800029c <__adddf3>
 80084a4:	4632      	mov	r2, r6
 80084a6:	463b      	mov	r3, r7
 80084a8:	f7f8 f8ae 	bl	8000608 <__aeabi_dmul>
 80084ac:	a368      	add	r3, pc, #416	; (adr r3, 8008650 <atan+0x2e0>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f7f7 fef3 	bl	800029c <__adddf3>
 80084b6:	4642      	mov	r2, r8
 80084b8:	464b      	mov	r3, r9
 80084ba:	f7f8 f8a5 	bl	8000608 <__aeabi_dmul>
 80084be:	a366      	add	r3, pc, #408	; (adr r3, 8008658 <atan+0x2e8>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	4680      	mov	r8, r0
 80084c6:	4689      	mov	r9, r1
 80084c8:	4630      	mov	r0, r6
 80084ca:	4639      	mov	r1, r7
 80084cc:	f7f8 f89c 	bl	8000608 <__aeabi_dmul>
 80084d0:	a363      	add	r3, pc, #396	; (adr r3, 8008660 <atan+0x2f0>)
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	f7f7 fedf 	bl	8000298 <__aeabi_dsub>
 80084da:	4632      	mov	r2, r6
 80084dc:	463b      	mov	r3, r7
 80084de:	f7f8 f893 	bl	8000608 <__aeabi_dmul>
 80084e2:	a361      	add	r3, pc, #388	; (adr r3, 8008668 <atan+0x2f8>)
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f7f7 fed6 	bl	8000298 <__aeabi_dsub>
 80084ec:	4632      	mov	r2, r6
 80084ee:	463b      	mov	r3, r7
 80084f0:	f7f8 f88a 	bl	8000608 <__aeabi_dmul>
 80084f4:	a35e      	add	r3, pc, #376	; (adr r3, 8008670 <atan+0x300>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f7 fecd 	bl	8000298 <__aeabi_dsub>
 80084fe:	4632      	mov	r2, r6
 8008500:	463b      	mov	r3, r7
 8008502:	f7f8 f881 	bl	8000608 <__aeabi_dmul>
 8008506:	a35c      	add	r3, pc, #368	; (adr r3, 8008678 <atan+0x308>)
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f7f7 fec4 	bl	8000298 <__aeabi_dsub>
 8008510:	4632      	mov	r2, r6
 8008512:	463b      	mov	r3, r7
 8008514:	f7f8 f878 	bl	8000608 <__aeabi_dmul>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4640      	mov	r0, r8
 800851e:	4649      	mov	r1, r9
 8008520:	f7f7 febc 	bl	800029c <__adddf3>
 8008524:	4622      	mov	r2, r4
 8008526:	462b      	mov	r3, r5
 8008528:	f7f8 f86e 	bl	8000608 <__aeabi_dmul>
 800852c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	d14b      	bne.n	80085ce <atan+0x25e>
 8008536:	4620      	mov	r0, r4
 8008538:	4629      	mov	r1, r5
 800853a:	f7f7 fead 	bl	8000298 <__aeabi_dsub>
 800853e:	e72c      	b.n	800839a <atan+0x2a>
 8008540:	ee10 0a10 	vmov	r0, s0
 8008544:	4b53      	ldr	r3, [pc, #332]	; (8008694 <atan+0x324>)
 8008546:	2200      	movs	r2, #0
 8008548:	4629      	mov	r1, r5
 800854a:	f7f7 fea5 	bl	8000298 <__aeabi_dsub>
 800854e:	4b51      	ldr	r3, [pc, #324]	; (8008694 <atan+0x324>)
 8008550:	4606      	mov	r6, r0
 8008552:	460f      	mov	r7, r1
 8008554:	2200      	movs	r2, #0
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f7 fe9f 	bl	800029c <__adddf3>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4630      	mov	r0, r6
 8008564:	4639      	mov	r1, r7
 8008566:	f7f8 f979 	bl	800085c <__aeabi_ddiv>
 800856a:	f04f 0a01 	mov.w	sl, #1
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	e764      	b.n	800843e <atan+0xce>
 8008574:	4b49      	ldr	r3, [pc, #292]	; (800869c <atan+0x32c>)
 8008576:	429e      	cmp	r6, r3
 8008578:	da1d      	bge.n	80085b6 <atan+0x246>
 800857a:	ee10 0a10 	vmov	r0, s0
 800857e:	4b48      	ldr	r3, [pc, #288]	; (80086a0 <atan+0x330>)
 8008580:	2200      	movs	r2, #0
 8008582:	4629      	mov	r1, r5
 8008584:	f7f7 fe88 	bl	8000298 <__aeabi_dsub>
 8008588:	4b45      	ldr	r3, [pc, #276]	; (80086a0 <atan+0x330>)
 800858a:	4606      	mov	r6, r0
 800858c:	460f      	mov	r7, r1
 800858e:	2200      	movs	r2, #0
 8008590:	4620      	mov	r0, r4
 8008592:	4629      	mov	r1, r5
 8008594:	f7f8 f838 	bl	8000608 <__aeabi_dmul>
 8008598:	4b3e      	ldr	r3, [pc, #248]	; (8008694 <atan+0x324>)
 800859a:	2200      	movs	r2, #0
 800859c:	f7f7 fe7e 	bl	800029c <__adddf3>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4630      	mov	r0, r6
 80085a6:	4639      	mov	r1, r7
 80085a8:	f7f8 f958 	bl	800085c <__aeabi_ddiv>
 80085ac:	f04f 0a02 	mov.w	sl, #2
 80085b0:	4604      	mov	r4, r0
 80085b2:	460d      	mov	r5, r1
 80085b4:	e743      	b.n	800843e <atan+0xce>
 80085b6:	462b      	mov	r3, r5
 80085b8:	ee10 2a10 	vmov	r2, s0
 80085bc:	4939      	ldr	r1, [pc, #228]	; (80086a4 <atan+0x334>)
 80085be:	2000      	movs	r0, #0
 80085c0:	f7f8 f94c 	bl	800085c <__aeabi_ddiv>
 80085c4:	f04f 0a03 	mov.w	sl, #3
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	e737      	b.n	800843e <atan+0xce>
 80085ce:	4b36      	ldr	r3, [pc, #216]	; (80086a8 <atan+0x338>)
 80085d0:	4e36      	ldr	r6, [pc, #216]	; (80086ac <atan+0x33c>)
 80085d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80085d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80085da:	e9da 2300 	ldrd	r2, r3, [sl]
 80085de:	f7f7 fe5b 	bl	8000298 <__aeabi_dsub>
 80085e2:	4622      	mov	r2, r4
 80085e4:	462b      	mov	r3, r5
 80085e6:	f7f7 fe57 	bl	8000298 <__aeabi_dsub>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80085f2:	f7f7 fe51 	bl	8000298 <__aeabi_dsub>
 80085f6:	f1bb 0f00 	cmp.w	fp, #0
 80085fa:	4604      	mov	r4, r0
 80085fc:	460d      	mov	r5, r1
 80085fe:	f6bf aed6 	bge.w	80083ae <atan+0x3e>
 8008602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008606:	461d      	mov	r5, r3
 8008608:	e6d1      	b.n	80083ae <atan+0x3e>
 800860a:	a51d      	add	r5, pc, #116	; (adr r5, 8008680 <atan+0x310>)
 800860c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008610:	e6cd      	b.n	80083ae <atan+0x3e>
 8008612:	bf00      	nop
 8008614:	f3af 8000 	nop.w
 8008618:	54442d18 	.word	0x54442d18
 800861c:	bff921fb 	.word	0xbff921fb
 8008620:	8800759c 	.word	0x8800759c
 8008624:	7e37e43c 	.word	0x7e37e43c
 8008628:	e322da11 	.word	0xe322da11
 800862c:	3f90ad3a 	.word	0x3f90ad3a
 8008630:	24760deb 	.word	0x24760deb
 8008634:	3fa97b4b 	.word	0x3fa97b4b
 8008638:	a0d03d51 	.word	0xa0d03d51
 800863c:	3fb10d66 	.word	0x3fb10d66
 8008640:	c54c206e 	.word	0xc54c206e
 8008644:	3fb745cd 	.word	0x3fb745cd
 8008648:	920083ff 	.word	0x920083ff
 800864c:	3fc24924 	.word	0x3fc24924
 8008650:	5555550d 	.word	0x5555550d
 8008654:	3fd55555 	.word	0x3fd55555
 8008658:	2c6a6c2f 	.word	0x2c6a6c2f
 800865c:	bfa2b444 	.word	0xbfa2b444
 8008660:	52defd9a 	.word	0x52defd9a
 8008664:	3fadde2d 	.word	0x3fadde2d
 8008668:	af749a6d 	.word	0xaf749a6d
 800866c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008670:	fe231671 	.word	0xfe231671
 8008674:	3fbc71c6 	.word	0x3fbc71c6
 8008678:	9998ebc4 	.word	0x9998ebc4
 800867c:	3fc99999 	.word	0x3fc99999
 8008680:	54442d18 	.word	0x54442d18
 8008684:	3ff921fb 	.word	0x3ff921fb
 8008688:	440fffff 	.word	0x440fffff
 800868c:	7ff00000 	.word	0x7ff00000
 8008690:	3fdbffff 	.word	0x3fdbffff
 8008694:	3ff00000 	.word	0x3ff00000
 8008698:	3ff2ffff 	.word	0x3ff2ffff
 800869c:	40038000 	.word	0x40038000
 80086a0:	3ff80000 	.word	0x3ff80000
 80086a4:	bff00000 	.word	0xbff00000
 80086a8:	080094d8 	.word	0x080094d8
 80086ac:	080094b8 	.word	0x080094b8

080086b0 <fabs>:
 80086b0:	ec51 0b10 	vmov	r0, r1, d0
 80086b4:	ee10 2a10 	vmov	r2, s0
 80086b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086bc:	ec43 2b10 	vmov	d0, r2, r3
 80086c0:	4770      	bx	lr
 80086c2:	0000      	movs	r0, r0
 80086c4:	0000      	movs	r0, r0
	...

080086c8 <floor>:
 80086c8:	ec51 0b10 	vmov	r0, r1, d0
 80086cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80086d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80086d8:	2e13      	cmp	r6, #19
 80086da:	ee10 5a10 	vmov	r5, s0
 80086de:	ee10 8a10 	vmov	r8, s0
 80086e2:	460c      	mov	r4, r1
 80086e4:	dc32      	bgt.n	800874c <floor+0x84>
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	da14      	bge.n	8008714 <floor+0x4c>
 80086ea:	a333      	add	r3, pc, #204	; (adr r3, 80087b8 <floor+0xf0>)
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 fdd4 	bl	800029c <__adddf3>
 80086f4:	2200      	movs	r2, #0
 80086f6:	2300      	movs	r3, #0
 80086f8:	f7f8 fa16 	bl	8000b28 <__aeabi_dcmpgt>
 80086fc:	b138      	cbz	r0, 800870e <floor+0x46>
 80086fe:	2c00      	cmp	r4, #0
 8008700:	da57      	bge.n	80087b2 <floor+0xea>
 8008702:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008706:	431d      	orrs	r5, r3
 8008708:	d001      	beq.n	800870e <floor+0x46>
 800870a:	4c2d      	ldr	r4, [pc, #180]	; (80087c0 <floor+0xf8>)
 800870c:	2500      	movs	r5, #0
 800870e:	4621      	mov	r1, r4
 8008710:	4628      	mov	r0, r5
 8008712:	e025      	b.n	8008760 <floor+0x98>
 8008714:	4f2b      	ldr	r7, [pc, #172]	; (80087c4 <floor+0xfc>)
 8008716:	4137      	asrs	r7, r6
 8008718:	ea01 0307 	and.w	r3, r1, r7
 800871c:	4303      	orrs	r3, r0
 800871e:	d01f      	beq.n	8008760 <floor+0x98>
 8008720:	a325      	add	r3, pc, #148	; (adr r3, 80087b8 <floor+0xf0>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fdb9 	bl	800029c <__adddf3>
 800872a:	2200      	movs	r2, #0
 800872c:	2300      	movs	r3, #0
 800872e:	f7f8 f9fb 	bl	8000b28 <__aeabi_dcmpgt>
 8008732:	2800      	cmp	r0, #0
 8008734:	d0eb      	beq.n	800870e <floor+0x46>
 8008736:	2c00      	cmp	r4, #0
 8008738:	bfbe      	ittt	lt
 800873a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800873e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008742:	19a4      	addlt	r4, r4, r6
 8008744:	ea24 0407 	bic.w	r4, r4, r7
 8008748:	2500      	movs	r5, #0
 800874a:	e7e0      	b.n	800870e <floor+0x46>
 800874c:	2e33      	cmp	r6, #51	; 0x33
 800874e:	dd0b      	ble.n	8008768 <floor+0xa0>
 8008750:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008754:	d104      	bne.n	8008760 <floor+0x98>
 8008756:	ee10 2a10 	vmov	r2, s0
 800875a:	460b      	mov	r3, r1
 800875c:	f7f7 fd9e 	bl	800029c <__adddf3>
 8008760:	ec41 0b10 	vmov	d0, r0, r1
 8008764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008768:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800876c:	f04f 33ff 	mov.w	r3, #4294967295
 8008770:	fa23 f707 	lsr.w	r7, r3, r7
 8008774:	4207      	tst	r7, r0
 8008776:	d0f3      	beq.n	8008760 <floor+0x98>
 8008778:	a30f      	add	r3, pc, #60	; (adr r3, 80087b8 <floor+0xf0>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f7 fd8d 	bl	800029c <__adddf3>
 8008782:	2200      	movs	r2, #0
 8008784:	2300      	movs	r3, #0
 8008786:	f7f8 f9cf 	bl	8000b28 <__aeabi_dcmpgt>
 800878a:	2800      	cmp	r0, #0
 800878c:	d0bf      	beq.n	800870e <floor+0x46>
 800878e:	2c00      	cmp	r4, #0
 8008790:	da02      	bge.n	8008798 <floor+0xd0>
 8008792:	2e14      	cmp	r6, #20
 8008794:	d103      	bne.n	800879e <floor+0xd6>
 8008796:	3401      	adds	r4, #1
 8008798:	ea25 0507 	bic.w	r5, r5, r7
 800879c:	e7b7      	b.n	800870e <floor+0x46>
 800879e:	2301      	movs	r3, #1
 80087a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80087a4:	fa03 f606 	lsl.w	r6, r3, r6
 80087a8:	4435      	add	r5, r6
 80087aa:	4545      	cmp	r5, r8
 80087ac:	bf38      	it	cc
 80087ae:	18e4      	addcc	r4, r4, r3
 80087b0:	e7f2      	b.n	8008798 <floor+0xd0>
 80087b2:	2500      	movs	r5, #0
 80087b4:	462c      	mov	r4, r5
 80087b6:	e7aa      	b.n	800870e <floor+0x46>
 80087b8:	8800759c 	.word	0x8800759c
 80087bc:	7e37e43c 	.word	0x7e37e43c
 80087c0:	bff00000 	.word	0xbff00000
 80087c4:	000fffff 	.word	0x000fffff

080087c8 <scalbn>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	ec55 4b10 	vmov	r4, r5, d0
 80087ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80087d2:	4606      	mov	r6, r0
 80087d4:	462b      	mov	r3, r5
 80087d6:	b99a      	cbnz	r2, 8008800 <scalbn+0x38>
 80087d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80087dc:	4323      	orrs	r3, r4
 80087de:	d036      	beq.n	800884e <scalbn+0x86>
 80087e0:	4b39      	ldr	r3, [pc, #228]	; (80088c8 <scalbn+0x100>)
 80087e2:	4629      	mov	r1, r5
 80087e4:	ee10 0a10 	vmov	r0, s0
 80087e8:	2200      	movs	r2, #0
 80087ea:	f7f7 ff0d 	bl	8000608 <__aeabi_dmul>
 80087ee:	4b37      	ldr	r3, [pc, #220]	; (80088cc <scalbn+0x104>)
 80087f0:	429e      	cmp	r6, r3
 80087f2:	4604      	mov	r4, r0
 80087f4:	460d      	mov	r5, r1
 80087f6:	da10      	bge.n	800881a <scalbn+0x52>
 80087f8:	a32b      	add	r3, pc, #172	; (adr r3, 80088a8 <scalbn+0xe0>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	e03a      	b.n	8008876 <scalbn+0xae>
 8008800:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008804:	428a      	cmp	r2, r1
 8008806:	d10c      	bne.n	8008822 <scalbn+0x5a>
 8008808:	ee10 2a10 	vmov	r2, s0
 800880c:	4620      	mov	r0, r4
 800880e:	4629      	mov	r1, r5
 8008810:	f7f7 fd44 	bl	800029c <__adddf3>
 8008814:	4604      	mov	r4, r0
 8008816:	460d      	mov	r5, r1
 8008818:	e019      	b.n	800884e <scalbn+0x86>
 800881a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800881e:	460b      	mov	r3, r1
 8008820:	3a36      	subs	r2, #54	; 0x36
 8008822:	4432      	add	r2, r6
 8008824:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008828:	428a      	cmp	r2, r1
 800882a:	dd08      	ble.n	800883e <scalbn+0x76>
 800882c:	2d00      	cmp	r5, #0
 800882e:	a120      	add	r1, pc, #128	; (adr r1, 80088b0 <scalbn+0xe8>)
 8008830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008834:	da1c      	bge.n	8008870 <scalbn+0xa8>
 8008836:	a120      	add	r1, pc, #128	; (adr r1, 80088b8 <scalbn+0xf0>)
 8008838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800883c:	e018      	b.n	8008870 <scalbn+0xa8>
 800883e:	2a00      	cmp	r2, #0
 8008840:	dd08      	ble.n	8008854 <scalbn+0x8c>
 8008842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800884a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800884e:	ec45 4b10 	vmov	d0, r4, r5
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008858:	da19      	bge.n	800888e <scalbn+0xc6>
 800885a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800885e:	429e      	cmp	r6, r3
 8008860:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008864:	dd0a      	ble.n	800887c <scalbn+0xb4>
 8008866:	a112      	add	r1, pc, #72	; (adr r1, 80088b0 <scalbn+0xe8>)
 8008868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e2      	bne.n	8008836 <scalbn+0x6e>
 8008870:	a30f      	add	r3, pc, #60	; (adr r3, 80088b0 <scalbn+0xe8>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fec7 	bl	8000608 <__aeabi_dmul>
 800887a:	e7cb      	b.n	8008814 <scalbn+0x4c>
 800887c:	a10a      	add	r1, pc, #40	; (adr r1, 80088a8 <scalbn+0xe0>)
 800887e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0b8      	beq.n	80087f8 <scalbn+0x30>
 8008886:	a10e      	add	r1, pc, #56	; (adr r1, 80088c0 <scalbn+0xf8>)
 8008888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800888c:	e7b4      	b.n	80087f8 <scalbn+0x30>
 800888e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008892:	3236      	adds	r2, #54	; 0x36
 8008894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008898:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800889c:	4620      	mov	r0, r4
 800889e:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <scalbn+0x108>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	e7e8      	b.n	8008876 <scalbn+0xae>
 80088a4:	f3af 8000 	nop.w
 80088a8:	c2f8f359 	.word	0xc2f8f359
 80088ac:	01a56e1f 	.word	0x01a56e1f
 80088b0:	8800759c 	.word	0x8800759c
 80088b4:	7e37e43c 	.word	0x7e37e43c
 80088b8:	8800759c 	.word	0x8800759c
 80088bc:	fe37e43c 	.word	0xfe37e43c
 80088c0:	c2f8f359 	.word	0xc2f8f359
 80088c4:	81a56e1f 	.word	0x81a56e1f
 80088c8:	43500000 	.word	0x43500000
 80088cc:	ffff3cb0 	.word	0xffff3cb0
 80088d0:	3c900000 	.word	0x3c900000

080088d4 <_close>:
 80088d4:	4b02      	ldr	r3, [pc, #8]	; (80088e0 <_close+0xc>)
 80088d6:	2258      	movs	r2, #88	; 0x58
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	f04f 30ff 	mov.w	r0, #4294967295
 80088de:	4770      	bx	lr
 80088e0:	20000248 	.word	0x20000248

080088e4 <_fstat>:
 80088e4:	4b02      	ldr	r3, [pc, #8]	; (80088f0 <_fstat+0xc>)
 80088e6:	2258      	movs	r2, #88	; 0x58
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	f04f 30ff 	mov.w	r0, #4294967295
 80088ee:	4770      	bx	lr
 80088f0:	20000248 	.word	0x20000248

080088f4 <_getpid>:
 80088f4:	4b02      	ldr	r3, [pc, #8]	; (8008900 <_getpid+0xc>)
 80088f6:	2258      	movs	r2, #88	; 0x58
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	f04f 30ff 	mov.w	r0, #4294967295
 80088fe:	4770      	bx	lr
 8008900:	20000248 	.word	0x20000248

08008904 <_isatty>:
 8008904:	4b02      	ldr	r3, [pc, #8]	; (8008910 <_isatty+0xc>)
 8008906:	2258      	movs	r2, #88	; 0x58
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	2000      	movs	r0, #0
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	20000248 	.word	0x20000248

08008914 <_kill>:
 8008914:	4b02      	ldr	r3, [pc, #8]	; (8008920 <_kill+0xc>)
 8008916:	2258      	movs	r2, #88	; 0x58
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	f04f 30ff 	mov.w	r0, #4294967295
 800891e:	4770      	bx	lr
 8008920:	20000248 	.word	0x20000248

08008924 <_lseek>:
 8008924:	4b02      	ldr	r3, [pc, #8]	; (8008930 <_lseek+0xc>)
 8008926:	2258      	movs	r2, #88	; 0x58
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f04f 30ff 	mov.w	r0, #4294967295
 800892e:	4770      	bx	lr
 8008930:	20000248 	.word	0x20000248

08008934 <_read>:
 8008934:	4b02      	ldr	r3, [pc, #8]	; (8008940 <_read+0xc>)
 8008936:	2258      	movs	r2, #88	; 0x58
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	f04f 30ff 	mov.w	r0, #4294967295
 800893e:	4770      	bx	lr
 8008940:	20000248 	.word	0x20000248

08008944 <_sbrk>:
 8008944:	4a04      	ldr	r2, [pc, #16]	; (8008958 <_sbrk+0x14>)
 8008946:	6811      	ldr	r1, [r2, #0]
 8008948:	4603      	mov	r3, r0
 800894a:	b909      	cbnz	r1, 8008950 <_sbrk+0xc>
 800894c:	4903      	ldr	r1, [pc, #12]	; (800895c <_sbrk+0x18>)
 800894e:	6011      	str	r1, [r2, #0]
 8008950:	6810      	ldr	r0, [r2, #0]
 8008952:	4403      	add	r3, r0
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	4770      	bx	lr
 8008958:	20000250 	.word	0x20000250
 800895c:	20000258 	.word	0x20000258

08008960 <_write>:
 8008960:	4b02      	ldr	r3, [pc, #8]	; (800896c <_write+0xc>)
 8008962:	2258      	movs	r2, #88	; 0x58
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	f04f 30ff 	mov.w	r0, #4294967295
 800896a:	4770      	bx	lr
 800896c:	20000248 	.word	0x20000248

08008970 <_exit>:
 8008970:	e7fe      	b.n	8008970 <_exit>
	...

08008974 <_init>:
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	bf00      	nop
 8008978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897a:	bc08      	pop	{r3}
 800897c:	469e      	mov	lr, r3
 800897e:	4770      	bx	lr

08008980 <_fini>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	bf00      	nop
 8008984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008986:	bc08      	pop	{r3}
 8008988:	469e      	mov	lr, r3
 800898a:	4770      	bx	lr
