
GyroSensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008984  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  08008b28  08008b28  00018b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a0  080096a0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080096a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  200001e0  08009888  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08009888  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c9e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f9  00000000  00000000  00027eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  000297a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  00029e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000070d0  00000000  00000000  0002a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00056f80  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00088500  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000031ac  00000000  00000000  00088550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000ff02  00000000  00000000  0008b6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0009b600  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0009b6cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b0c 	.word	0x08008b0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008b0c 	.word	0x08008b0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <main>:
uint32_t I2C_Timer = 0UL;       // I2C communication timer



int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0b0      	sub	sp, #192	; 0xc0
 8000f64:	af04      	add	r7, sp, #16
    // Task scheduling parameters
	uint32_t DispTaskTime = 70UL; // Display task period  statt:   uint32_t temperatureRefresh = (i2cTaskTime * 0.2f);
 8000f66:	2346      	movs	r3, #70	; 0x46
 8000f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t i2cTaskTime = 2UL; // I2C task period
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    // Array for managing multiple timers
    uint32_t *timerList[] = {&Timer1, &I2C_Timer, &ST7735_Timer };
 8000f72:	4a91      	ldr	r2, [pc, #580]	; (80011b8 <main+0x258>)
 8000f74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    size_t arraySize = sizeof(timerList) / sizeof(timerList[0]);
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    // Sensor data structure and other variables
    MPU6050_t MPU1;
    float const _rad2deg = 180.0 / _pi; // Conversion factor from radians to degrees
 8000f84:	4b8d      	ldr	r3, [pc, #564]	; (80011bc <main+0x25c>)
 8000f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float AlphaBeta[2];            // Array to store angle data

    char outStr[32];               // Buffer for temperature output string
    int8_t ReturnVal=-1;			//  Return of Init mpu routine
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    float temp;

    // Initialize display and peripherals
    BALOsetup();
 8000f90:	f000 f9fc 	bl	800138c <BALOsetup>

    LED_red_on;						//start mpu init
 8000f94:	210f      	movs	r1, #15
 8000f96:	488a      	ldr	r0, [pc, #552]	; (80011c0 <main+0x260>)
 8000f98:	f002 fa56 	bl	8003448 <gpioResetPin>

    systickInit(SYSTICK_10MS);      // Initialize SysTick timer
 8000f9c:	2064      	movs	r0, #100	; 0x64
 8000f9e:	f003 fa0d 	bl	80043bc <systickInit>
    spiInit();                     // Initialize SPI
 8000fa2:	f000 fcc3 	bl	800192c <spiInit>
    tftInitR(INITR_REDTAB);        // Initialize TFT display
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fd7e 	bl	8001aa8 <tftInitR>

    // Set up display properties
    tftSetRotation(LANDSCAPE_FLIP);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f001 fa63 	bl	8002478 <tftSetRotation>
    tftSetFont((uint8_t *)&SmallFont[0]);
 8000fb2:	4884      	ldr	r0, [pc, #528]	; (80011c4 <main+0x264>)
 8000fb4:	f000 ff3a 	bl	8001e2c <tftSetFont>
    tftFillScreen(tft_BLACK);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f001 fa43 	bl	8002444 <tftFillScreen>

    // Initialize rotary push button
    initRotaryPushButton();
 8000fbe:	f000 faf7 	bl	80015b0 <initRotaryPushButton>

    // Set timer interval
    systickSetMillis(&Timer1, DispTaskTime);
 8000fc2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000fc6:	4880      	ldr	r0, [pc, #512]	; (80011c8 <main+0x268>)
 8000fc8:	f003 f9ea 	bl	80043a0 <systickSetMillis>
    systickSetMillis(&I2C_Timer, i2cTaskTime);
 8000fcc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000fd0:	487e      	ldr	r0, [pc, #504]	; (80011cc <main+0x26c>)
 8000fd2:	f003 f9e5 	bl	80043a0 <systickSetMillis>

    // Initial display message

    tftPrintColor((char *)"MPU6050 Tmp.:", 0, 0, tft_GREEN);
 8000fd6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	487c      	ldr	r0, [pc, #496]	; (80011d0 <main+0x270>)
 8000fe0:	f001 fa14 	bl	800240c <tftPrintColor>
    // Initialize MPU6050 sensor


	do
	{
		if (timerTrigger == true)
 8000fe4:	4b7b      	ldr	r3, [pc, #492]	; (80011d4 <main+0x274>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d008      	beq.n	8000ffe <main+0x9e>
		{
			systickUpdateTimerList((uint32_t *)timerList, arraySize);
 8000fec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fa37 	bl	800446c <systickUpdateTimerList>
		}

		// Check if I2C task is due
		if (isSystickExpired(I2C_Timer))
 8000ffe:	4b73      	ldr	r3, [pc, #460]	; (80011cc <main+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f003 f9fc 	bl	8004400 <isSystickExpired>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d014      	beq.n	8001038 <main+0xd8>
		{

			// Reset I2C timer
			systickSetTicktime(&I2C_Timer, i2cTaskTime);
 800100e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001012:	486e      	ldr	r0, [pc, #440]	; (80011cc <main+0x26c>)
 8001014:	f003 f9e6 	bl	80043e4 <systickSetTicktime>
			ReturnVal = mpuInit(&MPU1, MPUi2c, i2cAddr_MPU6050, FSCALE_250, ACCEL_2g, LPBW_94, NO_RESTART);
 8001018:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800101c:	2300      	movs	r3, #0
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2302      	movs	r3, #2
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2300      	movs	r3, #0
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2300      	movs	r3, #0
 800102a:	2268      	movs	r2, #104	; 0x68
 800102c:	496a      	ldr	r1, [pc, #424]	; (80011d8 <main+0x278>)
 800102e:	f001 fad9 	bl	80025e4 <mpuInit>
 8001032:	4603      	mov	r3, r0
 8001034:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}
	} while (ReturnVal < 0);
 8001038:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 800103c:	2b00      	cmp	r3, #0
 800103e:	dbd1      	blt.n	8000fe4 <main+0x84>
/*
 * Assemble Orientation of Sensor Modell Axis are Roll, Pitch,Yaw
 * Sensor Axis X = 1, Y =2, Z = 3 , negative Value are opposite Direction
 */
#ifdef BALA2024
	MPU1.RPY[0]= 2;				// MPU y Axis goes to the front
 8001040:	2302      	movs	r3, #2
 8001042:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	MPU1.RPY[1]= 3;				// MPU z-Axis goes to the left side
 8001046:	2303      	movs	r3, #3
 8001048:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	MPU1.RPY[2]= -1;			// MPU x-Axis goes down
 800104c:	23ff      	movs	r3, #255	; 0xff
 800104e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e




#ifdef Oszi
	MPU1.timebase = (float) i2cTaskTime* 10e-3;  // CycleTime for calc from Gyro to angle
 8001052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105e:	ee17 0a90 	vmov	r0, s15
 8001062:	f7ff fa79 	bl	8000558 <__aeabi_f2d>
 8001066:	a352      	add	r3, pc, #328	; (adr r3, 80011b0 <main+0x250>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fd9e 	bl	8000bb8 <__aeabi_d2f>
 800107c:	4603      	mov	r3, r0
 800107e:	663b      	str	r3, [r7, #96]	; 0x60
	MPU1.timebase = (float) DispTaskTime * 10e-3;  // CycleTime for calc from Gyro to angle
#endif



	LED_red_off;
 8001080:	210f      	movs	r1, #15
 8001082:	484f      	ldr	r0, [pc, #316]	; (80011c0 <main+0x260>)
 8001084:	f002 f9b5 	bl	80033f2 <gpioSetPin>


	// Reset I2C timer
	systickSetTicktime(&I2C_Timer, i2cTaskTime);
 8001088:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800108c:	484f      	ldr	r0, [pc, #316]	; (80011cc <main+0x26c>)
 800108e:	f003 f9a9 	bl	80043e4 <systickSetTicktime>
    while (1)
    {
        // Update timers if the trigger is set
        //TF if (timerTrigger && testVal >= 0)
    	if (timerTrigger == true)
 8001092:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <main+0x274>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <main+0x14c>
        {
            systickUpdateTimerList((uint32_t *)timerList, arraySize);
 800109a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 f9e0 	bl	800446c <systickUpdateTimerList>
        }

        // Check if I2C task is due
        if (isSystickExpired(I2C_Timer))
 80010ac:	4b47      	ldr	r3, [pc, #284]	; (80011cc <main+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f9a5 	bl	8004400 <isSystickExpired>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d052      	beq.n	8001162 <main+0x202>
        {

        	// Reset I2C timer
            systickSetTicktime(&I2C_Timer, i2cTaskTime);
 80010bc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80010c0:	4842      	ldr	r0, [pc, #264]	; (80011cc <main+0x26c>)
 80010c2:	f003 f98f 	bl	80043e4 <systickSetTicktime>


            // Read angles from MPU6050
            //ReturnVal = mpuGetRPfromAccel(&MPU1);
            ReturnVal = mpuGetPitch(&MPU1);
 80010c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fc3c 	bl	8002948 <mpuGetPitch>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            AlphaBeta[0] = MPU1.pitch;
 80010d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010da:	623b      	str	r3, [r7, #32]
            AlphaBeta[1] = MPU1.pitchAccel;
 80010dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24


            // Update LED color based on angle thresholds
            if ((MPU1.pitch * _rad2deg < -10) || (MPU1.pitch * _rad2deg > 10) ||
 80010e2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80010e6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80010f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	d426      	bmi.n	800114a <main+0x1ea>
 80010fc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001100:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001108:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800110c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	dc19      	bgt.n	800114a <main+0x1ea>
                (MPU1.roll * _rad2deg < -10) || (MPU1.roll * _rad2deg > 10))
 8001116:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800111a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800111e:	ee67 7a27 	vmul.f32	s15, s14, s15
            if ((MPU1.pitch * _rad2deg < -10) || (MPU1.pitch * _rad2deg > 10) ||
 8001122:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	d40c      	bmi.n	800114a <main+0x1ea>
                (MPU1.roll * _rad2deg < -10) || (MPU1.roll * _rad2deg > 10))
 8001130:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001134:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	dd03      	ble.n	8001152 <main+0x1f2>
            {
                setRotaryColor(LED_CYAN); // Deviations greater than ±10° trigger cyan
 800114a:	2005      	movs	r0, #5
 800114c:	f000 face 	bl	80016ec <setRotaryColor>
 8001150:	e002      	b.n	8001158 <main+0x1f8>
            }
            else
            {
                setRotaryColor(LED_GREEN); // Otherwise, set green
 8001152:	2002      	movs	r0, #2
 8001154:	f000 faca 	bl	80016ec <setRotaryColor>
            }

#ifdef Oszi
            // Display angle values on the oscilloscope
            AlBeOszi(AlphaBeta);
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f91d 	bl	800139c <AlBeOszi>
#endif
        }
        // Check if Timer1 task is due
        if (isSystickExpired(Timer1))
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <main+0x268>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f003 f94a 	bl	8004400 <isSystickExpired>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d08f      	beq.n	8001092 <main+0x132>
        {
        	// Reset Disp timer
        	systickSetTicktime(&Timer1, DispTaskTime);
 8001172:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <main+0x268>)
 8001178:	f003 f934 	bl	80043e4 <systickSetTicktime>
        	temp = mpuTemp(&MPU1);
 800117c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fd2d 	bl	8002be0 <mpuTemp>
 8001186:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
			sprintf(outStr, "%.1f C", temp);
 800118a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800118e:	f7ff f9e3 	bl	8000558 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4638      	mov	r0, r7
 8001198:	4910      	ldr	r1, [pc, #64]	; (80011dc <main+0x27c>)
 800119a:	f003 fedd 	bl	8004f58 <siprintf>
			tftPrintColor((char *)outStr, (ST7735_TFTWIDTH - 20), 0, tft_GREEN);
 800119e:	4638      	mov	r0, r7
 80011a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80011a4:	2200      	movs	r2, #0
 80011a6:	216c      	movs	r1, #108	; 0x6c
 80011a8:	f001 f930 	bl	800240c <tftPrintColor>
    	if (timerTrigger == true)
 80011ac:	e771      	b.n	8001092 <main+0x132>
 80011ae:	bf00      	nop
 80011b0:	47ae147b 	.word	0x47ae147b
 80011b4:	3f847ae1 	.word	0x3f847ae1
 80011b8:	08008b40 	.word	0x08008b40
 80011bc:	42652ee4 	.word	0x42652ee4
 80011c0:	40020400 	.word	0x40020400
 80011c4:	08008b54 	.word	0x08008b54
 80011c8:	20000200 	.word	0x20000200
 80011cc:	20000208 	.word	0x20000208
 80011d0:	08008b28 	.word	0x08008b28
 80011d4:	200001fc 	.word	0x200001fc
 80011d8:	40005800 	.word	0x40005800
 80011dc:	08008b38 	.word	0x08008b38

080011e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e4:	f003 f990 	bl	8004508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <LoopForever+0x6>)
  ldr r1, =_edata
 80011ea:	490d      	ldr	r1, [pc, #52]	; (8001220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <LoopForever+0xe>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001200:	4c0a      	ldr	r4, [pc, #40]	; (800122c <LoopForever+0x16>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800120e:	f003 fa0d 	bl	800462c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001212:	f7ff fea5 	bl	8000f60 <main>

08001216 <LoopForever>:

LoopForever:
  b LoopForever
 8001216:	e7fe      	b.n	8001216 <LoopForever>
  ldr   r0, =_estack
 8001218:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001224:	080096a8 	.word	0x080096a8
  ldr r2, =_sbss
 8001228:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800122c:	20000248 	.word	0x20000248

08001230 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>
	...

08001234 <i2cActivate>:
// Init hardware



void i2cActivate()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <i2cActivate+0xc8>)
 800123c:	60fb      	str	r3, [r7, #12]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <i2cActivate+0xcc>)
 8001240:	60bb      	str	r3, [r7, #8]
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <i2cActivate+0xd0>)
 8001244:	607b      	str	r3, [r7, #4]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f002 fad2 	bl	80037f0 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f001 ffbf 	bl	80031d0 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8001252:	2202      	movs	r2, #2
 8001254:	2108      	movs	r1, #8
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f002 f880 	bl	800335c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 800125c:	2204      	movs	r2, #4
 800125e:	2108      	movs	r1, #8
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f002 f91d 	bl	80034a0 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8001266:	2202      	movs	r2, #2
 8001268:	2109      	movs	r1, #9
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f002 f876 	bl	800335c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8001270:	2204      	movs	r2, #4
 8001272:	2109      	movs	r1, #9
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f002 f913 	bl	80034a0 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 800127a:	2201      	movs	r2, #1
 800127c:	2108      	movs	r1, #8
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f002 f977 	bl	8003572 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8001284:	2201      	movs	r2, #1
 8001286:	2109      	movs	r1, #9
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f002 f972 	bl	8003572 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 800128e:	2300      	movs	r3, #0
 8001290:	2211      	movs	r2, #17
 8001292:	2100      	movs	r1, #0
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f002 fb5d 	bl	8003954 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f002 fc8d 	bl	8003bba <i2cEnableDevice>
#ifdef BALA2024

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 80012a0:	68b8      	ldr	r0, [r7, #8]
 80012a2:	f002 faa5 	bl	80037f0 <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 80012a6:	2202      	movs	r2, #2
 80012a8:	210a      	movs	r1, #10
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f002 f856 	bl	800335c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 80012b0:	2204      	movs	r2, #4
 80012b2:	210a      	movs	r1, #10
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f002 f8f3 	bl	80034a0 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 80012ba:	2202      	movs	r2, #2
 80012bc:	2103      	movs	r1, #3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f002 f84c 	bl	800335c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 80012c4:	2209      	movs	r2, #9
 80012c6:	2103      	movs	r1, #3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f002 f8e9 	bl	80034a0 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 80012ce:	2201      	movs	r2, #1
 80012d0:	210a      	movs	r1, #10
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f002 f94d 	bl	8003572 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 80012d8:	2201      	movs	r2, #1
 80012da:	2103      	movs	r1, #3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f002 f948 	bl	8003572 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 80012e2:	2300      	movs	r3, #0
 80012e4:	2211      	movs	r2, #17
 80012e6:	2100      	movs	r1, #0
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f002 fb33 	bl	8003954 <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 80012ee:	68b8      	ldr	r0, [r7, #8]
 80012f0:	f002 fc63 	bl	8003bba <i2cEnableDevice>
#endif /* BALA2024 */
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40005400 	.word	0x40005400
 8001300:	40005800 	.word	0x40005800
 8001304:	40020400 	.word	0x40020400

08001308 <ledActivate>:




void ledActivate(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <ledActivate+0x80>)
 800130e:	f001 ffc1 	bl	8003294 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8001312:	2201      	movs	r2, #1
 8001314:	210f      	movs	r1, #15
 8001316:	481c      	ldr	r0, [pc, #112]	; (8001388 <ledActivate+0x80>)
 8001318:	f002 f820 	bl	800335c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 800131c:	2200      	movs	r2, #0
 800131e:	210f      	movs	r1, #15
 8001320:	4819      	ldr	r0, [pc, #100]	; (8001388 <ledActivate+0x80>)
 8001322:	f002 f926 	bl	8003572 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 8001326:	2201      	movs	r2, #1
 8001328:	210f      	movs	r1, #15
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <ledActivate+0x80>)
 800132c:	f002 f96a 	bl	8003604 <gpioSelectPushPullMode>
    LED_red_off;
 8001330:	210f      	movs	r1, #15
 8001332:	4815      	ldr	r0, [pc, #84]	; (8001388 <ledActivate+0x80>)
 8001334:	f002 f85d 	bl	80033f2 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8001338:	2201      	movs	r2, #1
 800133a:	210e      	movs	r1, #14
 800133c:	4812      	ldr	r0, [pc, #72]	; (8001388 <ledActivate+0x80>)
 800133e:	f002 f80d 	bl	800335c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8001342:	2200      	movs	r2, #0
 8001344:	210e      	movs	r1, #14
 8001346:	4810      	ldr	r0, [pc, #64]	; (8001388 <ledActivate+0x80>)
 8001348:	f002 f913 	bl	8003572 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 800134c:	2201      	movs	r2, #1
 800134e:	210e      	movs	r1, #14
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <ledActivate+0x80>)
 8001352:	f002 f957 	bl	8003604 <gpioSelectPushPullMode>
    LED_green_off;
 8001356:	210e      	movs	r1, #14
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <ledActivate+0x80>)
 800135a:	f002 f84a 	bl	80033f2 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 800135e:	2201      	movs	r2, #1
 8001360:	210d      	movs	r1, #13
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <ledActivate+0x80>)
 8001364:	f001 fffa 	bl	800335c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8001368:	2200      	movs	r2, #0
 800136a:	210d      	movs	r1, #13
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <ledActivate+0x80>)
 800136e:	f002 f900 	bl	8003572 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8001372:	2201      	movs	r2, #1
 8001374:	210d      	movs	r1, #13
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <ledActivate+0x80>)
 8001378:	f002 f944 	bl	8003604 <gpioSelectPushPullMode>
    LED_blue_off;
 800137c:	210d      	movs	r1, #13
 800137e:	4802      	ldr	r0, [pc, #8]	; (8001388 <ledActivate+0x80>)
 8001380:	f002 f837 	bl	80033f2 <gpioSetPin>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40020400 	.word	0x40020400

0800138c <BALOsetup>:

void BALOsetup(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 8001390:	f7ff ffba 	bl	8001308 <ledActivate>
   i2cActivate();
 8001394:	f7ff ff4e 	bl	8001234 <i2cActivate>

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <AlBeOszi>:



uint16_t AlBeOszi(float *AlphaBeta)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

// Variables for Oszi Function
const int16_t oszi[3] = {70,50,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
const uint16_t osziColor = tft_GREY;
 80013a4:	f641 1323 	movw	r3, #6435	; 0x1923
 80013a8:	82fb      	strh	r3, [r7, #22]
const uint16_t aColor = tft_YELLOW;
 80013aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013ae:	82bb      	strh	r3, [r7, #20]
const uint16_t bColor = tft_MAGENTA;
 80013b0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80013b4:	827b      	strh	r3, [r7, #18]

static int16_t timepos = 0;

// kleines Oszi als Zeitmitschrieb
	if (AlphaBeta[0] > 1) {AlphaBeta[0]= 1;}
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd03      	ble.n	80013d2 <AlBeOszi+0x36>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013d0:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[0] < -1) {AlphaBeta[0]= -1;}
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80013dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	d502      	bpl.n	80013ec <AlBeOszi+0x50>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a5f      	ldr	r2, [pc, #380]	; (8001568 <AlBeOszi+0x1cc>)
 80013ea:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] > 1) {AlphaBeta[1]= 1;}
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3304      	adds	r3, #4
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	dd04      	ble.n	800140c <AlBeOszi+0x70>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800140a:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] < -1) {AlphaBeta[1]= -1;}
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3304      	adds	r3, #4
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	d503      	bpl.n	800142a <AlBeOszi+0x8e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3304      	adds	r3, #4
 8001426:	4a50      	ldr	r2, [pc, #320]	; (8001568 <AlBeOszi+0x1cc>)
 8001428:	601a      	str	r2, [r3, #0]
	int16_t Ya = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[0]);			// - ST7735 y = 0 upper line inverter direct to y Scale
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <AlBeOszi+0x1d0>)
 800142c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <AlBeOszi+0x1d0>)
 8001434:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001438:	3b01      	subs	r3, #1
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001450:	ee17 3a90 	vmov	r3, s15
 8001454:	b21b      	sxth	r3, r3
 8001456:	b29b      	uxth	r3, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	823b      	strh	r3, [r7, #16]
	int16_t Yb = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[1]);
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <AlBeOszi+0x1d0>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <AlBeOszi+0x1d0>)
 8001468:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146c:	3b01      	subs	r3, #1
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001486:	ee17 3a90 	vmov	r3, s15
 800148a:	b21b      	sxth	r3, r3
 800148c:	b29b      	uxth	r3, r3
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b29b      	uxth	r3, r3
 8001492:	81fb      	strh	r3, [r7, #14]
	int16_t osziHight = oszi[1]*2;
 8001494:	4b35      	ldr	r3, [pc, #212]	; (800156c <AlBeOszi+0x1d0>)
 8001496:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800149a:	b29b      	uxth	r3, r3
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	b29b      	uxth	r3, r3
 80014a0:	81bb      	strh	r3, [r7, #12]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <AlBeOszi+0x1d4>)
 80014a4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <AlBeOszi+0x1d0>)
 80014aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <AlBeOszi+0x1d0>)
 80014b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	b219      	sxth	r1, r3
 80014be:	8afb      	ldrh	r3, [r7, #22]
 80014c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014c4:	f000 fc52 	bl	8001d6c <tftDrawFastVLine>
	if (Ya == Yb)
 80014c8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10a      	bne.n	80014ea <AlBeOszi+0x14e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <AlBeOszi+0x1d4>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80014de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fb84 	bl	8001bf0 <tftDrawPixel>
 80014e8:	e011      	b.n	800150e <AlBeOszi+0x172>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <AlBeOszi+0x1d4>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	8aba      	ldrh	r2, [r7, #20]
 80014f2:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fb7a 	bl	8001bf0 <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <AlBeOszi+0x1d4>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	8a7a      	ldrh	r2, [r7, #18]
 8001504:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fb71 	bl	8001bf0 <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <AlBeOszi+0x1d4>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	b29b      	uxth	r3, r3
 8001516:	3301      	adds	r3, #1
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <AlBeOszi+0x1d4>)
 800151e:	801a      	strh	r2, [r3, #0]
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <AlBeOszi+0x1d4>)
 8001522:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <AlBeOszi+0x1d0>)
 8001528:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dd02      	ble.n	8001536 <AlBeOszi+0x19a>
	{
		timepos = 0;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <AlBeOszi+0x1d4>)
 8001532:	2200      	movs	r2, #0
 8001534:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <AlBeOszi+0x1d4>)
 8001538:	f9b3 0000 	ldrsh.w	r0, [r3]
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <AlBeOszi+0x1d0>)
 800153e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <AlBeOszi+0x1d0>)
 8001544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001548:	0fda      	lsrs	r2, r3, #31
 800154a:	4413      	add	r3, r2
 800154c:	105b      	asrs	r3, r3, #1
 800154e:	b21a      	sxth	r2, r3
 8001550:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001554:	f000 fc0a 	bl	8001d6c <tftDrawFastVLine>
	return timepos;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <AlBeOszi+0x1d4>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	b29b      	uxth	r3, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	bf800000 	.word	0xbf800000
 800156c:	08008b4c 	.word	0x08008b4c
 8001570:	2000020c 	.word	0x2000020c

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <__NVIC_EnableIRQ+0x38>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 80015b4:	482b      	ldr	r0, [pc, #172]	; (8001664 <initRotaryPushButton+0xb4>)
 80015b6:	f001 fe0b 	bl	80031d0 <gpioInitPort>
	gpioInitPort(GPIOB);
 80015ba:	482b      	ldr	r0, [pc, #172]	; (8001668 <initRotaryPushButton+0xb8>)
 80015bc:	f001 fe08 	bl	80031d0 <gpioInitPort>
	gpioInitPort(GPIOC);
 80015c0:	482a      	ldr	r0, [pc, #168]	; (800166c <initRotaryPushButton+0xbc>)
 80015c2:	f001 fe05 	bl	80031d0 <gpioInitPort>
	gpioInitPort(GPIOD);
 80015c6:	482a      	ldr	r0, [pc, #168]	; (8001670 <initRotaryPushButton+0xc0>)
 80015c8:	f001 fe02 	bl	80031d0 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <initRotaryPushButton+0xc4>)
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	4a27      	ldr	r2, [pc, #156]	; (8001674 <initRotaryPushButton+0xc4>)
 80015d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015da:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	4821      	ldr	r0, [pc, #132]	; (8001668 <initRotaryPushButton+0xb8>)
 80015e2:	f001 febb 	bl	800335c <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2100      	movs	r1, #0
 80015ea:	481f      	ldr	r0, [pc, #124]	; (8001668 <initRotaryPushButton+0xb8>)
 80015ec:	f002 f80a 	bl	8003604 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2101      	movs	r1, #1
 80015f4:	481c      	ldr	r0, [pc, #112]	; (8001668 <initRotaryPushButton+0xb8>)
 80015f6:	f001 feb1 	bl	800335c <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2101      	movs	r1, #1
 80015fe:	481a      	ldr	r0, [pc, #104]	; (8001668 <initRotaryPushButton+0xb8>)
 8001600:	f002 f800 	bl	8003604 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 8001604:	2200      	movs	r2, #0
 8001606:	210a      	movs	r1, #10
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <initRotaryPushButton+0xb4>)
 800160a:	f001 fea7 	bl	800335c <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 800160e:	2201      	movs	r2, #1
 8001610:	210a      	movs	r1, #10
 8001612:	4814      	ldr	r0, [pc, #80]	; (8001664 <initRotaryPushButton+0xb4>)
 8001614:	f001 fff6 	bl	8003604 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 8001618:	f001 fb84 	bl	8002d24 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 800161c:	2100      	movs	r1, #0
 800161e:	4812      	ldr	r0, [pc, #72]	; (8001668 <initRotaryPushButton+0xb8>)
 8001620:	f001 fb9c 	bl	8002d5c <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 8001624:	210a      	movs	r1, #10
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <initRotaryPushButton+0xb4>)
 8001628:	f001 fb98 	bl	8002d5c <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 800162c:	2000      	movs	r0, #0
 800162e:	f001 fc49 	bl	8002ec4 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 8001632:	200a      	movs	r0, #10
 8001634:	f001 fc46 	bl	8002ec4 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 8001638:	2101      	movs	r1, #1
 800163a:	2000      	movs	r0, #0
 800163c:	f001 fc64 	bl	8002f08 <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 8001640:	2100      	movs	r1, #0
 8001642:	200a      	movs	r0, #10
 8001644:	f001 fc60 	bl	8002f08 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 8001648:	2006      	movs	r0, #6
 800164a:	f7ff ff93 	bl	8001574 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 800164e:	2028      	movs	r0, #40	; 0x28
 8001650:	f7ff ff90 	bl	8001574 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001654:	b662      	cpsie	i
}
 8001656:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <initRotaryPushButton+0xc8>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400
 800166c:	40020800 	.word	0x40020800
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40023800 	.word	0x40023800
 8001678:	20000215 	.word	0x20000215

0800167c <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <initRotaryPushButtonLED+0x5c>)
 8001682:	f001 fda5 	bl	80031d0 <gpioInitPort>
	gpioInitPort(GPIOB);
 8001686:	4815      	ldr	r0, [pc, #84]	; (80016dc <initRotaryPushButtonLED+0x60>)
 8001688:	f001 fda2 	bl	80031d0 <gpioInitPort>
	gpioInitPort(GPIOC);
 800168c:	4814      	ldr	r0, [pc, #80]	; (80016e0 <initRotaryPushButtonLED+0x64>)
 800168e:	f001 fd9f 	bl	80031d0 <gpioInitPort>
	gpioInitPort(GPIOD);
 8001692:	4814      	ldr	r0, [pc, #80]	; (80016e4 <initRotaryPushButtonLED+0x68>)
 8001694:	f001 fd9c 	bl	80031d0 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 8001698:	2201      	movs	r2, #1
 800169a:	210f      	movs	r1, #15
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <initRotaryPushButtonLED+0x60>)
 800169e:	f001 fe5d 	bl	800335c <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 80016a2:	2201      	movs	r2, #1
 80016a4:	210e      	movs	r1, #14
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <initRotaryPushButtonLED+0x60>)
 80016a8:	f001 fe58 	bl	800335c <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 80016ac:	2201      	movs	r2, #1
 80016ae:	210d      	movs	r1, #13
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <initRotaryPushButtonLED+0x60>)
 80016b2:	f001 fe53 	bl	800335c <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 80016b6:	210f      	movs	r1, #15
 80016b8:	4808      	ldr	r0, [pc, #32]	; (80016dc <initRotaryPushButtonLED+0x60>)
 80016ba:	f001 fe9a 	bl	80033f2 <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 80016be:	210e      	movs	r1, #14
 80016c0:	4806      	ldr	r0, [pc, #24]	; (80016dc <initRotaryPushButtonLED+0x60>)
 80016c2:	f001 fe96 	bl	80033f2 <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 80016c6:	210d      	movs	r1, #13
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <initRotaryPushButtonLED+0x60>)
 80016ca:	f001 fe92 	bl	80033f2 <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <initRotaryPushButtonLED+0x6c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	20000216 	.word	0x20000216

080016ec <setRotaryColor>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setRotaryColor(LED_COLOR_t color)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 80016f6:	4b45      	ldr	r3, [pc, #276]	; (800180c <setRotaryColor+0x120>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <setRotaryColor+0x1c>
	{
		initRotaryPushButtonLED();
 8001704:	f7ff ffba 	bl	800167c <initRotaryPushButtonLED>
	}

	switch(color)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d87a      	bhi.n	8001804 <setRotaryColor+0x118>
 800170e:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <setRotaryColor+0x28>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001735 	.word	0x08001735
 8001718:	0800174f 	.word	0x0800174f
 800171c:	08001769 	.word	0x08001769
 8001720:	08001783 	.word	0x08001783
 8001724:	0800179d 	.word	0x0800179d
 8001728:	080017b7 	.word	0x080017b7
 800172c:	080017d1 	.word	0x080017d1
 8001730:	080017eb 	.word	0x080017eb
	{
		/* Set LED color to BLACK */
		case LED_BLACK:
			gpioSetPin(LED_RED_ADR);
 8001734:	210f      	movs	r1, #15
 8001736:	4836      	ldr	r0, [pc, #216]	; (8001810 <setRotaryColor+0x124>)
 8001738:	f001 fe5b 	bl	80033f2 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 800173c:	210e      	movs	r1, #14
 800173e:	4834      	ldr	r0, [pc, #208]	; (8001810 <setRotaryColor+0x124>)
 8001740:	f001 fe57 	bl	80033f2 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001744:	210d      	movs	r1, #13
 8001746:	4832      	ldr	r0, [pc, #200]	; (8001810 <setRotaryColor+0x124>)
 8001748:	f001 fe53 	bl	80033f2 <gpioSetPin>
			break;
 800174c:	e05a      	b.n	8001804 <setRotaryColor+0x118>

		/* Set LED color to RED */
		case LED_RED:
			gpioResetPin(LED_RED_ADR);
 800174e:	210f      	movs	r1, #15
 8001750:	482f      	ldr	r0, [pc, #188]	; (8001810 <setRotaryColor+0x124>)
 8001752:	f001 fe79 	bl	8003448 <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 8001756:	210e      	movs	r1, #14
 8001758:	482d      	ldr	r0, [pc, #180]	; (8001810 <setRotaryColor+0x124>)
 800175a:	f001 fe4a 	bl	80033f2 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 800175e:	210d      	movs	r1, #13
 8001760:	482b      	ldr	r0, [pc, #172]	; (8001810 <setRotaryColor+0x124>)
 8001762:	f001 fe46 	bl	80033f2 <gpioSetPin>
			break;
 8001766:	e04d      	b.n	8001804 <setRotaryColor+0x118>

		/* Set LED color to GREEN */
		case LED_GREEN:
			gpioSetPin(LED_RED_ADR);
 8001768:	210f      	movs	r1, #15
 800176a:	4829      	ldr	r0, [pc, #164]	; (8001810 <setRotaryColor+0x124>)
 800176c:	f001 fe41 	bl	80033f2 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 8001770:	210e      	movs	r1, #14
 8001772:	4827      	ldr	r0, [pc, #156]	; (8001810 <setRotaryColor+0x124>)
 8001774:	f001 fe68 	bl	8003448 <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001778:	210d      	movs	r1, #13
 800177a:	4825      	ldr	r0, [pc, #148]	; (8001810 <setRotaryColor+0x124>)
 800177c:	f001 fe39 	bl	80033f2 <gpioSetPin>
			break;
 8001780:	e040      	b.n	8001804 <setRotaryColor+0x118>

		/* Set LED color to BLUE */
		case LED_BLUE:
			gpioSetPin(LED_RED_ADR);
 8001782:	210f      	movs	r1, #15
 8001784:	4822      	ldr	r0, [pc, #136]	; (8001810 <setRotaryColor+0x124>)
 8001786:	f001 fe34 	bl	80033f2 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 800178a:	210e      	movs	r1, #14
 800178c:	4820      	ldr	r0, [pc, #128]	; (8001810 <setRotaryColor+0x124>)
 800178e:	f001 fe30 	bl	80033f2 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 8001792:	210d      	movs	r1, #13
 8001794:	481e      	ldr	r0, [pc, #120]	; (8001810 <setRotaryColor+0x124>)
 8001796:	f001 fe57 	bl	8003448 <gpioResetPin>
			break;
 800179a:	e033      	b.n	8001804 <setRotaryColor+0x118>

		/* Set LED color to MAGENTA */
		case LED_MAGENTA:
			gpioResetPin(LED_RED_ADR);
 800179c:	210f      	movs	r1, #15
 800179e:	481c      	ldr	r0, [pc, #112]	; (8001810 <setRotaryColor+0x124>)
 80017a0:	f001 fe52 	bl	8003448 <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 80017a4:	210e      	movs	r1, #14
 80017a6:	481a      	ldr	r0, [pc, #104]	; (8001810 <setRotaryColor+0x124>)
 80017a8:	f001 fe23 	bl	80033f2 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 80017ac:	210d      	movs	r1, #13
 80017ae:	4818      	ldr	r0, [pc, #96]	; (8001810 <setRotaryColor+0x124>)
 80017b0:	f001 fe4a 	bl	8003448 <gpioResetPin>
			break;
 80017b4:	e026      	b.n	8001804 <setRotaryColor+0x118>

		/* Set LED color to CYAN */
		case LED_CYAN:
			gpioSetPin(LED_RED_ADR);
 80017b6:	210f      	movs	r1, #15
 80017b8:	4815      	ldr	r0, [pc, #84]	; (8001810 <setRotaryColor+0x124>)
 80017ba:	f001 fe1a 	bl	80033f2 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 80017be:	210e      	movs	r1, #14
 80017c0:	4813      	ldr	r0, [pc, #76]	; (8001810 <setRotaryColor+0x124>)
 80017c2:	f001 fe41 	bl	8003448 <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 80017c6:	210d      	movs	r1, #13
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <setRotaryColor+0x124>)
 80017ca:	f001 fe3d 	bl	8003448 <gpioResetPin>
			break;
 80017ce:	e019      	b.n	8001804 <setRotaryColor+0x118>

		/* Set LED color to YELLOW */
		case LED_YELLOW:
			gpioResetPin(LED_RED_ADR);
 80017d0:	210f      	movs	r1, #15
 80017d2:	480f      	ldr	r0, [pc, #60]	; (8001810 <setRotaryColor+0x124>)
 80017d4:	f001 fe38 	bl	8003448 <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 80017d8:	210e      	movs	r1, #14
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <setRotaryColor+0x124>)
 80017dc:	f001 fe34 	bl	8003448 <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 80017e0:	210d      	movs	r1, #13
 80017e2:	480b      	ldr	r0, [pc, #44]	; (8001810 <setRotaryColor+0x124>)
 80017e4:	f001 fe05 	bl	80033f2 <gpioSetPin>
			break;
 80017e8:	e00c      	b.n	8001804 <setRotaryColor+0x118>

		/* Set LED color to WHITE */
		case LED_WHITE:
			gpioResetPin(LED_RED_ADR);
 80017ea:	210f      	movs	r1, #15
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <setRotaryColor+0x124>)
 80017ee:	f001 fe2b 	bl	8003448 <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 80017f2:	210e      	movs	r1, #14
 80017f4:	4806      	ldr	r0, [pc, #24]	; (8001810 <setRotaryColor+0x124>)
 80017f6:	f001 fe27 	bl	8003448 <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 80017fa:	210d      	movs	r1, #13
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <setRotaryColor+0x124>)
 80017fe:	f001 fe23 	bl	8003448 <gpioResetPin>
			break;
 8001802:	bf00      	nop
	}
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000216 	.word	0x20000216
 8001810:	40020400 	.word	0x40020400

08001814 <EXTI0_IRQHandler>:




void ROTARY_A_HANDLER(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 8001818:	2101      	movs	r1, #1
 800181a:	480f      	ldr	r0, [pc, #60]	; (8001858 <EXTI0_IRQHandler+0x44>)
 800181c:	f001 ff4f 	bl	80036be <gpioGetPinState>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <EXTI0_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <EXTI0_IRQHandler+0x48>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	4a0b      	ldr	r2, [pc, #44]	; (800185c <EXTI0_IRQHandler+0x48>)
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e004      	b.n	800183c <EXTI0_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <EXTI0_IRQHandler+0x48>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a08      	ldr	r2, [pc, #32]	; (800185c <EXTI0_IRQHandler+0x48>)
 800183a:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <EXTI0_IRQHandler+0x4c>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <EXTI0_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <EXTI0_IRQHandler+0x4c>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <EXTI0_IRQHandler+0x4c>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6153      	str	r3, [r2, #20]
	}
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020400 	.word	0x40020400
 800185c:	20000210 	.word	0x20000210
 8001860:	40013c00 	.word	0x40013c00

08001864 <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <EXTI15_10_IRQHandler+0x2c>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <EXTI15_10_IRQHandler+0x30>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <EXTI15_10_IRQHandler+0x30>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <EXTI15_10_IRQHandler+0x30>)
 8001880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001884:	6153      	str	r3, [r2, #20]
	}
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000214 	.word	0x20000214
 8001894:	40013c00 	.word	0x40013c00

08001898 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <delayms+0x18>)
 80018a4:	f002 fe0c 	bl	80044c0 <systickDelay>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000204 	.word	0x20000204

080018b4 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <tftSPISenddata+0x20>)
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	220f      	movs	r2, #15
 80018c6:	4904      	ldr	r1, [pc, #16]	; (80018d8 <tftSPISenddata+0x24>)
 80018c8:	f002 fceb 	bl	80042a2 <spiWriteByte>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000004 	.word	0x20000004
 80018d8:	40020000 	.word	0x40020000

080018dc <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 80018e6:	2105      	movs	r1, #5
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <tftSendCmd+0x24>)
 80018ea:	f001 fdad 	bl	8003448 <gpioResetPin>
    tftSPISenddata(cmd);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ffdf 	bl	80018b4 <tftSPISenddata>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40020400 	.word	0x40020400

08001904 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 800190e:	2105      	movs	r1, #5
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <tftSendData+0x24>)
 8001912:	f001 fd6e 	bl	80033f2 <gpioSetPin>
    tftSPISenddata(data);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffcb 	bl	80018b4 <tftSPISenddata>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40020400 	.word	0x40020400

0800192c <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 8001932:	4825      	ldr	r0, [pc, #148]	; (80019c8 <spiInit+0x9c>)
 8001934:	f001 fcae 	bl	8003294 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8001938:	2201      	movs	r2, #1
 800193a:	2104      	movs	r1, #4
 800193c:	4822      	ldr	r0, [pc, #136]	; (80019c8 <spiInit+0x9c>)
 800193e:	f001 fd0d 	bl	800335c <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8001942:	4821      	ldr	r0, [pc, #132]	; (80019c8 <spiInit+0x9c>)
 8001944:	f001 fca6 	bl	8003294 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8001948:	2201      	movs	r2, #1
 800194a:	2105      	movs	r1, #5
 800194c:	481e      	ldr	r0, [pc, #120]	; (80019c8 <spiInit+0x9c>)
 800194e:	f001 fd05 	bl	800335c <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <spiInit+0xa0>)
 8001954:	f001 fc3c 	bl	80031d0 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8001958:	2201      	movs	r2, #1
 800195a:	210f      	movs	r1, #15
 800195c:	481b      	ldr	r0, [pc, #108]	; (80019cc <spiInit+0xa0>)
 800195e:	f001 fcfd 	bl	800335c <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8001962:	2201      	movs	r2, #1
 8001964:	210f      	movs	r1, #15
 8001966:	4819      	ldr	r0, [pc, #100]	; (80019cc <spiInit+0xa0>)
 8001968:	f001 fe4c 	bl	8003604 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 800196c:	4817      	ldr	r0, [pc, #92]	; (80019cc <spiInit+0xa0>)
 800196e:	f001 fc2f 	bl	80031d0 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 8001972:	2202      	movs	r2, #2
 8001974:	2105      	movs	r1, #5
 8001976:	4815      	ldr	r0, [pc, #84]	; (80019cc <spiInit+0xa0>)
 8001978:	f001 fcf0 	bl	800335c <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 800197c:	2205      	movs	r2, #5
 800197e:	2105      	movs	r1, #5
 8001980:	4812      	ldr	r0, [pc, #72]	; (80019cc <spiInit+0xa0>)
 8001982:	f001 fd8d 	bl	80034a0 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 8001986:	2202      	movs	r2, #2
 8001988:	2107      	movs	r1, #7
 800198a:	4810      	ldr	r0, [pc, #64]	; (80019cc <spiInit+0xa0>)
 800198c:	f001 fce6 	bl	800335c <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8001990:	2205      	movs	r2, #5
 8001992:	2107      	movs	r1, #7
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <spiInit+0xa0>)
 8001996:	f001 fd83 	bl	80034a0 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <spiInit+0xa4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fc24 	bl	80041ec <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <spiInit+0xa4>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	2300      	movs	r3, #0
 80019aa:	9303      	str	r3, [sp, #12]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2301      	movs	r3, #1
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	2200      	movs	r2, #0
 80019bc:	2103      	movs	r1, #3
 80019be:	f002 fb27 	bl	8004010 <spiInitSPI>

}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020000 	.word	0x40020000
 80019d0:	20000004 	.word	0x20000004

080019d4 <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80019e6:	e033      	b.n	8001a50 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff73 	bl	80018dc <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a08:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a10:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8001a12:	e006      	b.n	8001a22 <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff71 	bl	8001904 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 8001a22:	7bbb      	ldrb	r3, [r7, #14]
 8001a24:	1e5a      	subs	r2, r3, #1
 8001a26:	73ba      	strb	r2, [r7, #14]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f3      	bne.n	8001a14 <commandList+0x40>
		}

		if(ms) {
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00e      	beq.n	8001a50 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001a3c:	89bb      	ldrh	r3, [r7, #12]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d102      	bne.n	8001a48 <commandList+0x74>
 8001a42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a46:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8001a48:	89bb      	ldrh	r3, [r7, #12]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff24 	bl	8001898 <delayms>
	while(numCommands--) {                 // For each command...
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	1e5a      	subs	r2, r3, #1
 8001a54:	73fa      	strb	r2, [r7, #15]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1c6      	bne.n	80019e8 <commandList+0x14>
		}
	}
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <commonInit+0x3c>)
 8001a70:	f001 fcea 	bl	8003448 <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8001a74:	2104      	movs	r1, #4
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <commonInit+0x40>)
 8001a78:	f001 fce6 	bl	8003448 <gpioResetPin>
	delayms(50);  //default value 500
 8001a7c:	2032      	movs	r0, #50	; 0x32
 8001a7e:	f7ff ff0b 	bl	8001898 <delayms>
	ST7735_RST1;
 8001a82:	2104      	movs	r1, #4
 8001a84:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <commonInit+0x40>)
 8001a86:	f001 fcb4 	bl	80033f2 <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <commonInit+0x32>
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff9f 	bl	80019d4 <commandList>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 8001ab2:	2032      	movs	r0, #50	; 0x32
 8001ab4:	f7ff fef0 	bl	8001898 <delayms>
	commonInit(Rcmd1);
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <tftInitR+0x58>)
 8001aba:	f7ff ffd3 	bl	8001a64 <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 8001ac4:	480f      	ldr	r0, [pc, #60]	; (8001b04 <tftInitR+0x5c>)
 8001ac6:	f7ff ff85 	bl	80019d4 <commandList>
		//Starting position of rows and columns
		colstart = 2;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <tftInitR+0x60>)
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <tftInitR+0x64>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e002      	b.n	8001ade <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <tftInitR+0x68>)
 8001ada:	f7ff ff7b 	bl	80019d4 <commandList>
	}
	commandList(Rcmd3);
 8001ade:	480d      	ldr	r0, [pc, #52]	; (8001b14 <tftInitR+0x6c>)
 8001ae0:	f7ff ff78 	bl	80019d4 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d105      	bne.n	8001af6 <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 8001aea:	2036      	movs	r0, #54	; 0x36
 8001aec:	f7ff fef6 	bl	80018dc <tftSendCmd>
		tftSendData(0xC0);
 8001af0:	20c0      	movs	r0, #192	; 0xc0
 8001af2:	f7ff ff07 	bl	8001904 <tftSendData>
	}

	//  tabcolor = options;
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	08008fcc 	.word	0x08008fcc
 8001b04:	08009008 	.word	0x08009008
 8001b08:	20000218 	.word	0x20000218
 8001b0c:	2000021c 	.word	0x2000021c
 8001b10:	08009018 	.word	0x08009018
 8001b14:	08009028 	.word	0x08009028

08001b18 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4623      	mov	r3, r4
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71bb      	strb	r3, [r7, #6]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	717b      	strb	r3, [r7, #5]
 8001b32:	4613      	mov	r3, r2
 8001b34:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 8001b36:	202a      	movs	r0, #42	; 0x2a
 8001b38:	f7ff fed0 	bl	80018dc <tftSendCmd>
	tftSendData(0x00);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fee1 	bl	8001904 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <tftSetAddrWindow+0x98>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fed8 	bl	8001904 <tftSendData>
	tftSendData(0x00);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fed5 	bl	8001904 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <tftSetAddrWindow+0x98>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	797b      	ldrb	r3, [r7, #5]
 8001b62:	4413      	add	r3, r2
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fecc 	bl	8001904 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8001b6c:	202b      	movs	r0, #43	; 0x2b
 8001b6e:	f7ff feb5 	bl	80018dc <tftSendCmd>
	tftSendData(0x00);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff fec6 	bl	8001904 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <tftSetAddrWindow+0x9c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	4413      	add	r3, r2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff febd 	bl	8001904 <tftSendData>
	tftSendData(0x00);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff feba 	bl	8001904 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <tftSetAddrWindow+0x9c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	793b      	ldrb	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff feb1 	bl	8001904 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 8001ba2:	202c      	movs	r0, #44	; 0x2c
 8001ba4:	f7ff fe9a 	bl	80018dc <tftSendCmd>
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	20000218 	.word	0x20000218
 8001bb4:	2000021c 	.word	0x2000021c

08001bb8 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <tftPushColor+0x34>)
 8001bc6:	f001 fc14 	bl	80033f2 <gpioSetPin>
	putpix(color);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fe6e 	bl	80018b4 <tftSPISenddata>
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fe69 	bl	80018b4 <tftSPISenddata>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40020400 	.word	0x40020400

08001bf0 <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	80bb      	strh	r3, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 8001c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db22      	blt.n	8001c50 <tftDrawPixel+0x60>
 8001c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <tftDrawPixel+0x68>)
 8001c10:	8812      	ldrh	r2, [r2, #0]
 8001c12:	4293      	cmp	r3, r2
 8001c14:	da1c      	bge.n	8001c50 <tftDrawPixel+0x60>
 8001c16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db18      	blt.n	8001c50 <tftDrawPixel+0x60>
 8001c1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <tftDrawPixel+0x6c>)
 8001c24:	8812      	ldrh	r2, [r2, #0]
 8001c26:	4293      	cmp	r3, r2
 8001c28:	da12      	bge.n	8001c50 <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	b2d8      	uxtb	r0, r3
 8001c2e:	88bb      	ldrh	r3, [r7, #4]
 8001c30:	b2d9      	uxtb	r1, r3
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	88bb      	ldrh	r3, [r7, #4]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f7ff ff69 	bl	8001b18 <tftSetAddrWindow>
	tftPushColor(color);
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ffb5 	bl	8001bb8 <tftPushColor>
 8001c4e:	e000      	b.n	8001c52 <tftDrawPixel+0x62>
		return;
 8001c50:	bf00      	nop
}
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000002 	.word	0x20000002

08001c60 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	80fb      	strh	r3, [r7, #6]
 8001c72:	4603      	mov	r3, r0
 8001c74:	80bb      	strh	r3, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	807b      	strh	r3, [r7, #2]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8001c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c82:	4a37      	ldr	r2, [pc, #220]	; (8001d60 <tftFillRect+0x100>)
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	4293      	cmp	r3, r2
 8001c88:	da65      	bge.n	8001d56 <tftFillRect+0xf6>
 8001c8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c8e:	4a35      	ldr	r2, [pc, #212]	; (8001d64 <tftFillRect+0x104>)
 8001c90:	8812      	ldrh	r2, [r2, #0]
 8001c92:	4293      	cmp	r3, r2
 8001c94:	da5f      	bge.n	8001d56 <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 8001c96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <tftFillRect+0x100>)
 8001ca2:	8812      	ldrh	r2, [r2, #0]
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	dd05      	ble.n	8001cb4 <tftFillRect+0x54>
		{
		w = width  - x;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <tftFillRect+0x100>)
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8001cb4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cb8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <tftFillRect+0x104>)
 8001cc0:	8812      	ldrh	r2, [r2, #0]
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	dd05      	ble.n	8001cd2 <tftFillRect+0x72>
		{
		h = height - y;
 8001cc6:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <tftFillRect+0x104>)
 8001cc8:	881a      	ldrh	r2, [r3, #0]
 8001cca:	88bb      	ldrh	r3, [r7, #4]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	b2d8      	uxtb	r0, r3
 8001cd6:	88bb      	ldrh	r3, [r7, #4]
 8001cd8:	b2d9      	uxtb	r1, r3
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b2dc      	uxtb	r4, r3
 8001cea:	88bb      	ldrh	r3, [r7, #4]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	883b      	ldrh	r3, [r7, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	f7ff ff0c 	bl	8001b18 <tftSetAddrWindow>

	ST7735_DC1;
 8001d00:	2105      	movs	r1, #5
 8001d02:	4819      	ldr	r0, [pc, #100]	; (8001d68 <tftFillRect+0x108>)
 8001d04:	f001 fb75 	bl	80033f2 <gpioSetPin>
	for(y=h; y>0; y--)
 8001d08:	883b      	ldrh	r3, [r7, #0]
 8001d0a:	80bb      	strh	r3, [r7, #4]
 8001d0c:	e01e      	b.n	8001d4c <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	80fb      	strh	r3, [r7, #6]
 8001d12:	e011      	b.n	8001d38 <tftFillRect+0xd8>
		{
			putpix(color);
 8001d14:	8b3b      	ldrh	r3, [r7, #24]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fdc9 	bl	80018b4 <tftSPISenddata>
 8001d22:	8b3b      	ldrh	r3, [r7, #24]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fdc4 	bl	80018b4 <tftSPISenddata>
		for(x=w; x>0; x--)
 8001d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	80fb      	strh	r3, [r7, #6]
 8001d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dce9      	bgt.n	8001d14 <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 8001d40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	80bb      	strh	r3, [r7, #4]
 8001d4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	dcdc      	bgt.n	8001d0e <tftFillRect+0xae>
 8001d54:	e000      	b.n	8001d58 <tftFillRect+0xf8>
		return;
 8001d56:	bf00      	nop
		}
	}
}
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000002 	.word	0x20000002
 8001d68:	40020400 	.word	0x40020400

08001d6c <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4604      	mov	r4, r0
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	80fb      	strh	r3, [r7, #6]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80bb      	strh	r3, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	807b      	strh	r3, [r7, #2]
 8001d86:	4613      	mov	r3, r2
 8001d88:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <tftDrawFastVLine+0xb4>)
 8001d90:	8812      	ldrh	r2, [r2, #0]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	da3f      	bge.n	8001e16 <tftDrawFastVLine+0xaa>
 8001d96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d9a:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <tftDrawFastVLine+0xb8>)
 8001d9c:	8812      	ldrh	r2, [r2, #0]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	da39      	bge.n	8001e16 <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 8001da2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001da6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <tftDrawFastVLine+0xb8>)
 8001dae:	8812      	ldrh	r2, [r2, #0]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	dd05      	ble.n	8001dc0 <tftDrawFastVLine+0x54>
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <tftDrawFastVLine+0xb8>)
 8001db6:	881a      	ldrh	r2, [r3, #0]
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	b2d8      	uxtb	r0, r3
 8001dc4:	88bb      	ldrh	r3, [r7, #4]
 8001dc6:	b2d9      	uxtb	r1, r3
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	b2dc      	uxtb	r4, r3
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4622      	mov	r2, r4
 8001dde:	f7ff fe9b 	bl	8001b18 <tftSetAddrWindow>

	ST7735_DC1;
 8001de2:	2105      	movs	r1, #5
 8001de4:	4810      	ldr	r0, [pc, #64]	; (8001e28 <tftDrawFastVLine+0xbc>)
 8001de6:	f001 fb04 	bl	80033f2 <gpioSetPin>
	while (h--) {
 8001dea:	e00b      	b.n	8001e04 <tftDrawFastVLine+0x98>
		putpix(color);
 8001dec:	883b      	ldrh	r3, [r7, #0]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fd5d 	bl	80018b4 <tftSPISenddata>
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fd58 	bl	80018b4 <tftSPISenddata>
	while (h--) {
 8001e04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	3a01      	subs	r2, #1
 8001e0c:	b292      	uxth	r2, r2
 8001e0e:	807a      	strh	r2, [r7, #2]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1eb      	bne.n	8001dec <tftDrawFastVLine+0x80>
 8001e14:	e000      	b.n	8001e18 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 8001e16:	bf00      	nop
	}
}
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd90      	pop	{r4, r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000002 	.word	0x20000002
 8001e28:	40020400 	.word	0x40020400

08001e2c <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <tftSetFont+0x40>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <tftSetFont+0x40>)
 8001e40:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	785a      	ldrb	r2, [r3, #1]
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <tftSetFont+0x40>)
 8001e48:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	789a      	ldrb	r2, [r3, #2]
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <tftSetFont+0x40>)
 8001e50:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3303      	adds	r3, #3
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <tftSetFont+0x40>)
 8001e5c:	811a      	strh	r2, [r3, #8]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000224 	.word	0x20000224

08001e70 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8001e7e:	4b74      	ldr	r3, [pc, #464]	; (8002050 <tftPrintChar+0x1e0>)
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d803      	bhi.n	8001e8e <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8001e86:	4b72      	ldr	r3, [pc, #456]	; (8002050 <tftPrintChar+0x1e0>)
 8001e88:	791b      	ldrb	r3, [r3, #4]
 8001e8a:	77bb      	strb	r3, [r7, #30]
 8001e8c:	e003      	b.n	8001e96 <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8001e8e:	4b70      	ldr	r3, [pc, #448]	; (8002050 <tftPrintChar+0x1e0>)
 8001e90:	791b      	ldrb	r3, [r3, #4]
 8001e92:	08db      	lsrs	r3, r3, #3
 8001e94:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8001e96:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <tftPrintChar+0x1e4>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d15e      	bne.n	8001f5c <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	b2d8      	uxtb	r0, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	b2d9      	uxtb	r1, r3
 8001ea6:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <tftPrintChar+0x1e0>)
 8001ea8:	791a      	ldrb	r2, [r3, #4]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b2dc      	uxtb	r4, r3
 8001eb6:	4b66      	ldr	r3, [pc, #408]	; (8002050 <tftPrintChar+0x1e0>)
 8001eb8:	795a      	ldrb	r2, [r3, #5]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	f7ff fe26 	bl	8001b18 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	4a60      	ldr	r2, [pc, #384]	; (8002050 <tftPrintChar+0x1e0>)
 8001ed0:	7992      	ldrb	r2, [r2, #6]
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	7fbb      	ldrb	r3, [r7, #30]
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <tftPrintChar+0x1e0>)
 8001edc:	795b      	ldrb	r3, [r3, #5]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	fb11 f303 	smulbb	r3, r1, r3
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	fb12 f303 	smulbb	r3, r2, r3
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3304      	adds	r3, #4
 8001eee:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	83bb      	strh	r3, [r7, #28]
 8001ef4:	e029      	b.n	8001f4a <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8001ef6:	4b56      	ldr	r3, [pc, #344]	; (8002050 <tftPrintChar+0x1e0>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	8b7b      	ldrh	r3, [r7, #26]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	77fb      	strb	r3, [r7, #31]
 8001f06:	e017      	b.n	8001f38 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8001f08:	7cfa      	ldrb	r2, [r7, #19]
 8001f0a:	7ffb      	ldrb	r3, [r7, #31]
 8001f0c:	f1c3 0307 	rsb	r3, r3, #7
 8001f10:	fa42 f303 	asr.w	r3, r2, r3
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <tftPrintChar+0x1e8>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fe49 	bl	8001bb8 <tftPushColor>
 8001f26:	e004      	b.n	8001f32 <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <tftPrintChar+0x1ec>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fe43 	bl	8001bb8 <tftPushColor>
			for(i=0;i<8;i++)
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	3301      	adds	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
 8001f38:	7ffb      	ldrb	r3, [r7, #31]
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	d9e4      	bls.n	8001f08 <tftPrintChar+0x98>
				}
			}
			temp++;
 8001f3e:	8b7b      	ldrh	r3, [r7, #26]
 8001f40:	3301      	adds	r3, #1
 8001f42:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8001f44:	8bbb      	ldrh	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	83bb      	strh	r3, [r7, #28]
 8001f4a:	8bba      	ldrh	r2, [r7, #28]
 8001f4c:	7fbb      	ldrb	r3, [r7, #30]
 8001f4e:	4940      	ldr	r1, [pc, #256]	; (8002050 <tftPrintChar+0x1e0>)
 8001f50:	7949      	ldrb	r1, [r1, #5]
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	429a      	cmp	r2, r3
 8001f58:	dbcd      	blt.n	8001ef6 <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001f5a:	e075      	b.n	8002048 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <tftPrintChar+0x1e0>)
 8001f60:	7992      	ldrb	r2, [r2, #6]
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	7fbb      	ldrb	r3, [r7, #30]
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	4b39      	ldr	r3, [pc, #228]	; (8002050 <tftPrintChar+0x1e0>)
 8001f6c:	795b      	ldrb	r3, [r3, #5]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	fb11 f303 	smulbb	r3, r1, r3
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	fb12 f303 	smulbb	r3, r2, r3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	83bb      	strh	r3, [r7, #28]
 8001f84:	e05a      	b.n	800203c <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e04b      	b.n	8002024 <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <tftPrintChar+0x1e0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	8b79      	ldrh	r1, [r7, #26]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	440a      	add	r2, r1
 8001f96:	4413      	add	r3, r2
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	77fb      	strb	r3, [r7, #31]
 8001fa0:	e03a      	b.n	8002018 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	b2d8      	uxtb	r0, r3
 8001fb8:	8bbb      	ldrh	r3, [r7, #28]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b2d9      	uxtb	r1, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	7ffb      	ldrb	r3, [r7, #31]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b2dc      	uxtb	r4, r3
 8001fde:	8bbb      	ldrh	r3, [r7, #28]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4622      	mov	r2, r4
 8001ff0:	f7ff fd92 	bl	8001b18 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8001ff4:	7cfa      	ldrb	r2, [r7, #19]
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	f1c3 0307 	rsb	r3, r3, #7
 8001ffc:	fa42 f303 	asr.w	r3, r2, r3
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <tftPrintChar+0x1e8>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fdd3 	bl	8001bb8 <tftPushColor>
				for(i=0;i<8;i++)
 8002012:	7ffb      	ldrb	r3, [r7, #31]
 8002014:	3301      	adds	r3, #1
 8002016:	77fb      	strb	r3, [r7, #31]
 8002018:	7ffb      	ldrb	r3, [r7, #31]
 800201a:	2b07      	cmp	r3, #7
 800201c:	d9c1      	bls.n	8001fa2 <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	7fbb      	ldrb	r3, [r7, #30]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbaf      	blt.n	8001f8c <tftPrintChar+0x11c>
			temp+=(fz);
 800202c:	7fbb      	ldrb	r3, [r7, #30]
 800202e:	b29a      	uxth	r2, r3
 8002030:	8b7b      	ldrh	r3, [r7, #26]
 8002032:	4413      	add	r3, r2
 8002034:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002036:	8bbb      	ldrh	r3, [r7, #28]
 8002038:	3301      	adds	r3, #1
 800203a:	83bb      	strh	r3, [r7, #28]
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <tftPrintChar+0x1e0>)
 800203e:	795b      	ldrb	r3, [r3, #5]
 8002040:	b29b      	uxth	r3, r3
 8002042:	8bba      	ldrh	r2, [r7, #28]
 8002044:	429a      	cmp	r2, r3
 8002046:	d39e      	bcc.n	8001f86 <tftPrintChar+0x116>
}
 8002048:	bf00      	nop
 800204a:	3724      	adds	r7, #36	; 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	20000224 	.word	0x20000224
 8002054:	20000230 	.word	0x20000230
 8002058:	20000008 	.word	0x20000008
 800205c:	20000232 	.word	0x20000232

08002060 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8002060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002064:	b08e      	sub	sp, #56	; 0x38
 8002066:	af00      	add	r7, sp, #0
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	4603      	mov	r3, r0
 8002070:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8002072:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002074:	f7fe fa5e 	bl	8000534 <__aeabi_i2d>
 8002078:	a395      	add	r3, pc, #596	; (adr r3, 80022d0 <tftRotateChar+0x270>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe fac3 	bl	8000608 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 800208a:	4b8d      	ldr	r3, [pc, #564]	; (80022c0 <tftRotateChar+0x260>)
 800208c:	791b      	ldrb	r3, [r3, #4]
 800208e:	2b07      	cmp	r3, #7
 8002090:	d804      	bhi.n	800209c <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <tftRotateChar+0x260>)
 8002094:	791b      	ldrb	r3, [r3, #4]
 8002096:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800209a:	e017      	b.n	80020cc <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 800209c:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <tftRotateChar+0x260>)
 800209e:	791b      	ldrb	r3, [r3, #4]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	4a85      	ldr	r2, [pc, #532]	; (80022c0 <tftRotateChar+0x260>)
 80020aa:	7992      	ldrb	r2, [r2, #6]
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020b4:	b299      	uxth	r1, r3
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <tftRotateChar+0x260>)
 80020b8:	795b      	ldrb	r3, [r3, #5]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	fb11 f303 	smulbb	r3, r1, r3
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	fb12 f303 	smulbb	r3, r2, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3304      	adds	r3, #4
 80020ca:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80020d2:	e0e6      	b.n	80022a2 <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d8:	e0d2      	b.n	8002280 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 80020da:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <tftRotateChar+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80020e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e2:	440a      	add	r2, r1
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020f0:	e0be      	b.n	8002270 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 80020f2:	68b8      	ldr	r0, [r7, #8]
 80020f4:	f7fe fa1e 	bl	8000534 <__aeabi_i2d>
 80020f8:	4604      	mov	r4, r0
 80020fa:	460d      	mov	r5, r1
 80020fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	441a      	add	r2, r3
 8002106:	4b6e      	ldr	r3, [pc, #440]	; (80022c0 <tftRotateChar+0x260>)
 8002108:	791b      	ldrb	r3, [r3, #4]
 800210a:	4619      	mov	r1, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa0d 	bl	8000534 <__aeabi_i2d>
 800211a:	4680      	mov	r8, r0
 800211c:	4689      	mov	r9, r1
 800211e:	ed97 0b08 	vldr	d0, [r7, #32]
 8002122:	f005 f991 	bl	8007448 <cos>
 8002126:	ec53 2b10 	vmov	r2, r3, d0
 800212a:	4640      	mov	r0, r8
 800212c:	4649      	mov	r1, r9
 800212e:	f7fe fa6b 	bl	8000608 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4692      	mov	sl, r2
 8002138:	469b      	mov	fp, r3
 800213a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f9f8 	bl	8000534 <__aeabi_i2d>
 8002144:	4680      	mov	r8, r0
 8002146:	4689      	mov	r9, r1
 8002148:	ed97 0b08 	vldr	d0, [r7, #32]
 800214c:	f005 f9d0 	bl	80074f0 <sin>
 8002150:	ec53 2b10 	vmov	r2, r3, d0
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe fa56 	bl	8000608 <__aeabi_dmul>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4650      	mov	r0, sl
 8002162:	4659      	mov	r1, fp
 8002164:	f7fe f898 	bl	8000298 <__aeabi_dsub>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4620      	mov	r0, r4
 800216e:	4629      	mov	r1, r5
 8002170:	f7fe f894 	bl	800029c <__adddf3>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe fcf4 	bl	8000b68 <__aeabi_d2iz>
 8002180:	4603      	mov	r3, r0
 8002182:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe f9d5 	bl	8000534 <__aeabi_i2d>
 800218a:	4604      	mov	r4, r0
 800218c:	460d      	mov	r5, r1
 800218e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9ce 	bl	8000534 <__aeabi_i2d>
 8002198:	4680      	mov	r8, r0
 800219a:	4689      	mov	r9, r1
 800219c:	ed97 0b08 	vldr	d0, [r7, #32]
 80021a0:	f005 f952 	bl	8007448 <cos>
 80021a4:	ec53 2b10 	vmov	r2, r3, d0
 80021a8:	4640      	mov	r0, r8
 80021aa:	4649      	mov	r1, r9
 80021ac:	f7fe fa2c 	bl	8000608 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4692      	mov	sl, r2
 80021b6:	469b      	mov	fp, r3
 80021b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	441a      	add	r2, r3
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <tftRotateChar+0x260>)
 80021c4:	791b      	ldrb	r3, [r3, #4]
 80021c6:	4619      	mov	r1, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9af 	bl	8000534 <__aeabi_i2d>
 80021d6:	4680      	mov	r8, r0
 80021d8:	4689      	mov	r9, r1
 80021da:	ed97 0b08 	vldr	d0, [r7, #32]
 80021de:	f005 f987 	bl	80074f0 <sin>
 80021e2:	ec53 2b10 	vmov	r2, r3, d0
 80021e6:	4640      	mov	r0, r8
 80021e8:	4649      	mov	r1, r9
 80021ea:	f7fe fa0d 	bl	8000608 <__aeabi_dmul>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4650      	mov	r0, sl
 80021f4:	4659      	mov	r1, fp
 80021f6:	f7fe f851 	bl	800029c <__adddf3>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe f84b 	bl	800029c <__adddf3>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fcab 	bl	8000b68 <__aeabi_d2iz>
 8002212:	4603      	mov	r3, r0
 8002214:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	b2d8      	uxtb	r0, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	b2d9      	uxtb	r1, r3
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	3301      	adds	r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3301      	adds	r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f7ff fc73 	bl	8001b18 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8002232:	7ffa      	ldrb	r2, [r7, #31]
 8002234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002238:	f1c3 0307 	rsb	r3, r3, #7
 800223c:	fa42 f303 	asr.w	r3, r2, r3
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <tftRotateChar+0x264>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fcb3 	bl	8001bb8 <tftPushColor>
 8002252:	e008      	b.n	8002266 <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <tftRotateChar+0x268>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d104      	bne.n	8002266 <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <tftRotateChar+0x26c>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fca9 	bl	8001bb8 <tftPushColor>
			for(i=0;i<8;i++)
 8002266:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800226a:	3301      	adds	r3, #1
 800226c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002270:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002274:	2b07      	cmp	r3, #7
 8002276:	f67f af3c 	bls.w	80020f2 <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	3301      	adds	r3, #1
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002280:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002286:	429a      	cmp	r2, r3
 8002288:	f6ff af27 	blt.w	80020da <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 800228c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002290:	b29a      	uxth	r2, r3
 8002292:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002294:	4413      	add	r3, r2
 8002296:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8002298:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800229c:	3301      	adds	r3, #1
 800229e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <tftRotateChar+0x260>)
 80022a4:	795b      	ldrb	r3, [r3, #5]
 80022a6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80022aa:	429a      	cmp	r2, r3
 80022ac:	f4ff af12 	bcc.w	80020d4 <tftRotateChar+0x74>
	}
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3738      	adds	r7, #56	; 0x38
 80022b6:	46bd      	mov	sp, r7
 80022b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022bc:	f3af 8000 	nop.w
 80022c0:	20000224 	.word	0x20000224
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000230 	.word	0x20000230
 80022cc:	20000232 	.word	0x20000232
 80022d0:	1eb851ec 	.word	0x1eb851ec
 80022d4:	3f91eb85 	.word	0x3f91eb85

080022d8 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	; 0x30
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7fd ff74 	bl	80001e0 <strlen>
 80022f8:	4603      	mov	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f113 0f02 	cmn.w	r3, #2
 8002302:	d10a      	bne.n	800231a <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <tftPrint+0x128>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <tftPrint+0x12c>)
 800230c:	791b      	ldrb	r3, [r3, #4]
 800230e:	4619      	mov	r1, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d10d      	bne.n	800233e <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 8002322:	4b39      	ldr	r3, [pc, #228]	; (8002408 <tftPrint+0x130>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <tftPrint+0x12c>)
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	4619      	mov	r1, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	0fda      	lsrs	r2, r3, #31
 8002338:	4413      	add	r3, r2
 800233a:	105b      	asrs	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	e053      	b.n	80023ec <tftPrint+0x114>
	{
		lettercount++;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	3301      	adds	r3, #1
 8002348:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d112      	bne.n	8002376 <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60fa      	str	r2, [r7, #12]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	69f9      	ldr	r1, [r7, #28]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fd87 	bl	8001e70 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 8002362:	4b28      	ldr	r3, [pc, #160]	; (8002404 <tftPrint+0x12c>)
 8002364:	791b      	ldrb	r3, [r3, #4]
 8002366:	461a      	mov	r2, r3
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4413      	add	r3, r2
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	e00a      	b.n	800238c <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	60fa      	str	r2, [r7, #12]
 800237c:	7818      	ldrb	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	f7ff fe6a 	bl	8002060 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 800238c:	f000 f8c4 	bl	8002518 <tftGetWidth>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <tftPrint+0x12c>)
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	4293      	cmp	r3, r2
 80023a4:	db1f      	blt.n	80023e6 <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <tftPrint+0x12c>)
 80023b0:	795b      	ldrb	r3, [r3, #5]
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 80023ba:	f000 f8b9 	bl	8002530 <tftGetHeight>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <tftPrint+0x12c>)
 80023c4:	795b      	ldrb	r3, [r3, #5]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dd09      	ble.n	80023e2 <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 80023ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023d2:	f7ff fa61 	bl	8001898 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f834 	bl	8002444 <tftFillScreen>
				y=0; // start at top left of new Page
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	e001      	b.n	80023e6 <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	3301      	adds	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
 80023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	dba7      	blt.n	8002344 <tftPrint+0x6c>
			}

		}

	}
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3728      	adds	r7, #40	; 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000
 8002404:	20000224 	.word	0x20000224
 8002408:	20000002 	.word	0x20000002

0800240c <tftPrintColor>:
void tftPrintColor(char *st, int x, int y, uint16_t FontColor)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	807b      	strh	r3, [r7, #2]
	uint16_t _fg_old = _fg;
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <tftPrintColor+0x34>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	82fb      	strh	r3, [r7, #22]
	_fg = FontColor;
 8002420:	4a07      	ldr	r2, [pc, #28]	; (8002440 <tftPrintColor+0x34>)
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	8013      	strh	r3, [r2, #0]
	tftPrint(st, x, y, 0);
 8002426:	2300      	movs	r3, #0
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f7ff ff53 	bl	80022d8 <tftPrint>
	_fg = _fg_old;
 8002432:	4a03      	ldr	r2, [pc, #12]	; (8002440 <tftPrintColor+0x34>)
 8002434:	8afb      	ldrh	r3, [r7, #22]
 8002436:	8013      	strh	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000008 	.word	0x20000008

08002444 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af02      	add	r7, sp, #8
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <tftFillScreen+0x2c>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	b21a      	sxth	r2, r3
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <tftFillScreen+0x30>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b219      	sxth	r1, r3
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	460b      	mov	r3, r1
 8002460:	2100      	movs	r1, #0
 8002462:	2000      	movs	r0, #0
 8002464:	f7ff fbfc 	bl	8001c60 <tftFillRect>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000000 	.word	0x20000000
 8002474:	20000002 	.word	0x20000002

08002478 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 800248a:	2036      	movs	r0, #54	; 0x36
 800248c:	f7ff fa26 	bl	80018dc <tftSendCmd>

	switch (rotation)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d836      	bhi.n	8002504 <tftSetRotation+0x8c>
 8002496:	a201      	add	r2, pc, #4	; (adr r2, 800249c <tftSetRotation+0x24>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024c1 	.word	0x080024c1
 80024a4:	080024d5 	.word	0x080024d5
 80024a8:	080024e9 	.word	0x080024e9
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80024ac:	20c0      	movs	r0, #192	; 0xc0
 80024ae:	f7ff fa29 	bl	8001904 <tftSendData>
		width  = ST7735_TFTWIDTH;
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <tftSetRotation+0x94>)
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <tftSetRotation+0x98>)
 80024ba:	22a0      	movs	r2, #160	; 0xa0
 80024bc:	801a      	strh	r2, [r3, #0]
		break;
 80024be:	e01d      	b.n	80024fc <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80024c0:	20a0      	movs	r0, #160	; 0xa0
 80024c2:	f7ff fa1f 	bl	8001904 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <tftSetRotation+0x94>)
 80024c8:	22a0      	movs	r2, #160	; 0xa0
 80024ca:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <tftSetRotation+0x98>)
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	801a      	strh	r2, [r3, #0]
		   break;
 80024d2:	e013      	b.n	80024fc <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7ff fa15 	bl	8001904 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <tftSetRotation+0x94>)
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <tftSetRotation+0x98>)
 80024e2:	22a0      	movs	r2, #160	; 0xa0
 80024e4:	801a      	strh	r2, [r3, #0]
		   break;
 80024e6:	e009      	b.n	80024fc <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80024e8:	2060      	movs	r0, #96	; 0x60
 80024ea:	f7ff fa0b 	bl	8001904 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <tftSetRotation+0x94>)
 80024f0:	22a0      	movs	r2, #160	; 0xa0
 80024f2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <tftSetRotation+0x98>)
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	801a      	strh	r2, [r3, #0]
		   break;
 80024fa:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80024fc:	4a05      	ldr	r2, [pc, #20]	; (8002514 <tftSetRotation+0x9c>)
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	7013      	strb	r3, [r2, #0]
 8002502:	e000      	b.n	8002506 <tftSetRotation+0x8e>
		   return;
 8002504:	bf00      	nop
}
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000000 	.word	0x20000000
 8002510:	20000002 	.word	0x20000002
 8002514:	20000220 	.word	0x20000220

08002518 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <tftGetWidth+0x14>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	20000000 	.word	0x20000000

08002530 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <tftGetHeight+0x14>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b2db      	uxtb	r3, r3
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	20000002 	.word	0x20000002

08002548 <filterAccData>:
 * filterAccData
 * calc from raw data into filtered (float) with in adjusted range

*/
void filterAccData(int16_t *XYZ, float *XYZFiltert, float kFilt, float fRange)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	ed87 0a01 	vstr	s0, [r7, #4]
 8002556:	edc7 0a00 	vstr	s1, [r7]
	uint8_t i;
	for (i = 0; i<3; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	e036      	b.n	80025ce <filterAccData+0x86>
	{
		XYZFiltert[i] *= (1-kFilt);
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4413      	add	r3, r2
 8002568:	ed93 7a00 	vldr	s14, [r3]
 800256c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002570:	edd7 7a01 	vldr	s15, [r7, #4]
 8002574:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	4413      	add	r3, r2
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	edc3 7a00 	vstr	s15, [r3]
		XYZFiltert[i] += ((float)XYZ[i] * kFilt* fRange);
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	4413      	add	r3, r2
 8002590:	ed93 7a00 	vldr	s14, [r3]
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025b0:	edd7 7a00 	vldr	s15, [r7]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4413      	add	r3, r2
 80025c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c4:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i<3; i++)
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	3301      	adds	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d9c5      	bls.n	8002560 <filterAccData+0x18>
	}
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <mpuInit>:
 * - Modifying the I2C address may require hardware adjustments (e.g., soldering the AD0 pin).
 * - Disabling both gyroscope and accelerometer may lead to an unusable sensor state.
 */

int8_t mpuInit(MPU6050_t* sensor, I2C_TypeDef* i2cBus, uint8_t i2cAddr, MPUfscale gyroScale, MPUaccel accelRange, MPUlpbw lPconfig, uint8_t restart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	460b      	mov	r3, r1
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	4613      	mov	r3, r2
 80025f8:	71bb      	strb	r3, [r7, #6]

	sensor->i2c = i2cBus;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	601a      	str	r2, [r3, #0]

	// default Orientation
	sensor->RPY[0] = 1;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->RPY[1] = 2;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	sensor->RPY[2] = -3;					// -3 means Sensor Y-Axis goes into top direction
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	22fd      	movs	r2, #253	; 0xfd
 8002614:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	sensor->pitchZero = 0;					// assemble offset MPU vs chassis
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
	sensor->pitchFilt = 0.9;				// weight of Gyro for Pitch Calc in combination to Accel-Angle Calc (Static Bias)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4ab4      	ldr	r2, [pc, #720]	; (80028f4 <mpuInit+0x310>)
 8002624:	61da      	str	r2, [r3, #28]
	sensor->pitch = 0;						// assemble offset MPU vs chassis
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	659a      	str	r2, [r3, #88]	; 0x58
	sensor->swLowPassFilt =0.5;			// Accel Filter koeffizent
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002634:	619a      	str	r2, [r3, #24]
	sensor->accel[0] = 0;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
	sensor->accel[1] = 0;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	651a      	str	r2, [r3, #80]	; 0x50
	sensor->accel[2] = 0;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
	if(i2cAddr == i2cAddr_MPU6050) {
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b68      	cmp	r3, #104	; 0x68
 8002652:	d103      	bne.n	800265c <mpuInit+0x78>
		sensor->i2c_address = i2cAddr;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	79fa      	ldrb	r2, [r7, #7]
 8002658:	711a      	strb	r2, [r3, #4]
 800265a:	e002      	b.n	8002662 <mpuInit+0x7e>
		/**
		 * To change I2C Address of the MPU6050, the AD0-Pin of the sensor must be set high
		 * This pin is not connected to the board
		 * therefore, the standard address is always used to prevent communication errors.
		 */
		sensor->i2c_address = (uint8_t) i2cAddr_MPU6050;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2268      	movs	r2, #104	; 0x68
 8002660:	711a      	strb	r2, [r3, #4]
	}

	uint8_t gyroReturn;
	gyroScale = sensor->gyro_scale;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	795b      	ldrb	r3, [r3, #5]
 8002666:	71bb      	strb	r3, [r7, #6]
	switch (gyroScale) {
 8002668:	79bb      	ldrb	r3, [r7, #6]
 800266a:	2b18      	cmp	r3, #24
 800266c:	d84c      	bhi.n	8002708 <mpuInit+0x124>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <mpuInit+0x90>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	080026d9 	.word	0x080026d9
 8002678:	08002709 	.word	0x08002709
 800267c:	08002709 	.word	0x08002709
 8002680:	08002709 	.word	0x08002709
 8002684:	08002709 	.word	0x08002709
 8002688:	08002709 	.word	0x08002709
 800268c:	08002709 	.word	0x08002709
 8002690:	08002709 	.word	0x08002709
 8002694:	080026e5 	.word	0x080026e5
 8002698:	08002709 	.word	0x08002709
 800269c:	08002709 	.word	0x08002709
 80026a0:	08002709 	.word	0x08002709
 80026a4:	08002709 	.word	0x08002709
 80026a8:	08002709 	.word	0x08002709
 80026ac:	08002709 	.word	0x08002709
 80026b0:	08002709 	.word	0x08002709
 80026b4:	080026f1 	.word	0x080026f1
 80026b8:	08002709 	.word	0x08002709
 80026bc:	08002709 	.word	0x08002709
 80026c0:	08002709 	.word	0x08002709
 80026c4:	08002709 	.word	0x08002709
 80026c8:	08002709 	.word	0x08002709
 80026cc:	08002709 	.word	0x08002709
 80026d0:	08002709 	.word	0x08002709
 80026d4:	080026fd 	.word	0x080026fd
	case FSCALE_250:
		sensor->gyro_scale_factor = (float) 1 / 131;	// 131 LSB/°/s
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a87      	ldr	r2, [pc, #540]	; (80028f8 <mpuInit+0x314>)
 80026dc:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]
		break;
 80026e2:	e01a      	b.n	800271a <mpuInit+0x136>
	case FSCALE_500:
		sensor->gyro_scale_factor = (float) 1 / 65.5;	// 65.5 LSB/°/s
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a85      	ldr	r2, [pc, #532]	; (80028fc <mpuInit+0x318>)
 80026e8:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
		break;
 80026ee:	e014      	b.n	800271a <mpuInit+0x136>
	case FSCALE_1000:
		sensor->gyro_scale_factor = (float)	0.0305175 ;	// 35.8 LSB/°/s
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a83      	ldr	r2, [pc, #524]	; (8002900 <mpuInit+0x31c>)
 80026f4:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
		break;
 80026fa:	e00e      	b.n	800271a <mpuInit+0x136>
	case FSCALE_2000:
		sensor->gyro_scale_factor = (float) 1 / 16.4;	// 16.4 LSB/°/s
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a81      	ldr	r2, [pc, #516]	; (8002904 <mpuInit+0x320>)
 8002700:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
		break;
 8002706:	e008      	b.n	800271a <mpuInit+0x136>
	default:
		sensor->gyro_scale = FSCALE_250;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	715a      	strb	r2, [r3, #5]
		sensor->gyro_scale_factor = (float) 1 / 131;	// 131 LSB/°/s
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a79      	ldr	r2, [pc, #484]	; (80028f8 <mpuInit+0x314>)
 8002712:	609a      	str	r2, [r3, #8]
		gyroReturn = 2;							// Error handling for wrong user input
 8002714:	2302      	movs	r3, #2
 8002716:	75fb      	strb	r3, [r7, #23]
		break;
 8002718:	bf00      	nop
	}
	i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_GYRO_CONFIG, sensor->gyro_scale); 	// set scale range of gyroscope
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	7919      	ldrb	r1, [r3, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	795b      	ldrb	r3, [r3, #5]
 8002726:	221b      	movs	r2, #27
 8002728:	f001 f964 	bl	80039f4 <i2cSendByteToSlaveReg>


	uint8_t accelReturn;
	sensor->accel_range = accelRange;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002732:	731a      	strb	r2, [r3, #12]
	switch (accelRange) {
 8002734:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002738:	2b18      	cmp	r3, #24
 800273a:	d851      	bhi.n	80027e0 <mpuInit+0x1fc>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <mpuInit+0x160>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	080027a9 	.word	0x080027a9
 8002748:	080027e1 	.word	0x080027e1
 800274c:	080027e1 	.word	0x080027e1
 8002750:	080027e1 	.word	0x080027e1
 8002754:	080027e1 	.word	0x080027e1
 8002758:	080027e1 	.word	0x080027e1
 800275c:	080027e1 	.word	0x080027e1
 8002760:	080027e1 	.word	0x080027e1
 8002764:	080027b7 	.word	0x080027b7
 8002768:	080027e1 	.word	0x080027e1
 800276c:	080027e1 	.word	0x080027e1
 8002770:	080027e1 	.word	0x080027e1
 8002774:	080027e1 	.word	0x080027e1
 8002778:	080027e1 	.word	0x080027e1
 800277c:	080027e1 	.word	0x080027e1
 8002780:	080027e1 	.word	0x080027e1
 8002784:	080027c5 	.word	0x080027c5
 8002788:	080027e1 	.word	0x080027e1
 800278c:	080027e1 	.word	0x080027e1
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080027e1 	.word	0x080027e1
 8002798:	080027e1 	.word	0x080027e1
 800279c:	080027e1 	.word	0x080027e1
 80027a0:	080027e1 	.word	0x080027e1
 80027a4:	080027d3 	.word	0x080027d3
	case ACCEL_2g:
		sensor->accel_range_factor = (float) 1 / 16384;		// 16384 LSB/g
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80027ae:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	75bb      	strb	r3, [r7, #22]
		break;
 80027b4:	e01e      	b.n	80027f4 <mpuInit+0x210>
	case ACCEL_4g:
		sensor->accel_range_factor = (float) 1 / 8192;		// 8192 LSB/g
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80027bc:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	75bb      	strb	r3, [r7, #22]
		break;
 80027c2:	e017      	b.n	80027f4 <mpuInit+0x210>
	case ACCEL_8g:
		sensor->accel_range_factor = (float) 1 / 4096;		// 4096 LSB/g
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80027ca:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	75bb      	strb	r3, [r7, #22]
		break;
 80027d0:	e010      	b.n	80027f4 <mpuInit+0x210>
	case ACCEL_16g:
		sensor->accel_range_factor = (float) 1 / 2048;		// 2048 LSB/g
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80027d8:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	75bb      	strb	r3, [r7, #22]
		break;
 80027de:	e009      	b.n	80027f4 <mpuInit+0x210>
	default:
		sensor->accel_range = ACCEL_2g;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 16384;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80027ec:	611a      	str	r2, [r3, #16]
		accelReturn = 4;
 80027ee:	2304      	movs	r3, #4
 80027f0:	75bb      	strb	r3, [r7, #22]
		break;
 80027f2:	bf00      	nop
	}
	i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_ACCEL_CONFIG, sensor->accel_range);	// set scale range of accelerometer
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	7919      	ldrb	r1, [r3, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	7b1b      	ldrb	r3, [r3, #12]
 8002800:	221c      	movs	r2, #28
 8002802:	f001 f8f7 	bl	80039f4 <i2cSendByteToSlaveReg>

	sensor->LowPassFilt = lPconfig;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800280c:	751a      	strb	r2, [r3, #20]
	mpuSetLpFilt(sensor);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa10 	bl	8002c34 <mpuSetLpFilt>

	static int8_t step = -3;

	//TF for (int8_t i = step; i < 0; i++) {

		switch (step) {
 8002814:	4b3c      	ldr	r3, [pc, #240]	; (8002908 <mpuInit+0x324>)
 8002816:	f993 3000 	ldrsb.w	r3, [r3]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d02b      	beq.n	8002878 <mpuInit+0x294>
 8002820:	2b00      	cmp	r3, #0
 8002822:	da73      	bge.n	800290c <mpuInit+0x328>
 8002824:	f113 0f03 	cmn.w	r3, #3
 8002828:	d003      	beq.n	8002832 <mpuInit+0x24e>
 800282a:	f113 0f02 	cmn.w	r3, #2
 800282e:	d00a      	beq.n	8002846 <mpuInit+0x262>
 8002830:	e06c      	b.n	800290c <mpuInit+0x328>
		case -3:		// increase CLK Speed for I2C up to  1000kHz
			i2cSetClkSpd(sensor->i2c, I2C_CLOCK_1Mz); //set I2C Clock 1Mz
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2104      	movs	r1, #4
 8002838:	4618      	mov	r0, r3
 800283a:	f001 f80d 	bl	8003858 <i2cSetClkSpd>
			step = -2;
 800283e:	4b32      	ldr	r3, [pc, #200]	; (8002908 <mpuInit+0x324>)
 8002840:	22fe      	movs	r2, #254	; 0xfe
 8002842:	701a      	strb	r2, [r3, #0]
			break;
 8002844:	e065      	b.n	8002912 <mpuInit+0x32e>

		case -2:		// SW Reset
			if (restart != 0)
 8002846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <mpuInit+0x27c>
			{
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_SWRESET)); // reboot memory content
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	7919      	ldrb	r1, [r3, #4]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	226b      	movs	r2, #107	; 0x6b
 800285a:	f001 f8cb 	bl	80039f4 <i2cSendByteToSlaveReg>
 800285e:	e007      	b.n	8002870 <mpuInit+0x28c>

			}
			else
			{
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_MST_CTRL, (MPU6050_MST_P_NSR));
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	7919      	ldrb	r1, [r3, #4]
 8002868:	2310      	movs	r3, #16
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	f001 f8c2 	bl	80039f4 <i2cSendByteToSlaveReg>
			}
			step = -1;
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <mpuInit+0x324>)
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	701a      	strb	r2, [r3, #0]
			break;
 8002876:	e04c      	b.n	8002912 <mpuInit+0x32e>

		case -1:
			// PWR Mngt
			if (sensor->accel_range == ACCEL_OFF)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	7b1b      	ldrb	r3, [r3, #12]
 800287c:	2b19      	cmp	r3, #25
 800287e:	d110      	bne.n	80028a2 <mpuInit+0x2be>
			{ // Disable acceleration measurement
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	7919      	ldrb	r1, [r3, #4]
 8002888:	2300      	movs	r3, #0
 800288a:	226b      	movs	r2, #107	; 0x6b
 800288c:	f001 f8b2 	bl	80039f4 <i2cSendByteToSlaveReg>
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00000111));
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	7919      	ldrb	r1, [r3, #4]
 8002898:	2307      	movs	r3, #7
 800289a:	226c      	movs	r2, #108	; 0x6c
 800289c:	f001 f8aa 	bl	80039f4 <i2cSendByteToSlaveReg>
 80028a0:	e024      	b.n	80028ec <mpuInit+0x308>
			}
			else
			{
				if (sensor->gyro_scale == GYRO_OFF)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	795b      	ldrb	r3, [r3, #5]
 80028a6:	2b19      	cmp	r3, #25
 80028a8:	d110      	bne.n	80028cc <mpuInit+0x2e8>
				{ // Disable gyroscope
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	7919      	ldrb	r1, [r3, #4]
 80028b2:	2300      	movs	r3, #0
 80028b4:	226b      	movs	r2, #107	; 0x6b
 80028b6:	f001 f89d 	bl	80039f4 <i2cSendByteToSlaveReg>
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00111000));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	7919      	ldrb	r1, [r3, #4]
 80028c2:	2338      	movs	r3, #56	; 0x38
 80028c4:	226c      	movs	r2, #108	; 0x6c
 80028c6:	f001 f895 	bl	80039f4 <i2cSendByteToSlaveReg>
 80028ca:	e00f      	b.n	80028ec <mpuInit+0x308>
				}
				else
				{ // enable all measurements
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	7919      	ldrb	r1, [r3, #4]
 80028d4:	2300      	movs	r3, #0
 80028d6:	226b      	movs	r2, #107	; 0x6b
 80028d8:	f001 f88c 	bl	80039f4 <i2cSendByteToSlaveReg>
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00000000));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	7919      	ldrb	r1, [r3, #4]
 80028e4:	2300      	movs	r3, #0
 80028e6:	226c      	movs	r2, #108	; 0x6c
 80028e8:	f001 f884 	bl	80039f4 <i2cSendByteToSlaveReg>
				}
			}
			step = 0;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <mpuInit+0x324>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
			break;
 80028f2:	e00e      	b.n	8002912 <mpuInit+0x32e>
 80028f4:	3f666666 	.word	0x3f666666
 80028f8:	3bfa232d 	.word	0x3bfa232d
 80028fc:	3c7a232d 	.word	0x3c7a232d
 8002900:	3cf9ffd6 	.word	0x3cf9ffd6
 8002904:	3d79c190 	.word	0x3d79c190
 8002908:	2000000a 	.word	0x2000000a
		default:
			step = -3;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <mpuInit+0x35c>)
 800290e:	22fd      	movs	r2, #253	; 0xfd
 8002910:	701a      	strb	r2, [r3, #0]
		}
	//TF }

	int8_t returnValue = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	757b      	strb	r3, [r7, #21]
	if(step != 0) {
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <mpuInit+0x35c>)
 8002918:	f993 3000 	ldrsb.w	r3, [r3]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <mpuInit+0x344>
		returnValue = step;
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <mpuInit+0x35c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	757b      	strb	r3, [r7, #21]
 8002926:	e004      	b.n	8002932 <mpuInit+0x34e>
		/**
		 * I2C initialization error
		 */
	}
	else {
		returnValue = gyroReturn + accelReturn;
 8002928:	7dfa      	ldrb	r2, [r7, #23]
 800292a:	7dbb      	ldrb	r3, [r7, #22]
 800292c:	4413      	add	r3, r2
 800292e:	b2db      	uxtb	r3, r3
 8002930:	757b      	strb	r3, [r7, #21]
		/**
		 * Wrong user input for gyroscope and/or acceleration measurement
		 */
	}
	return returnValue;
 8002932:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000000a 	.word	0x2000000a
 8002944:	00000000 	.word	0x00000000

08002948 <mpuGetPitch>:
	else {
		return (uint16_t) 1;
	}
}

int16_t mpuGetPitch(MPU6050_t* sensor) {
 8002948:	b5b0      	push	{r4, r5, r7, lr}
 800294a:	b090      	sub	sp, #64	; 0x40
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
	I2C_RETURN_CODE_t i2c_return;
	int16_t *XYZ;
	float *XYZFiltert;
	uint8_t readBuffer[14];
	if (sensor->accel_range != (uint8_t) DISABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7b1b      	ldrb	r3, [r3, #12]
 8002954:	2bff      	cmp	r3, #255	; 0xff
 8002956:	f000 8099 	beq.w	8002a8c <mpuGetPitch+0x144>
	{
		i2cBurstRegRead(sensor->i2c, sensor->i2c_address, MPU6050_AccXYZ,readBuffer, 14);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7919      	ldrb	r1, [r3, #4]
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	220e      	movs	r2, #14
 8002968:	9200      	str	r2, [sp, #0]
 800296a:	223b      	movs	r2, #59	; 0x3b
 800296c:	f001 f890 	bl	8003a90 <i2cBurstRegRead>
		sensor->accel_raw[0] = (readBuffer[0]<<8) + readBuffer[1];
 8002970:	7b3b      	ldrb	r3, [r7, #12]
 8002972:	b29b      	uxth	r3, r3
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	b29a      	uxth	r2, r3
 8002978:	7b7b      	ldrb	r3, [r7, #13]
 800297a:	b29b      	uxth	r3, r3
 800297c:	4413      	add	r3, r2
 800297e:	b29b      	uxth	r3, r3
 8002980:	b21a      	sxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
		sensor->accel_raw[1] = (readBuffer[2]<<8) + readBuffer[3];
 8002986:	7bbb      	ldrb	r3, [r7, #14]
 8002988:	b29b      	uxth	r3, r3
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	b29a      	uxth	r2, r3
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4413      	add	r3, r2
 8002994:	b29b      	uxth	r3, r3
 8002996:	b21a      	sxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a
		sensor->accel_raw[2] = (readBuffer[4]<<8) + readBuffer[5];
 800299c:	7c3b      	ldrb	r3, [r7, #16]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	7c7b      	ldrb	r3, [r7, #17]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	859a      	strh	r2, [r3, #44]	; 0x2c

		XYZ = sensor->accel_raw;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3328      	adds	r3, #40	; 0x28
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		XYZFiltert = sensor->accel;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	334c      	adds	r3, #76	; 0x4c
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
		filterAccData(XYZ, XYZFiltert, sensor->swLowPassFilt, sensor->accel_range_factor);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80029ca:	eef0 0a47 	vmov.f32	s1, s14
 80029ce:	eeb0 0a67 	vmov.f32	s0, s15
 80029d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029d6:	f7ff fdb7 	bl	8002548 <filterAccData>

		sensor->temp_raw = (int16_t) (readBuffer[6]<<8) + readBuffer[7];
 80029da:	7cbb      	ldrb	r3, [r7, #18]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	b29a      	uxth	r2, r3
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	b21a      	sxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	869a      	strh	r2, [r3, #52]	; 0x34

		sensor->gyro_raw[0] = (readBuffer[8]<<8) + readBuffer[9];
 80029ee:	7d3b      	ldrb	r3, [r7, #20]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	7d7b      	ldrb	r3, [r7, #21]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	85da      	strh	r2, [r3, #46]	; 0x2e
		sensor->gyro_raw[1] = (readBuffer[10]<<8) + readBuffer[11];
 8002a04:	7dbb      	ldrb	r3, [r7, #22]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	861a      	strh	r2, [r3, #48]	; 0x30
		sensor->gyro_raw[2] = (readBuffer[12]<<8) + readBuffer[13];
 8002a1a:	7e3b      	ldrb	r3, [r7, #24]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	7e7b      	ldrb	r3, [r7, #25]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	865a      	strh	r2, [r3, #50]	; 0x32

		sensor->gyro[0] = (float) sensor->gyro_raw[0] * sensor->gyro_scale_factor;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		sensor->gyro[1] = (float) sensor->gyro_raw[1] * sensor->gyro_scale_factor;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		sensor->gyro[2] = (float) sensor->gyro_raw[2] * sensor->gyro_scale_factor;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8002a8a:	e002      	b.n	8002a92 <mpuGetPitch+0x14a>
	}
	else
	{
		i2c_return = 1;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	int argYaw;
	float yawAxis;
	float longAxis = sensor->accel[sensor->RPY[0]-1];
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	3312      	adds	r3, #18
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
	//float latAxis = sensor->accel_raw[sensor->RPY[1]-1];
	if (sensor->RPY[2] < 0)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da11      	bge.n	8002ad6 <mpuGetPitch+0x18e>
	{
		argYaw = -1-(sensor->RPY[2]);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	623b      	str	r3, [r7, #32]
		yawAxis =  (sensor->accel[argYaw])*-1;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	3312      	adds	r3, #18
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	eef1 7a67 	vneg.f32	s15, s15
 8002ad0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002ad4:	e00a      	b.n	8002aec <mpuGetPitch+0x1a4>

	}
	else
	{
		yawAxis =  sensor->accel[sensor->RPY[2]-1];
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8002adc:	3b01      	subs	r3, #1
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	3312      	adds	r3, #18
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	633b      	str	r3, [r7, #48]	; 0x30
	}
	sensor->pitchAccel = atan2(longAxis, yawAxis)-sensor->pitchZero;
 8002aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aee:	f7fd fd33 	bl	8000558 <__aeabi_f2d>
 8002af2:	4604      	mov	r4, r0
 8002af4:	460d      	mov	r5, r1
 8002af6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af8:	f7fd fd2e 	bl	8000558 <__aeabi_f2d>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	ec43 2b11 	vmov	d1, r2, r3
 8002b04:	ec45 4b10 	vmov	d0, r4, r5
 8002b08:	f004 fd4a 	bl	80075a0 <atan2>
 8002b0c:	ec55 4b10 	vmov	r4, r5, d0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fd1f 	bl	8000558 <__aeabi_f2d>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4620      	mov	r0, r4
 8002b20:	4629      	mov	r1, r5
 8002b22:	f7fd fbb9 	bl	8000298 <__aeabi_dsub>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f843 	bl	8000bb8 <__aeabi_d2f>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c

	float gyroPitch =  _deg2rad * sensor->gyro[sensor->RPY[1]-1];			// rad/s
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	3310      	adds	r3, #16
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fd04 	bl	8000558 <__aeabi_f2d>
 8002b50:	a321      	add	r3, pc, #132	; (adr r3, 8002bd8 <mpuGetPitch+0x290>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fd57 	bl	8000608 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f829 	bl	8000bb8 <__aeabi_d2f>
 8002b66:	4603      	mov	r3, r0
 8002b68:	61fb      	str	r3, [r7, #28]
	if (sensor->pitch == 0)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002b70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	d103      	bne.n	8002b82 <mpuGetPitch+0x23a>
	{
		sensor->pitch = sensor->pitchAccel;  // first run initialize value;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	; 0x58
	}
	sensor->pitch = (sensor->pitchFilt * (gyroPitch * sensor->timebase + sensor->pitch)) + ((1- sensor->pitchFilt) * sensor->pitchAccel);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	return i2c_return;
 8002bc6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002bca:	b21b      	sxth	r3, r3

}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3738      	adds	r7, #56	; 0x38
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	00de4c51 	.word	0x00de4c51
 8002bdc:	3f91df33 	.word	0x3f91df33

08002be0 <mpuTemp>:
	return (sensor->temperature);
}


float mpuTemp(MPU6050_t* sensor)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	const float temp_factor = (float)1.0 / 340;
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <mpuTemp+0x4c>)
 8002bea:	60fb      	str	r3, [r7, #12]
	const float temp_offset = 36.35;
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <mpuTemp+0x50>)
 8002bee:	60bb      	str	r3, [r7, #8]

	sensor->temperature = (float) (sensor->temp_raw) * temp_factor + temp_offset;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	return (sensor->temperature);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	ee07 3a90 	vmov	s15, r3
}
 8002c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	3b40c0c1 	.word	0x3b40c0c1
 8002c30:	42116666 	.word	0x42116666

08002c34 <mpuSetLpFilt>:
 *
 * @note
 * - Ensure the MPU6050 sensor is properly initialized and powered before calling this function.
 * - Refer to the MPU6050 datasheet for valid DLPF configuration values and their corresponding cutoff frequencies.
 */
void mpuSetLpFilt(MPU6050_t* sensor) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_CONFIG, sensor->LowPassFilt);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7919      	ldrb	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7d1b      	ldrb	r3, [r3, #20]
 8002c48:	221a      	movs	r2, #26
 8002c4a:	f000 fed3 	bl	80039f4 <i2cSendByteToSlaveReg>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03e      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d03b      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d038      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d035      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d032      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d02f      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d02c      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	2b07      	cmp	r3, #7
 8002c8e:	d029      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d026      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	d023      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b0a      	cmp	r3, #10
 8002ca0:	d020      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	2b0b      	cmp	r3, #11
 8002ca6:	d01d      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d01a      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b0d      	cmp	r3, #13
 8002cb2:	d017      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b0e      	cmp	r3, #14
 8002cb8:	d014      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b0f      	cmp	r3, #15
 8002cbe:	d011      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d00e      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	2b11      	cmp	r3, #17
 8002cca:	d00b      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d008      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2b14      	cmp	r3, #20
 8002cd6:	d005      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	2b15      	cmp	r3, #21
 8002cdc:	d002      	beq.n	8002ce4 <extiVerifyIrqNum+0x8e>
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b16      	cmp	r3, #22
 8002ce2:	d101      	bne.n	8002ce8 <extiVerifyIrqNum+0x92>
    {
        return true;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <extiVerifyIrqNum+0x94>
    }
    return false;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <extiVerifyTrigger+0x1c>
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d002      	beq.n	8002d12 <extiVerifyTrigger+0x1c>
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d101      	bne.n	8002d16 <extiVerifyTrigger+0x20>
    {
        return true;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <extiVerifyTrigger+0x22>
    }
    return false;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	71fb      	strb	r3, [r7, #7]
 8002d2e:	e008      	b.n	8002d42 <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 8002d30:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <extiInit+0x34>)
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	3302      	adds	r3, #2
 8002d36:	2100      	movs	r1, #0
 8002d38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	71fb      	strb	r3, [r7, #7]
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d9f3      	bls.n	8002d30 <extiInit+0xc>
    }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40013800 	.word	0x40013800

08002d5c <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f937 	bl	8002fe8 <gpioVerifyPort>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f083 0301 	eor.w	r3, r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 8002d86:	23ff      	movs	r3, #255	; 0xff
 8002d88:	e08a      	b.n	8002ea0 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f95d 	bl	800304c <gpioVerifyPin>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f083 0301 	eor.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8002d9e:	23fe      	movs	r3, #254	; 0xfe
 8002da0:	e07e      	b.n	8002ea0 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	2b0f      	cmp	r3, #15
 8002da6:	d841      	bhi.n	8002e2c <extiConfigIrq+0xd0>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <extiConfigIrq+0x54>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002df1 	.word	0x08002df1
 8002db4:	08002df1 	.word	0x08002df1
 8002db8:	08002df1 	.word	0x08002df1
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002dfd 	.word	0x08002dfd
 8002dc4:	08002dfd 	.word	0x08002dfd
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002e0d 	.word	0x08002e0d
 8002dd4:	08002e0d 	.word	0x08002e0d
 8002dd8:	08002e0d 	.word	0x08002e0d
 8002ddc:	08002e0d 	.word	0x08002e0d
 8002de0:	08002e1d 	.word	0x08002e1d
 8002de4:	08002e1d 	.word	0x08002e1d
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002e1d 	.word	0x08002e1d
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
            break;
 8002dfa:	e017      	b.n	8002e2c <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	73bb      	strb	r3, [r7, #14]
            index = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
            break;
 8002e0a:	e00f      	b.n	8002e2c <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	3b08      	subs	r3, #8
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8002e16:	2302      	movs	r3, #2
 8002e18:	73fb      	strb	r3, [r7, #15]
            break;
 8002e1a:	e007      	b.n	8002e2c <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	3b0c      	subs	r3, #12
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8002e26:	2303      	movs	r3, #3
 8002e28:	73fb      	strb	r3, [r7, #15]
            break;
 8002e2a:	bf00      	nop
    }

    if (GPIOA == port)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <extiConfigIrq+0x14c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d102      	bne.n	8002e3a <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8002e34:	2300      	movs	r3, #0
 8002e36:	737b      	strb	r3, [r7, #13]
 8002e38:	e021      	b.n	8002e7e <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <extiConfigIrq+0x150>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d102      	bne.n	8002e48 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 8002e42:	2301      	movs	r3, #1
 8002e44:	737b      	strb	r3, [r7, #13]
 8002e46:	e01a      	b.n	8002e7e <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a19      	ldr	r2, [pc, #100]	; (8002eb0 <extiConfigIrq+0x154>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d102      	bne.n	8002e56 <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 8002e50:	2302      	movs	r3, #2
 8002e52:	737b      	strb	r3, [r7, #13]
 8002e54:	e013      	b.n	8002e7e <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <extiConfigIrq+0x158>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d102      	bne.n	8002e64 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	737b      	strb	r3, [r7, #13]
 8002e62:	e00c      	b.n	8002e7e <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <extiConfigIrq+0x15c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d102      	bne.n	8002e72 <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	737b      	strb	r3, [r7, #13]
 8002e70:	e005      	b.n	8002e7e <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <extiConfigIrq+0x160>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 8002e7a:	2307      	movs	r3, #7
 8002e7c:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <extiConfigIrq+0x164>)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	3302      	adds	r3, #2
 8002e84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e88:	7b79      	ldrb	r1, [r7, #13]
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	490b      	ldr	r1, [pc, #44]	; (8002ec0 <extiConfigIrq+0x164>)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	4302      	orrs	r2, r0
 8002e98:	3302      	adds	r3, #2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	40020c00 	.word	0x40020c00
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40021c00 	.word	0x40021c00
 8002ec0:	40013800 	.word	0x40013800

08002ec4 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fec0 	bl	8002c56 <extiVerifyIrqNum>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f083 0301 	eor.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8002ee2:	23d8      	movs	r3, #216	; 0xd8
 8002ee4:	e00a      	b.n	8002efc <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <extiEnableIrq+0x40>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	79fa      	ldrb	r2, [r7, #7]
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <extiEnableIrq+0x40>)
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40013c00 	.word	0x40013c00

08002f08 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460a      	mov	r2, r1
 8002f12:	71fb      	strb	r3, [r7, #7]
 8002f14:	4613      	mov	r3, r2
 8002f16:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fe9b 	bl	8002c56 <extiVerifyIrqNum>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f083 0301 	eor.w	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 8002f2c:	23d8      	movs	r3, #216	; 0xd8
 8002f2e:	e055      	b.n	8002fdc <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 8002f30:	79bb      	ldrb	r3, [r7, #6]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fedf 	bl	8002cf6 <extiVerifyTrigger>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f083 0301 	eor.w	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 8002f44:	23d7      	movs	r3, #215	; 0xd7
 8002f46:	e049      	b.n	8002fdc <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d115      	bne.n	8002f7a <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8002f4e:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	79fa      	ldrb	r2, [r7, #7]
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	79fa      	ldrb	r2, [r7, #7]
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6e:	43d2      	mvns	r2, r2
 8002f70:	4611      	mov	r1, r2
 8002f72:	4a1c      	ldr	r2, [pc, #112]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002f74:	400b      	ands	r3, r1
 8002f76:	60d3      	str	r3, [r2, #12]
 8002f78:	e02f      	b.n	8002fda <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 8002f7a:	79bb      	ldrb	r3, [r7, #6]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d115      	bne.n	8002fac <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	79fa      	ldrb	r2, [r7, #7]
 8002f86:	2101      	movs	r1, #1
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	79fa      	ldrb	r2, [r7, #7]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	43d2      	mvns	r2, r2
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	6093      	str	r3, [r2, #8]
 8002faa:	e016      	b.n	8002fda <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8002fac:	79bb      	ldrb	r3, [r7, #6]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d113      	bne.n	8002fda <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	79fa      	ldrb	r2, [r7, #7]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4a08      	ldr	r2, [pc, #32]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	79fa      	ldrb	r2, [r7, #7]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <extiSetTriggerEdge+0xdc>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40013c00 	.word	0x40013c00

08002fe8 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a10      	ldr	r2, [pc, #64]	; (8003034 <gpioVerifyPort+0x4c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <gpioVerifyPort+0x38>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <gpioVerifyPort+0x50>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <gpioVerifyPort+0x38>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <gpioVerifyPort+0x54>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00b      	beq.n	8003020 <gpioVerifyPort+0x38>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <gpioVerifyPort+0x58>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <gpioVerifyPort+0x5c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <gpioVerifyPort+0x38>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <gpioVerifyPort+0x60>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <gpioVerifyPort+0x3c>
    {
        return true;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <gpioVerifyPort+0x3e>
    }
    return false;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40020000 	.word	0x40020000
 8003038:	40020400 	.word	0x40020400
 800303c:	40020800 	.word	0x40020800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40021000 	.word	0x40021000
 8003048:	40021c00 	.word	0x40021c00

0800304c <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02c      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d029      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d026      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d023      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d020      	beq.n	80030b6 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d01d      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	2b06      	cmp	r3, #6
 800307e:	d01a      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	2b07      	cmp	r3, #7
 8003084:	d017      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d014      	beq.n	80030b6 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	2b09      	cmp	r3, #9
 8003090:	d011      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	2b0a      	cmp	r3, #10
 8003096:	d00e      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	2b0b      	cmp	r3, #11
 800309c:	d00b      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d008      	beq.n	80030b6 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b0d      	cmp	r3, #13
 80030a8:	d005      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b0e      	cmp	r3, #14
 80030ae:	d002      	beq.n	80030b6 <gpioVerifyPin+0x6a>
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	d101      	bne.n	80030ba <gpioVerifyPin+0x6e>
    {
        return true;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <gpioVerifyPin+0x70>
    }
    return false;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02c      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d029      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d026      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d023      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d020      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d01d      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d01a      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	2b07      	cmp	r3, #7
 8003100:	d017      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d014      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b09      	cmp	r3, #9
 800310c:	d011      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	2b0a      	cmp	r3, #10
 8003112:	d00e      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	2b0b      	cmp	r3, #11
 8003118:	d00b      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d008      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	2b0d      	cmp	r3, #13
 8003124:	d005      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	2b0e      	cmp	r3, #14
 800312a:	d002      	beq.n	8003132 <gpioVerifyAltFunc+0x6a>
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	2b0f      	cmp	r3, #15
 8003130:	d101      	bne.n	8003136 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <gpioVerifyPinMode+0x22>
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d005      	beq.n	8003166 <gpioVerifyPinMode+0x22>
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d002      	beq.n	8003166 <gpioVerifyPinMode+0x22>
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d101      	bne.n	800316a <gpioVerifyPinMode+0x26>
    {
        return true;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <gpioVerifyPinMode+0x28>
    }

    return false;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <gpioVerifyOutputType+0x16>
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <gpioVerifyOutputType+0x1a>
    {
        return true;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <gpioVerifyPushPullMode+0x1c>
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d002      	beq.n	80031bc <gpioVerifyPushPullMode+0x1c>
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d101      	bne.n	80031c0 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ff05 	bl	8002fe8 <gpioVerifyPort>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d042      	beq.n	800326a <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a24      	ldr	r2, [pc, #144]	; (8003278 <gpioInitPort+0xa8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d106      	bne.n	80031fa <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <gpioInitPort+0xac>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	4a22      	ldr	r2, [pc, #136]	; (800327c <gpioInitPort+0xac>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6313      	str	r3, [r2, #48]	; 0x30
 80031f8:	e035      	b.n	8003266 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a20      	ldr	r2, [pc, #128]	; (8003280 <gpioInitPort+0xb0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d106      	bne.n	8003210 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <gpioInitPort+0xac>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a1d      	ldr	r2, [pc, #116]	; (800327c <gpioInitPort+0xac>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	e02a      	b.n	8003266 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <gpioInitPort+0xb4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d106      	bne.n	8003226 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <gpioInitPort+0xac>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a17      	ldr	r2, [pc, #92]	; (800327c <gpioInitPort+0xac>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6313      	str	r3, [r2, #48]	; 0x30
 8003224:	e01f      	b.n	8003266 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <gpioInitPort+0xb8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d106      	bne.n	800323c <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <gpioInitPort+0xac>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a12      	ldr	r2, [pc, #72]	; (800327c <gpioInitPort+0xac>)
 8003234:	f043 0308 	orr.w	r3, r3, #8
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	e014      	b.n	8003266 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <gpioInitPort+0xbc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d106      	bne.n	8003252 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <gpioInitPort+0xac>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	4a0c      	ldr	r2, [pc, #48]	; (800327c <gpioInitPort+0xac>)
 800324a:	f043 0310 	orr.w	r3, r3, #16
 800324e:	6313      	str	r3, [r2, #48]	; 0x30
 8003250:	e009      	b.n	8003266 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <gpioInitPort+0xc0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d105      	bne.n	8003266 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <gpioInitPort+0xac>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <gpioInitPort+0xac>)
 8003260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e001      	b.n	800326e <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40020000 	.word	0x40020000
 800327c:	40023800 	.word	0x40023800
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021c00 	.word	0x40021c00

08003294 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff fea3 	bl	8002fe8 <gpioVerifyPort>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	e041      	b.n	8003338 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a22      	ldr	r2, [pc, #136]	; (8003340 <gpioSelectPort+0xac>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d106      	bne.n	80032ca <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <gpioSelectPort+0xb0>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4a20      	ldr	r2, [pc, #128]	; (8003344 <gpioSelectPort+0xb0>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6313      	str	r3, [r2, #48]	; 0x30
 80032c8:	e035      	b.n	8003336 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <gpioSelectPort+0xb4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d106      	bne.n	80032e0 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80032d2:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <gpioSelectPort+0xb0>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <gpioSelectPort+0xb0>)
 80032d8:	f043 0302 	orr.w	r3, r3, #2
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	e02a      	b.n	8003336 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a1a      	ldr	r2, [pc, #104]	; (800334c <gpioSelectPort+0xb8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d106      	bne.n	80032f6 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <gpioSelectPort+0xb0>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4a15      	ldr	r2, [pc, #84]	; (8003344 <gpioSelectPort+0xb0>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	6313      	str	r3, [r2, #48]	; 0x30
 80032f4:	e01f      	b.n	8003336 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a15      	ldr	r2, [pc, #84]	; (8003350 <gpioSelectPort+0xbc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d106      	bne.n	800330c <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <gpioSelectPort+0xb0>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a10      	ldr	r2, [pc, #64]	; (8003344 <gpioSelectPort+0xb0>)
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	e014      	b.n	8003336 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <gpioSelectPort+0xc0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d106      	bne.n	8003322 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <gpioSelectPort+0xb0>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <gpioSelectPort+0xb0>)
 800331a:	f043 0310 	orr.w	r3, r3, #16
 800331e:	6313      	str	r3, [r2, #48]	; 0x30
 8003320:	e009      	b.n	8003336 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <gpioSelectPort+0xc4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d105      	bne.n	8003336 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <gpioSelectPort+0xb0>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a05      	ldr	r2, [pc, #20]	; (8003344 <gpioSelectPort+0xb0>)
 8003330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40020000 	.word	0x40020000
 8003344:	40023800 	.word	0x40023800
 8003348:	40020400 	.word	0x40020400
 800334c:	40020800 	.word	0x40020800
 8003350:	40020c00 	.word	0x40020c00
 8003354:	40021000 	.word	0x40021000
 8003358:	40021c00 	.word	0x40021c00

0800335c <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
 8003368:	4613      	mov	r3, r2
 800336a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff fe3b 	bl	8002fe8 <gpioVerifyPort>
 8003372:	4603      	mov	r3, r0
 8003374:	f083 0301 	eor.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	e032      	b.n	80033ea <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fe60 	bl	800304c <gpioVerifyPin>
 800338c:	4603      	mov	r3, r0
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003398:	f06f 0301 	mvn.w	r3, #1
 800339c:	e025      	b.n	80033ea <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 800339e:	78bb      	ldrb	r3, [r7, #2]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fecf 	bl	8003144 <gpioVerifyPinMode>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f083 0301 	eor.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 80033b2:	f06f 0305 	mvn.w	r3, #5
 80033b6:	e018      	b.n	80033ea <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	0052      	lsls	r2, r2, #1
 80033c0:	2103      	movs	r1, #3
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	43d2      	mvns	r2, r2
 80033c8:	401a      	ands	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 80033ce:	78bb      	ldrb	r3, [r7, #2]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	78b9      	ldrb	r1, [r7, #2]
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	0052      	lsls	r2, r2, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fdf2 	bl	8002fe8 <gpioVerifyPort>
 8003404:	4603      	mov	r3, r0
 8003406:	f083 0301 	eor.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	e014      	b.n	8003440 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fe17 	bl	800304c <gpioVerifyPin>
 800341e:	4603      	mov	r3, r0
 8003420:	f083 0301 	eor.w	r3, r3, #1
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 800342a:	f06f 0301 	mvn.w	r3, #1
 800342e:	e007      	b.n	8003440 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	2201      	movs	r2, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fdc7 	bl	8002fe8 <gpioVerifyPort>
 800345a:	4603      	mov	r3, r0
 800345c:	f083 0301 	eor.w	r3, r3, #1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	e015      	b.n	8003498 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fdec 	bl	800304c <gpioVerifyPin>
 8003474:	4603      	mov	r3, r0
 8003476:	f083 0301 	eor.w	r3, r3, #1
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003480:	f06f 0301 	mvn.w	r3, #1
 8003484:	e008      	b.n	8003498 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	3310      	adds	r3, #16
 800348a:	2201      	movs	r2, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	461a      	mov	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
 80034ac:	4613      	mov	r3, r2
 80034ae:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fd99 	bl	8002fe8 <gpioVerifyPort>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f083 0301 	eor.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	e050      	b.n	800356a <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fdbe 	bl	800304c <gpioVerifyPin>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f083 0301 	eor.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 80034dc:	f06f 0301 	mvn.w	r3, #1
 80034e0:	e043      	b.n	800356a <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 80034e2:	78bb      	ldrb	r3, [r7, #2]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fdef 	bl	80030c8 <gpioVerifyAltFunc>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f083 0301 	eor.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 80034f6:	f06f 0302 	mvn.w	r3, #2
 80034fa:	e036      	b.n	800356a <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	2202      	movs	r2, #2
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff2a 	bl	800335c <gpioSelectPinMode>

	if (pin <= PIN7)
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	2b07      	cmp	r3, #7
 800350c:	d815      	bhi.n	800353a <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	210f      	movs	r1, #15
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	43d2      	mvns	r2, r2
 800351e:	401a      	ands	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	78b9      	ldrb	r1, [r7, #2]
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	621a      	str	r2, [r3, #32]
 8003538:	e016      	b.n	8003568 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	3a08      	subs	r2, #8
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	210f      	movs	r1, #15
 8003546:	fa01 f202 	lsl.w	r2, r1, r2
 800354a:	43d2      	mvns	r2, r2
 800354c:	401a      	ands	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	78b9      	ldrb	r1, [r7, #2]
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	3a08      	subs	r2, #8
 800355c:	0092      	lsls	r2, r2, #2
 800355e:	fa01 f202 	lsl.w	r2, r1, r2
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	70fb      	strb	r3, [r7, #3]
 800357e:	4613      	mov	r3, r2
 8003580:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fd30 	bl	8002fe8 <gpioVerifyPort>
 8003588:	4603      	mov	r3, r0
 800358a:	f083 0301 	eor.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8003594:	f04f 33ff 	mov.w	r3, #4294967295
 8003598:	e030      	b.n	80035fc <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fd55 	bl	800304c <gpioVerifyPin>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f083 0301 	eor.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 80035ae:	f06f 0301 	mvn.w	r3, #1
 80035b2:	e023      	b.n	80035fc <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 80035b4:	78bb      	ldrb	r3, [r7, #2]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fdde 	bl	8003178 <gpioVerifyOutputType>
 80035bc:	4603      	mov	r3, r0
 80035be:	f083 0301 	eor.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 80035c8:	f06f 0303 	mvn.w	r3, #3
 80035cc:	e016      	b.n	80035fc <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f202 	lsl.w	r2, r1, r2
 80035da:	43d2      	mvns	r2, r2
 80035dc:	401a      	ands	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 80035e2:	78bb      	ldrb	r3, [r7, #2]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d108      	bne.n	80035fa <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
 8003610:	4613      	mov	r3, r2
 8003612:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fce7 	bl	8002fe8 <gpioVerifyPort>
 800361a:	4603      	mov	r3, r0
 800361c:	f083 0301 	eor.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	e044      	b.n	80036b6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fd0c 	bl	800304c <gpioVerifyPin>
 8003634:	4603      	mov	r3, r0
 8003636:	f083 0301 	eor.w	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003640:	f06f 0301 	mvn.w	r3, #1
 8003644:	e037      	b.n	80036b6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8003646:	78bb      	ldrb	r3, [r7, #2]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fda9 	bl	80031a0 <gpioVerifyPushPullMode>
 800364e:	4603      	mov	r3, r0
 8003650:	f083 0301 	eor.w	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 800365a:	f06f 0306 	mvn.w	r3, #6
 800365e:	e02a      	b.n	80036b6 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	0052      	lsls	r2, r2, #1
 8003668:	2103      	movs	r1, #3
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	43d2      	mvns	r2, r2
 8003670:	401a      	ands	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11a      	bne.n	80036b4 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 800367e:	78bb      	ldrb	r3, [r7, #2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10a      	bne.n	800369a <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	0052      	lsls	r2, r2, #1
 800368c:	2101      	movs	r1, #1
 800368e:	fa01 f202 	lsl.w	r2, r1, r2
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	e00c      	b.n	80036b4 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 800369a:	78bb      	ldrb	r3, [r7, #2]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d109      	bne.n	80036b4 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	0052      	lsls	r2, r2, #1
 80036a8:	2102      	movs	r1, #2
 80036aa:	fa01 f202 	lsl.w	r2, r1, r2
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	4013      	ands	r3, r2
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f202 	lsl.w	r2, r1, r2
 80036e0:	4293      	cmp	r3, r2
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 800370a:	bf00      	nop
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f9      	beq.n	800370c <__i2c_start+0x16>
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 800373a:	bf00      	nop
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f9      	beq.n	800373c <__i2c_stop+0x16>
 }
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 800375e:	bf00      	nop
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2da      	uxtb	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4313      	orrs	r3, r2
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ed      	bne.n	8003760 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 800379a:	bf00      	nop
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f9      	beq.n	800379c <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e002      	b.n	80037b4 <__i2c_Chk_TX_empty+0x22>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b13      	cmp	r3, #19
 80037b8:	d9f9      	bls.n	80037ae <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <i2cVerifyDutyCycle+0x16>
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a13      	ldr	r2, [pc, #76]	; (8003848 <i2cSelectI2C+0x58>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d106      	bne.n	800380e <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <i2cSelectI2C+0x5c>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	4a11      	ldr	r2, [pc, #68]	; (800384c <i2cSelectI2C+0x5c>)
 8003806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800380a:	6413      	str	r3, [r2, #64]	; 0x40
 800380c:	e014      	b.n	8003838 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <i2cSelectI2C+0x60>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d106      	bne.n	8003824 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <i2cSelectI2C+0x5c>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a0c      	ldr	r2, [pc, #48]	; (800384c <i2cSelectI2C+0x5c>)
 800381c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	e009      	b.n	8003838 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <i2cSelectI2C+0x64>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d105      	bne.n	8003838 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <i2cSelectI2C+0x5c>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	4a06      	ldr	r2, [pc, #24]	; (800384c <i2cSelectI2C+0x5c>)
 8003832:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003836:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40005400 	.word	0x40005400
 800384c:	40023800 	.word	0x40023800
 8003850:	40005800 	.word	0x40005800
 8003854:	40005c00 	.word	0x40005c00

08003858 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <i2cSetClkSpd+0x2a>
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d008      	beq.n	8003882 <i2cSetClkSpd+0x2a>
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d005      	beq.n	8003882 <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d002      	beq.n	8003882 <i2cSetClkSpd+0x2a>
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d160      	bne.n	8003944 <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 8003882:	bf00      	nop
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f9      	bne.n	8003884 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800389e:	f023 030f 	bic.w	r3, r3, #15
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	61da      	str	r2, [r3, #28]
    	switch (spd)
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d836      	bhi.n	8003926 <i2cSetClkSpd+0xce>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <i2cSetClkSpd+0x68>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038d5 	.word	0x080038d5
 80038c4:	080038e3 	.word	0x080038e3
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	080038ff 	.word	0x080038ff
 80038d0:	0800390d 	.word	0x0800390d
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	61da      	str	r2, [r3, #28]
				break;
 80038e0:	e02e      	b.n	8003940 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	61da      	str	r2, [r3, #28]
    			break;
 80038ee:	e027      	b.n	8003940 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	61da      	str	r2, [r3, #28]
    				break;
 80038fc:	e020      	b.n	8003940 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f043 0214 	orr.w	r2, r3, #20
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	61da      	str	r2, [r3, #28]
    			break;
 800390a:	e019      	b.n	8003940 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f043 0205 	orr.w	r2, r3, #5
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	61da      	str	r2, [r3, #28]
				break;
 8003924:	e00c      	b.n	8003940 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	61da      	str	r2, [r3, #28]
    			break;
 800393e:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e001      	b.n	8003948 <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8003944:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4603      	mov	r3, r0
 8003964:	70fb      	strb	r3, [r7, #3]
 8003966:	460b      	mov	r3, r1
 8003968:	70bb      	strb	r3, [r7, #2]
 800396a:	4613      	mov	r3, r2
 800396c:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff29 	bl	80037c8 <i2cVerifyDutyCycle>
 8003976:	4603      	mov	r3, r0
 8003978:	f083 0301 	eor.w	r3, r3, #1
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8003982:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8003986:	e02f      	b.n	80039e8 <i2cInitI2C+0x94>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800398e:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 0201 	bic.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 80039a2:	f000 fa49 	bl	8003e38 <rccGetPclk1Freq>
 80039a6:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <i2cInitI2C+0x9c>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	0c9a      	lsrs	r2, r3, #18
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2211      	movs	r2, #17
 80039ba:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 80039d0:	787b      	ldrb	r3, [r7, #1]
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff3f 	bl	8003858 <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	431bde83 	.word	0x431bde83

080039f4 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	70fb      	strb	r3, [r7, #3]
 8003a06:	460b      	mov	r3, r1
 8003a08:	70bb      	strb	r3, [r7, #2]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8003a0e:	bf00      	nop
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f9      	bne.n	8003a10 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe6a 	bl	80036f6 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003a22:	bf00      	nop
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f9      	beq.n	8003a24 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8003a3a:	bf00      	nop
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f9      	beq.n	8003a3c <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fe84 	bl	8003756 <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fe9f 	bl	8003792 <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8003a54:	78ba      	ldrb	r2, [r7, #2]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff fe99 	bl	8003792 <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff fe78 	bl	8003756 <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 8003a66:	787a      	ldrb	r2, [r7, #1]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8003a6c:	bf00      	nop
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f9      	beq.n	8003a6e <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fe6b 	bl	8003756 <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff fe50 	bl	8003726 <__i2c_stop>


    return I2C_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	72fb      	strb	r3, [r7, #11]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8003aa2:	bf00      	nop
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f9      	bne.n	8003aa4 <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff fe20 	bl	80036f6 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003ab6:	bf00      	nop
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f9      	beq.n	8003ab8 <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 8003ac4:	7afb      	ldrb	r3, [r7, #11]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003ace:	bf00      	nop
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f9      	beq.n	8003ad0 <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff fe3a 	bl	8003756 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8003ae2:	7aba      	ldrb	r2, [r7, #10]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff fe52 	bl	8003792 <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 8003aee:	bf00      	nop
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f9      	beq.n	8003af0 <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff fe2a 	bl	8003756 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8003b0e:	bf00      	nop
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f9      	beq.n	8003b10 <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8003b1c:	7afb      	ldrb	r3, [r7, #11]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	461a      	mov	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003b2a:	bf00      	nop
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f9      	beq.n	8003b2c <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8003b44:	e02e      	b.n	8003ba4 <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 8003b46:	7e3b      	ldrb	r3, [r7, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d117      	bne.n	8003b7c <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff fdfc 	bl	8003756 <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8003b5e:	bf00      	nop
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f9      	beq.n	8003b60 <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6919      	ldr	r1, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	b2ca      	uxtb	r2, r1
 8003b78:	701a      	strb	r2, [r3, #0]
            break;
 8003b7a:	e016      	b.n	8003baa <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fdea 	bl	8003756 <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8003b82:	bf00      	nop
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f9      	beq.n	8003b84 <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6919      	ldr	r1, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	b2ca      	uxtb	r2, r1
 8003b9c:	701a      	strb	r2, [r3, #0]
            num--;
 8003b9e:	7e3b      	ldrb	r3, [r7, #24]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8003ba4:	7e3b      	ldrb	r3, [r7, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1cd      	bne.n	8003b46 <i2cBurstRegRead+0xb6>
        }
    }
    //__i2c_dummy_read_SR1_SR2(i2c);
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f7ff fdbb 	bl	8003726 <__i2c_stop>

    return I2C_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b094      	sub	sp, #80	; 0x50
 8003be2:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8003be4:	2300      	movs	r3, #0
 8003be6:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8003be8:	2300      	movs	r3, #0
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8003bec:	2300      	movs	r3, #0
 8003bee:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf4:	4b79      	ldr	r3, [pc, #484]	; (8003ddc <rccGetSysClock+0x200>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d00d      	beq.n	8003c1c <rccGetSysClock+0x40>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	f200 80e1 	bhi.w	8003dc8 <rccGetSysClock+0x1ec>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <rccGetSysClock+0x34>
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d003      	beq.n	8003c16 <rccGetSysClock+0x3a>
 8003c0e:	e0db      	b.n	8003dc8 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 8003c10:	4b73      	ldr	r3, [pc, #460]	; (8003de0 <rccGetSysClock+0x204>)
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003c14:	e0db      	b.n	8003dce <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 8003c16:	4b73      	ldr	r3, [pc, #460]	; (8003de4 <rccGetSysClock+0x208>)
 8003c18:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003c1a:	e0d8      	b.n	8003dce <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <rccGetSysClock+0x200>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c24:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c26:	4b6d      	ldr	r3, [pc, #436]	; (8003ddc <rccGetSysClock+0x200>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003c32:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <rccGetSysClock+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	2200      	movs	r2, #0
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c44:	633b      	str	r3, [r7, #48]	; 0x30
 8003c46:	2300      	movs	r3, #0
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c4e:	4622      	mov	r2, r4
 8003c50:	462b      	mov	r3, r5
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	0159      	lsls	r1, r3, #5
 8003c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c60:	0150      	lsls	r0, r2, #5
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4621      	mov	r1, r4
 8003c68:	1a51      	subs	r1, r2, r1
 8003c6a:	6139      	str	r1, [r7, #16]
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c80:	4659      	mov	r1, fp
 8003c82:	018b      	lsls	r3, r1, #6
 8003c84:	4651      	mov	r1, sl
 8003c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	018a      	lsls	r2, r1, #6
 8003c8e:	4651      	mov	r1, sl
 8003c90:	ebb2 0801 	subs.w	r8, r2, r1
 8003c94:	4659      	mov	r1, fp
 8003c96:	eb63 0901 	sbc.w	r9, r3, r1
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cae:	4690      	mov	r8, r2
 8003cb0:	4699      	mov	r9, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	eb18 0303 	adds.w	r3, r8, r3
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	462b      	mov	r3, r5
 8003cbc:	eb49 0303 	adc.w	r3, r9, r3
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	024b      	lsls	r3, r1, #9
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cd8:	4621      	mov	r1, r4
 8003cda:	024a      	lsls	r2, r1, #9
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cec:	f7fc ffb4 	bl	8000c58 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf8:	e058      	b.n	8003dac <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003cfa:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <rccGetSysClock+0x200>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	099b      	lsrs	r3, r3, #6
 8003d00:	2200      	movs	r2, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	4611      	mov	r1, r2
 8003d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	f04f 0000 	mov.w	r0, #0
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	0159      	lsls	r1, r3, #5
 8003d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d26:	0150      	lsls	r0, r2, #5
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d32:	4649      	mov	r1, r9
 8003d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d50:	eb63 050b 	sbc.w	r5, r3, fp
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	00eb      	lsls	r3, r5, #3
 8003d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d62:	00e2      	lsls	r2, r4, #3
 8003d64:	4614      	mov	r4, r2
 8003d66:	461d      	mov	r5, r3
 8003d68:	4643      	mov	r3, r8
 8003d6a:	18e3      	adds	r3, r4, r3
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	464b      	mov	r3, r9
 8003d70:	eb45 0303 	adc.w	r3, r5, r3
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d82:	4629      	mov	r1, r5
 8003d84:	028b      	lsls	r3, r1, #10
 8003d86:	4621      	mov	r1, r4
 8003d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	028a      	lsls	r2, r1, #10
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d96:	2200      	movs	r2, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	61fa      	str	r2, [r7, #28]
 8003d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da0:	f7fc ff5a 	bl	8000c58 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003da8:	4613      	mov	r3, r2
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <rccGetSysClock+0x200>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8003dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003dc6:	e002      	b.n	8003dce <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <rccGetSysClock+0x204>)
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003dcc:	bf00      	nop
    }

    return sysClock;
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3750      	adds	r7, #80	; 0x50
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	007a1200 	.word	0x007a1200

08003de8 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8003dee:	f7ff fef5 	bl	8003bdc <rccGetSysClock>
 8003df2:	4601      	mov	r1, r0
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <rccGetHclkFreq+0x44>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfc:	22f0      	movs	r2, #240	; 0xf0
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	fa92 f2a2 	rbit	r2, r2
 8003e06:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	fab2 f282 	clz	r2, r2
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	40d3      	lsrs	r3, r2
 8003e12:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <rccGetHclkFreq+0x48>)
 8003e14:	5cd3      	ldrb	r3, [r2, r3]
 8003e16:	fa21 f303 	lsr.w	r3, r1, r3
 8003e1a:	4a06      	ldr	r2, [pc, #24]	; (8003e34 <rccGetHclkFreq+0x4c>)
 8003e1c:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <rccGetHclkFreq+0x4c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	08009054 	.word	0x08009054
 8003e34:	2000000c 	.word	0x2000000c

08003e38 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003e3e:	f7ff ffd3 	bl	8003de8 <rccGetHclkFreq>
 8003e42:	4601      	mov	r1, r0
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <rccGetPclk1Freq+0x3c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003e4c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003e50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	fa92 f2a2 	rbit	r2, r2
 8003e58:	603a      	str	r2, [r7, #0]
  return result;
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	fab2 f282 	clz	r2, r2
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	40d3      	lsrs	r3, r2
 8003e64:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <rccGetPclk1Freq+0x40>)
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	08009054 	.word	0x08009054

08003e7c <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8003e84:	bf00      	nop
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f9      	beq.n	8003e86 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 8003e92:	2300      	movs	r3, #0
 8003e94:	81fb      	strh	r3, [r7, #14]
 8003e96:	e002      	b.n	8003e9e <__spi_Chk_TX_empty+0x22>
 8003e98:	89fb      	ldrh	r3, [r7, #14]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	81fb      	strh	r3, [r7, #14]
 8003e9e:	89fb      	ldrh	r3, [r7, #14]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d9f9      	bls.n	8003e98 <__spi_Chk_TX_empty+0x1c>

}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8003eba:	bf00      	nop
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f9      	bne.n	8003ebc <__spi_Chk_notBSY+0xa>
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a0c      	ldr	r2, [pc, #48]	; (8003f14 <spiVerifySPI+0x3c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <spiVerifySPI+0x28>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <spiVerifySPI+0x40>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <spiVerifySPI+0x28>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <spiVerifySPI+0x44>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <spiVerifySPI+0x28>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <spiVerifySPI+0x48>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <spiVerifySPI+0x2c>
    {
        return true;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <spiVerifySPI+0x2e>
    }
    return false;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40013000 	.word	0x40013000
 8003f18:	40003800 	.word	0x40003800
 8003f1c:	40003c00 	.word	0x40003c00
 8003f20:	40013400 	.word	0x40013400

08003f24 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d014      	beq.n	8003f5e <spiVerifyClkDivider+0x3a>
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d011      	beq.n	8003f5e <spiVerifyClkDivider+0x3a>
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d00e      	beq.n	8003f5e <spiVerifyClkDivider+0x3a>
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d00b      	beq.n	8003f5e <spiVerifyClkDivider+0x3a>
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d008      	beq.n	8003f5e <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	2b05      	cmp	r3, #5
 8003f50:	d005      	beq.n	8003f5e <spiVerifyClkDivider+0x3a>
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	2b06      	cmp	r3, #6
 8003f56:	d002      	beq.n	8003f5e <spiVerifyClkDivider+0x3a>
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	d101      	bne.n	8003f62 <spiVerifyClkDivider+0x3e>
    {
        return true;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <spiVerifyClkDivider+0x40>
    }
    return false;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d002      	beq.n	8003f86 <spiVerifySSM+0x16>
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <spiVerifySSM+0x1a>
    {
        return true;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <spiVerifySSM+0x1c>
    }
    return false;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <spiVerifyOpMode+0x16>
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <spiVerifyOpMode+0x1a>
    {
        return true;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <spiVerifyOpMode+0x1c>
    }
    return false;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <spiVerifyPhase+0x16>
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <spiVerifyPhase+0x1a>
    {
        return true;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <spiVerifyPhase+0x1c>
    }
    return false;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <spiVerifyIdlePolarity+0x16>
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	4608      	mov	r0, r1
 800401a:	4611      	mov	r1, r2
 800401c:	461a      	mov	r2, r3
 800401e:	4603      	mov	r3, r0
 8004020:	70fb      	strb	r3, [r7, #3]
 8004022:	460b      	mov	r3, r1
 8004024:	70bb      	strb	r3, [r7, #2]
 8004026:	4613      	mov	r3, r2
 8004028:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ff77 	bl	8003f24 <spiVerifyClkDivider>
 8004036:	4603      	mov	r3, r0
 8004038:	f083 0301 	eor.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8004042:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8004046:	e0cc      	b.n	80041e2 <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8004048:	787b      	ldrb	r3, [r7, #1]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff90 	bl	8003f70 <spiVerifySSM>
 8004050:	4603      	mov	r3, r0
 8004052:	f083 0301 	eor.w	r3, r3, #1
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 800405c:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8004060:	e0bf      	b.n	80041e2 <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8004062:	7f3b      	ldrb	r3, [r7, #28]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff97 	bl	8003f98 <spiVerifyOpMode>
 800406a:	4603      	mov	r3, r0
 800406c:	f083 0301 	eor.w	r3, r3, #1
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8004076:	f06f 0355 	mvn.w	r3, #85	; 0x55
 800407a:	e0b2      	b.n	80041e2 <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 800407c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff9d 	bl	8003fc0 <spiVerifyPhase>
 8004086:	4603      	mov	r3, r0
 8004088:	f083 0301 	eor.w	r3, r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 8004092:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8004096:	e0a4      	b.n	80041e2 <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8004098:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff ffa3 	bl	8003fe8 <spiVerifyIdlePolarity>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f083 0301 	eor.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 80040ae:	f06f 0357 	mvn.w	r3, #87	; 0x57
 80040b2:	e096      	b.n	80041e2 <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	2b07      	cmp	r3, #7
 80040b8:	d83a      	bhi.n	8004130 <spiInitSPI+0x120>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <spiInitSPI+0xb0>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040e1 	.word	0x080040e1
 80040c4:	080040eb 	.word	0x080040eb
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	080040ff 	.word	0x080040ff
 80040d0:	08004109 	.word	0x08004109
 80040d4:	08004113 	.word	0x08004113
 80040d8:	0800411d 	.word	0x0800411d
 80040dc:	08004127 	.word	0x08004127
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80040e0:	89fb      	ldrh	r3, [r7, #14]
 80040e2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80040e6:	81fb      	strh	r3, [r7, #14]
            break;
 80040e8:	e027      	b.n	800413a <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 80040ea:	89fb      	ldrh	r3, [r7, #14]
 80040ec:	f043 0308 	orr.w	r3, r3, #8
 80040f0:	81fb      	strh	r3, [r7, #14]
            break;
 80040f2:	e022      	b.n	800413a <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 80040f4:	89fb      	ldrh	r3, [r7, #14]
 80040f6:	f043 0310 	orr.w	r3, r3, #16
 80040fa:	81fb      	strh	r3, [r7, #14]
            break;
 80040fc:	e01d      	b.n	800413a <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	f043 0318 	orr.w	r3, r3, #24
 8004104:	81fb      	strh	r3, [r7, #14]
            break;
 8004106:	e018      	b.n	800413a <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8004108:	89fb      	ldrh	r3, [r7, #14]
 800410a:	f043 0320 	orr.w	r3, r3, #32
 800410e:	81fb      	strh	r3, [r7, #14]
            break;
 8004110:	e013      	b.n	800413a <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8004112:	89fb      	ldrh	r3, [r7, #14]
 8004114:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004118:	81fb      	strh	r3, [r7, #14]
            break;
 800411a:	e00e      	b.n	800413a <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 800411c:	89fb      	ldrh	r3, [r7, #14]
 800411e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004122:	81fb      	strh	r3, [r7, #14]
            break;
 8004124:	e009      	b.n	800413a <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004126:	89fb      	ldrh	r3, [r7, #14]
 8004128:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800412c:	81fb      	strh	r3, [r7, #14]
            break;
 800412e:	e004      	b.n	800413a <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004130:	89fb      	ldrh	r3, [r7, #14]
 8004132:	f043 0318 	orr.w	r3, r3, #24
 8004136:	81fb      	strh	r3, [r7, #14]
            break;
 8004138:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 800413a:	78bb      	ldrb	r3, [r7, #2]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8004140:	89fb      	ldrh	r3, [r7, #14]
 8004142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004146:	81fb      	strh	r3, [r7, #14]
 8004148:	e003      	b.n	8004152 <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 800414a:	89fb      	ldrh	r3, [r7, #14]
 800414c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004150:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8004152:	787b      	ldrb	r3, [r7, #1]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d110      	bne.n	800417a <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8004158:	89fb      	ldrh	r3, [r7, #14]
 800415a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415e:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8004160:	7e3b      	ldrb	r3, [r7, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d104      	bne.n	8004170 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8004166:	89fb      	ldrh	r3, [r7, #14]
 8004168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416c:	81fb      	strh	r3, [r7, #14]
 800416e:	e008      	b.n	8004182 <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8004170:	89fb      	ldrh	r3, [r7, #14]
 8004172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004176:	81fb      	strh	r3, [r7, #14]
 8004178:	e003      	b.n	8004182 <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 800417a:	89fb      	ldrh	r3, [r7, #14]
 800417c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004180:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8004182:	7f3b      	ldrb	r3, [r7, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8004188:	89fb      	ldrh	r3, [r7, #14]
 800418a:	f043 0304 	orr.w	r3, r3, #4
 800418e:	81fb      	strh	r3, [r7, #14]
 8004190:	e003      	b.n	800419a <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8004192:	89fb      	ldrh	r3, [r7, #14]
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 800419a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 80041a2:	89fb      	ldrh	r3, [r7, #14]
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	81fb      	strh	r3, [r7, #14]
 80041aa:	e003      	b.n	80041b4 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 80041ac:	89fb      	ldrh	r3, [r7, #14]
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 80041b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	f023 0302 	bic.w	r3, r3, #2
 80041c2:	81fb      	strh	r3, [r7, #14]
 80041c4:	e003      	b.n	80041ce <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 80041c6:	89fb      	ldrh	r3, [r7, #14]
 80041c8:	f043 0302 	orr.w	r3, r3, #2
 80041cc:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 80041ce:	89fa      	ldrh	r2, [r7, #14]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f846 	bl	800426c <spiEnableSPI>

    return SPI_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop

080041ec <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <spiSelectSPI+0x6c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d106      	bne.n	800420a <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <spiSelectSPI+0x70>)
 80041fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <spiSelectSPI+0x70>)
 8004202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004206:	6453      	str	r3, [r2, #68]	; 0x44
 8004208:	e01f      	b.n	800424a <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a14      	ldr	r2, [pc, #80]	; (8004260 <spiSelectSPI+0x74>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d106      	bne.n	8004220 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <spiSelectSPI+0x70>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <spiSelectSPI+0x70>)
 8004218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
 800421e:	e014      	b.n	800424a <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a10      	ldr	r2, [pc, #64]	; (8004264 <spiSelectSPI+0x78>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d106      	bne.n	8004236 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <spiSelectSPI+0x70>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4a0b      	ldr	r2, [pc, #44]	; (800425c <spiSelectSPI+0x70>)
 800422e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004232:	6413      	str	r3, [r2, #64]	; 0x40
 8004234:	e009      	b.n	800424a <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <spiSelectSPI+0x7c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d105      	bne.n	800424a <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <spiSelectSPI+0x70>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	4a06      	ldr	r2, [pc, #24]	; (800425c <spiSelectSPI+0x70>)
 8004244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004248:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40013000 	.word	0x40013000
 800425c:	40023800 	.word	0x40023800
 8004260:	40003800 	.word	0x40003800
 8004264:	40003c00 	.word	0x40003c00
 8004268:	40013400 	.word	0x40013400

0800426c <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff fe2f 	bl	8003ed8 <spiVerifySPI>
 800427a:	4603      	mov	r3, r0
 800427c:	f083 0301 	eor.w	r3, r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8004286:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800428a:	e006      	b.n	800429a <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	4611      	mov	r1, r2
 80042ae:	461a      	mov	r2, r3
 80042b0:	460b      	mov	r3, r1
 80042b2:	71fb      	strb	r3, [r7, #7]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fec6 	bl	800304c <gpioVerifyPin>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f083 0301 	eor.w	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 80042cc:	f06f 0301 	mvn.w	r3, #1
 80042d0:	e016      	b.n	8004300 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fdd2 	bl	8003e7c <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	4619      	mov	r1, r3
 80042dc:	68b8      	ldr	r0, [r7, #8]
 80042de:	f7ff f8b3 	bl	8003448 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 80042e2:	79ba      	ldrb	r2, [r7, #6]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff fdc7 	bl	8003e7c <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff fddf 	bl	8003eb2 <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	4619      	mov	r1, r3
 80042f8:	68b8      	ldr	r0, [r7, #8]
 80042fa:	f7ff f87a 	bl	80033f2 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	; (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3b01      	subs	r3, #1
 8004368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800436c:	d301      	bcc.n	8004372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800436e:	2301      	movs	r3, #1
 8004370:	e00f      	b.n	8004392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <SysTick_Config+0x40>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800437a:	210f      	movs	r1, #15
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	f7ff ffc2 	bl	8004308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <SysTick_Config+0x40>)
 8004386:	2200      	movs	r2, #0
 8004388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800438a:	4b04      	ldr	r3, [pc, #16]	; (800439c <SysTick_Config+0x40>)
 800438c:	2207      	movs	r2, #7
 800438e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	e000e010 	.word	0xe000e010

080043a0 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
    *timer = millis;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 80043c4:	f000 f8b2 	bl	800452c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <systickInit+0x24>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ffc2 	bl	800435c <SysTick_Config>
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8004408:	2300      	movs	r3, #0
 800440a:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <isSystickExpired+0x16>
	{
		timerState = true;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <SysTick_Handler+0x14>)
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	200001fc 	.word	0x200001fc

0800443c <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <systickUpdateTimer+0x1a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8004456:	4b04      	ldr	r3, [pc, #16]	; (8004468 <systickUpdateTimer+0x2c>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	200001fc 	.word	0x200001fc

0800446c <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]
 800447c:	e011      	b.n	80044a2 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <systickUpdateTimerList+0x30>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	3301      	adds	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	7bfa      	ldrb	r2, [r7, #15]
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d3e9      	bcc.n	800447e <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <systickUpdateTimerList+0x50>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	200001fc 	.word	0x200001fc

080044c0 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 80044ca:	6839      	ldr	r1, [r7, #0]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff67 	bl	80043a0 <systickSetMillis>
    while (!isSystickExpired(*timer))
 80044d2:	e006      	b.n	80044e2 <systickDelay+0x22>
    {
        if (timerTrigger == true)
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <systickDelay+0x44>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ffad 	bl	800443c <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ff8a 	bl	8004400 <isSystickExpired>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f083 0301 	eor.w	r3, r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1ed      	bne.n	80044d4 <systickDelay+0x14>
        }
    }
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200001fc 	.word	0x200001fc

08004508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <SystemInit+0x20>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	4a05      	ldr	r2, [pc, #20]	; (8004528 <SystemInit+0x20>)
 8004514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	2302      	movs	r3, #2
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	2302      	movs	r3, #2
 8004544:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <SystemCoreClockUpdate+0xec>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b08      	cmp	r3, #8
 8004554:	d011      	beq.n	800457a <SystemCoreClockUpdate+0x4e>
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d844      	bhi.n	80045e6 <SystemCoreClockUpdate+0xba>
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <SystemCoreClockUpdate+0x3e>
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d004      	beq.n	8004572 <SystemCoreClockUpdate+0x46>
 8004568:	e03d      	b.n	80045e6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800456a:	4b2c      	ldr	r3, [pc, #176]	; (800461c <SystemCoreClockUpdate+0xf0>)
 800456c:	4a2c      	ldr	r2, [pc, #176]	; (8004620 <SystemCoreClockUpdate+0xf4>)
 800456e:	601a      	str	r2, [r3, #0]
      break;
 8004570:	e03d      	b.n	80045ee <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <SystemCoreClockUpdate+0xf0>)
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <SystemCoreClockUpdate+0xf8>)
 8004576:	601a      	str	r2, [r3, #0]
      break;
 8004578:	e039      	b.n	80045ee <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800457a:	4b27      	ldr	r3, [pc, #156]	; (8004618 <SystemCoreClockUpdate+0xec>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	0d9b      	lsrs	r3, r3, #22
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <SystemCoreClockUpdate+0xec>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800458e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004596:	4a23      	ldr	r2, [pc, #140]	; (8004624 <SystemCoreClockUpdate+0xf8>)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <SystemCoreClockUpdate+0xec>)
 80045a0:	6852      	ldr	r2, [r2, #4]
 80045a2:	0992      	lsrs	r2, r2, #6
 80045a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e00b      	b.n	80045c8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80045b0:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <SystemCoreClockUpdate+0xf4>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	4a17      	ldr	r2, [pc, #92]	; (8004618 <SystemCoreClockUpdate+0xec>)
 80045ba:	6852      	ldr	r2, [r2, #4]
 80045bc:	0992      	lsrs	r2, r2, #6
 80045be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <SystemCoreClockUpdate+0xec>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	3301      	adds	r3, #1
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	4a0e      	ldr	r2, [pc, #56]	; (800461c <SystemCoreClockUpdate+0xf0>)
 80045e2:	6013      	str	r3, [r2, #0]
      break;
 80045e4:	e003      	b.n	80045ee <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <SystemCoreClockUpdate+0xf0>)
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <SystemCoreClockUpdate+0xf4>)
 80045ea:	601a      	str	r2, [r3, #0]
      break;
 80045ec:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <SystemCoreClockUpdate+0xec>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	4a0b      	ldr	r2, [pc, #44]	; (8004628 <SystemCoreClockUpdate+0xfc>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <SystemCoreClockUpdate+0xf0>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
 8004608:	4a04      	ldr	r2, [pc, #16]	; (800461c <SystemCoreClockUpdate+0xf0>)
 800460a:	6013      	str	r3, [r2, #0]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40023800 	.word	0x40023800
 800461c:	2000000c 	.word	0x2000000c
 8004620:	00f42400 	.word	0x00f42400
 8004624:	007a1200 	.word	0x007a1200
 8004628:	08009064 	.word	0x08009064

0800462c <__libc_init_array>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4d0d      	ldr	r5, [pc, #52]	; (8004664 <__libc_init_array+0x38>)
 8004630:	4c0d      	ldr	r4, [pc, #52]	; (8004668 <__libc_init_array+0x3c>)
 8004632:	1b64      	subs	r4, r4, r5
 8004634:	10a4      	asrs	r4, r4, #2
 8004636:	2600      	movs	r6, #0
 8004638:	42a6      	cmp	r6, r4
 800463a:	d109      	bne.n	8004650 <__libc_init_array+0x24>
 800463c:	4d0b      	ldr	r5, [pc, #44]	; (800466c <__libc_init_array+0x40>)
 800463e:	4c0c      	ldr	r4, [pc, #48]	; (8004670 <__libc_init_array+0x44>)
 8004640:	f004 fa64 	bl	8008b0c <_init>
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	2600      	movs	r6, #0
 800464a:	42a6      	cmp	r6, r4
 800464c:	d105      	bne.n	800465a <__libc_init_array+0x2e>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	f855 3b04 	ldr.w	r3, [r5], #4
 8004654:	4798      	blx	r3
 8004656:	3601      	adds	r6, #1
 8004658:	e7ee      	b.n	8004638 <__libc_init_array+0xc>
 800465a:	f855 3b04 	ldr.w	r3, [r5], #4
 800465e:	4798      	blx	r3
 8004660:	3601      	adds	r6, #1
 8004662:	e7f2      	b.n	800464a <__libc_init_array+0x1e>
 8004664:	080096a0 	.word	0x080096a0
 8004668:	080096a0 	.word	0x080096a0
 800466c:	080096a0 	.word	0x080096a0
 8004670:	080096a4 	.word	0x080096a4

08004674 <memset>:
 8004674:	4402      	add	r2, r0
 8004676:	4603      	mov	r3, r0
 8004678:	4293      	cmp	r3, r2
 800467a:	d100      	bne.n	800467e <memset+0xa>
 800467c:	4770      	bx	lr
 800467e:	f803 1b01 	strb.w	r1, [r3], #1
 8004682:	e7f9      	b.n	8004678 <memset+0x4>

08004684 <__cvt>:
 8004684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004688:	ec55 4b10 	vmov	r4, r5, d0
 800468c:	2d00      	cmp	r5, #0
 800468e:	460e      	mov	r6, r1
 8004690:	4619      	mov	r1, r3
 8004692:	462b      	mov	r3, r5
 8004694:	bfbb      	ittet	lt
 8004696:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800469a:	461d      	movlt	r5, r3
 800469c:	2300      	movge	r3, #0
 800469e:	232d      	movlt	r3, #45	; 0x2d
 80046a0:	700b      	strb	r3, [r1, #0]
 80046a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046a8:	4691      	mov	r9, r2
 80046aa:	f023 0820 	bic.w	r8, r3, #32
 80046ae:	bfbc      	itt	lt
 80046b0:	4622      	movlt	r2, r4
 80046b2:	4614      	movlt	r4, r2
 80046b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046b8:	d005      	beq.n	80046c6 <__cvt+0x42>
 80046ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046be:	d100      	bne.n	80046c2 <__cvt+0x3e>
 80046c0:	3601      	adds	r6, #1
 80046c2:	2102      	movs	r1, #2
 80046c4:	e000      	b.n	80046c8 <__cvt+0x44>
 80046c6:	2103      	movs	r1, #3
 80046c8:	ab03      	add	r3, sp, #12
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	ab02      	add	r3, sp, #8
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	ec45 4b10 	vmov	d0, r4, r5
 80046d4:	4653      	mov	r3, sl
 80046d6:	4632      	mov	r2, r6
 80046d8:	f000 fcea 	bl	80050b0 <_dtoa_r>
 80046dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046e0:	4607      	mov	r7, r0
 80046e2:	d102      	bne.n	80046ea <__cvt+0x66>
 80046e4:	f019 0f01 	tst.w	r9, #1
 80046e8:	d022      	beq.n	8004730 <__cvt+0xac>
 80046ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046ee:	eb07 0906 	add.w	r9, r7, r6
 80046f2:	d110      	bne.n	8004716 <__cvt+0x92>
 80046f4:	783b      	ldrb	r3, [r7, #0]
 80046f6:	2b30      	cmp	r3, #48	; 0x30
 80046f8:	d10a      	bne.n	8004710 <__cvt+0x8c>
 80046fa:	2200      	movs	r2, #0
 80046fc:	2300      	movs	r3, #0
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	f7fc f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004706:	b918      	cbnz	r0, 8004710 <__cvt+0x8c>
 8004708:	f1c6 0601 	rsb	r6, r6, #1
 800470c:	f8ca 6000 	str.w	r6, [sl]
 8004710:	f8da 3000 	ldr.w	r3, [sl]
 8004714:	4499      	add	r9, r3
 8004716:	2200      	movs	r2, #0
 8004718:	2300      	movs	r3, #0
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fc f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 8004722:	b108      	cbz	r0, 8004728 <__cvt+0xa4>
 8004724:	f8cd 900c 	str.w	r9, [sp, #12]
 8004728:	2230      	movs	r2, #48	; 0x30
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	454b      	cmp	r3, r9
 800472e:	d307      	bcc.n	8004740 <__cvt+0xbc>
 8004730:	9b03      	ldr	r3, [sp, #12]
 8004732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004734:	1bdb      	subs	r3, r3, r7
 8004736:	4638      	mov	r0, r7
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	b004      	add	sp, #16
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	1c59      	adds	r1, r3, #1
 8004742:	9103      	str	r1, [sp, #12]
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e7f0      	b.n	800472a <__cvt+0xa6>

08004748 <__exponent>:
 8004748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800474a:	4603      	mov	r3, r0
 800474c:	2900      	cmp	r1, #0
 800474e:	bfb8      	it	lt
 8004750:	4249      	neglt	r1, r1
 8004752:	f803 2b02 	strb.w	r2, [r3], #2
 8004756:	bfb4      	ite	lt
 8004758:	222d      	movlt	r2, #45	; 0x2d
 800475a:	222b      	movge	r2, #43	; 0x2b
 800475c:	2909      	cmp	r1, #9
 800475e:	7042      	strb	r2, [r0, #1]
 8004760:	dd2a      	ble.n	80047b8 <__exponent+0x70>
 8004762:	f10d 0407 	add.w	r4, sp, #7
 8004766:	46a4      	mov	ip, r4
 8004768:	270a      	movs	r7, #10
 800476a:	46a6      	mov	lr, r4
 800476c:	460a      	mov	r2, r1
 800476e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004772:	fb07 1516 	mls	r5, r7, r6, r1
 8004776:	3530      	adds	r5, #48	; 0x30
 8004778:	2a63      	cmp	r2, #99	; 0x63
 800477a:	f104 34ff 	add.w	r4, r4, #4294967295
 800477e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004782:	4631      	mov	r1, r6
 8004784:	dcf1      	bgt.n	800476a <__exponent+0x22>
 8004786:	3130      	adds	r1, #48	; 0x30
 8004788:	f1ae 0502 	sub.w	r5, lr, #2
 800478c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004790:	1c44      	adds	r4, r0, #1
 8004792:	4629      	mov	r1, r5
 8004794:	4561      	cmp	r1, ip
 8004796:	d30a      	bcc.n	80047ae <__exponent+0x66>
 8004798:	f10d 0209 	add.w	r2, sp, #9
 800479c:	eba2 020e 	sub.w	r2, r2, lr
 80047a0:	4565      	cmp	r5, ip
 80047a2:	bf88      	it	hi
 80047a4:	2200      	movhi	r2, #0
 80047a6:	4413      	add	r3, r2
 80047a8:	1a18      	subs	r0, r3, r0
 80047aa:	b003      	add	sp, #12
 80047ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80047b6:	e7ed      	b.n	8004794 <__exponent+0x4c>
 80047b8:	2330      	movs	r3, #48	; 0x30
 80047ba:	3130      	adds	r1, #48	; 0x30
 80047bc:	7083      	strb	r3, [r0, #2]
 80047be:	70c1      	strb	r1, [r0, #3]
 80047c0:	1d03      	adds	r3, r0, #4
 80047c2:	e7f1      	b.n	80047a8 <__exponent+0x60>

080047c4 <_printf_float>:
 80047c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c8:	ed2d 8b02 	vpush	{d8}
 80047cc:	b08d      	sub	sp, #52	; 0x34
 80047ce:	460c      	mov	r4, r1
 80047d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047d4:	4616      	mov	r6, r2
 80047d6:	461f      	mov	r7, r3
 80047d8:	4605      	mov	r5, r0
 80047da:	f001 fa57 	bl	8005c8c <_localeconv_r>
 80047de:	f8d0 a000 	ldr.w	sl, [r0]
 80047e2:	4650      	mov	r0, sl
 80047e4:	f7fb fcfc 	bl	80001e0 <strlen>
 80047e8:	2300      	movs	r3, #0
 80047ea:	930a      	str	r3, [sp, #40]	; 0x28
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	9305      	str	r3, [sp, #20]
 80047f0:	f8d8 3000 	ldr.w	r3, [r8]
 80047f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80047f8:	3307      	adds	r3, #7
 80047fa:	f023 0307 	bic.w	r3, r3, #7
 80047fe:	f103 0208 	add.w	r2, r3, #8
 8004802:	f8c8 2000 	str.w	r2, [r8]
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800480e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004812:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004816:	9307      	str	r3, [sp, #28]
 8004818:	f8cd 8018 	str.w	r8, [sp, #24]
 800481c:	ee08 0a10 	vmov	s16, r0
 8004820:	4b9f      	ldr	r3, [pc, #636]	; (8004aa0 <_printf_float+0x2dc>)
 8004822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004826:	f04f 32ff 	mov.w	r2, #4294967295
 800482a:	f7fc f987 	bl	8000b3c <__aeabi_dcmpun>
 800482e:	bb88      	cbnz	r0, 8004894 <_printf_float+0xd0>
 8004830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004834:	4b9a      	ldr	r3, [pc, #616]	; (8004aa0 <_printf_float+0x2dc>)
 8004836:	f04f 32ff 	mov.w	r2, #4294967295
 800483a:	f7fc f961 	bl	8000b00 <__aeabi_dcmple>
 800483e:	bb48      	cbnz	r0, 8004894 <_printf_float+0xd0>
 8004840:	2200      	movs	r2, #0
 8004842:	2300      	movs	r3, #0
 8004844:	4640      	mov	r0, r8
 8004846:	4649      	mov	r1, r9
 8004848:	f7fc f950 	bl	8000aec <__aeabi_dcmplt>
 800484c:	b110      	cbz	r0, 8004854 <_printf_float+0x90>
 800484e:	232d      	movs	r3, #45	; 0x2d
 8004850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004854:	4b93      	ldr	r3, [pc, #588]	; (8004aa4 <_printf_float+0x2e0>)
 8004856:	4894      	ldr	r0, [pc, #592]	; (8004aa8 <_printf_float+0x2e4>)
 8004858:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800485c:	bf94      	ite	ls
 800485e:	4698      	movls	r8, r3
 8004860:	4680      	movhi	r8, r0
 8004862:	2303      	movs	r3, #3
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	9b05      	ldr	r3, [sp, #20]
 8004868:	f023 0204 	bic.w	r2, r3, #4
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	f04f 0900 	mov.w	r9, #0
 8004872:	9700      	str	r7, [sp, #0]
 8004874:	4633      	mov	r3, r6
 8004876:	aa0b      	add	r2, sp, #44	; 0x2c
 8004878:	4621      	mov	r1, r4
 800487a:	4628      	mov	r0, r5
 800487c:	f000 f9d8 	bl	8004c30 <_printf_common>
 8004880:	3001      	adds	r0, #1
 8004882:	f040 8090 	bne.w	80049a6 <_printf_float+0x1e2>
 8004886:	f04f 30ff 	mov.w	r0, #4294967295
 800488a:	b00d      	add	sp, #52	; 0x34
 800488c:	ecbd 8b02 	vpop	{d8}
 8004890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	4640      	mov	r0, r8
 800489a:	4649      	mov	r1, r9
 800489c:	f7fc f94e 	bl	8000b3c <__aeabi_dcmpun>
 80048a0:	b140      	cbz	r0, 80048b4 <_printf_float+0xf0>
 80048a2:	464b      	mov	r3, r9
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bfbc      	itt	lt
 80048a8:	232d      	movlt	r3, #45	; 0x2d
 80048aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048ae:	487f      	ldr	r0, [pc, #508]	; (8004aac <_printf_float+0x2e8>)
 80048b0:	4b7f      	ldr	r3, [pc, #508]	; (8004ab0 <_printf_float+0x2ec>)
 80048b2:	e7d1      	b.n	8004858 <_printf_float+0x94>
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80048ba:	9206      	str	r2, [sp, #24]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	d13f      	bne.n	8004940 <_printf_float+0x17c>
 80048c0:	2306      	movs	r3, #6
 80048c2:	6063      	str	r3, [r4, #4]
 80048c4:	9b05      	ldr	r3, [sp, #20]
 80048c6:	6861      	ldr	r1, [r4, #4]
 80048c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048cc:	2300      	movs	r3, #0
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	ab0a      	add	r3, sp, #40	; 0x28
 80048d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048d6:	ab09      	add	r3, sp, #36	; 0x24
 80048d8:	ec49 8b10 	vmov	d0, r8, r9
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	6022      	str	r2, [r4, #0]
 80048e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048e4:	4628      	mov	r0, r5
 80048e6:	f7ff fecd 	bl	8004684 <__cvt>
 80048ea:	9b06      	ldr	r3, [sp, #24]
 80048ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048ee:	2b47      	cmp	r3, #71	; 0x47
 80048f0:	4680      	mov	r8, r0
 80048f2:	d108      	bne.n	8004906 <_printf_float+0x142>
 80048f4:	1cc8      	adds	r0, r1, #3
 80048f6:	db02      	blt.n	80048fe <_printf_float+0x13a>
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	4299      	cmp	r1, r3
 80048fc:	dd41      	ble.n	8004982 <_printf_float+0x1be>
 80048fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004902:	fa5f fb8b 	uxtb.w	fp, fp
 8004906:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800490a:	d820      	bhi.n	800494e <_printf_float+0x18a>
 800490c:	3901      	subs	r1, #1
 800490e:	465a      	mov	r2, fp
 8004910:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004914:	9109      	str	r1, [sp, #36]	; 0x24
 8004916:	f7ff ff17 	bl	8004748 <__exponent>
 800491a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800491c:	1813      	adds	r3, r2, r0
 800491e:	2a01      	cmp	r2, #1
 8004920:	4681      	mov	r9, r0
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	dc02      	bgt.n	800492c <_printf_float+0x168>
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	07d2      	lsls	r2, r2, #31
 800492a:	d501      	bpl.n	8004930 <_printf_float+0x16c>
 800492c:	3301      	adds	r3, #1
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004934:	2b00      	cmp	r3, #0
 8004936:	d09c      	beq.n	8004872 <_printf_float+0xae>
 8004938:	232d      	movs	r3, #45	; 0x2d
 800493a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800493e:	e798      	b.n	8004872 <_printf_float+0xae>
 8004940:	9a06      	ldr	r2, [sp, #24]
 8004942:	2a47      	cmp	r2, #71	; 0x47
 8004944:	d1be      	bne.n	80048c4 <_printf_float+0x100>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1bc      	bne.n	80048c4 <_printf_float+0x100>
 800494a:	2301      	movs	r3, #1
 800494c:	e7b9      	b.n	80048c2 <_printf_float+0xfe>
 800494e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004952:	d118      	bne.n	8004986 <_printf_float+0x1c2>
 8004954:	2900      	cmp	r1, #0
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	dd0b      	ble.n	8004972 <_printf_float+0x1ae>
 800495a:	6121      	str	r1, [r4, #16]
 800495c:	b913      	cbnz	r3, 8004964 <_printf_float+0x1a0>
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	07d0      	lsls	r0, r2, #31
 8004962:	d502      	bpl.n	800496a <_printf_float+0x1a6>
 8004964:	3301      	adds	r3, #1
 8004966:	440b      	add	r3, r1
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	65a1      	str	r1, [r4, #88]	; 0x58
 800496c:	f04f 0900 	mov.w	r9, #0
 8004970:	e7de      	b.n	8004930 <_printf_float+0x16c>
 8004972:	b913      	cbnz	r3, 800497a <_printf_float+0x1b6>
 8004974:	6822      	ldr	r2, [r4, #0]
 8004976:	07d2      	lsls	r2, r2, #31
 8004978:	d501      	bpl.n	800497e <_printf_float+0x1ba>
 800497a:	3302      	adds	r3, #2
 800497c:	e7f4      	b.n	8004968 <_printf_float+0x1a4>
 800497e:	2301      	movs	r3, #1
 8004980:	e7f2      	b.n	8004968 <_printf_float+0x1a4>
 8004982:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004988:	4299      	cmp	r1, r3
 800498a:	db05      	blt.n	8004998 <_printf_float+0x1d4>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	6121      	str	r1, [r4, #16]
 8004990:	07d8      	lsls	r0, r3, #31
 8004992:	d5ea      	bpl.n	800496a <_printf_float+0x1a6>
 8004994:	1c4b      	adds	r3, r1, #1
 8004996:	e7e7      	b.n	8004968 <_printf_float+0x1a4>
 8004998:	2900      	cmp	r1, #0
 800499a:	bfd4      	ite	le
 800499c:	f1c1 0202 	rsble	r2, r1, #2
 80049a0:	2201      	movgt	r2, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	e7e0      	b.n	8004968 <_printf_float+0x1a4>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	055a      	lsls	r2, r3, #21
 80049aa:	d407      	bmi.n	80049bc <_printf_float+0x1f8>
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	4642      	mov	r2, r8
 80049b0:	4631      	mov	r1, r6
 80049b2:	4628      	mov	r0, r5
 80049b4:	47b8      	blx	r7
 80049b6:	3001      	adds	r0, #1
 80049b8:	d12c      	bne.n	8004a14 <_printf_float+0x250>
 80049ba:	e764      	b.n	8004886 <_printf_float+0xc2>
 80049bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049c0:	f240 80e0 	bls.w	8004b84 <_printf_float+0x3c0>
 80049c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049c8:	2200      	movs	r2, #0
 80049ca:	2300      	movs	r3, #0
 80049cc:	f7fc f884 	bl	8000ad8 <__aeabi_dcmpeq>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d034      	beq.n	8004a3e <_printf_float+0x27a>
 80049d4:	4a37      	ldr	r2, [pc, #220]	; (8004ab4 <_printf_float+0x2f0>)
 80049d6:	2301      	movs	r3, #1
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	f43f af51 	beq.w	8004886 <_printf_float+0xc2>
 80049e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049e8:	429a      	cmp	r2, r3
 80049ea:	db02      	blt.n	80049f2 <_printf_float+0x22e>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	07d8      	lsls	r0, r3, #31
 80049f0:	d510      	bpl.n	8004a14 <_printf_float+0x250>
 80049f2:	ee18 3a10 	vmov	r3, s16
 80049f6:	4652      	mov	r2, sl
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f af41 	beq.w	8004886 <_printf_float+0xc2>
 8004a04:	f04f 0800 	mov.w	r8, #0
 8004a08:	f104 091a 	add.w	r9, r4, #26
 8004a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	4543      	cmp	r3, r8
 8004a12:	dc09      	bgt.n	8004a28 <_printf_float+0x264>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	079b      	lsls	r3, r3, #30
 8004a18:	f100 8105 	bmi.w	8004c26 <_printf_float+0x462>
 8004a1c:	68e0      	ldr	r0, [r4, #12]
 8004a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a20:	4298      	cmp	r0, r3
 8004a22:	bfb8      	it	lt
 8004a24:	4618      	movlt	r0, r3
 8004a26:	e730      	b.n	800488a <_printf_float+0xc6>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	464a      	mov	r2, r9
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f af27 	beq.w	8004886 <_printf_float+0xc2>
 8004a38:	f108 0801 	add.w	r8, r8, #1
 8004a3c:	e7e6      	b.n	8004a0c <_printf_float+0x248>
 8004a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	dc39      	bgt.n	8004ab8 <_printf_float+0x2f4>
 8004a44:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <_printf_float+0x2f0>)
 8004a46:	2301      	movs	r3, #1
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f43f af19 	beq.w	8004886 <_printf_float+0xc2>
 8004a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d102      	bne.n	8004a62 <_printf_float+0x29e>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	07d9      	lsls	r1, r3, #31
 8004a60:	d5d8      	bpl.n	8004a14 <_printf_float+0x250>
 8004a62:	ee18 3a10 	vmov	r3, s16
 8004a66:	4652      	mov	r2, sl
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b8      	blx	r7
 8004a6e:	3001      	adds	r0, #1
 8004a70:	f43f af09 	beq.w	8004886 <_printf_float+0xc2>
 8004a74:	f04f 0900 	mov.w	r9, #0
 8004a78:	f104 0a1a 	add.w	sl, r4, #26
 8004a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7e:	425b      	negs	r3, r3
 8004a80:	454b      	cmp	r3, r9
 8004a82:	dc01      	bgt.n	8004a88 <_printf_float+0x2c4>
 8004a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a86:	e792      	b.n	80049ae <_printf_float+0x1ea>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4652      	mov	r2, sl
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	f43f aef7 	beq.w	8004886 <_printf_float+0xc2>
 8004a98:	f109 0901 	add.w	r9, r9, #1
 8004a9c:	e7ee      	b.n	8004a7c <_printf_float+0x2b8>
 8004a9e:	bf00      	nop
 8004aa0:	7fefffff 	.word	0x7fefffff
 8004aa4:	08009078 	.word	0x08009078
 8004aa8:	0800907c 	.word	0x0800907c
 8004aac:	08009084 	.word	0x08009084
 8004ab0:	08009080 	.word	0x08009080
 8004ab4:	08009088 	.word	0x08009088
 8004ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004abc:	429a      	cmp	r2, r3
 8004abe:	bfa8      	it	ge
 8004ac0:	461a      	movge	r2, r3
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	4691      	mov	r9, r2
 8004ac6:	dc37      	bgt.n	8004b38 <_printf_float+0x374>
 8004ac8:	f04f 0b00 	mov.w	fp, #0
 8004acc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ad0:	f104 021a 	add.w	r2, r4, #26
 8004ad4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ad6:	9305      	str	r3, [sp, #20]
 8004ad8:	eba3 0309 	sub.w	r3, r3, r9
 8004adc:	455b      	cmp	r3, fp
 8004ade:	dc33      	bgt.n	8004b48 <_printf_float+0x384>
 8004ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	db3b      	blt.n	8004b60 <_printf_float+0x39c>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	07da      	lsls	r2, r3, #31
 8004aec:	d438      	bmi.n	8004b60 <_printf_float+0x39c>
 8004aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004af0:	9a05      	ldr	r2, [sp, #20]
 8004af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004af4:	1a9a      	subs	r2, r3, r2
 8004af6:	eba3 0901 	sub.w	r9, r3, r1
 8004afa:	4591      	cmp	r9, r2
 8004afc:	bfa8      	it	ge
 8004afe:	4691      	movge	r9, r2
 8004b00:	f1b9 0f00 	cmp.w	r9, #0
 8004b04:	dc35      	bgt.n	8004b72 <_printf_float+0x3ae>
 8004b06:	f04f 0800 	mov.w	r8, #0
 8004b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b0e:	f104 0a1a 	add.w	sl, r4, #26
 8004b12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b16:	1a9b      	subs	r3, r3, r2
 8004b18:	eba3 0309 	sub.w	r3, r3, r9
 8004b1c:	4543      	cmp	r3, r8
 8004b1e:	f77f af79 	ble.w	8004a14 <_printf_float+0x250>
 8004b22:	2301      	movs	r3, #1
 8004b24:	4652      	mov	r2, sl
 8004b26:	4631      	mov	r1, r6
 8004b28:	4628      	mov	r0, r5
 8004b2a:	47b8      	blx	r7
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	f43f aeaa 	beq.w	8004886 <_printf_float+0xc2>
 8004b32:	f108 0801 	add.w	r8, r8, #1
 8004b36:	e7ec      	b.n	8004b12 <_printf_float+0x34e>
 8004b38:	4613      	mov	r3, r2
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	4628      	mov	r0, r5
 8004b40:	47b8      	blx	r7
 8004b42:	3001      	adds	r0, #1
 8004b44:	d1c0      	bne.n	8004ac8 <_printf_float+0x304>
 8004b46:	e69e      	b.n	8004886 <_printf_float+0xc2>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	9205      	str	r2, [sp, #20]
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	f43f ae97 	beq.w	8004886 <_printf_float+0xc2>
 8004b58:	9a05      	ldr	r2, [sp, #20]
 8004b5a:	f10b 0b01 	add.w	fp, fp, #1
 8004b5e:	e7b9      	b.n	8004ad4 <_printf_float+0x310>
 8004b60:	ee18 3a10 	vmov	r3, s16
 8004b64:	4652      	mov	r2, sl
 8004b66:	4631      	mov	r1, r6
 8004b68:	4628      	mov	r0, r5
 8004b6a:	47b8      	blx	r7
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d1be      	bne.n	8004aee <_printf_float+0x32a>
 8004b70:	e689      	b.n	8004886 <_printf_float+0xc2>
 8004b72:	9a05      	ldr	r2, [sp, #20]
 8004b74:	464b      	mov	r3, r9
 8004b76:	4442      	add	r2, r8
 8004b78:	4631      	mov	r1, r6
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d1c1      	bne.n	8004b06 <_printf_float+0x342>
 8004b82:	e680      	b.n	8004886 <_printf_float+0xc2>
 8004b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b86:	2a01      	cmp	r2, #1
 8004b88:	dc01      	bgt.n	8004b8e <_printf_float+0x3ca>
 8004b8a:	07db      	lsls	r3, r3, #31
 8004b8c:	d538      	bpl.n	8004c00 <_printf_float+0x43c>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4642      	mov	r2, r8
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f ae74 	beq.w	8004886 <_printf_float+0xc2>
 8004b9e:	ee18 3a10 	vmov	r3, s16
 8004ba2:	4652      	mov	r2, sl
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	47b8      	blx	r7
 8004baa:	3001      	adds	r0, #1
 8004bac:	f43f ae6b 	beq.w	8004886 <_printf_float+0xc2>
 8004bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f7fb ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bbc:	b9d8      	cbnz	r0, 8004bf6 <_printf_float+0x432>
 8004bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc0:	f108 0201 	add.w	r2, r8, #1
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d10e      	bne.n	8004bee <_printf_float+0x42a>
 8004bd0:	e659      	b.n	8004886 <_printf_float+0xc2>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4652      	mov	r2, sl
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f ae52 	beq.w	8004886 <_printf_float+0xc2>
 8004be2:	f108 0801 	add.w	r8, r8, #1
 8004be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be8:	3b01      	subs	r3, #1
 8004bea:	4543      	cmp	r3, r8
 8004bec:	dcf1      	bgt.n	8004bd2 <_printf_float+0x40e>
 8004bee:	464b      	mov	r3, r9
 8004bf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bf4:	e6dc      	b.n	80049b0 <_printf_float+0x1ec>
 8004bf6:	f04f 0800 	mov.w	r8, #0
 8004bfa:	f104 0a1a 	add.w	sl, r4, #26
 8004bfe:	e7f2      	b.n	8004be6 <_printf_float+0x422>
 8004c00:	2301      	movs	r3, #1
 8004c02:	4642      	mov	r2, r8
 8004c04:	e7df      	b.n	8004bc6 <_printf_float+0x402>
 8004c06:	2301      	movs	r3, #1
 8004c08:	464a      	mov	r2, r9
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	f43f ae38 	beq.w	8004886 <_printf_float+0xc2>
 8004c16:	f108 0801 	add.w	r8, r8, #1
 8004c1a:	68e3      	ldr	r3, [r4, #12]
 8004c1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c1e:	1a5b      	subs	r3, r3, r1
 8004c20:	4543      	cmp	r3, r8
 8004c22:	dcf0      	bgt.n	8004c06 <_printf_float+0x442>
 8004c24:	e6fa      	b.n	8004a1c <_printf_float+0x258>
 8004c26:	f04f 0800 	mov.w	r8, #0
 8004c2a:	f104 0919 	add.w	r9, r4, #25
 8004c2e:	e7f4      	b.n	8004c1a <_printf_float+0x456>

08004c30 <_printf_common>:
 8004c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	4616      	mov	r6, r2
 8004c36:	4699      	mov	r9, r3
 8004c38:	688a      	ldr	r2, [r1, #8]
 8004c3a:	690b      	ldr	r3, [r1, #16]
 8004c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c40:	4293      	cmp	r3, r2
 8004c42:	bfb8      	it	lt
 8004c44:	4613      	movlt	r3, r2
 8004c46:	6033      	str	r3, [r6, #0]
 8004c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	460c      	mov	r4, r1
 8004c50:	b10a      	cbz	r2, 8004c56 <_printf_common+0x26>
 8004c52:	3301      	adds	r3, #1
 8004c54:	6033      	str	r3, [r6, #0]
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	0699      	lsls	r1, r3, #26
 8004c5a:	bf42      	ittt	mi
 8004c5c:	6833      	ldrmi	r3, [r6, #0]
 8004c5e:	3302      	addmi	r3, #2
 8004c60:	6033      	strmi	r3, [r6, #0]
 8004c62:	6825      	ldr	r5, [r4, #0]
 8004c64:	f015 0506 	ands.w	r5, r5, #6
 8004c68:	d106      	bne.n	8004c78 <_printf_common+0x48>
 8004c6a:	f104 0a19 	add.w	sl, r4, #25
 8004c6e:	68e3      	ldr	r3, [r4, #12]
 8004c70:	6832      	ldr	r2, [r6, #0]
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	42ab      	cmp	r3, r5
 8004c76:	dc26      	bgt.n	8004cc6 <_printf_common+0x96>
 8004c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c7c:	1e13      	subs	r3, r2, #0
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	bf18      	it	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	0692      	lsls	r2, r2, #26
 8004c86:	d42b      	bmi.n	8004ce0 <_printf_common+0xb0>
 8004c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	4638      	mov	r0, r7
 8004c90:	47c0      	blx	r8
 8004c92:	3001      	adds	r0, #1
 8004c94:	d01e      	beq.n	8004cd4 <_printf_common+0xa4>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	68e5      	ldr	r5, [r4, #12]
 8004c9a:	6832      	ldr	r2, [r6, #0]
 8004c9c:	f003 0306 	and.w	r3, r3, #6
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	bf08      	it	eq
 8004ca4:	1aad      	subeq	r5, r5, r2
 8004ca6:	68a3      	ldr	r3, [r4, #8]
 8004ca8:	6922      	ldr	r2, [r4, #16]
 8004caa:	bf0c      	ite	eq
 8004cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb0:	2500      	movne	r5, #0
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	bfc4      	itt	gt
 8004cb6:	1a9b      	subgt	r3, r3, r2
 8004cb8:	18ed      	addgt	r5, r5, r3
 8004cba:	2600      	movs	r6, #0
 8004cbc:	341a      	adds	r4, #26
 8004cbe:	42b5      	cmp	r5, r6
 8004cc0:	d11a      	bne.n	8004cf8 <_printf_common+0xc8>
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e008      	b.n	8004cd8 <_printf_common+0xa8>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4652      	mov	r2, sl
 8004cca:	4649      	mov	r1, r9
 8004ccc:	4638      	mov	r0, r7
 8004cce:	47c0      	blx	r8
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d103      	bne.n	8004cdc <_printf_common+0xac>
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cdc:	3501      	adds	r5, #1
 8004cde:	e7c6      	b.n	8004c6e <_printf_common+0x3e>
 8004ce0:	18e1      	adds	r1, r4, r3
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	2030      	movs	r0, #48	; 0x30
 8004ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cea:	4422      	add	r2, r4
 8004cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	e7c7      	b.n	8004c88 <_printf_common+0x58>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4622      	mov	r2, r4
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	4638      	mov	r0, r7
 8004d00:	47c0      	blx	r8
 8004d02:	3001      	adds	r0, #1
 8004d04:	d0e6      	beq.n	8004cd4 <_printf_common+0xa4>
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7d9      	b.n	8004cbe <_printf_common+0x8e>
	...

08004d0c <_printf_i>:
 8004d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	7e0f      	ldrb	r7, [r1, #24]
 8004d12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d14:	2f78      	cmp	r7, #120	; 0x78
 8004d16:	4691      	mov	r9, r2
 8004d18:	4680      	mov	r8, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	469a      	mov	sl, r3
 8004d1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d22:	d807      	bhi.n	8004d34 <_printf_i+0x28>
 8004d24:	2f62      	cmp	r7, #98	; 0x62
 8004d26:	d80a      	bhi.n	8004d3e <_printf_i+0x32>
 8004d28:	2f00      	cmp	r7, #0
 8004d2a:	f000 80d8 	beq.w	8004ede <_printf_i+0x1d2>
 8004d2e:	2f58      	cmp	r7, #88	; 0x58
 8004d30:	f000 80a3 	beq.w	8004e7a <_printf_i+0x16e>
 8004d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d3c:	e03a      	b.n	8004db4 <_printf_i+0xa8>
 8004d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d42:	2b15      	cmp	r3, #21
 8004d44:	d8f6      	bhi.n	8004d34 <_printf_i+0x28>
 8004d46:	a101      	add	r1, pc, #4	; (adr r1, 8004d4c <_printf_i+0x40>)
 8004d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d4c:	08004da5 	.word	0x08004da5
 8004d50:	08004db9 	.word	0x08004db9
 8004d54:	08004d35 	.word	0x08004d35
 8004d58:	08004d35 	.word	0x08004d35
 8004d5c:	08004d35 	.word	0x08004d35
 8004d60:	08004d35 	.word	0x08004d35
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004d35 	.word	0x08004d35
 8004d6c:	08004d35 	.word	0x08004d35
 8004d70:	08004d35 	.word	0x08004d35
 8004d74:	08004d35 	.word	0x08004d35
 8004d78:	08004ec5 	.word	0x08004ec5
 8004d7c:	08004de9 	.word	0x08004de9
 8004d80:	08004ea7 	.word	0x08004ea7
 8004d84:	08004d35 	.word	0x08004d35
 8004d88:	08004d35 	.word	0x08004d35
 8004d8c:	08004ee7 	.word	0x08004ee7
 8004d90:	08004d35 	.word	0x08004d35
 8004d94:	08004de9 	.word	0x08004de9
 8004d98:	08004d35 	.word	0x08004d35
 8004d9c:	08004d35 	.word	0x08004d35
 8004da0:	08004eaf 	.word	0x08004eaf
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	1d1a      	adds	r2, r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	602a      	str	r2, [r5, #0]
 8004dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0a3      	b.n	8004f00 <_printf_i+0x1f4>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	6829      	ldr	r1, [r5, #0]
 8004dbc:	0606      	lsls	r6, r0, #24
 8004dbe:	f101 0304 	add.w	r3, r1, #4
 8004dc2:	d50a      	bpl.n	8004dda <_printf_i+0xce>
 8004dc4:	680e      	ldr	r6, [r1, #0]
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	2e00      	cmp	r6, #0
 8004dca:	da03      	bge.n	8004dd4 <_printf_i+0xc8>
 8004dcc:	232d      	movs	r3, #45	; 0x2d
 8004dce:	4276      	negs	r6, r6
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd4:	485e      	ldr	r0, [pc, #376]	; (8004f50 <_printf_i+0x244>)
 8004dd6:	230a      	movs	r3, #10
 8004dd8:	e019      	b.n	8004e0e <_printf_i+0x102>
 8004dda:	680e      	ldr	r6, [r1, #0]
 8004ddc:	602b      	str	r3, [r5, #0]
 8004dde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004de2:	bf18      	it	ne
 8004de4:	b236      	sxthne	r6, r6
 8004de6:	e7ef      	b.n	8004dc8 <_printf_i+0xbc>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	6820      	ldr	r0, [r4, #0]
 8004dec:	1d19      	adds	r1, r3, #4
 8004dee:	6029      	str	r1, [r5, #0]
 8004df0:	0601      	lsls	r1, r0, #24
 8004df2:	d501      	bpl.n	8004df8 <_printf_i+0xec>
 8004df4:	681e      	ldr	r6, [r3, #0]
 8004df6:	e002      	b.n	8004dfe <_printf_i+0xf2>
 8004df8:	0646      	lsls	r6, r0, #25
 8004dfa:	d5fb      	bpl.n	8004df4 <_printf_i+0xe8>
 8004dfc:	881e      	ldrh	r6, [r3, #0]
 8004dfe:	4854      	ldr	r0, [pc, #336]	; (8004f50 <_printf_i+0x244>)
 8004e00:	2f6f      	cmp	r7, #111	; 0x6f
 8004e02:	bf0c      	ite	eq
 8004e04:	2308      	moveq	r3, #8
 8004e06:	230a      	movne	r3, #10
 8004e08:	2100      	movs	r1, #0
 8004e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e0e:	6865      	ldr	r5, [r4, #4]
 8004e10:	60a5      	str	r5, [r4, #8]
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	bfa2      	ittt	ge
 8004e16:	6821      	ldrge	r1, [r4, #0]
 8004e18:	f021 0104 	bicge.w	r1, r1, #4
 8004e1c:	6021      	strge	r1, [r4, #0]
 8004e1e:	b90e      	cbnz	r6, 8004e24 <_printf_i+0x118>
 8004e20:	2d00      	cmp	r5, #0
 8004e22:	d04d      	beq.n	8004ec0 <_printf_i+0x1b4>
 8004e24:	4615      	mov	r5, r2
 8004e26:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e2a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e2e:	5dc7      	ldrb	r7, [r0, r7]
 8004e30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e34:	4637      	mov	r7, r6
 8004e36:	42bb      	cmp	r3, r7
 8004e38:	460e      	mov	r6, r1
 8004e3a:	d9f4      	bls.n	8004e26 <_printf_i+0x11a>
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d10b      	bne.n	8004e58 <_printf_i+0x14c>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	07de      	lsls	r6, r3, #31
 8004e44:	d508      	bpl.n	8004e58 <_printf_i+0x14c>
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	6861      	ldr	r1, [r4, #4]
 8004e4a:	4299      	cmp	r1, r3
 8004e4c:	bfde      	ittt	le
 8004e4e:	2330      	movle	r3, #48	; 0x30
 8004e50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e58:	1b52      	subs	r2, r2, r5
 8004e5a:	6122      	str	r2, [r4, #16]
 8004e5c:	f8cd a000 	str.w	sl, [sp]
 8004e60:	464b      	mov	r3, r9
 8004e62:	aa03      	add	r2, sp, #12
 8004e64:	4621      	mov	r1, r4
 8004e66:	4640      	mov	r0, r8
 8004e68:	f7ff fee2 	bl	8004c30 <_printf_common>
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d14c      	bne.n	8004f0a <_printf_i+0x1fe>
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	b004      	add	sp, #16
 8004e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7a:	4835      	ldr	r0, [pc, #212]	; (8004f50 <_printf_i+0x244>)
 8004e7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e80:	6829      	ldr	r1, [r5, #0]
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e88:	6029      	str	r1, [r5, #0]
 8004e8a:	061d      	lsls	r5, r3, #24
 8004e8c:	d514      	bpl.n	8004eb8 <_printf_i+0x1ac>
 8004e8e:	07df      	lsls	r7, r3, #31
 8004e90:	bf44      	itt	mi
 8004e92:	f043 0320 	orrmi.w	r3, r3, #32
 8004e96:	6023      	strmi	r3, [r4, #0]
 8004e98:	b91e      	cbnz	r6, 8004ea2 <_printf_i+0x196>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	f023 0320 	bic.w	r3, r3, #32
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	e7b0      	b.n	8004e08 <_printf_i+0xfc>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	f043 0320 	orr.w	r3, r3, #32
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	2378      	movs	r3, #120	; 0x78
 8004eb0:	4828      	ldr	r0, [pc, #160]	; (8004f54 <_printf_i+0x248>)
 8004eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eb6:	e7e3      	b.n	8004e80 <_printf_i+0x174>
 8004eb8:	0659      	lsls	r1, r3, #25
 8004eba:	bf48      	it	mi
 8004ebc:	b2b6      	uxthmi	r6, r6
 8004ebe:	e7e6      	b.n	8004e8e <_printf_i+0x182>
 8004ec0:	4615      	mov	r5, r2
 8004ec2:	e7bb      	b.n	8004e3c <_printf_i+0x130>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	6826      	ldr	r6, [r4, #0]
 8004ec8:	6961      	ldr	r1, [r4, #20]
 8004eca:	1d18      	adds	r0, r3, #4
 8004ecc:	6028      	str	r0, [r5, #0]
 8004ece:	0635      	lsls	r5, r6, #24
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0x1cc>
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	e002      	b.n	8004ede <_printf_i+0x1d2>
 8004ed8:	0670      	lsls	r0, r6, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0x1c8>
 8004edc:	8019      	strh	r1, [r3, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6123      	str	r3, [r4, #16]
 8004ee2:	4615      	mov	r5, r2
 8004ee4:	e7ba      	b.n	8004e5c <_printf_i+0x150>
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	1d1a      	adds	r2, r3, #4
 8004eea:	602a      	str	r2, [r5, #0]
 8004eec:	681d      	ldr	r5, [r3, #0]
 8004eee:	6862      	ldr	r2, [r4, #4]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f7fb f97c 	bl	80001f0 <memchr>
 8004ef8:	b108      	cbz	r0, 8004efe <_printf_i+0x1f2>
 8004efa:	1b40      	subs	r0, r0, r5
 8004efc:	6060      	str	r0, [r4, #4]
 8004efe:	6863      	ldr	r3, [r4, #4]
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	2300      	movs	r3, #0
 8004f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f08:	e7a8      	b.n	8004e5c <_printf_i+0x150>
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	462a      	mov	r2, r5
 8004f0e:	4649      	mov	r1, r9
 8004f10:	4640      	mov	r0, r8
 8004f12:	47d0      	blx	sl
 8004f14:	3001      	adds	r0, #1
 8004f16:	d0ab      	beq.n	8004e70 <_printf_i+0x164>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	079b      	lsls	r3, r3, #30
 8004f1c:	d413      	bmi.n	8004f46 <_printf_i+0x23a>
 8004f1e:	68e0      	ldr	r0, [r4, #12]
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	4298      	cmp	r0, r3
 8004f24:	bfb8      	it	lt
 8004f26:	4618      	movlt	r0, r3
 8004f28:	e7a4      	b.n	8004e74 <_printf_i+0x168>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	47d0      	blx	sl
 8004f34:	3001      	adds	r0, #1
 8004f36:	d09b      	beq.n	8004e70 <_printf_i+0x164>
 8004f38:	3501      	adds	r5, #1
 8004f3a:	68e3      	ldr	r3, [r4, #12]
 8004f3c:	9903      	ldr	r1, [sp, #12]
 8004f3e:	1a5b      	subs	r3, r3, r1
 8004f40:	42ab      	cmp	r3, r5
 8004f42:	dcf2      	bgt.n	8004f2a <_printf_i+0x21e>
 8004f44:	e7eb      	b.n	8004f1e <_printf_i+0x212>
 8004f46:	2500      	movs	r5, #0
 8004f48:	f104 0619 	add.w	r6, r4, #25
 8004f4c:	e7f5      	b.n	8004f3a <_printf_i+0x22e>
 8004f4e:	bf00      	nop
 8004f50:	0800908a 	.word	0x0800908a
 8004f54:	0800909b 	.word	0x0800909b

08004f58 <siprintf>:
 8004f58:	b40e      	push	{r1, r2, r3}
 8004f5a:	b500      	push	{lr}
 8004f5c:	b09c      	sub	sp, #112	; 0x70
 8004f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004f60:	9002      	str	r0, [sp, #8]
 8004f62:	9006      	str	r0, [sp, #24]
 8004f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <siprintf+0x38>)
 8004f6a:	9107      	str	r1, [sp, #28]
 8004f6c:	9104      	str	r1, [sp, #16]
 8004f6e:	4909      	ldr	r1, [pc, #36]	; (8004f94 <siprintf+0x3c>)
 8004f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f74:	9105      	str	r1, [sp, #20]
 8004f76:	6800      	ldr	r0, [r0, #0]
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	a902      	add	r1, sp, #8
 8004f7c:	f001 fb76 	bl	800666c <_svfiprintf_r>
 8004f80:	9b02      	ldr	r3, [sp, #8]
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	b01c      	add	sp, #112	; 0x70
 8004f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f8c:	b003      	add	sp, #12
 8004f8e:	4770      	bx	lr
 8004f90:	20000010 	.word	0x20000010
 8004f94:	ffff0208 	.word	0xffff0208

08004f98 <quorem>:
 8004f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	6903      	ldr	r3, [r0, #16]
 8004f9e:	690c      	ldr	r4, [r1, #16]
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	4607      	mov	r7, r0
 8004fa4:	f2c0 8081 	blt.w	80050aa <quorem+0x112>
 8004fa8:	3c01      	subs	r4, #1
 8004faa:	f101 0814 	add.w	r8, r1, #20
 8004fae:	f100 0514 	add.w	r5, r0, #20
 8004fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004fc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fd0:	d331      	bcc.n	8005036 <quorem+0x9e>
 8004fd2:	f04f 0e00 	mov.w	lr, #0
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	46ac      	mov	ip, r5
 8004fda:	46f2      	mov	sl, lr
 8004fdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fe0:	b293      	uxth	r3, r2
 8004fe2:	fb06 e303 	mla	r3, r6, r3, lr
 8004fe6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	ebaa 0303 	sub.w	r3, sl, r3
 8004ff0:	f8dc a000 	ldr.w	sl, [ip]
 8004ff4:	0c12      	lsrs	r2, r2, #16
 8004ff6:	fa13 f38a 	uxtah	r3, r3, sl
 8004ffa:	fb06 e202 	mla	r2, r6, r2, lr
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	9b00      	ldr	r3, [sp, #0]
 8005002:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005006:	b292      	uxth	r2, r2
 8005008:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800500c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005010:	f8bd 3000 	ldrh.w	r3, [sp]
 8005014:	4581      	cmp	r9, r0
 8005016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800501a:	f84c 3b04 	str.w	r3, [ip], #4
 800501e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005022:	d2db      	bcs.n	8004fdc <quorem+0x44>
 8005024:	f855 300b 	ldr.w	r3, [r5, fp]
 8005028:	b92b      	cbnz	r3, 8005036 <quorem+0x9e>
 800502a:	9b01      	ldr	r3, [sp, #4]
 800502c:	3b04      	subs	r3, #4
 800502e:	429d      	cmp	r5, r3
 8005030:	461a      	mov	r2, r3
 8005032:	d32e      	bcc.n	8005092 <quorem+0xfa>
 8005034:	613c      	str	r4, [r7, #16]
 8005036:	4638      	mov	r0, r7
 8005038:	f001 f8c4 	bl	80061c4 <__mcmp>
 800503c:	2800      	cmp	r0, #0
 800503e:	db24      	blt.n	800508a <quorem+0xf2>
 8005040:	3601      	adds	r6, #1
 8005042:	4628      	mov	r0, r5
 8005044:	f04f 0c00 	mov.w	ip, #0
 8005048:	f858 2b04 	ldr.w	r2, [r8], #4
 800504c:	f8d0 e000 	ldr.w	lr, [r0]
 8005050:	b293      	uxth	r3, r2
 8005052:	ebac 0303 	sub.w	r3, ip, r3
 8005056:	0c12      	lsrs	r2, r2, #16
 8005058:	fa13 f38e 	uxtah	r3, r3, lr
 800505c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005064:	b29b      	uxth	r3, r3
 8005066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800506a:	45c1      	cmp	r9, r8
 800506c:	f840 3b04 	str.w	r3, [r0], #4
 8005070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005074:	d2e8      	bcs.n	8005048 <quorem+0xb0>
 8005076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800507a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800507e:	b922      	cbnz	r2, 800508a <quorem+0xf2>
 8005080:	3b04      	subs	r3, #4
 8005082:	429d      	cmp	r5, r3
 8005084:	461a      	mov	r2, r3
 8005086:	d30a      	bcc.n	800509e <quorem+0x106>
 8005088:	613c      	str	r4, [r7, #16]
 800508a:	4630      	mov	r0, r6
 800508c:	b003      	add	sp, #12
 800508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	3b04      	subs	r3, #4
 8005096:	2a00      	cmp	r2, #0
 8005098:	d1cc      	bne.n	8005034 <quorem+0x9c>
 800509a:	3c01      	subs	r4, #1
 800509c:	e7c7      	b.n	800502e <quorem+0x96>
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	3b04      	subs	r3, #4
 80050a2:	2a00      	cmp	r2, #0
 80050a4:	d1f0      	bne.n	8005088 <quorem+0xf0>
 80050a6:	3c01      	subs	r4, #1
 80050a8:	e7eb      	b.n	8005082 <quorem+0xea>
 80050aa:	2000      	movs	r0, #0
 80050ac:	e7ee      	b.n	800508c <quorem+0xf4>
	...

080050b0 <_dtoa_r>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	ed2d 8b04 	vpush	{d8-d9}
 80050b8:	ec57 6b10 	vmov	r6, r7, d0
 80050bc:	b093      	sub	sp, #76	; 0x4c
 80050be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80050c4:	9106      	str	r1, [sp, #24]
 80050c6:	ee10 aa10 	vmov	sl, s0
 80050ca:	4604      	mov	r4, r0
 80050cc:	9209      	str	r2, [sp, #36]	; 0x24
 80050ce:	930c      	str	r3, [sp, #48]	; 0x30
 80050d0:	46bb      	mov	fp, r7
 80050d2:	b975      	cbnz	r5, 80050f2 <_dtoa_r+0x42>
 80050d4:	2010      	movs	r0, #16
 80050d6:	f000 fddd 	bl	8005c94 <malloc>
 80050da:	4602      	mov	r2, r0
 80050dc:	6260      	str	r0, [r4, #36]	; 0x24
 80050de:	b920      	cbnz	r0, 80050ea <_dtoa_r+0x3a>
 80050e0:	4ba7      	ldr	r3, [pc, #668]	; (8005380 <_dtoa_r+0x2d0>)
 80050e2:	21ea      	movs	r1, #234	; 0xea
 80050e4:	48a7      	ldr	r0, [pc, #668]	; (8005384 <_dtoa_r+0x2d4>)
 80050e6:	f001 fbd1 	bl	800688c <__assert_func>
 80050ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050ee:	6005      	str	r5, [r0, #0]
 80050f0:	60c5      	str	r5, [r0, #12]
 80050f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f4:	6819      	ldr	r1, [r3, #0]
 80050f6:	b151      	cbz	r1, 800510e <_dtoa_r+0x5e>
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	604a      	str	r2, [r1, #4]
 80050fc:	2301      	movs	r3, #1
 80050fe:	4093      	lsls	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
 8005102:	4620      	mov	r0, r4
 8005104:	f000 fe1c 	bl	8005d40 <_Bfree>
 8005108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	1e3b      	subs	r3, r7, #0
 8005110:	bfaa      	itet	ge
 8005112:	2300      	movge	r3, #0
 8005114:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005118:	f8c8 3000 	strge.w	r3, [r8]
 800511c:	4b9a      	ldr	r3, [pc, #616]	; (8005388 <_dtoa_r+0x2d8>)
 800511e:	bfbc      	itt	lt
 8005120:	2201      	movlt	r2, #1
 8005122:	f8c8 2000 	strlt.w	r2, [r8]
 8005126:	ea33 030b 	bics.w	r3, r3, fp
 800512a:	d11b      	bne.n	8005164 <_dtoa_r+0xb4>
 800512c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800512e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005138:	4333      	orrs	r3, r6
 800513a:	f000 8592 	beq.w	8005c62 <_dtoa_r+0xbb2>
 800513e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005140:	b963      	cbnz	r3, 800515c <_dtoa_r+0xac>
 8005142:	4b92      	ldr	r3, [pc, #584]	; (800538c <_dtoa_r+0x2dc>)
 8005144:	e022      	b.n	800518c <_dtoa_r+0xdc>
 8005146:	4b92      	ldr	r3, [pc, #584]	; (8005390 <_dtoa_r+0x2e0>)
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	3308      	adds	r3, #8
 800514c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	9801      	ldr	r0, [sp, #4]
 8005152:	b013      	add	sp, #76	; 0x4c
 8005154:	ecbd 8b04 	vpop	{d8-d9}
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	4b8b      	ldr	r3, [pc, #556]	; (800538c <_dtoa_r+0x2dc>)
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	3303      	adds	r3, #3
 8005162:	e7f3      	b.n	800514c <_dtoa_r+0x9c>
 8005164:	2200      	movs	r2, #0
 8005166:	2300      	movs	r3, #0
 8005168:	4650      	mov	r0, sl
 800516a:	4659      	mov	r1, fp
 800516c:	f7fb fcb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005170:	ec4b ab19 	vmov	d9, sl, fp
 8005174:	4680      	mov	r8, r0
 8005176:	b158      	cbz	r0, 8005190 <_dtoa_r+0xe0>
 8005178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800517a:	2301      	movs	r3, #1
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 856b 	beq.w	8005c5c <_dtoa_r+0xbac>
 8005186:	4883      	ldr	r0, [pc, #524]	; (8005394 <_dtoa_r+0x2e4>)
 8005188:	6018      	str	r0, [r3, #0]
 800518a:	1e43      	subs	r3, r0, #1
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	e7df      	b.n	8005150 <_dtoa_r+0xa0>
 8005190:	ec4b ab10 	vmov	d0, sl, fp
 8005194:	aa10      	add	r2, sp, #64	; 0x40
 8005196:	a911      	add	r1, sp, #68	; 0x44
 8005198:	4620      	mov	r0, r4
 800519a:	f001 f8b9 	bl	8006310 <__d2b>
 800519e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80051a2:	ee08 0a10 	vmov	s16, r0
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	f000 8084 	beq.w	80052b4 <_dtoa_r+0x204>
 80051ac:	ee19 3a90 	vmov	r3, s19
 80051b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80051b8:	4656      	mov	r6, sl
 80051ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80051be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80051c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80051c6:	4b74      	ldr	r3, [pc, #464]	; (8005398 <_dtoa_r+0x2e8>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	4630      	mov	r0, r6
 80051cc:	4639      	mov	r1, r7
 80051ce:	f7fb f863 	bl	8000298 <__aeabi_dsub>
 80051d2:	a365      	add	r3, pc, #404	; (adr r3, 8005368 <_dtoa_r+0x2b8>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fb fa16 	bl	8000608 <__aeabi_dmul>
 80051dc:	a364      	add	r3, pc, #400	; (adr r3, 8005370 <_dtoa_r+0x2c0>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb f85b 	bl	800029c <__adddf3>
 80051e6:	4606      	mov	r6, r0
 80051e8:	4628      	mov	r0, r5
 80051ea:	460f      	mov	r7, r1
 80051ec:	f7fb f9a2 	bl	8000534 <__aeabi_i2d>
 80051f0:	a361      	add	r3, pc, #388	; (adr r3, 8005378 <_dtoa_r+0x2c8>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb fa07 	bl	8000608 <__aeabi_dmul>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4630      	mov	r0, r6
 8005200:	4639      	mov	r1, r7
 8005202:	f7fb f84b 	bl	800029c <__adddf3>
 8005206:	4606      	mov	r6, r0
 8005208:	460f      	mov	r7, r1
 800520a:	f7fb fcad 	bl	8000b68 <__aeabi_d2iz>
 800520e:	2200      	movs	r2, #0
 8005210:	9000      	str	r0, [sp, #0]
 8005212:	2300      	movs	r3, #0
 8005214:	4630      	mov	r0, r6
 8005216:	4639      	mov	r1, r7
 8005218:	f7fb fc68 	bl	8000aec <__aeabi_dcmplt>
 800521c:	b150      	cbz	r0, 8005234 <_dtoa_r+0x184>
 800521e:	9800      	ldr	r0, [sp, #0]
 8005220:	f7fb f988 	bl	8000534 <__aeabi_i2d>
 8005224:	4632      	mov	r2, r6
 8005226:	463b      	mov	r3, r7
 8005228:	f7fb fc56 	bl	8000ad8 <__aeabi_dcmpeq>
 800522c:	b910      	cbnz	r0, 8005234 <_dtoa_r+0x184>
 800522e:	9b00      	ldr	r3, [sp, #0]
 8005230:	3b01      	subs	r3, #1
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	9b00      	ldr	r3, [sp, #0]
 8005236:	2b16      	cmp	r3, #22
 8005238:	d85a      	bhi.n	80052f0 <_dtoa_r+0x240>
 800523a:	9a00      	ldr	r2, [sp, #0]
 800523c:	4b57      	ldr	r3, [pc, #348]	; (800539c <_dtoa_r+0x2ec>)
 800523e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	ec51 0b19 	vmov	r0, r1, d9
 800524a:	f7fb fc4f 	bl	8000aec <__aeabi_dcmplt>
 800524e:	2800      	cmp	r0, #0
 8005250:	d050      	beq.n	80052f4 <_dtoa_r+0x244>
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	3b01      	subs	r3, #1
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	2300      	movs	r3, #0
 800525a:	930b      	str	r3, [sp, #44]	; 0x2c
 800525c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800525e:	1b5d      	subs	r5, r3, r5
 8005260:	1e6b      	subs	r3, r5, #1
 8005262:	9305      	str	r3, [sp, #20]
 8005264:	bf45      	ittet	mi
 8005266:	f1c5 0301 	rsbmi	r3, r5, #1
 800526a:	9304      	strmi	r3, [sp, #16]
 800526c:	2300      	movpl	r3, #0
 800526e:	2300      	movmi	r3, #0
 8005270:	bf4c      	ite	mi
 8005272:	9305      	strmi	r3, [sp, #20]
 8005274:	9304      	strpl	r3, [sp, #16]
 8005276:	9b00      	ldr	r3, [sp, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	db3d      	blt.n	80052f8 <_dtoa_r+0x248>
 800527c:	9b05      	ldr	r3, [sp, #20]
 800527e:	9a00      	ldr	r2, [sp, #0]
 8005280:	920a      	str	r2, [sp, #40]	; 0x28
 8005282:	4413      	add	r3, r2
 8005284:	9305      	str	r3, [sp, #20]
 8005286:	2300      	movs	r3, #0
 8005288:	9307      	str	r3, [sp, #28]
 800528a:	9b06      	ldr	r3, [sp, #24]
 800528c:	2b09      	cmp	r3, #9
 800528e:	f200 8089 	bhi.w	80053a4 <_dtoa_r+0x2f4>
 8005292:	2b05      	cmp	r3, #5
 8005294:	bfc4      	itt	gt
 8005296:	3b04      	subgt	r3, #4
 8005298:	9306      	strgt	r3, [sp, #24]
 800529a:	9b06      	ldr	r3, [sp, #24]
 800529c:	f1a3 0302 	sub.w	r3, r3, #2
 80052a0:	bfcc      	ite	gt
 80052a2:	2500      	movgt	r5, #0
 80052a4:	2501      	movle	r5, #1
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	f200 8087 	bhi.w	80053ba <_dtoa_r+0x30a>
 80052ac:	e8df f003 	tbb	[pc, r3]
 80052b0:	59383a2d 	.word	0x59383a2d
 80052b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80052b8:	441d      	add	r5, r3
 80052ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80052be:	2b20      	cmp	r3, #32
 80052c0:	bfc1      	itttt	gt
 80052c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80052c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80052ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80052ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80052d2:	bfda      	itte	le
 80052d4:	f1c3 0320 	rsble	r3, r3, #32
 80052d8:	fa06 f003 	lslle.w	r0, r6, r3
 80052dc:	4318      	orrgt	r0, r3
 80052de:	f7fb f919 	bl	8000514 <__aeabi_ui2d>
 80052e2:	2301      	movs	r3, #1
 80052e4:	4606      	mov	r6, r0
 80052e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80052ea:	3d01      	subs	r5, #1
 80052ec:	930e      	str	r3, [sp, #56]	; 0x38
 80052ee:	e76a      	b.n	80051c6 <_dtoa_r+0x116>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7b2      	b.n	800525a <_dtoa_r+0x1aa>
 80052f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80052f6:	e7b1      	b.n	800525c <_dtoa_r+0x1ac>
 80052f8:	9b04      	ldr	r3, [sp, #16]
 80052fa:	9a00      	ldr	r2, [sp, #0]
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	9304      	str	r3, [sp, #16]
 8005300:	4253      	negs	r3, r2
 8005302:	9307      	str	r3, [sp, #28]
 8005304:	2300      	movs	r3, #0
 8005306:	930a      	str	r3, [sp, #40]	; 0x28
 8005308:	e7bf      	b.n	800528a <_dtoa_r+0x1da>
 800530a:	2300      	movs	r3, #0
 800530c:	9308      	str	r3, [sp, #32]
 800530e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	dc55      	bgt.n	80053c0 <_dtoa_r+0x310>
 8005314:	2301      	movs	r3, #1
 8005316:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800531a:	461a      	mov	r2, r3
 800531c:	9209      	str	r2, [sp, #36]	; 0x24
 800531e:	e00c      	b.n	800533a <_dtoa_r+0x28a>
 8005320:	2301      	movs	r3, #1
 8005322:	e7f3      	b.n	800530c <_dtoa_r+0x25c>
 8005324:	2300      	movs	r3, #0
 8005326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005328:	9308      	str	r3, [sp, #32]
 800532a:	9b00      	ldr	r3, [sp, #0]
 800532c:	4413      	add	r3, r2
 800532e:	9302      	str	r3, [sp, #8]
 8005330:	3301      	adds	r3, #1
 8005332:	2b01      	cmp	r3, #1
 8005334:	9303      	str	r3, [sp, #12]
 8005336:	bfb8      	it	lt
 8005338:	2301      	movlt	r3, #1
 800533a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800533c:	2200      	movs	r2, #0
 800533e:	6042      	str	r2, [r0, #4]
 8005340:	2204      	movs	r2, #4
 8005342:	f102 0614 	add.w	r6, r2, #20
 8005346:	429e      	cmp	r6, r3
 8005348:	6841      	ldr	r1, [r0, #4]
 800534a:	d93d      	bls.n	80053c8 <_dtoa_r+0x318>
 800534c:	4620      	mov	r0, r4
 800534e:	f000 fcb7 	bl	8005cc0 <_Balloc>
 8005352:	9001      	str	r0, [sp, #4]
 8005354:	2800      	cmp	r0, #0
 8005356:	d13b      	bne.n	80053d0 <_dtoa_r+0x320>
 8005358:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <_dtoa_r+0x2f0>)
 800535a:	4602      	mov	r2, r0
 800535c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005360:	e6c0      	b.n	80050e4 <_dtoa_r+0x34>
 8005362:	2301      	movs	r3, #1
 8005364:	e7df      	b.n	8005326 <_dtoa_r+0x276>
 8005366:	bf00      	nop
 8005368:	636f4361 	.word	0x636f4361
 800536c:	3fd287a7 	.word	0x3fd287a7
 8005370:	8b60c8b3 	.word	0x8b60c8b3
 8005374:	3fc68a28 	.word	0x3fc68a28
 8005378:	509f79fb 	.word	0x509f79fb
 800537c:	3fd34413 	.word	0x3fd34413
 8005380:	080090b9 	.word	0x080090b9
 8005384:	080090d0 	.word	0x080090d0
 8005388:	7ff00000 	.word	0x7ff00000
 800538c:	080090b5 	.word	0x080090b5
 8005390:	080090ac 	.word	0x080090ac
 8005394:	08009089 	.word	0x08009089
 8005398:	3ff80000 	.word	0x3ff80000
 800539c:	080091c0 	.word	0x080091c0
 80053a0:	0800912b 	.word	0x0800912b
 80053a4:	2501      	movs	r5, #1
 80053a6:	2300      	movs	r3, #0
 80053a8:	9306      	str	r3, [sp, #24]
 80053aa:	9508      	str	r5, [sp, #32]
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	2312      	movs	r3, #18
 80053b8:	e7b0      	b.n	800531c <_dtoa_r+0x26c>
 80053ba:	2301      	movs	r3, #1
 80053bc:	9308      	str	r3, [sp, #32]
 80053be:	e7f5      	b.n	80053ac <_dtoa_r+0x2fc>
 80053c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053c6:	e7b8      	b.n	800533a <_dtoa_r+0x28a>
 80053c8:	3101      	adds	r1, #1
 80053ca:	6041      	str	r1, [r0, #4]
 80053cc:	0052      	lsls	r2, r2, #1
 80053ce:	e7b8      	b.n	8005342 <_dtoa_r+0x292>
 80053d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053d2:	9a01      	ldr	r2, [sp, #4]
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	2b0e      	cmp	r3, #14
 80053da:	f200 809d 	bhi.w	8005518 <_dtoa_r+0x468>
 80053de:	2d00      	cmp	r5, #0
 80053e0:	f000 809a 	beq.w	8005518 <_dtoa_r+0x468>
 80053e4:	9b00      	ldr	r3, [sp, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	dd32      	ble.n	8005450 <_dtoa_r+0x3a0>
 80053ea:	4ab7      	ldr	r2, [pc, #732]	; (80056c8 <_dtoa_r+0x618>)
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80053f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053f8:	9b00      	ldr	r3, [sp, #0]
 80053fa:	05d8      	lsls	r0, r3, #23
 80053fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005400:	d516      	bpl.n	8005430 <_dtoa_r+0x380>
 8005402:	4bb2      	ldr	r3, [pc, #712]	; (80056cc <_dtoa_r+0x61c>)
 8005404:	ec51 0b19 	vmov	r0, r1, d9
 8005408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800540c:	f7fb fa26 	bl	800085c <__aeabi_ddiv>
 8005410:	f007 070f 	and.w	r7, r7, #15
 8005414:	4682      	mov	sl, r0
 8005416:	468b      	mov	fp, r1
 8005418:	2503      	movs	r5, #3
 800541a:	4eac      	ldr	r6, [pc, #688]	; (80056cc <_dtoa_r+0x61c>)
 800541c:	b957      	cbnz	r7, 8005434 <_dtoa_r+0x384>
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	4650      	mov	r0, sl
 8005424:	4659      	mov	r1, fp
 8005426:	f7fb fa19 	bl	800085c <__aeabi_ddiv>
 800542a:	4682      	mov	sl, r0
 800542c:	468b      	mov	fp, r1
 800542e:	e028      	b.n	8005482 <_dtoa_r+0x3d2>
 8005430:	2502      	movs	r5, #2
 8005432:	e7f2      	b.n	800541a <_dtoa_r+0x36a>
 8005434:	07f9      	lsls	r1, r7, #31
 8005436:	d508      	bpl.n	800544a <_dtoa_r+0x39a>
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005440:	f7fb f8e2 	bl	8000608 <__aeabi_dmul>
 8005444:	3501      	adds	r5, #1
 8005446:	4680      	mov	r8, r0
 8005448:	4689      	mov	r9, r1
 800544a:	107f      	asrs	r7, r7, #1
 800544c:	3608      	adds	r6, #8
 800544e:	e7e5      	b.n	800541c <_dtoa_r+0x36c>
 8005450:	f000 809b 	beq.w	800558a <_dtoa_r+0x4da>
 8005454:	9b00      	ldr	r3, [sp, #0]
 8005456:	4f9d      	ldr	r7, [pc, #628]	; (80056cc <_dtoa_r+0x61c>)
 8005458:	425e      	negs	r6, r3
 800545a:	4b9b      	ldr	r3, [pc, #620]	; (80056c8 <_dtoa_r+0x618>)
 800545c:	f006 020f 	and.w	r2, r6, #15
 8005460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	ec51 0b19 	vmov	r0, r1, d9
 800546c:	f7fb f8cc 	bl	8000608 <__aeabi_dmul>
 8005470:	1136      	asrs	r6, r6, #4
 8005472:	4682      	mov	sl, r0
 8005474:	468b      	mov	fp, r1
 8005476:	2300      	movs	r3, #0
 8005478:	2502      	movs	r5, #2
 800547a:	2e00      	cmp	r6, #0
 800547c:	d17a      	bne.n	8005574 <_dtoa_r+0x4c4>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1d3      	bne.n	800542a <_dtoa_r+0x37a>
 8005482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8082 	beq.w	800558e <_dtoa_r+0x4de>
 800548a:	4b91      	ldr	r3, [pc, #580]	; (80056d0 <_dtoa_r+0x620>)
 800548c:	2200      	movs	r2, #0
 800548e:	4650      	mov	r0, sl
 8005490:	4659      	mov	r1, fp
 8005492:	f7fb fb2b 	bl	8000aec <__aeabi_dcmplt>
 8005496:	2800      	cmp	r0, #0
 8005498:	d079      	beq.n	800558e <_dtoa_r+0x4de>
 800549a:	9b03      	ldr	r3, [sp, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d076      	beq.n	800558e <_dtoa_r+0x4de>
 80054a0:	9b02      	ldr	r3, [sp, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	dd36      	ble.n	8005514 <_dtoa_r+0x464>
 80054a6:	9b00      	ldr	r3, [sp, #0]
 80054a8:	4650      	mov	r0, sl
 80054aa:	4659      	mov	r1, fp
 80054ac:	1e5f      	subs	r7, r3, #1
 80054ae:	2200      	movs	r2, #0
 80054b0:	4b88      	ldr	r3, [pc, #544]	; (80056d4 <_dtoa_r+0x624>)
 80054b2:	f7fb f8a9 	bl	8000608 <__aeabi_dmul>
 80054b6:	9e02      	ldr	r6, [sp, #8]
 80054b8:	4682      	mov	sl, r0
 80054ba:	468b      	mov	fp, r1
 80054bc:	3501      	adds	r5, #1
 80054be:	4628      	mov	r0, r5
 80054c0:	f7fb f838 	bl	8000534 <__aeabi_i2d>
 80054c4:	4652      	mov	r2, sl
 80054c6:	465b      	mov	r3, fp
 80054c8:	f7fb f89e 	bl	8000608 <__aeabi_dmul>
 80054cc:	4b82      	ldr	r3, [pc, #520]	; (80056d8 <_dtoa_r+0x628>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	f7fa fee4 	bl	800029c <__adddf3>
 80054d4:	46d0      	mov	r8, sl
 80054d6:	46d9      	mov	r9, fp
 80054d8:	4682      	mov	sl, r0
 80054da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80054de:	2e00      	cmp	r6, #0
 80054e0:	d158      	bne.n	8005594 <_dtoa_r+0x4e4>
 80054e2:	4b7e      	ldr	r3, [pc, #504]	; (80056dc <_dtoa_r+0x62c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f7fa fed5 	bl	8000298 <__aeabi_dsub>
 80054ee:	4652      	mov	r2, sl
 80054f0:	465b      	mov	r3, fp
 80054f2:	4680      	mov	r8, r0
 80054f4:	4689      	mov	r9, r1
 80054f6:	f7fb fb17 	bl	8000b28 <__aeabi_dcmpgt>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f040 8295 	bne.w	8005a2a <_dtoa_r+0x97a>
 8005500:	4652      	mov	r2, sl
 8005502:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005506:	4640      	mov	r0, r8
 8005508:	4649      	mov	r1, r9
 800550a:	f7fb faef 	bl	8000aec <__aeabi_dcmplt>
 800550e:	2800      	cmp	r0, #0
 8005510:	f040 8289 	bne.w	8005a26 <_dtoa_r+0x976>
 8005514:	ec5b ab19 	vmov	sl, fp, d9
 8005518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800551a:	2b00      	cmp	r3, #0
 800551c:	f2c0 8148 	blt.w	80057b0 <_dtoa_r+0x700>
 8005520:	9a00      	ldr	r2, [sp, #0]
 8005522:	2a0e      	cmp	r2, #14
 8005524:	f300 8144 	bgt.w	80057b0 <_dtoa_r+0x700>
 8005528:	4b67      	ldr	r3, [pc, #412]	; (80056c8 <_dtoa_r+0x618>)
 800552a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800552e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005534:	2b00      	cmp	r3, #0
 8005536:	f280 80d5 	bge.w	80056e4 <_dtoa_r+0x634>
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f300 80d1 	bgt.w	80056e4 <_dtoa_r+0x634>
 8005542:	f040 826f 	bne.w	8005a24 <_dtoa_r+0x974>
 8005546:	4b65      	ldr	r3, [pc, #404]	; (80056dc <_dtoa_r+0x62c>)
 8005548:	2200      	movs	r2, #0
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f7fb f85b 	bl	8000608 <__aeabi_dmul>
 8005552:	4652      	mov	r2, sl
 8005554:	465b      	mov	r3, fp
 8005556:	f7fb fadd 	bl	8000b14 <__aeabi_dcmpge>
 800555a:	9e03      	ldr	r6, [sp, #12]
 800555c:	4637      	mov	r7, r6
 800555e:	2800      	cmp	r0, #0
 8005560:	f040 8245 	bne.w	80059ee <_dtoa_r+0x93e>
 8005564:	9d01      	ldr	r5, [sp, #4]
 8005566:	2331      	movs	r3, #49	; 0x31
 8005568:	f805 3b01 	strb.w	r3, [r5], #1
 800556c:	9b00      	ldr	r3, [sp, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	e240      	b.n	80059f6 <_dtoa_r+0x946>
 8005574:	07f2      	lsls	r2, r6, #31
 8005576:	d505      	bpl.n	8005584 <_dtoa_r+0x4d4>
 8005578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800557c:	f7fb f844 	bl	8000608 <__aeabi_dmul>
 8005580:	3501      	adds	r5, #1
 8005582:	2301      	movs	r3, #1
 8005584:	1076      	asrs	r6, r6, #1
 8005586:	3708      	adds	r7, #8
 8005588:	e777      	b.n	800547a <_dtoa_r+0x3ca>
 800558a:	2502      	movs	r5, #2
 800558c:	e779      	b.n	8005482 <_dtoa_r+0x3d2>
 800558e:	9f00      	ldr	r7, [sp, #0]
 8005590:	9e03      	ldr	r6, [sp, #12]
 8005592:	e794      	b.n	80054be <_dtoa_r+0x40e>
 8005594:	9901      	ldr	r1, [sp, #4]
 8005596:	4b4c      	ldr	r3, [pc, #304]	; (80056c8 <_dtoa_r+0x618>)
 8005598:	4431      	add	r1, r6
 800559a:	910d      	str	r1, [sp, #52]	; 0x34
 800559c:	9908      	ldr	r1, [sp, #32]
 800559e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80055a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055a6:	2900      	cmp	r1, #0
 80055a8:	d043      	beq.n	8005632 <_dtoa_r+0x582>
 80055aa:	494d      	ldr	r1, [pc, #308]	; (80056e0 <_dtoa_r+0x630>)
 80055ac:	2000      	movs	r0, #0
 80055ae:	f7fb f955 	bl	800085c <__aeabi_ddiv>
 80055b2:	4652      	mov	r2, sl
 80055b4:	465b      	mov	r3, fp
 80055b6:	f7fa fe6f 	bl	8000298 <__aeabi_dsub>
 80055ba:	9d01      	ldr	r5, [sp, #4]
 80055bc:	4682      	mov	sl, r0
 80055be:	468b      	mov	fp, r1
 80055c0:	4649      	mov	r1, r9
 80055c2:	4640      	mov	r0, r8
 80055c4:	f7fb fad0 	bl	8000b68 <__aeabi_d2iz>
 80055c8:	4606      	mov	r6, r0
 80055ca:	f7fa ffb3 	bl	8000534 <__aeabi_i2d>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4640      	mov	r0, r8
 80055d4:	4649      	mov	r1, r9
 80055d6:	f7fa fe5f 	bl	8000298 <__aeabi_dsub>
 80055da:	3630      	adds	r6, #48	; 0x30
 80055dc:	f805 6b01 	strb.w	r6, [r5], #1
 80055e0:	4652      	mov	r2, sl
 80055e2:	465b      	mov	r3, fp
 80055e4:	4680      	mov	r8, r0
 80055e6:	4689      	mov	r9, r1
 80055e8:	f7fb fa80 	bl	8000aec <__aeabi_dcmplt>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d163      	bne.n	80056b8 <_dtoa_r+0x608>
 80055f0:	4642      	mov	r2, r8
 80055f2:	464b      	mov	r3, r9
 80055f4:	4936      	ldr	r1, [pc, #216]	; (80056d0 <_dtoa_r+0x620>)
 80055f6:	2000      	movs	r0, #0
 80055f8:	f7fa fe4e 	bl	8000298 <__aeabi_dsub>
 80055fc:	4652      	mov	r2, sl
 80055fe:	465b      	mov	r3, fp
 8005600:	f7fb fa74 	bl	8000aec <__aeabi_dcmplt>
 8005604:	2800      	cmp	r0, #0
 8005606:	f040 80b5 	bne.w	8005774 <_dtoa_r+0x6c4>
 800560a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800560c:	429d      	cmp	r5, r3
 800560e:	d081      	beq.n	8005514 <_dtoa_r+0x464>
 8005610:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <_dtoa_r+0x624>)
 8005612:	2200      	movs	r2, #0
 8005614:	4650      	mov	r0, sl
 8005616:	4659      	mov	r1, fp
 8005618:	f7fa fff6 	bl	8000608 <__aeabi_dmul>
 800561c:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <_dtoa_r+0x624>)
 800561e:	4682      	mov	sl, r0
 8005620:	468b      	mov	fp, r1
 8005622:	4640      	mov	r0, r8
 8005624:	4649      	mov	r1, r9
 8005626:	2200      	movs	r2, #0
 8005628:	f7fa ffee 	bl	8000608 <__aeabi_dmul>
 800562c:	4680      	mov	r8, r0
 800562e:	4689      	mov	r9, r1
 8005630:	e7c6      	b.n	80055c0 <_dtoa_r+0x510>
 8005632:	4650      	mov	r0, sl
 8005634:	4659      	mov	r1, fp
 8005636:	f7fa ffe7 	bl	8000608 <__aeabi_dmul>
 800563a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800563c:	9d01      	ldr	r5, [sp, #4]
 800563e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005640:	4682      	mov	sl, r0
 8005642:	468b      	mov	fp, r1
 8005644:	4649      	mov	r1, r9
 8005646:	4640      	mov	r0, r8
 8005648:	f7fb fa8e 	bl	8000b68 <__aeabi_d2iz>
 800564c:	4606      	mov	r6, r0
 800564e:	f7fa ff71 	bl	8000534 <__aeabi_i2d>
 8005652:	3630      	adds	r6, #48	; 0x30
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4640      	mov	r0, r8
 800565a:	4649      	mov	r1, r9
 800565c:	f7fa fe1c 	bl	8000298 <__aeabi_dsub>
 8005660:	f805 6b01 	strb.w	r6, [r5], #1
 8005664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005666:	429d      	cmp	r5, r3
 8005668:	4680      	mov	r8, r0
 800566a:	4689      	mov	r9, r1
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	d124      	bne.n	80056bc <_dtoa_r+0x60c>
 8005672:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <_dtoa_r+0x630>)
 8005674:	4650      	mov	r0, sl
 8005676:	4659      	mov	r1, fp
 8005678:	f7fa fe10 	bl	800029c <__adddf3>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4640      	mov	r0, r8
 8005682:	4649      	mov	r1, r9
 8005684:	f7fb fa50 	bl	8000b28 <__aeabi_dcmpgt>
 8005688:	2800      	cmp	r0, #0
 800568a:	d173      	bne.n	8005774 <_dtoa_r+0x6c4>
 800568c:	4652      	mov	r2, sl
 800568e:	465b      	mov	r3, fp
 8005690:	4913      	ldr	r1, [pc, #76]	; (80056e0 <_dtoa_r+0x630>)
 8005692:	2000      	movs	r0, #0
 8005694:	f7fa fe00 	bl	8000298 <__aeabi_dsub>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4640      	mov	r0, r8
 800569e:	4649      	mov	r1, r9
 80056a0:	f7fb fa24 	bl	8000aec <__aeabi_dcmplt>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	f43f af35 	beq.w	8005514 <_dtoa_r+0x464>
 80056aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80056ac:	1e6b      	subs	r3, r5, #1
 80056ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80056b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056b4:	2b30      	cmp	r3, #48	; 0x30
 80056b6:	d0f8      	beq.n	80056aa <_dtoa_r+0x5fa>
 80056b8:	9700      	str	r7, [sp, #0]
 80056ba:	e049      	b.n	8005750 <_dtoa_r+0x6a0>
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <_dtoa_r+0x624>)
 80056be:	f7fa ffa3 	bl	8000608 <__aeabi_dmul>
 80056c2:	4680      	mov	r8, r0
 80056c4:	4689      	mov	r9, r1
 80056c6:	e7bd      	b.n	8005644 <_dtoa_r+0x594>
 80056c8:	080091c0 	.word	0x080091c0
 80056cc:	08009198 	.word	0x08009198
 80056d0:	3ff00000 	.word	0x3ff00000
 80056d4:	40240000 	.word	0x40240000
 80056d8:	401c0000 	.word	0x401c0000
 80056dc:	40140000 	.word	0x40140000
 80056e0:	3fe00000 	.word	0x3fe00000
 80056e4:	9d01      	ldr	r5, [sp, #4]
 80056e6:	4656      	mov	r6, sl
 80056e8:	465f      	mov	r7, fp
 80056ea:	4642      	mov	r2, r8
 80056ec:	464b      	mov	r3, r9
 80056ee:	4630      	mov	r0, r6
 80056f0:	4639      	mov	r1, r7
 80056f2:	f7fb f8b3 	bl	800085c <__aeabi_ddiv>
 80056f6:	f7fb fa37 	bl	8000b68 <__aeabi_d2iz>
 80056fa:	4682      	mov	sl, r0
 80056fc:	f7fa ff1a 	bl	8000534 <__aeabi_i2d>
 8005700:	4642      	mov	r2, r8
 8005702:	464b      	mov	r3, r9
 8005704:	f7fa ff80 	bl	8000608 <__aeabi_dmul>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4630      	mov	r0, r6
 800570e:	4639      	mov	r1, r7
 8005710:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005714:	f7fa fdc0 	bl	8000298 <__aeabi_dsub>
 8005718:	f805 6b01 	strb.w	r6, [r5], #1
 800571c:	9e01      	ldr	r6, [sp, #4]
 800571e:	9f03      	ldr	r7, [sp, #12]
 8005720:	1bae      	subs	r6, r5, r6
 8005722:	42b7      	cmp	r7, r6
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	d135      	bne.n	8005796 <_dtoa_r+0x6e6>
 800572a:	f7fa fdb7 	bl	800029c <__adddf3>
 800572e:	4642      	mov	r2, r8
 8005730:	464b      	mov	r3, r9
 8005732:	4606      	mov	r6, r0
 8005734:	460f      	mov	r7, r1
 8005736:	f7fb f9f7 	bl	8000b28 <__aeabi_dcmpgt>
 800573a:	b9d0      	cbnz	r0, 8005772 <_dtoa_r+0x6c2>
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f7fb f9c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005748:	b110      	cbz	r0, 8005750 <_dtoa_r+0x6a0>
 800574a:	f01a 0f01 	tst.w	sl, #1
 800574e:	d110      	bne.n	8005772 <_dtoa_r+0x6c2>
 8005750:	4620      	mov	r0, r4
 8005752:	ee18 1a10 	vmov	r1, s16
 8005756:	f000 faf3 	bl	8005d40 <_Bfree>
 800575a:	2300      	movs	r3, #0
 800575c:	9800      	ldr	r0, [sp, #0]
 800575e:	702b      	strb	r3, [r5, #0]
 8005760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005762:	3001      	adds	r0, #1
 8005764:	6018      	str	r0, [r3, #0]
 8005766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005768:	2b00      	cmp	r3, #0
 800576a:	f43f acf1 	beq.w	8005150 <_dtoa_r+0xa0>
 800576e:	601d      	str	r5, [r3, #0]
 8005770:	e4ee      	b.n	8005150 <_dtoa_r+0xa0>
 8005772:	9f00      	ldr	r7, [sp, #0]
 8005774:	462b      	mov	r3, r5
 8005776:	461d      	mov	r5, r3
 8005778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800577c:	2a39      	cmp	r2, #57	; 0x39
 800577e:	d106      	bne.n	800578e <_dtoa_r+0x6de>
 8005780:	9a01      	ldr	r2, [sp, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d1f7      	bne.n	8005776 <_dtoa_r+0x6c6>
 8005786:	9901      	ldr	r1, [sp, #4]
 8005788:	2230      	movs	r2, #48	; 0x30
 800578a:	3701      	adds	r7, #1
 800578c:	700a      	strb	r2, [r1, #0]
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	3201      	adds	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	e790      	b.n	80056b8 <_dtoa_r+0x608>
 8005796:	4ba6      	ldr	r3, [pc, #664]	; (8005a30 <_dtoa_r+0x980>)
 8005798:	2200      	movs	r2, #0
 800579a:	f7fa ff35 	bl	8000608 <__aeabi_dmul>
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	f7fb f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d09d      	beq.n	80056ea <_dtoa_r+0x63a>
 80057ae:	e7cf      	b.n	8005750 <_dtoa_r+0x6a0>
 80057b0:	9a08      	ldr	r2, [sp, #32]
 80057b2:	2a00      	cmp	r2, #0
 80057b4:	f000 80d7 	beq.w	8005966 <_dtoa_r+0x8b6>
 80057b8:	9a06      	ldr	r2, [sp, #24]
 80057ba:	2a01      	cmp	r2, #1
 80057bc:	f300 80ba 	bgt.w	8005934 <_dtoa_r+0x884>
 80057c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057c2:	2a00      	cmp	r2, #0
 80057c4:	f000 80b2 	beq.w	800592c <_dtoa_r+0x87c>
 80057c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057cc:	9e07      	ldr	r6, [sp, #28]
 80057ce:	9d04      	ldr	r5, [sp, #16]
 80057d0:	9a04      	ldr	r2, [sp, #16]
 80057d2:	441a      	add	r2, r3
 80057d4:	9204      	str	r2, [sp, #16]
 80057d6:	9a05      	ldr	r2, [sp, #20]
 80057d8:	2101      	movs	r1, #1
 80057da:	441a      	add	r2, r3
 80057dc:	4620      	mov	r0, r4
 80057de:	9205      	str	r2, [sp, #20]
 80057e0:	f000 fb66 	bl	8005eb0 <__i2b>
 80057e4:	4607      	mov	r7, r0
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	dd0c      	ble.n	8005804 <_dtoa_r+0x754>
 80057ea:	9b05      	ldr	r3, [sp, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	dd09      	ble.n	8005804 <_dtoa_r+0x754>
 80057f0:	42ab      	cmp	r3, r5
 80057f2:	9a04      	ldr	r2, [sp, #16]
 80057f4:	bfa8      	it	ge
 80057f6:	462b      	movge	r3, r5
 80057f8:	1ad2      	subs	r2, r2, r3
 80057fa:	9204      	str	r2, [sp, #16]
 80057fc:	9a05      	ldr	r2, [sp, #20]
 80057fe:	1aed      	subs	r5, r5, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	9b07      	ldr	r3, [sp, #28]
 8005806:	b31b      	cbz	r3, 8005850 <_dtoa_r+0x7a0>
 8005808:	9b08      	ldr	r3, [sp, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80af 	beq.w	800596e <_dtoa_r+0x8be>
 8005810:	2e00      	cmp	r6, #0
 8005812:	dd13      	ble.n	800583c <_dtoa_r+0x78c>
 8005814:	4639      	mov	r1, r7
 8005816:	4632      	mov	r2, r6
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fc09 	bl	8006030 <__pow5mult>
 800581e:	ee18 2a10 	vmov	r2, s16
 8005822:	4601      	mov	r1, r0
 8005824:	4607      	mov	r7, r0
 8005826:	4620      	mov	r0, r4
 8005828:	f000 fb58 	bl	8005edc <__multiply>
 800582c:	ee18 1a10 	vmov	r1, s16
 8005830:	4680      	mov	r8, r0
 8005832:	4620      	mov	r0, r4
 8005834:	f000 fa84 	bl	8005d40 <_Bfree>
 8005838:	ee08 8a10 	vmov	s16, r8
 800583c:	9b07      	ldr	r3, [sp, #28]
 800583e:	1b9a      	subs	r2, r3, r6
 8005840:	d006      	beq.n	8005850 <_dtoa_r+0x7a0>
 8005842:	ee18 1a10 	vmov	r1, s16
 8005846:	4620      	mov	r0, r4
 8005848:	f000 fbf2 	bl	8006030 <__pow5mult>
 800584c:	ee08 0a10 	vmov	s16, r0
 8005850:	2101      	movs	r1, #1
 8005852:	4620      	mov	r0, r4
 8005854:	f000 fb2c 	bl	8005eb0 <__i2b>
 8005858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	4606      	mov	r6, r0
 800585e:	f340 8088 	ble.w	8005972 <_dtoa_r+0x8c2>
 8005862:	461a      	mov	r2, r3
 8005864:	4601      	mov	r1, r0
 8005866:	4620      	mov	r0, r4
 8005868:	f000 fbe2 	bl	8006030 <__pow5mult>
 800586c:	9b06      	ldr	r3, [sp, #24]
 800586e:	2b01      	cmp	r3, #1
 8005870:	4606      	mov	r6, r0
 8005872:	f340 8081 	ble.w	8005978 <_dtoa_r+0x8c8>
 8005876:	f04f 0800 	mov.w	r8, #0
 800587a:	6933      	ldr	r3, [r6, #16]
 800587c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005880:	6918      	ldr	r0, [r3, #16]
 8005882:	f000 fac5 	bl	8005e10 <__hi0bits>
 8005886:	f1c0 0020 	rsb	r0, r0, #32
 800588a:	9b05      	ldr	r3, [sp, #20]
 800588c:	4418      	add	r0, r3
 800588e:	f010 001f 	ands.w	r0, r0, #31
 8005892:	f000 8092 	beq.w	80059ba <_dtoa_r+0x90a>
 8005896:	f1c0 0320 	rsb	r3, r0, #32
 800589a:	2b04      	cmp	r3, #4
 800589c:	f340 808a 	ble.w	80059b4 <_dtoa_r+0x904>
 80058a0:	f1c0 001c 	rsb	r0, r0, #28
 80058a4:	9b04      	ldr	r3, [sp, #16]
 80058a6:	4403      	add	r3, r0
 80058a8:	9304      	str	r3, [sp, #16]
 80058aa:	9b05      	ldr	r3, [sp, #20]
 80058ac:	4403      	add	r3, r0
 80058ae:	4405      	add	r5, r0
 80058b0:	9305      	str	r3, [sp, #20]
 80058b2:	9b04      	ldr	r3, [sp, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dd07      	ble.n	80058c8 <_dtoa_r+0x818>
 80058b8:	ee18 1a10 	vmov	r1, s16
 80058bc:	461a      	mov	r2, r3
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 fc10 	bl	80060e4 <__lshift>
 80058c4:	ee08 0a10 	vmov	s16, r0
 80058c8:	9b05      	ldr	r3, [sp, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dd05      	ble.n	80058da <_dtoa_r+0x82a>
 80058ce:	4631      	mov	r1, r6
 80058d0:	461a      	mov	r2, r3
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 fc06 	bl	80060e4 <__lshift>
 80058d8:	4606      	mov	r6, r0
 80058da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d06e      	beq.n	80059be <_dtoa_r+0x90e>
 80058e0:	ee18 0a10 	vmov	r0, s16
 80058e4:	4631      	mov	r1, r6
 80058e6:	f000 fc6d 	bl	80061c4 <__mcmp>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	da67      	bge.n	80059be <_dtoa_r+0x90e>
 80058ee:	9b00      	ldr	r3, [sp, #0]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	ee18 1a10 	vmov	r1, s16
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	220a      	movs	r2, #10
 80058fa:	2300      	movs	r3, #0
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 fa41 	bl	8005d84 <__multadd>
 8005902:	9b08      	ldr	r3, [sp, #32]
 8005904:	ee08 0a10 	vmov	s16, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 81b1 	beq.w	8005c70 <_dtoa_r+0xbc0>
 800590e:	2300      	movs	r3, #0
 8005910:	4639      	mov	r1, r7
 8005912:	220a      	movs	r2, #10
 8005914:	4620      	mov	r0, r4
 8005916:	f000 fa35 	bl	8005d84 <__multadd>
 800591a:	9b02      	ldr	r3, [sp, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	4607      	mov	r7, r0
 8005920:	f300 808e 	bgt.w	8005a40 <_dtoa_r+0x990>
 8005924:	9b06      	ldr	r3, [sp, #24]
 8005926:	2b02      	cmp	r3, #2
 8005928:	dc51      	bgt.n	80059ce <_dtoa_r+0x91e>
 800592a:	e089      	b.n	8005a40 <_dtoa_r+0x990>
 800592c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800592e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005932:	e74b      	b.n	80057cc <_dtoa_r+0x71c>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	1e5e      	subs	r6, r3, #1
 8005938:	9b07      	ldr	r3, [sp, #28]
 800593a:	42b3      	cmp	r3, r6
 800593c:	bfbf      	itttt	lt
 800593e:	9b07      	ldrlt	r3, [sp, #28]
 8005940:	9607      	strlt	r6, [sp, #28]
 8005942:	1af2      	sublt	r2, r6, r3
 8005944:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005946:	bfb6      	itet	lt
 8005948:	189b      	addlt	r3, r3, r2
 800594a:	1b9e      	subge	r6, r3, r6
 800594c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	bfb8      	it	lt
 8005952:	2600      	movlt	r6, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	bfb7      	itett	lt
 8005958:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800595c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005960:	1a9d      	sublt	r5, r3, r2
 8005962:	2300      	movlt	r3, #0
 8005964:	e734      	b.n	80057d0 <_dtoa_r+0x720>
 8005966:	9e07      	ldr	r6, [sp, #28]
 8005968:	9d04      	ldr	r5, [sp, #16]
 800596a:	9f08      	ldr	r7, [sp, #32]
 800596c:	e73b      	b.n	80057e6 <_dtoa_r+0x736>
 800596e:	9a07      	ldr	r2, [sp, #28]
 8005970:	e767      	b.n	8005842 <_dtoa_r+0x792>
 8005972:	9b06      	ldr	r3, [sp, #24]
 8005974:	2b01      	cmp	r3, #1
 8005976:	dc18      	bgt.n	80059aa <_dtoa_r+0x8fa>
 8005978:	f1ba 0f00 	cmp.w	sl, #0
 800597c:	d115      	bne.n	80059aa <_dtoa_r+0x8fa>
 800597e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005982:	b993      	cbnz	r3, 80059aa <_dtoa_r+0x8fa>
 8005984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005988:	0d1b      	lsrs	r3, r3, #20
 800598a:	051b      	lsls	r3, r3, #20
 800598c:	b183      	cbz	r3, 80059b0 <_dtoa_r+0x900>
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	3301      	adds	r3, #1
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	9b05      	ldr	r3, [sp, #20]
 8005996:	3301      	adds	r3, #1
 8005998:	9305      	str	r3, [sp, #20]
 800599a:	f04f 0801 	mov.w	r8, #1
 800599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f47f af6a 	bne.w	800587a <_dtoa_r+0x7ca>
 80059a6:	2001      	movs	r0, #1
 80059a8:	e76f      	b.n	800588a <_dtoa_r+0x7da>
 80059aa:	f04f 0800 	mov.w	r8, #0
 80059ae:	e7f6      	b.n	800599e <_dtoa_r+0x8ee>
 80059b0:	4698      	mov	r8, r3
 80059b2:	e7f4      	b.n	800599e <_dtoa_r+0x8ee>
 80059b4:	f43f af7d 	beq.w	80058b2 <_dtoa_r+0x802>
 80059b8:	4618      	mov	r0, r3
 80059ba:	301c      	adds	r0, #28
 80059bc:	e772      	b.n	80058a4 <_dtoa_r+0x7f4>
 80059be:	9b03      	ldr	r3, [sp, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	dc37      	bgt.n	8005a34 <_dtoa_r+0x984>
 80059c4:	9b06      	ldr	r3, [sp, #24]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	dd34      	ble.n	8005a34 <_dtoa_r+0x984>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	9302      	str	r3, [sp, #8]
 80059ce:	9b02      	ldr	r3, [sp, #8]
 80059d0:	b96b      	cbnz	r3, 80059ee <_dtoa_r+0x93e>
 80059d2:	4631      	mov	r1, r6
 80059d4:	2205      	movs	r2, #5
 80059d6:	4620      	mov	r0, r4
 80059d8:	f000 f9d4 	bl	8005d84 <__multadd>
 80059dc:	4601      	mov	r1, r0
 80059de:	4606      	mov	r6, r0
 80059e0:	ee18 0a10 	vmov	r0, s16
 80059e4:	f000 fbee 	bl	80061c4 <__mcmp>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f73f adbb 	bgt.w	8005564 <_dtoa_r+0x4b4>
 80059ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f0:	9d01      	ldr	r5, [sp, #4]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	f04f 0800 	mov.w	r8, #0
 80059fa:	4631      	mov	r1, r6
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 f99f 	bl	8005d40 <_Bfree>
 8005a02:	2f00      	cmp	r7, #0
 8005a04:	f43f aea4 	beq.w	8005750 <_dtoa_r+0x6a0>
 8005a08:	f1b8 0f00 	cmp.w	r8, #0
 8005a0c:	d005      	beq.n	8005a1a <_dtoa_r+0x96a>
 8005a0e:	45b8      	cmp	r8, r7
 8005a10:	d003      	beq.n	8005a1a <_dtoa_r+0x96a>
 8005a12:	4641      	mov	r1, r8
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 f993 	bl	8005d40 <_Bfree>
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 f98f 	bl	8005d40 <_Bfree>
 8005a22:	e695      	b.n	8005750 <_dtoa_r+0x6a0>
 8005a24:	2600      	movs	r6, #0
 8005a26:	4637      	mov	r7, r6
 8005a28:	e7e1      	b.n	80059ee <_dtoa_r+0x93e>
 8005a2a:	9700      	str	r7, [sp, #0]
 8005a2c:	4637      	mov	r7, r6
 8005a2e:	e599      	b.n	8005564 <_dtoa_r+0x4b4>
 8005a30:	40240000 	.word	0x40240000
 8005a34:	9b08      	ldr	r3, [sp, #32]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80ca 	beq.w	8005bd0 <_dtoa_r+0xb20>
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	9302      	str	r3, [sp, #8]
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	dd05      	ble.n	8005a50 <_dtoa_r+0x9a0>
 8005a44:	4639      	mov	r1, r7
 8005a46:	462a      	mov	r2, r5
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 fb4b 	bl	80060e4 <__lshift>
 8005a4e:	4607      	mov	r7, r0
 8005a50:	f1b8 0f00 	cmp.w	r8, #0
 8005a54:	d05b      	beq.n	8005b0e <_dtoa_r+0xa5e>
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 f931 	bl	8005cc0 <_Balloc>
 8005a5e:	4605      	mov	r5, r0
 8005a60:	b928      	cbnz	r0, 8005a6e <_dtoa_r+0x9be>
 8005a62:	4b87      	ldr	r3, [pc, #540]	; (8005c80 <_dtoa_r+0xbd0>)
 8005a64:	4602      	mov	r2, r0
 8005a66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005a6a:	f7ff bb3b 	b.w	80050e4 <_dtoa_r+0x34>
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	3202      	adds	r2, #2
 8005a72:	0092      	lsls	r2, r2, #2
 8005a74:	f107 010c 	add.w	r1, r7, #12
 8005a78:	300c      	adds	r0, #12
 8005a7a:	f000 f913 	bl	8005ca4 <memcpy>
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4629      	mov	r1, r5
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 fb2e 	bl	80060e4 <__lshift>
 8005a88:	9b01      	ldr	r3, [sp, #4]
 8005a8a:	f103 0901 	add.w	r9, r3, #1
 8005a8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005a92:	4413      	add	r3, r2
 8005a94:	9305      	str	r3, [sp, #20]
 8005a96:	f00a 0301 	and.w	r3, sl, #1
 8005a9a:	46b8      	mov	r8, r7
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	ee18 0a10 	vmov	r0, s16
 8005aa6:	f7ff fa77 	bl	8004f98 <quorem>
 8005aaa:	4641      	mov	r1, r8
 8005aac:	9002      	str	r0, [sp, #8]
 8005aae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ab2:	ee18 0a10 	vmov	r0, s16
 8005ab6:	f000 fb85 	bl	80061c4 <__mcmp>
 8005aba:	463a      	mov	r2, r7
 8005abc:	9003      	str	r0, [sp, #12]
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fb9b 	bl	80061fc <__mdiff>
 8005ac6:	68c2      	ldr	r2, [r0, #12]
 8005ac8:	f109 3bff 	add.w	fp, r9, #4294967295
 8005acc:	4605      	mov	r5, r0
 8005ace:	bb02      	cbnz	r2, 8005b12 <_dtoa_r+0xa62>
 8005ad0:	4601      	mov	r1, r0
 8005ad2:	ee18 0a10 	vmov	r0, s16
 8005ad6:	f000 fb75 	bl	80061c4 <__mcmp>
 8005ada:	4602      	mov	r2, r0
 8005adc:	4629      	mov	r1, r5
 8005ade:	4620      	mov	r0, r4
 8005ae0:	9207      	str	r2, [sp, #28]
 8005ae2:	f000 f92d 	bl	8005d40 <_Bfree>
 8005ae6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005aea:	ea43 0102 	orr.w	r1, r3, r2
 8005aee:	9b04      	ldr	r3, [sp, #16]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	464d      	mov	r5, r9
 8005af4:	d10f      	bne.n	8005b16 <_dtoa_r+0xa66>
 8005af6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005afa:	d02a      	beq.n	8005b52 <_dtoa_r+0xaa2>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	dd02      	ble.n	8005b08 <_dtoa_r+0xa58>
 8005b02:	9b02      	ldr	r3, [sp, #8]
 8005b04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005b08:	f88b a000 	strb.w	sl, [fp]
 8005b0c:	e775      	b.n	80059fa <_dtoa_r+0x94a>
 8005b0e:	4638      	mov	r0, r7
 8005b10:	e7ba      	b.n	8005a88 <_dtoa_r+0x9d8>
 8005b12:	2201      	movs	r2, #1
 8005b14:	e7e2      	b.n	8005adc <_dtoa_r+0xa2c>
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	db04      	blt.n	8005b26 <_dtoa_r+0xa76>
 8005b1c:	9906      	ldr	r1, [sp, #24]
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	9904      	ldr	r1, [sp, #16]
 8005b22:	430b      	orrs	r3, r1
 8005b24:	d122      	bne.n	8005b6c <_dtoa_r+0xabc>
 8005b26:	2a00      	cmp	r2, #0
 8005b28:	ddee      	ble.n	8005b08 <_dtoa_r+0xa58>
 8005b2a:	ee18 1a10 	vmov	r1, s16
 8005b2e:	2201      	movs	r2, #1
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 fad7 	bl	80060e4 <__lshift>
 8005b36:	4631      	mov	r1, r6
 8005b38:	ee08 0a10 	vmov	s16, r0
 8005b3c:	f000 fb42 	bl	80061c4 <__mcmp>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	dc03      	bgt.n	8005b4c <_dtoa_r+0xa9c>
 8005b44:	d1e0      	bne.n	8005b08 <_dtoa_r+0xa58>
 8005b46:	f01a 0f01 	tst.w	sl, #1
 8005b4a:	d0dd      	beq.n	8005b08 <_dtoa_r+0xa58>
 8005b4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005b50:	d1d7      	bne.n	8005b02 <_dtoa_r+0xa52>
 8005b52:	2339      	movs	r3, #57	; 0x39
 8005b54:	f88b 3000 	strb.w	r3, [fp]
 8005b58:	462b      	mov	r3, r5
 8005b5a:	461d      	mov	r5, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b62:	2a39      	cmp	r2, #57	; 0x39
 8005b64:	d071      	beq.n	8005c4a <_dtoa_r+0xb9a>
 8005b66:	3201      	adds	r2, #1
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	e746      	b.n	80059fa <_dtoa_r+0x94a>
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	dd07      	ble.n	8005b80 <_dtoa_r+0xad0>
 8005b70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005b74:	d0ed      	beq.n	8005b52 <_dtoa_r+0xaa2>
 8005b76:	f10a 0301 	add.w	r3, sl, #1
 8005b7a:	f88b 3000 	strb.w	r3, [fp]
 8005b7e:	e73c      	b.n	80059fa <_dtoa_r+0x94a>
 8005b80:	9b05      	ldr	r3, [sp, #20]
 8005b82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005b86:	4599      	cmp	r9, r3
 8005b88:	d047      	beq.n	8005c1a <_dtoa_r+0xb6a>
 8005b8a:	ee18 1a10 	vmov	r1, s16
 8005b8e:	2300      	movs	r3, #0
 8005b90:	220a      	movs	r2, #10
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 f8f6 	bl	8005d84 <__multadd>
 8005b98:	45b8      	cmp	r8, r7
 8005b9a:	ee08 0a10 	vmov	s16, r0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	f04f 020a 	mov.w	r2, #10
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	4620      	mov	r0, r4
 8005baa:	d106      	bne.n	8005bba <_dtoa_r+0xb0a>
 8005bac:	f000 f8ea 	bl	8005d84 <__multadd>
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	4607      	mov	r7, r0
 8005bb4:	f109 0901 	add.w	r9, r9, #1
 8005bb8:	e772      	b.n	8005aa0 <_dtoa_r+0x9f0>
 8005bba:	f000 f8e3 	bl	8005d84 <__multadd>
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	220a      	movs	r2, #10
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f000 f8dc 	bl	8005d84 <__multadd>
 8005bcc:	4607      	mov	r7, r0
 8005bce:	e7f1      	b.n	8005bb4 <_dtoa_r+0xb04>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	9302      	str	r3, [sp, #8]
 8005bd4:	9d01      	ldr	r5, [sp, #4]
 8005bd6:	ee18 0a10 	vmov	r0, s16
 8005bda:	4631      	mov	r1, r6
 8005bdc:	f7ff f9dc 	bl	8004f98 <quorem>
 8005be0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005be4:	9b01      	ldr	r3, [sp, #4]
 8005be6:	f805 ab01 	strb.w	sl, [r5], #1
 8005bea:	1aea      	subs	r2, r5, r3
 8005bec:	9b02      	ldr	r3, [sp, #8]
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	dd09      	ble.n	8005c06 <_dtoa_r+0xb56>
 8005bf2:	ee18 1a10 	vmov	r1, s16
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	220a      	movs	r2, #10
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f000 f8c2 	bl	8005d84 <__multadd>
 8005c00:	ee08 0a10 	vmov	s16, r0
 8005c04:	e7e7      	b.n	8005bd6 <_dtoa_r+0xb26>
 8005c06:	9b02      	ldr	r3, [sp, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bfc8      	it	gt
 8005c0c:	461d      	movgt	r5, r3
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	bfd8      	it	le
 8005c12:	2501      	movle	r5, #1
 8005c14:	441d      	add	r5, r3
 8005c16:	f04f 0800 	mov.w	r8, #0
 8005c1a:	ee18 1a10 	vmov	r1, s16
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fa5f 	bl	80060e4 <__lshift>
 8005c26:	4631      	mov	r1, r6
 8005c28:	ee08 0a10 	vmov	s16, r0
 8005c2c:	f000 faca 	bl	80061c4 <__mcmp>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	dc91      	bgt.n	8005b58 <_dtoa_r+0xaa8>
 8005c34:	d102      	bne.n	8005c3c <_dtoa_r+0xb8c>
 8005c36:	f01a 0f01 	tst.w	sl, #1
 8005c3a:	d18d      	bne.n	8005b58 <_dtoa_r+0xaa8>
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	461d      	mov	r5, r3
 8005c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c44:	2a30      	cmp	r2, #48	; 0x30
 8005c46:	d0fa      	beq.n	8005c3e <_dtoa_r+0xb8e>
 8005c48:	e6d7      	b.n	80059fa <_dtoa_r+0x94a>
 8005c4a:	9a01      	ldr	r2, [sp, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d184      	bne.n	8005b5a <_dtoa_r+0xaaa>
 8005c50:	9b00      	ldr	r3, [sp, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	2331      	movs	r3, #49	; 0x31
 8005c58:	7013      	strb	r3, [r2, #0]
 8005c5a:	e6ce      	b.n	80059fa <_dtoa_r+0x94a>
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <_dtoa_r+0xbd4>)
 8005c5e:	f7ff ba95 	b.w	800518c <_dtoa_r+0xdc>
 8005c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f47f aa6e 	bne.w	8005146 <_dtoa_r+0x96>
 8005c6a:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <_dtoa_r+0xbd8>)
 8005c6c:	f7ff ba8e 	b.w	800518c <_dtoa_r+0xdc>
 8005c70:	9b02      	ldr	r3, [sp, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	dcae      	bgt.n	8005bd4 <_dtoa_r+0xb24>
 8005c76:	9b06      	ldr	r3, [sp, #24]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	f73f aea8 	bgt.w	80059ce <_dtoa_r+0x91e>
 8005c7e:	e7a9      	b.n	8005bd4 <_dtoa_r+0xb24>
 8005c80:	0800912b 	.word	0x0800912b
 8005c84:	08009088 	.word	0x08009088
 8005c88:	080090ac 	.word	0x080090ac

08005c8c <_localeconv_r>:
 8005c8c:	4800      	ldr	r0, [pc, #0]	; (8005c90 <_localeconv_r+0x4>)
 8005c8e:	4770      	bx	lr
 8005c90:	20000164 	.word	0x20000164

08005c94 <malloc>:
 8005c94:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <malloc+0xc>)
 8005c96:	4601      	mov	r1, r0
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	f000 bc17 	b.w	80064cc <_malloc_r>
 8005c9e:	bf00      	nop
 8005ca0:	20000010 	.word	0x20000010

08005ca4 <memcpy>:
 8005ca4:	440a      	add	r2, r1
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cac:	d100      	bne.n	8005cb0 <memcpy+0xc>
 8005cae:	4770      	bx	lr
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cba:	4291      	cmp	r1, r2
 8005cbc:	d1f9      	bne.n	8005cb2 <memcpy+0xe>
 8005cbe:	bd10      	pop	{r4, pc}

08005cc0 <_Balloc>:
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	460d      	mov	r5, r1
 8005cc8:	b976      	cbnz	r6, 8005ce8 <_Balloc+0x28>
 8005cca:	2010      	movs	r0, #16
 8005ccc:	f7ff ffe2 	bl	8005c94 <malloc>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6260      	str	r0, [r4, #36]	; 0x24
 8005cd4:	b920      	cbnz	r0, 8005ce0 <_Balloc+0x20>
 8005cd6:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <_Balloc+0x78>)
 8005cd8:	4818      	ldr	r0, [pc, #96]	; (8005d3c <_Balloc+0x7c>)
 8005cda:	2166      	movs	r1, #102	; 0x66
 8005cdc:	f000 fdd6 	bl	800688c <__assert_func>
 8005ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ce4:	6006      	str	r6, [r0, #0]
 8005ce6:	60c6      	str	r6, [r0, #12]
 8005ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cea:	68f3      	ldr	r3, [r6, #12]
 8005cec:	b183      	cbz	r3, 8005d10 <_Balloc+0x50>
 8005cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cf6:	b9b8      	cbnz	r0, 8005d28 <_Balloc+0x68>
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8005cfe:	1d72      	adds	r2, r6, #5
 8005d00:	0092      	lsls	r2, r2, #2
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 fb60 	bl	80063c8 <_calloc_r>
 8005d08:	b160      	cbz	r0, 8005d24 <_Balloc+0x64>
 8005d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d0e:	e00e      	b.n	8005d2e <_Balloc+0x6e>
 8005d10:	2221      	movs	r2, #33	; 0x21
 8005d12:	2104      	movs	r1, #4
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fb57 	bl	80063c8 <_calloc_r>
 8005d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d1c:	60f0      	str	r0, [r6, #12]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e4      	bne.n	8005cee <_Balloc+0x2e>
 8005d24:	2000      	movs	r0, #0
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	6802      	ldr	r2, [r0, #0]
 8005d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d34:	e7f7      	b.n	8005d26 <_Balloc+0x66>
 8005d36:	bf00      	nop
 8005d38:	080090b9 	.word	0x080090b9
 8005d3c:	0800913c 	.word	0x0800913c

08005d40 <_Bfree>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d44:	4605      	mov	r5, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	b976      	cbnz	r6, 8005d68 <_Bfree+0x28>
 8005d4a:	2010      	movs	r0, #16
 8005d4c:	f7ff ffa2 	bl	8005c94 <malloc>
 8005d50:	4602      	mov	r2, r0
 8005d52:	6268      	str	r0, [r5, #36]	; 0x24
 8005d54:	b920      	cbnz	r0, 8005d60 <_Bfree+0x20>
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <_Bfree+0x3c>)
 8005d58:	4809      	ldr	r0, [pc, #36]	; (8005d80 <_Bfree+0x40>)
 8005d5a:	218a      	movs	r1, #138	; 0x8a
 8005d5c:	f000 fd96 	bl	800688c <__assert_func>
 8005d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d64:	6006      	str	r6, [r0, #0]
 8005d66:	60c6      	str	r6, [r0, #12]
 8005d68:	b13c      	cbz	r4, 8005d7a <_Bfree+0x3a>
 8005d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d6c:	6862      	ldr	r2, [r4, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d74:	6021      	str	r1, [r4, #0]
 8005d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	080090b9 	.word	0x080090b9
 8005d80:	0800913c 	.word	0x0800913c

08005d84 <__multadd>:
 8005d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d88:	690d      	ldr	r5, [r1, #16]
 8005d8a:	4607      	mov	r7, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	461e      	mov	r6, r3
 8005d90:	f101 0c14 	add.w	ip, r1, #20
 8005d94:	2000      	movs	r0, #0
 8005d96:	f8dc 3000 	ldr.w	r3, [ip]
 8005d9a:	b299      	uxth	r1, r3
 8005d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8005da0:	0c1e      	lsrs	r6, r3, #16
 8005da2:	0c0b      	lsrs	r3, r1, #16
 8005da4:	fb02 3306 	mla	r3, r2, r6, r3
 8005da8:	b289      	uxth	r1, r1
 8005daa:	3001      	adds	r0, #1
 8005dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005db0:	4285      	cmp	r5, r0
 8005db2:	f84c 1b04 	str.w	r1, [ip], #4
 8005db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005dba:	dcec      	bgt.n	8005d96 <__multadd+0x12>
 8005dbc:	b30e      	cbz	r6, 8005e02 <__multadd+0x7e>
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	42ab      	cmp	r3, r5
 8005dc2:	dc19      	bgt.n	8005df8 <__multadd+0x74>
 8005dc4:	6861      	ldr	r1, [r4, #4]
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	3101      	adds	r1, #1
 8005dca:	f7ff ff79 	bl	8005cc0 <_Balloc>
 8005dce:	4680      	mov	r8, r0
 8005dd0:	b928      	cbnz	r0, 8005dde <__multadd+0x5a>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <__multadd+0x84>)
 8005dd6:	480d      	ldr	r0, [pc, #52]	; (8005e0c <__multadd+0x88>)
 8005dd8:	21b5      	movs	r1, #181	; 0xb5
 8005dda:	f000 fd57 	bl	800688c <__assert_func>
 8005dde:	6922      	ldr	r2, [r4, #16]
 8005de0:	3202      	adds	r2, #2
 8005de2:	f104 010c 	add.w	r1, r4, #12
 8005de6:	0092      	lsls	r2, r2, #2
 8005de8:	300c      	adds	r0, #12
 8005dea:	f7ff ff5b 	bl	8005ca4 <memcpy>
 8005dee:	4621      	mov	r1, r4
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7ff ffa5 	bl	8005d40 <_Bfree>
 8005df6:	4644      	mov	r4, r8
 8005df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	615e      	str	r6, [r3, #20]
 8005e00:	6125      	str	r5, [r4, #16]
 8005e02:	4620      	mov	r0, r4
 8005e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e08:	0800912b 	.word	0x0800912b
 8005e0c:	0800913c 	.word	0x0800913c

08005e10 <__hi0bits>:
 8005e10:	0c03      	lsrs	r3, r0, #16
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	b9d3      	cbnz	r3, 8005e4c <__hi0bits+0x3c>
 8005e16:	0400      	lsls	r0, r0, #16
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e1e:	bf04      	itt	eq
 8005e20:	0200      	lsleq	r0, r0, #8
 8005e22:	3308      	addeq	r3, #8
 8005e24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e28:	bf04      	itt	eq
 8005e2a:	0100      	lsleq	r0, r0, #4
 8005e2c:	3304      	addeq	r3, #4
 8005e2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e32:	bf04      	itt	eq
 8005e34:	0080      	lsleq	r0, r0, #2
 8005e36:	3302      	addeq	r3, #2
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	db05      	blt.n	8005e48 <__hi0bits+0x38>
 8005e3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e40:	f103 0301 	add.w	r3, r3, #1
 8005e44:	bf08      	it	eq
 8005e46:	2320      	moveq	r3, #32
 8005e48:	4618      	mov	r0, r3
 8005e4a:	4770      	bx	lr
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e7e4      	b.n	8005e1a <__hi0bits+0xa>

08005e50 <__lo0bits>:
 8005e50:	6803      	ldr	r3, [r0, #0]
 8005e52:	f013 0207 	ands.w	r2, r3, #7
 8005e56:	4601      	mov	r1, r0
 8005e58:	d00b      	beq.n	8005e72 <__lo0bits+0x22>
 8005e5a:	07da      	lsls	r2, r3, #31
 8005e5c:	d423      	bmi.n	8005ea6 <__lo0bits+0x56>
 8005e5e:	0798      	lsls	r0, r3, #30
 8005e60:	bf49      	itett	mi
 8005e62:	085b      	lsrmi	r3, r3, #1
 8005e64:	089b      	lsrpl	r3, r3, #2
 8005e66:	2001      	movmi	r0, #1
 8005e68:	600b      	strmi	r3, [r1, #0]
 8005e6a:	bf5c      	itt	pl
 8005e6c:	600b      	strpl	r3, [r1, #0]
 8005e6e:	2002      	movpl	r0, #2
 8005e70:	4770      	bx	lr
 8005e72:	b298      	uxth	r0, r3
 8005e74:	b9a8      	cbnz	r0, 8005ea2 <__lo0bits+0x52>
 8005e76:	0c1b      	lsrs	r3, r3, #16
 8005e78:	2010      	movs	r0, #16
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	b90a      	cbnz	r2, 8005e82 <__lo0bits+0x32>
 8005e7e:	3008      	adds	r0, #8
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	071a      	lsls	r2, r3, #28
 8005e84:	bf04      	itt	eq
 8005e86:	091b      	lsreq	r3, r3, #4
 8005e88:	3004      	addeq	r0, #4
 8005e8a:	079a      	lsls	r2, r3, #30
 8005e8c:	bf04      	itt	eq
 8005e8e:	089b      	lsreq	r3, r3, #2
 8005e90:	3002      	addeq	r0, #2
 8005e92:	07da      	lsls	r2, r3, #31
 8005e94:	d403      	bmi.n	8005e9e <__lo0bits+0x4e>
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	f100 0001 	add.w	r0, r0, #1
 8005e9c:	d005      	beq.n	8005eaa <__lo0bits+0x5a>
 8005e9e:	600b      	str	r3, [r1, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	e7e9      	b.n	8005e7a <__lo0bits+0x2a>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	4770      	bx	lr
 8005eaa:	2020      	movs	r0, #32
 8005eac:	4770      	bx	lr
	...

08005eb0 <__i2b>:
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	f7ff ff03 	bl	8005cc0 <_Balloc>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	b928      	cbnz	r0, 8005eca <__i2b+0x1a>
 8005ebe:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <__i2b+0x24>)
 8005ec0:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <__i2b+0x28>)
 8005ec2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ec6:	f000 fce1 	bl	800688c <__assert_func>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	6144      	str	r4, [r0, #20]
 8005ece:	6103      	str	r3, [r0, #16]
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	bf00      	nop
 8005ed4:	0800912b 	.word	0x0800912b
 8005ed8:	0800913c 	.word	0x0800913c

08005edc <__multiply>:
 8005edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee0:	4691      	mov	r9, r2
 8005ee2:	690a      	ldr	r2, [r1, #16]
 8005ee4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	bfb8      	it	lt
 8005eec:	460b      	movlt	r3, r1
 8005eee:	460c      	mov	r4, r1
 8005ef0:	bfbc      	itt	lt
 8005ef2:	464c      	movlt	r4, r9
 8005ef4:	4699      	movlt	r9, r3
 8005ef6:	6927      	ldr	r7, [r4, #16]
 8005ef8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005efc:	68a3      	ldr	r3, [r4, #8]
 8005efe:	6861      	ldr	r1, [r4, #4]
 8005f00:	eb07 060a 	add.w	r6, r7, sl
 8005f04:	42b3      	cmp	r3, r6
 8005f06:	b085      	sub	sp, #20
 8005f08:	bfb8      	it	lt
 8005f0a:	3101      	addlt	r1, #1
 8005f0c:	f7ff fed8 	bl	8005cc0 <_Balloc>
 8005f10:	b930      	cbnz	r0, 8005f20 <__multiply+0x44>
 8005f12:	4602      	mov	r2, r0
 8005f14:	4b44      	ldr	r3, [pc, #272]	; (8006028 <__multiply+0x14c>)
 8005f16:	4845      	ldr	r0, [pc, #276]	; (800602c <__multiply+0x150>)
 8005f18:	f240 115d 	movw	r1, #349	; 0x15d
 8005f1c:	f000 fcb6 	bl	800688c <__assert_func>
 8005f20:	f100 0514 	add.w	r5, r0, #20
 8005f24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f28:	462b      	mov	r3, r5
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4543      	cmp	r3, r8
 8005f2e:	d321      	bcc.n	8005f74 <__multiply+0x98>
 8005f30:	f104 0314 	add.w	r3, r4, #20
 8005f34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f38:	f109 0314 	add.w	r3, r9, #20
 8005f3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f40:	9202      	str	r2, [sp, #8]
 8005f42:	1b3a      	subs	r2, r7, r4
 8005f44:	3a15      	subs	r2, #21
 8005f46:	f022 0203 	bic.w	r2, r2, #3
 8005f4a:	3204      	adds	r2, #4
 8005f4c:	f104 0115 	add.w	r1, r4, #21
 8005f50:	428f      	cmp	r7, r1
 8005f52:	bf38      	it	cc
 8005f54:	2204      	movcc	r2, #4
 8005f56:	9201      	str	r2, [sp, #4]
 8005f58:	9a02      	ldr	r2, [sp, #8]
 8005f5a:	9303      	str	r3, [sp, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d80c      	bhi.n	8005f7a <__multiply+0x9e>
 8005f60:	2e00      	cmp	r6, #0
 8005f62:	dd03      	ble.n	8005f6c <__multiply+0x90>
 8005f64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d05a      	beq.n	8006022 <__multiply+0x146>
 8005f6c:	6106      	str	r6, [r0, #16]
 8005f6e:	b005      	add	sp, #20
 8005f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f74:	f843 2b04 	str.w	r2, [r3], #4
 8005f78:	e7d8      	b.n	8005f2c <__multiply+0x50>
 8005f7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f7e:	f1ba 0f00 	cmp.w	sl, #0
 8005f82:	d024      	beq.n	8005fce <__multiply+0xf2>
 8005f84:	f104 0e14 	add.w	lr, r4, #20
 8005f88:	46a9      	mov	r9, r5
 8005f8a:	f04f 0c00 	mov.w	ip, #0
 8005f8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f92:	f8d9 1000 	ldr.w	r1, [r9]
 8005f96:	fa1f fb82 	uxth.w	fp, r2
 8005f9a:	b289      	uxth	r1, r1
 8005f9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8005fa8:	4461      	add	r1, ip
 8005faa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fae:	fb0a c20b 	mla	r2, sl, fp, ip
 8005fb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fb6:	b289      	uxth	r1, r1
 8005fb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fbc:	4577      	cmp	r7, lr
 8005fbe:	f849 1b04 	str.w	r1, [r9], #4
 8005fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fc6:	d8e2      	bhi.n	8005f8e <__multiply+0xb2>
 8005fc8:	9a01      	ldr	r2, [sp, #4]
 8005fca:	f845 c002 	str.w	ip, [r5, r2]
 8005fce:	9a03      	ldr	r2, [sp, #12]
 8005fd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	f1b9 0f00 	cmp.w	r9, #0
 8005fda:	d020      	beq.n	800601e <__multiply+0x142>
 8005fdc:	6829      	ldr	r1, [r5, #0]
 8005fde:	f104 0c14 	add.w	ip, r4, #20
 8005fe2:	46ae      	mov	lr, r5
 8005fe4:	f04f 0a00 	mov.w	sl, #0
 8005fe8:	f8bc b000 	ldrh.w	fp, [ip]
 8005fec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ff0:	fb09 220b 	mla	r2, r9, fp, r2
 8005ff4:	4492      	add	sl, r2
 8005ff6:	b289      	uxth	r1, r1
 8005ff8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ffc:	f84e 1b04 	str.w	r1, [lr], #4
 8006000:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006004:	f8be 1000 	ldrh.w	r1, [lr]
 8006008:	0c12      	lsrs	r2, r2, #16
 800600a:	fb09 1102 	mla	r1, r9, r2, r1
 800600e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006012:	4567      	cmp	r7, ip
 8006014:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006018:	d8e6      	bhi.n	8005fe8 <__multiply+0x10c>
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	50a9      	str	r1, [r5, r2]
 800601e:	3504      	adds	r5, #4
 8006020:	e79a      	b.n	8005f58 <__multiply+0x7c>
 8006022:	3e01      	subs	r6, #1
 8006024:	e79c      	b.n	8005f60 <__multiply+0x84>
 8006026:	bf00      	nop
 8006028:	0800912b 	.word	0x0800912b
 800602c:	0800913c 	.word	0x0800913c

08006030 <__pow5mult>:
 8006030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006034:	4615      	mov	r5, r2
 8006036:	f012 0203 	ands.w	r2, r2, #3
 800603a:	4606      	mov	r6, r0
 800603c:	460f      	mov	r7, r1
 800603e:	d007      	beq.n	8006050 <__pow5mult+0x20>
 8006040:	4c25      	ldr	r4, [pc, #148]	; (80060d8 <__pow5mult+0xa8>)
 8006042:	3a01      	subs	r2, #1
 8006044:	2300      	movs	r3, #0
 8006046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800604a:	f7ff fe9b 	bl	8005d84 <__multadd>
 800604e:	4607      	mov	r7, r0
 8006050:	10ad      	asrs	r5, r5, #2
 8006052:	d03d      	beq.n	80060d0 <__pow5mult+0xa0>
 8006054:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006056:	b97c      	cbnz	r4, 8006078 <__pow5mult+0x48>
 8006058:	2010      	movs	r0, #16
 800605a:	f7ff fe1b 	bl	8005c94 <malloc>
 800605e:	4602      	mov	r2, r0
 8006060:	6270      	str	r0, [r6, #36]	; 0x24
 8006062:	b928      	cbnz	r0, 8006070 <__pow5mult+0x40>
 8006064:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <__pow5mult+0xac>)
 8006066:	481e      	ldr	r0, [pc, #120]	; (80060e0 <__pow5mult+0xb0>)
 8006068:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800606c:	f000 fc0e 	bl	800688c <__assert_func>
 8006070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006074:	6004      	str	r4, [r0, #0]
 8006076:	60c4      	str	r4, [r0, #12]
 8006078:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800607c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006080:	b94c      	cbnz	r4, 8006096 <__pow5mult+0x66>
 8006082:	f240 2171 	movw	r1, #625	; 0x271
 8006086:	4630      	mov	r0, r6
 8006088:	f7ff ff12 	bl	8005eb0 <__i2b>
 800608c:	2300      	movs	r3, #0
 800608e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006092:	4604      	mov	r4, r0
 8006094:	6003      	str	r3, [r0, #0]
 8006096:	f04f 0900 	mov.w	r9, #0
 800609a:	07eb      	lsls	r3, r5, #31
 800609c:	d50a      	bpl.n	80060b4 <__pow5mult+0x84>
 800609e:	4639      	mov	r1, r7
 80060a0:	4622      	mov	r2, r4
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7ff ff1a 	bl	8005edc <__multiply>
 80060a8:	4639      	mov	r1, r7
 80060aa:	4680      	mov	r8, r0
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff fe47 	bl	8005d40 <_Bfree>
 80060b2:	4647      	mov	r7, r8
 80060b4:	106d      	asrs	r5, r5, #1
 80060b6:	d00b      	beq.n	80060d0 <__pow5mult+0xa0>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	b938      	cbnz	r0, 80060cc <__pow5mult+0x9c>
 80060bc:	4622      	mov	r2, r4
 80060be:	4621      	mov	r1, r4
 80060c0:	4630      	mov	r0, r6
 80060c2:	f7ff ff0b 	bl	8005edc <__multiply>
 80060c6:	6020      	str	r0, [r4, #0]
 80060c8:	f8c0 9000 	str.w	r9, [r0]
 80060cc:	4604      	mov	r4, r0
 80060ce:	e7e4      	b.n	800609a <__pow5mult+0x6a>
 80060d0:	4638      	mov	r0, r7
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d6:	bf00      	nop
 80060d8:	08009288 	.word	0x08009288
 80060dc:	080090b9 	.word	0x080090b9
 80060e0:	0800913c 	.word	0x0800913c

080060e4 <__lshift>:
 80060e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e8:	460c      	mov	r4, r1
 80060ea:	6849      	ldr	r1, [r1, #4]
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060f2:	68a3      	ldr	r3, [r4, #8]
 80060f4:	4607      	mov	r7, r0
 80060f6:	4691      	mov	r9, r2
 80060f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060fc:	f108 0601 	add.w	r6, r8, #1
 8006100:	42b3      	cmp	r3, r6
 8006102:	db0b      	blt.n	800611c <__lshift+0x38>
 8006104:	4638      	mov	r0, r7
 8006106:	f7ff fddb 	bl	8005cc0 <_Balloc>
 800610a:	4605      	mov	r5, r0
 800610c:	b948      	cbnz	r0, 8006122 <__lshift+0x3e>
 800610e:	4602      	mov	r2, r0
 8006110:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <__lshift+0xd8>)
 8006112:	482b      	ldr	r0, [pc, #172]	; (80061c0 <__lshift+0xdc>)
 8006114:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006118:	f000 fbb8 	bl	800688c <__assert_func>
 800611c:	3101      	adds	r1, #1
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	e7ee      	b.n	8006100 <__lshift+0x1c>
 8006122:	2300      	movs	r3, #0
 8006124:	f100 0114 	add.w	r1, r0, #20
 8006128:	f100 0210 	add.w	r2, r0, #16
 800612c:	4618      	mov	r0, r3
 800612e:	4553      	cmp	r3, sl
 8006130:	db37      	blt.n	80061a2 <__lshift+0xbe>
 8006132:	6920      	ldr	r0, [r4, #16]
 8006134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006138:	f104 0314 	add.w	r3, r4, #20
 800613c:	f019 091f 	ands.w	r9, r9, #31
 8006140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006144:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006148:	d02f      	beq.n	80061aa <__lshift+0xc6>
 800614a:	f1c9 0e20 	rsb	lr, r9, #32
 800614e:	468a      	mov	sl, r1
 8006150:	f04f 0c00 	mov.w	ip, #0
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	fa02 f209 	lsl.w	r2, r2, r9
 800615a:	ea42 020c 	orr.w	r2, r2, ip
 800615e:	f84a 2b04 	str.w	r2, [sl], #4
 8006162:	f853 2b04 	ldr.w	r2, [r3], #4
 8006166:	4298      	cmp	r0, r3
 8006168:	fa22 fc0e 	lsr.w	ip, r2, lr
 800616c:	d8f2      	bhi.n	8006154 <__lshift+0x70>
 800616e:	1b03      	subs	r3, r0, r4
 8006170:	3b15      	subs	r3, #21
 8006172:	f023 0303 	bic.w	r3, r3, #3
 8006176:	3304      	adds	r3, #4
 8006178:	f104 0215 	add.w	r2, r4, #21
 800617c:	4290      	cmp	r0, r2
 800617e:	bf38      	it	cc
 8006180:	2304      	movcc	r3, #4
 8006182:	f841 c003 	str.w	ip, [r1, r3]
 8006186:	f1bc 0f00 	cmp.w	ip, #0
 800618a:	d001      	beq.n	8006190 <__lshift+0xac>
 800618c:	f108 0602 	add.w	r6, r8, #2
 8006190:	3e01      	subs	r6, #1
 8006192:	4638      	mov	r0, r7
 8006194:	612e      	str	r6, [r5, #16]
 8006196:	4621      	mov	r1, r4
 8006198:	f7ff fdd2 	bl	8005d40 <_Bfree>
 800619c:	4628      	mov	r0, r5
 800619e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80061a6:	3301      	adds	r3, #1
 80061a8:	e7c1      	b.n	800612e <__lshift+0x4a>
 80061aa:	3904      	subs	r1, #4
 80061ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80061b4:	4298      	cmp	r0, r3
 80061b6:	d8f9      	bhi.n	80061ac <__lshift+0xc8>
 80061b8:	e7ea      	b.n	8006190 <__lshift+0xac>
 80061ba:	bf00      	nop
 80061bc:	0800912b 	.word	0x0800912b
 80061c0:	0800913c 	.word	0x0800913c

080061c4 <__mcmp>:
 80061c4:	b530      	push	{r4, r5, lr}
 80061c6:	6902      	ldr	r2, [r0, #16]
 80061c8:	690c      	ldr	r4, [r1, #16]
 80061ca:	1b12      	subs	r2, r2, r4
 80061cc:	d10e      	bne.n	80061ec <__mcmp+0x28>
 80061ce:	f100 0314 	add.w	r3, r0, #20
 80061d2:	3114      	adds	r1, #20
 80061d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80061dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80061e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80061e4:	42a5      	cmp	r5, r4
 80061e6:	d003      	beq.n	80061f0 <__mcmp+0x2c>
 80061e8:	d305      	bcc.n	80061f6 <__mcmp+0x32>
 80061ea:	2201      	movs	r2, #1
 80061ec:	4610      	mov	r0, r2
 80061ee:	bd30      	pop	{r4, r5, pc}
 80061f0:	4283      	cmp	r3, r0
 80061f2:	d3f3      	bcc.n	80061dc <__mcmp+0x18>
 80061f4:	e7fa      	b.n	80061ec <__mcmp+0x28>
 80061f6:	f04f 32ff 	mov.w	r2, #4294967295
 80061fa:	e7f7      	b.n	80061ec <__mcmp+0x28>

080061fc <__mdiff>:
 80061fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	460c      	mov	r4, r1
 8006202:	4606      	mov	r6, r0
 8006204:	4611      	mov	r1, r2
 8006206:	4620      	mov	r0, r4
 8006208:	4690      	mov	r8, r2
 800620a:	f7ff ffdb 	bl	80061c4 <__mcmp>
 800620e:	1e05      	subs	r5, r0, #0
 8006210:	d110      	bne.n	8006234 <__mdiff+0x38>
 8006212:	4629      	mov	r1, r5
 8006214:	4630      	mov	r0, r6
 8006216:	f7ff fd53 	bl	8005cc0 <_Balloc>
 800621a:	b930      	cbnz	r0, 800622a <__mdiff+0x2e>
 800621c:	4b3a      	ldr	r3, [pc, #232]	; (8006308 <__mdiff+0x10c>)
 800621e:	4602      	mov	r2, r0
 8006220:	f240 2132 	movw	r1, #562	; 0x232
 8006224:	4839      	ldr	r0, [pc, #228]	; (800630c <__mdiff+0x110>)
 8006226:	f000 fb31 	bl	800688c <__assert_func>
 800622a:	2301      	movs	r3, #1
 800622c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006234:	bfa4      	itt	ge
 8006236:	4643      	movge	r3, r8
 8006238:	46a0      	movge	r8, r4
 800623a:	4630      	mov	r0, r6
 800623c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006240:	bfa6      	itte	ge
 8006242:	461c      	movge	r4, r3
 8006244:	2500      	movge	r5, #0
 8006246:	2501      	movlt	r5, #1
 8006248:	f7ff fd3a 	bl	8005cc0 <_Balloc>
 800624c:	b920      	cbnz	r0, 8006258 <__mdiff+0x5c>
 800624e:	4b2e      	ldr	r3, [pc, #184]	; (8006308 <__mdiff+0x10c>)
 8006250:	4602      	mov	r2, r0
 8006252:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006256:	e7e5      	b.n	8006224 <__mdiff+0x28>
 8006258:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800625c:	6926      	ldr	r6, [r4, #16]
 800625e:	60c5      	str	r5, [r0, #12]
 8006260:	f104 0914 	add.w	r9, r4, #20
 8006264:	f108 0514 	add.w	r5, r8, #20
 8006268:	f100 0e14 	add.w	lr, r0, #20
 800626c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006270:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006274:	f108 0210 	add.w	r2, r8, #16
 8006278:	46f2      	mov	sl, lr
 800627a:	2100      	movs	r1, #0
 800627c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006280:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006284:	fa1f f883 	uxth.w	r8, r3
 8006288:	fa11 f18b 	uxtah	r1, r1, fp
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	eba1 0808 	sub.w	r8, r1, r8
 8006292:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006296:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800629a:	fa1f f888 	uxth.w	r8, r8
 800629e:	1419      	asrs	r1, r3, #16
 80062a0:	454e      	cmp	r6, r9
 80062a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80062a6:	f84a 3b04 	str.w	r3, [sl], #4
 80062aa:	d8e7      	bhi.n	800627c <__mdiff+0x80>
 80062ac:	1b33      	subs	r3, r6, r4
 80062ae:	3b15      	subs	r3, #21
 80062b0:	f023 0303 	bic.w	r3, r3, #3
 80062b4:	3304      	adds	r3, #4
 80062b6:	3415      	adds	r4, #21
 80062b8:	42a6      	cmp	r6, r4
 80062ba:	bf38      	it	cc
 80062bc:	2304      	movcc	r3, #4
 80062be:	441d      	add	r5, r3
 80062c0:	4473      	add	r3, lr
 80062c2:	469e      	mov	lr, r3
 80062c4:	462e      	mov	r6, r5
 80062c6:	4566      	cmp	r6, ip
 80062c8:	d30e      	bcc.n	80062e8 <__mdiff+0xec>
 80062ca:	f10c 0203 	add.w	r2, ip, #3
 80062ce:	1b52      	subs	r2, r2, r5
 80062d0:	f022 0203 	bic.w	r2, r2, #3
 80062d4:	3d03      	subs	r5, #3
 80062d6:	45ac      	cmp	ip, r5
 80062d8:	bf38      	it	cc
 80062da:	2200      	movcc	r2, #0
 80062dc:	441a      	add	r2, r3
 80062de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80062e2:	b17b      	cbz	r3, 8006304 <__mdiff+0x108>
 80062e4:	6107      	str	r7, [r0, #16]
 80062e6:	e7a3      	b.n	8006230 <__mdiff+0x34>
 80062e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80062ec:	fa11 f288 	uxtah	r2, r1, r8
 80062f0:	1414      	asrs	r4, r2, #16
 80062f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062f6:	b292      	uxth	r2, r2
 80062f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80062fc:	f84e 2b04 	str.w	r2, [lr], #4
 8006300:	1421      	asrs	r1, r4, #16
 8006302:	e7e0      	b.n	80062c6 <__mdiff+0xca>
 8006304:	3f01      	subs	r7, #1
 8006306:	e7ea      	b.n	80062de <__mdiff+0xe2>
 8006308:	0800912b 	.word	0x0800912b
 800630c:	0800913c 	.word	0x0800913c

08006310 <__d2b>:
 8006310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006314:	4689      	mov	r9, r1
 8006316:	2101      	movs	r1, #1
 8006318:	ec57 6b10 	vmov	r6, r7, d0
 800631c:	4690      	mov	r8, r2
 800631e:	f7ff fccf 	bl	8005cc0 <_Balloc>
 8006322:	4604      	mov	r4, r0
 8006324:	b930      	cbnz	r0, 8006334 <__d2b+0x24>
 8006326:	4602      	mov	r2, r0
 8006328:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <__d2b+0xb0>)
 800632a:	4826      	ldr	r0, [pc, #152]	; (80063c4 <__d2b+0xb4>)
 800632c:	f240 310a 	movw	r1, #778	; 0x30a
 8006330:	f000 faac 	bl	800688c <__assert_func>
 8006334:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006338:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800633c:	bb35      	cbnz	r5, 800638c <__d2b+0x7c>
 800633e:	2e00      	cmp	r6, #0
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	d028      	beq.n	8006396 <__d2b+0x86>
 8006344:	4668      	mov	r0, sp
 8006346:	9600      	str	r6, [sp, #0]
 8006348:	f7ff fd82 	bl	8005e50 <__lo0bits>
 800634c:	9900      	ldr	r1, [sp, #0]
 800634e:	b300      	cbz	r0, 8006392 <__d2b+0x82>
 8006350:	9a01      	ldr	r2, [sp, #4]
 8006352:	f1c0 0320 	rsb	r3, r0, #32
 8006356:	fa02 f303 	lsl.w	r3, r2, r3
 800635a:	430b      	orrs	r3, r1
 800635c:	40c2      	lsrs	r2, r0
 800635e:	6163      	str	r3, [r4, #20]
 8006360:	9201      	str	r2, [sp, #4]
 8006362:	9b01      	ldr	r3, [sp, #4]
 8006364:	61a3      	str	r3, [r4, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf14      	ite	ne
 800636a:	2202      	movne	r2, #2
 800636c:	2201      	moveq	r2, #1
 800636e:	6122      	str	r2, [r4, #16]
 8006370:	b1d5      	cbz	r5, 80063a8 <__d2b+0x98>
 8006372:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006376:	4405      	add	r5, r0
 8006378:	f8c9 5000 	str.w	r5, [r9]
 800637c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006380:	f8c8 0000 	str.w	r0, [r8]
 8006384:	4620      	mov	r0, r4
 8006386:	b003      	add	sp, #12
 8006388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800638c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006390:	e7d5      	b.n	800633e <__d2b+0x2e>
 8006392:	6161      	str	r1, [r4, #20]
 8006394:	e7e5      	b.n	8006362 <__d2b+0x52>
 8006396:	a801      	add	r0, sp, #4
 8006398:	f7ff fd5a 	bl	8005e50 <__lo0bits>
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	6163      	str	r3, [r4, #20]
 80063a0:	2201      	movs	r2, #1
 80063a2:	6122      	str	r2, [r4, #16]
 80063a4:	3020      	adds	r0, #32
 80063a6:	e7e3      	b.n	8006370 <__d2b+0x60>
 80063a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063b0:	f8c9 0000 	str.w	r0, [r9]
 80063b4:	6918      	ldr	r0, [r3, #16]
 80063b6:	f7ff fd2b 	bl	8005e10 <__hi0bits>
 80063ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063be:	e7df      	b.n	8006380 <__d2b+0x70>
 80063c0:	0800912b 	.word	0x0800912b
 80063c4:	0800913c 	.word	0x0800913c

080063c8 <_calloc_r>:
 80063c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063ca:	fba1 2402 	umull	r2, r4, r1, r2
 80063ce:	b94c      	cbnz	r4, 80063e4 <_calloc_r+0x1c>
 80063d0:	4611      	mov	r1, r2
 80063d2:	9201      	str	r2, [sp, #4]
 80063d4:	f000 f87a 	bl	80064cc <_malloc_r>
 80063d8:	9a01      	ldr	r2, [sp, #4]
 80063da:	4605      	mov	r5, r0
 80063dc:	b930      	cbnz	r0, 80063ec <_calloc_r+0x24>
 80063de:	4628      	mov	r0, r5
 80063e0:	b003      	add	sp, #12
 80063e2:	bd30      	pop	{r4, r5, pc}
 80063e4:	220c      	movs	r2, #12
 80063e6:	6002      	str	r2, [r0, #0]
 80063e8:	2500      	movs	r5, #0
 80063ea:	e7f8      	b.n	80063de <_calloc_r+0x16>
 80063ec:	4621      	mov	r1, r4
 80063ee:	f7fe f941 	bl	8004674 <memset>
 80063f2:	e7f4      	b.n	80063de <_calloc_r+0x16>

080063f4 <_free_r>:
 80063f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d044      	beq.n	8006484 <_free_r+0x90>
 80063fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fe:	9001      	str	r0, [sp, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f1a1 0404 	sub.w	r4, r1, #4
 8006406:	bfb8      	it	lt
 8006408:	18e4      	addlt	r4, r4, r3
 800640a:	f000 fa9b 	bl	8006944 <__malloc_lock>
 800640e:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <_free_r+0x94>)
 8006410:	9801      	ldr	r0, [sp, #4]
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	b933      	cbnz	r3, 8006424 <_free_r+0x30>
 8006416:	6063      	str	r3, [r4, #4]
 8006418:	6014      	str	r4, [r2, #0]
 800641a:	b003      	add	sp, #12
 800641c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006420:	f000 ba96 	b.w	8006950 <__malloc_unlock>
 8006424:	42a3      	cmp	r3, r4
 8006426:	d908      	bls.n	800643a <_free_r+0x46>
 8006428:	6825      	ldr	r5, [r4, #0]
 800642a:	1961      	adds	r1, r4, r5
 800642c:	428b      	cmp	r3, r1
 800642e:	bf01      	itttt	eq
 8006430:	6819      	ldreq	r1, [r3, #0]
 8006432:	685b      	ldreq	r3, [r3, #4]
 8006434:	1949      	addeq	r1, r1, r5
 8006436:	6021      	streq	r1, [r4, #0]
 8006438:	e7ed      	b.n	8006416 <_free_r+0x22>
 800643a:	461a      	mov	r2, r3
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	b10b      	cbz	r3, 8006444 <_free_r+0x50>
 8006440:	42a3      	cmp	r3, r4
 8006442:	d9fa      	bls.n	800643a <_free_r+0x46>
 8006444:	6811      	ldr	r1, [r2, #0]
 8006446:	1855      	adds	r5, r2, r1
 8006448:	42a5      	cmp	r5, r4
 800644a:	d10b      	bne.n	8006464 <_free_r+0x70>
 800644c:	6824      	ldr	r4, [r4, #0]
 800644e:	4421      	add	r1, r4
 8006450:	1854      	adds	r4, r2, r1
 8006452:	42a3      	cmp	r3, r4
 8006454:	6011      	str	r1, [r2, #0]
 8006456:	d1e0      	bne.n	800641a <_free_r+0x26>
 8006458:	681c      	ldr	r4, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	6053      	str	r3, [r2, #4]
 800645e:	4421      	add	r1, r4
 8006460:	6011      	str	r1, [r2, #0]
 8006462:	e7da      	b.n	800641a <_free_r+0x26>
 8006464:	d902      	bls.n	800646c <_free_r+0x78>
 8006466:	230c      	movs	r3, #12
 8006468:	6003      	str	r3, [r0, #0]
 800646a:	e7d6      	b.n	800641a <_free_r+0x26>
 800646c:	6825      	ldr	r5, [r4, #0]
 800646e:	1961      	adds	r1, r4, r5
 8006470:	428b      	cmp	r3, r1
 8006472:	bf04      	itt	eq
 8006474:	6819      	ldreq	r1, [r3, #0]
 8006476:	685b      	ldreq	r3, [r3, #4]
 8006478:	6063      	str	r3, [r4, #4]
 800647a:	bf04      	itt	eq
 800647c:	1949      	addeq	r1, r1, r5
 800647e:	6021      	streq	r1, [r4, #0]
 8006480:	6054      	str	r4, [r2, #4]
 8006482:	e7ca      	b.n	800641a <_free_r+0x26>
 8006484:	b003      	add	sp, #12
 8006486:	bd30      	pop	{r4, r5, pc}
 8006488:	20000234 	.word	0x20000234

0800648c <sbrk_aligned>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4e0e      	ldr	r6, [pc, #56]	; (80064c8 <sbrk_aligned+0x3c>)
 8006490:	460c      	mov	r4, r1
 8006492:	6831      	ldr	r1, [r6, #0]
 8006494:	4605      	mov	r5, r0
 8006496:	b911      	cbnz	r1, 800649e <sbrk_aligned+0x12>
 8006498:	f000 f9e8 	bl	800686c <_sbrk_r>
 800649c:	6030      	str	r0, [r6, #0]
 800649e:	4621      	mov	r1, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 f9e3 	bl	800686c <_sbrk_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d00a      	beq.n	80064c0 <sbrk_aligned+0x34>
 80064aa:	1cc4      	adds	r4, r0, #3
 80064ac:	f024 0403 	bic.w	r4, r4, #3
 80064b0:	42a0      	cmp	r0, r4
 80064b2:	d007      	beq.n	80064c4 <sbrk_aligned+0x38>
 80064b4:	1a21      	subs	r1, r4, r0
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 f9d8 	bl	800686c <_sbrk_r>
 80064bc:	3001      	adds	r0, #1
 80064be:	d101      	bne.n	80064c4 <sbrk_aligned+0x38>
 80064c0:	f04f 34ff 	mov.w	r4, #4294967295
 80064c4:	4620      	mov	r0, r4
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	20000238 	.word	0x20000238

080064cc <_malloc_r>:
 80064cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d0:	1ccd      	adds	r5, r1, #3
 80064d2:	f025 0503 	bic.w	r5, r5, #3
 80064d6:	3508      	adds	r5, #8
 80064d8:	2d0c      	cmp	r5, #12
 80064da:	bf38      	it	cc
 80064dc:	250c      	movcc	r5, #12
 80064de:	2d00      	cmp	r5, #0
 80064e0:	4607      	mov	r7, r0
 80064e2:	db01      	blt.n	80064e8 <_malloc_r+0x1c>
 80064e4:	42a9      	cmp	r1, r5
 80064e6:	d905      	bls.n	80064f4 <_malloc_r+0x28>
 80064e8:	230c      	movs	r3, #12
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	2600      	movs	r6, #0
 80064ee:	4630      	mov	r0, r6
 80064f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f4:	4e2e      	ldr	r6, [pc, #184]	; (80065b0 <_malloc_r+0xe4>)
 80064f6:	f000 fa25 	bl	8006944 <__malloc_lock>
 80064fa:	6833      	ldr	r3, [r6, #0]
 80064fc:	461c      	mov	r4, r3
 80064fe:	bb34      	cbnz	r4, 800654e <_malloc_r+0x82>
 8006500:	4629      	mov	r1, r5
 8006502:	4638      	mov	r0, r7
 8006504:	f7ff ffc2 	bl	800648c <sbrk_aligned>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	4604      	mov	r4, r0
 800650c:	d14d      	bne.n	80065aa <_malloc_r+0xde>
 800650e:	6834      	ldr	r4, [r6, #0]
 8006510:	4626      	mov	r6, r4
 8006512:	2e00      	cmp	r6, #0
 8006514:	d140      	bne.n	8006598 <_malloc_r+0xcc>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	4631      	mov	r1, r6
 800651a:	4638      	mov	r0, r7
 800651c:	eb04 0803 	add.w	r8, r4, r3
 8006520:	f000 f9a4 	bl	800686c <_sbrk_r>
 8006524:	4580      	cmp	r8, r0
 8006526:	d13a      	bne.n	800659e <_malloc_r+0xd2>
 8006528:	6821      	ldr	r1, [r4, #0]
 800652a:	3503      	adds	r5, #3
 800652c:	1a6d      	subs	r5, r5, r1
 800652e:	f025 0503 	bic.w	r5, r5, #3
 8006532:	3508      	adds	r5, #8
 8006534:	2d0c      	cmp	r5, #12
 8006536:	bf38      	it	cc
 8006538:	250c      	movcc	r5, #12
 800653a:	4629      	mov	r1, r5
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff ffa5 	bl	800648c <sbrk_aligned>
 8006542:	3001      	adds	r0, #1
 8006544:	d02b      	beq.n	800659e <_malloc_r+0xd2>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	442b      	add	r3, r5
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	e00e      	b.n	800656c <_malloc_r+0xa0>
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	1b52      	subs	r2, r2, r5
 8006552:	d41e      	bmi.n	8006592 <_malloc_r+0xc6>
 8006554:	2a0b      	cmp	r2, #11
 8006556:	d916      	bls.n	8006586 <_malloc_r+0xba>
 8006558:	1961      	adds	r1, r4, r5
 800655a:	42a3      	cmp	r3, r4
 800655c:	6025      	str	r5, [r4, #0]
 800655e:	bf18      	it	ne
 8006560:	6059      	strne	r1, [r3, #4]
 8006562:	6863      	ldr	r3, [r4, #4]
 8006564:	bf08      	it	eq
 8006566:	6031      	streq	r1, [r6, #0]
 8006568:	5162      	str	r2, [r4, r5]
 800656a:	604b      	str	r3, [r1, #4]
 800656c:	4638      	mov	r0, r7
 800656e:	f104 060b 	add.w	r6, r4, #11
 8006572:	f000 f9ed 	bl	8006950 <__malloc_unlock>
 8006576:	f026 0607 	bic.w	r6, r6, #7
 800657a:	1d23      	adds	r3, r4, #4
 800657c:	1af2      	subs	r2, r6, r3
 800657e:	d0b6      	beq.n	80064ee <_malloc_r+0x22>
 8006580:	1b9b      	subs	r3, r3, r6
 8006582:	50a3      	str	r3, [r4, r2]
 8006584:	e7b3      	b.n	80064ee <_malloc_r+0x22>
 8006586:	6862      	ldr	r2, [r4, #4]
 8006588:	42a3      	cmp	r3, r4
 800658a:	bf0c      	ite	eq
 800658c:	6032      	streq	r2, [r6, #0]
 800658e:	605a      	strne	r2, [r3, #4]
 8006590:	e7ec      	b.n	800656c <_malloc_r+0xa0>
 8006592:	4623      	mov	r3, r4
 8006594:	6864      	ldr	r4, [r4, #4]
 8006596:	e7b2      	b.n	80064fe <_malloc_r+0x32>
 8006598:	4634      	mov	r4, r6
 800659a:	6876      	ldr	r6, [r6, #4]
 800659c:	e7b9      	b.n	8006512 <_malloc_r+0x46>
 800659e:	230c      	movs	r3, #12
 80065a0:	603b      	str	r3, [r7, #0]
 80065a2:	4638      	mov	r0, r7
 80065a4:	f000 f9d4 	bl	8006950 <__malloc_unlock>
 80065a8:	e7a1      	b.n	80064ee <_malloc_r+0x22>
 80065aa:	6025      	str	r5, [r4, #0]
 80065ac:	e7de      	b.n	800656c <_malloc_r+0xa0>
 80065ae:	bf00      	nop
 80065b0:	20000234 	.word	0x20000234

080065b4 <__ssputs_r>:
 80065b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	688e      	ldr	r6, [r1, #8]
 80065ba:	429e      	cmp	r6, r3
 80065bc:	4682      	mov	sl, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	4690      	mov	r8, r2
 80065c2:	461f      	mov	r7, r3
 80065c4:	d838      	bhi.n	8006638 <__ssputs_r+0x84>
 80065c6:	898a      	ldrh	r2, [r1, #12]
 80065c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065cc:	d032      	beq.n	8006634 <__ssputs_r+0x80>
 80065ce:	6825      	ldr	r5, [r4, #0]
 80065d0:	6909      	ldr	r1, [r1, #16]
 80065d2:	eba5 0901 	sub.w	r9, r5, r1
 80065d6:	6965      	ldr	r5, [r4, #20]
 80065d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065e0:	3301      	adds	r3, #1
 80065e2:	444b      	add	r3, r9
 80065e4:	106d      	asrs	r5, r5, #1
 80065e6:	429d      	cmp	r5, r3
 80065e8:	bf38      	it	cc
 80065ea:	461d      	movcc	r5, r3
 80065ec:	0553      	lsls	r3, r2, #21
 80065ee:	d531      	bpl.n	8006654 <__ssputs_r+0xa0>
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7ff ff6b 	bl	80064cc <_malloc_r>
 80065f6:	4606      	mov	r6, r0
 80065f8:	b950      	cbnz	r0, 8006610 <__ssputs_r+0x5c>
 80065fa:	230c      	movs	r3, #12
 80065fc:	f8ca 3000 	str.w	r3, [sl]
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006610:	6921      	ldr	r1, [r4, #16]
 8006612:	464a      	mov	r2, r9
 8006614:	f7ff fb46 	bl	8005ca4 <memcpy>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800661e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	6126      	str	r6, [r4, #16]
 8006626:	6165      	str	r5, [r4, #20]
 8006628:	444e      	add	r6, r9
 800662a:	eba5 0509 	sub.w	r5, r5, r9
 800662e:	6026      	str	r6, [r4, #0]
 8006630:	60a5      	str	r5, [r4, #8]
 8006632:	463e      	mov	r6, r7
 8006634:	42be      	cmp	r6, r7
 8006636:	d900      	bls.n	800663a <__ssputs_r+0x86>
 8006638:	463e      	mov	r6, r7
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	4632      	mov	r2, r6
 800663e:	4641      	mov	r1, r8
 8006640:	f000 f966 	bl	8006910 <memmove>
 8006644:	68a3      	ldr	r3, [r4, #8]
 8006646:	1b9b      	subs	r3, r3, r6
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	4433      	add	r3, r6
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	2000      	movs	r0, #0
 8006652:	e7db      	b.n	800660c <__ssputs_r+0x58>
 8006654:	462a      	mov	r2, r5
 8006656:	f000 f981 	bl	800695c <_realloc_r>
 800665a:	4606      	mov	r6, r0
 800665c:	2800      	cmp	r0, #0
 800665e:	d1e1      	bne.n	8006624 <__ssputs_r+0x70>
 8006660:	6921      	ldr	r1, [r4, #16]
 8006662:	4650      	mov	r0, sl
 8006664:	f7ff fec6 	bl	80063f4 <_free_r>
 8006668:	e7c7      	b.n	80065fa <__ssputs_r+0x46>
	...

0800666c <_svfiprintf_r>:
 800666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006670:	4698      	mov	r8, r3
 8006672:	898b      	ldrh	r3, [r1, #12]
 8006674:	061b      	lsls	r3, r3, #24
 8006676:	b09d      	sub	sp, #116	; 0x74
 8006678:	4607      	mov	r7, r0
 800667a:	460d      	mov	r5, r1
 800667c:	4614      	mov	r4, r2
 800667e:	d50e      	bpl.n	800669e <_svfiprintf_r+0x32>
 8006680:	690b      	ldr	r3, [r1, #16]
 8006682:	b963      	cbnz	r3, 800669e <_svfiprintf_r+0x32>
 8006684:	2140      	movs	r1, #64	; 0x40
 8006686:	f7ff ff21 	bl	80064cc <_malloc_r>
 800668a:	6028      	str	r0, [r5, #0]
 800668c:	6128      	str	r0, [r5, #16]
 800668e:	b920      	cbnz	r0, 800669a <_svfiprintf_r+0x2e>
 8006690:	230c      	movs	r3, #12
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	f04f 30ff 	mov.w	r0, #4294967295
 8006698:	e0d1      	b.n	800683e <_svfiprintf_r+0x1d2>
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	616b      	str	r3, [r5, #20]
 800669e:	2300      	movs	r3, #0
 80066a0:	9309      	str	r3, [sp, #36]	; 0x24
 80066a2:	2320      	movs	r3, #32
 80066a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ac:	2330      	movs	r3, #48	; 0x30
 80066ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006858 <_svfiprintf_r+0x1ec>
 80066b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066b6:	f04f 0901 	mov.w	r9, #1
 80066ba:	4623      	mov	r3, r4
 80066bc:	469a      	mov	sl, r3
 80066be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c2:	b10a      	cbz	r2, 80066c8 <_svfiprintf_r+0x5c>
 80066c4:	2a25      	cmp	r2, #37	; 0x25
 80066c6:	d1f9      	bne.n	80066bc <_svfiprintf_r+0x50>
 80066c8:	ebba 0b04 	subs.w	fp, sl, r4
 80066cc:	d00b      	beq.n	80066e6 <_svfiprintf_r+0x7a>
 80066ce:	465b      	mov	r3, fp
 80066d0:	4622      	mov	r2, r4
 80066d2:	4629      	mov	r1, r5
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7ff ff6d 	bl	80065b4 <__ssputs_r>
 80066da:	3001      	adds	r0, #1
 80066dc:	f000 80aa 	beq.w	8006834 <_svfiprintf_r+0x1c8>
 80066e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e2:	445a      	add	r2, fp
 80066e4:	9209      	str	r2, [sp, #36]	; 0x24
 80066e6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80a2 	beq.w	8006834 <_svfiprintf_r+0x1c8>
 80066f0:	2300      	movs	r3, #0
 80066f2:	f04f 32ff 	mov.w	r2, #4294967295
 80066f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066fa:	f10a 0a01 	add.w	sl, sl, #1
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	9307      	str	r3, [sp, #28]
 8006702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006706:	931a      	str	r3, [sp, #104]	; 0x68
 8006708:	4654      	mov	r4, sl
 800670a:	2205      	movs	r2, #5
 800670c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006710:	4851      	ldr	r0, [pc, #324]	; (8006858 <_svfiprintf_r+0x1ec>)
 8006712:	f7f9 fd6d 	bl	80001f0 <memchr>
 8006716:	9a04      	ldr	r2, [sp, #16]
 8006718:	b9d8      	cbnz	r0, 8006752 <_svfiprintf_r+0xe6>
 800671a:	06d0      	lsls	r0, r2, #27
 800671c:	bf44      	itt	mi
 800671e:	2320      	movmi	r3, #32
 8006720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006724:	0711      	lsls	r1, r2, #28
 8006726:	bf44      	itt	mi
 8006728:	232b      	movmi	r3, #43	; 0x2b
 800672a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672e:	f89a 3000 	ldrb.w	r3, [sl]
 8006732:	2b2a      	cmp	r3, #42	; 0x2a
 8006734:	d015      	beq.n	8006762 <_svfiprintf_r+0xf6>
 8006736:	9a07      	ldr	r2, [sp, #28]
 8006738:	4654      	mov	r4, sl
 800673a:	2000      	movs	r0, #0
 800673c:	f04f 0c0a 	mov.w	ip, #10
 8006740:	4621      	mov	r1, r4
 8006742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006746:	3b30      	subs	r3, #48	; 0x30
 8006748:	2b09      	cmp	r3, #9
 800674a:	d94e      	bls.n	80067ea <_svfiprintf_r+0x17e>
 800674c:	b1b0      	cbz	r0, 800677c <_svfiprintf_r+0x110>
 800674e:	9207      	str	r2, [sp, #28]
 8006750:	e014      	b.n	800677c <_svfiprintf_r+0x110>
 8006752:	eba0 0308 	sub.w	r3, r0, r8
 8006756:	fa09 f303 	lsl.w	r3, r9, r3
 800675a:	4313      	orrs	r3, r2
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	46a2      	mov	sl, r4
 8006760:	e7d2      	b.n	8006708 <_svfiprintf_r+0x9c>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	1d19      	adds	r1, r3, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	9103      	str	r1, [sp, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	bfbb      	ittet	lt
 800676e:	425b      	neglt	r3, r3
 8006770:	f042 0202 	orrlt.w	r2, r2, #2
 8006774:	9307      	strge	r3, [sp, #28]
 8006776:	9307      	strlt	r3, [sp, #28]
 8006778:	bfb8      	it	lt
 800677a:	9204      	strlt	r2, [sp, #16]
 800677c:	7823      	ldrb	r3, [r4, #0]
 800677e:	2b2e      	cmp	r3, #46	; 0x2e
 8006780:	d10c      	bne.n	800679c <_svfiprintf_r+0x130>
 8006782:	7863      	ldrb	r3, [r4, #1]
 8006784:	2b2a      	cmp	r3, #42	; 0x2a
 8006786:	d135      	bne.n	80067f4 <_svfiprintf_r+0x188>
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	1d1a      	adds	r2, r3, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	9203      	str	r2, [sp, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	bfb8      	it	lt
 8006794:	f04f 33ff 	movlt.w	r3, #4294967295
 8006798:	3402      	adds	r4, #2
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006868 <_svfiprintf_r+0x1fc>
 80067a0:	7821      	ldrb	r1, [r4, #0]
 80067a2:	2203      	movs	r2, #3
 80067a4:	4650      	mov	r0, sl
 80067a6:	f7f9 fd23 	bl	80001f0 <memchr>
 80067aa:	b140      	cbz	r0, 80067be <_svfiprintf_r+0x152>
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	eba0 000a 	sub.w	r0, r0, sl
 80067b2:	fa03 f000 	lsl.w	r0, r3, r0
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	4303      	orrs	r3, r0
 80067ba:	3401      	adds	r4, #1
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c2:	4826      	ldr	r0, [pc, #152]	; (800685c <_svfiprintf_r+0x1f0>)
 80067c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c8:	2206      	movs	r2, #6
 80067ca:	f7f9 fd11 	bl	80001f0 <memchr>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d038      	beq.n	8006844 <_svfiprintf_r+0x1d8>
 80067d2:	4b23      	ldr	r3, [pc, #140]	; (8006860 <_svfiprintf_r+0x1f4>)
 80067d4:	bb1b      	cbnz	r3, 800681e <_svfiprintf_r+0x1b2>
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	3307      	adds	r3, #7
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	3308      	adds	r3, #8
 80067e0:	9303      	str	r3, [sp, #12]
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	4433      	add	r3, r6
 80067e6:	9309      	str	r3, [sp, #36]	; 0x24
 80067e8:	e767      	b.n	80066ba <_svfiprintf_r+0x4e>
 80067ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ee:	460c      	mov	r4, r1
 80067f0:	2001      	movs	r0, #1
 80067f2:	e7a5      	b.n	8006740 <_svfiprintf_r+0xd4>
 80067f4:	2300      	movs	r3, #0
 80067f6:	3401      	adds	r4, #1
 80067f8:	9305      	str	r3, [sp, #20]
 80067fa:	4619      	mov	r1, r3
 80067fc:	f04f 0c0a 	mov.w	ip, #10
 8006800:	4620      	mov	r0, r4
 8006802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006806:	3a30      	subs	r2, #48	; 0x30
 8006808:	2a09      	cmp	r2, #9
 800680a:	d903      	bls.n	8006814 <_svfiprintf_r+0x1a8>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0c5      	beq.n	800679c <_svfiprintf_r+0x130>
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	e7c3      	b.n	800679c <_svfiprintf_r+0x130>
 8006814:	fb0c 2101 	mla	r1, ip, r1, r2
 8006818:	4604      	mov	r4, r0
 800681a:	2301      	movs	r3, #1
 800681c:	e7f0      	b.n	8006800 <_svfiprintf_r+0x194>
 800681e:	ab03      	add	r3, sp, #12
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	462a      	mov	r2, r5
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <_svfiprintf_r+0x1f8>)
 8006826:	a904      	add	r1, sp, #16
 8006828:	4638      	mov	r0, r7
 800682a:	f7fd ffcb 	bl	80047c4 <_printf_float>
 800682e:	1c42      	adds	r2, r0, #1
 8006830:	4606      	mov	r6, r0
 8006832:	d1d6      	bne.n	80067e2 <_svfiprintf_r+0x176>
 8006834:	89ab      	ldrh	r3, [r5, #12]
 8006836:	065b      	lsls	r3, r3, #25
 8006838:	f53f af2c 	bmi.w	8006694 <_svfiprintf_r+0x28>
 800683c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800683e:	b01d      	add	sp, #116	; 0x74
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006844:	ab03      	add	r3, sp, #12
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	462a      	mov	r2, r5
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <_svfiprintf_r+0x1f8>)
 800684c:	a904      	add	r1, sp, #16
 800684e:	4638      	mov	r0, r7
 8006850:	f7fe fa5c 	bl	8004d0c <_printf_i>
 8006854:	e7eb      	b.n	800682e <_svfiprintf_r+0x1c2>
 8006856:	bf00      	nop
 8006858:	08009294 	.word	0x08009294
 800685c:	0800929e 	.word	0x0800929e
 8006860:	080047c5 	.word	0x080047c5
 8006864:	080065b5 	.word	0x080065b5
 8006868:	0800929a 	.word	0x0800929a

0800686c <_sbrk_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4d06      	ldr	r5, [pc, #24]	; (8006888 <_sbrk_r+0x1c>)
 8006870:	2300      	movs	r3, #0
 8006872:	4604      	mov	r4, r0
 8006874:	4608      	mov	r0, r1
 8006876:	602b      	str	r3, [r5, #0]
 8006878:	f002 f930 	bl	8008adc <_sbrk>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_sbrk_r+0x1a>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	b103      	cbz	r3, 8006886 <_sbrk_r+0x1a>
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	2000023c 	.word	0x2000023c

0800688c <__assert_func>:
 800688c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800688e:	4614      	mov	r4, r2
 8006890:	461a      	mov	r2, r3
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <__assert_func+0x2c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4605      	mov	r5, r0
 8006898:	68d8      	ldr	r0, [r3, #12]
 800689a:	b14c      	cbz	r4, 80068b0 <__assert_func+0x24>
 800689c:	4b07      	ldr	r3, [pc, #28]	; (80068bc <__assert_func+0x30>)
 800689e:	9100      	str	r1, [sp, #0]
 80068a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068a4:	4906      	ldr	r1, [pc, #24]	; (80068c0 <__assert_func+0x34>)
 80068a6:	462b      	mov	r3, r5
 80068a8:	f000 f80e 	bl	80068c8 <fiprintf>
 80068ac:	f000 faac 	bl	8006e08 <abort>
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <__assert_func+0x38>)
 80068b2:	461c      	mov	r4, r3
 80068b4:	e7f3      	b.n	800689e <__assert_func+0x12>
 80068b6:	bf00      	nop
 80068b8:	20000010 	.word	0x20000010
 80068bc:	080092a5 	.word	0x080092a5
 80068c0:	080092b2 	.word	0x080092b2
 80068c4:	080092e0 	.word	0x080092e0

080068c8 <fiprintf>:
 80068c8:	b40e      	push	{r1, r2, r3}
 80068ca:	b503      	push	{r0, r1, lr}
 80068cc:	4601      	mov	r1, r0
 80068ce:	ab03      	add	r3, sp, #12
 80068d0:	4805      	ldr	r0, [pc, #20]	; (80068e8 <fiprintf+0x20>)
 80068d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d6:	6800      	ldr	r0, [r0, #0]
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	f000 f897 	bl	8006a0c <_vfiprintf_r>
 80068de:	b002      	add	sp, #8
 80068e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068e4:	b003      	add	sp, #12
 80068e6:	4770      	bx	lr
 80068e8:	20000010 	.word	0x20000010

080068ec <__ascii_mbtowc>:
 80068ec:	b082      	sub	sp, #8
 80068ee:	b901      	cbnz	r1, 80068f2 <__ascii_mbtowc+0x6>
 80068f0:	a901      	add	r1, sp, #4
 80068f2:	b142      	cbz	r2, 8006906 <__ascii_mbtowc+0x1a>
 80068f4:	b14b      	cbz	r3, 800690a <__ascii_mbtowc+0x1e>
 80068f6:	7813      	ldrb	r3, [r2, #0]
 80068f8:	600b      	str	r3, [r1, #0]
 80068fa:	7812      	ldrb	r2, [r2, #0]
 80068fc:	1e10      	subs	r0, r2, #0
 80068fe:	bf18      	it	ne
 8006900:	2001      	movne	r0, #1
 8006902:	b002      	add	sp, #8
 8006904:	4770      	bx	lr
 8006906:	4610      	mov	r0, r2
 8006908:	e7fb      	b.n	8006902 <__ascii_mbtowc+0x16>
 800690a:	f06f 0001 	mvn.w	r0, #1
 800690e:	e7f8      	b.n	8006902 <__ascii_mbtowc+0x16>

08006910 <memmove>:
 8006910:	4288      	cmp	r0, r1
 8006912:	b510      	push	{r4, lr}
 8006914:	eb01 0402 	add.w	r4, r1, r2
 8006918:	d902      	bls.n	8006920 <memmove+0x10>
 800691a:	4284      	cmp	r4, r0
 800691c:	4623      	mov	r3, r4
 800691e:	d807      	bhi.n	8006930 <memmove+0x20>
 8006920:	1e43      	subs	r3, r0, #1
 8006922:	42a1      	cmp	r1, r4
 8006924:	d008      	beq.n	8006938 <memmove+0x28>
 8006926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800692a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800692e:	e7f8      	b.n	8006922 <memmove+0x12>
 8006930:	4402      	add	r2, r0
 8006932:	4601      	mov	r1, r0
 8006934:	428a      	cmp	r2, r1
 8006936:	d100      	bne.n	800693a <memmove+0x2a>
 8006938:	bd10      	pop	{r4, pc}
 800693a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800693e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006942:	e7f7      	b.n	8006934 <memmove+0x24>

08006944 <__malloc_lock>:
 8006944:	4801      	ldr	r0, [pc, #4]	; (800694c <__malloc_lock+0x8>)
 8006946:	f000 bc1f 	b.w	8007188 <__retarget_lock_acquire_recursive>
 800694a:	bf00      	nop
 800694c:	20000240 	.word	0x20000240

08006950 <__malloc_unlock>:
 8006950:	4801      	ldr	r0, [pc, #4]	; (8006958 <__malloc_unlock+0x8>)
 8006952:	f000 bc1a 	b.w	800718a <__retarget_lock_release_recursive>
 8006956:	bf00      	nop
 8006958:	20000240 	.word	0x20000240

0800695c <_realloc_r>:
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	4680      	mov	r8, r0
 8006962:	4614      	mov	r4, r2
 8006964:	460e      	mov	r6, r1
 8006966:	b921      	cbnz	r1, 8006972 <_realloc_r+0x16>
 8006968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800696c:	4611      	mov	r1, r2
 800696e:	f7ff bdad 	b.w	80064cc <_malloc_r>
 8006972:	b92a      	cbnz	r2, 8006980 <_realloc_r+0x24>
 8006974:	f7ff fd3e 	bl	80063f4 <_free_r>
 8006978:	4625      	mov	r5, r4
 800697a:	4628      	mov	r0, r5
 800697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006980:	f000 fc6a 	bl	8007258 <_malloc_usable_size_r>
 8006984:	4284      	cmp	r4, r0
 8006986:	4607      	mov	r7, r0
 8006988:	d802      	bhi.n	8006990 <_realloc_r+0x34>
 800698a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800698e:	d812      	bhi.n	80069b6 <_realloc_r+0x5a>
 8006990:	4621      	mov	r1, r4
 8006992:	4640      	mov	r0, r8
 8006994:	f7ff fd9a 	bl	80064cc <_malloc_r>
 8006998:	4605      	mov	r5, r0
 800699a:	2800      	cmp	r0, #0
 800699c:	d0ed      	beq.n	800697a <_realloc_r+0x1e>
 800699e:	42bc      	cmp	r4, r7
 80069a0:	4622      	mov	r2, r4
 80069a2:	4631      	mov	r1, r6
 80069a4:	bf28      	it	cs
 80069a6:	463a      	movcs	r2, r7
 80069a8:	f7ff f97c 	bl	8005ca4 <memcpy>
 80069ac:	4631      	mov	r1, r6
 80069ae:	4640      	mov	r0, r8
 80069b0:	f7ff fd20 	bl	80063f4 <_free_r>
 80069b4:	e7e1      	b.n	800697a <_realloc_r+0x1e>
 80069b6:	4635      	mov	r5, r6
 80069b8:	e7df      	b.n	800697a <_realloc_r+0x1e>

080069ba <__sfputc_r>:
 80069ba:	6893      	ldr	r3, [r2, #8]
 80069bc:	3b01      	subs	r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	b410      	push	{r4}
 80069c2:	6093      	str	r3, [r2, #8]
 80069c4:	da08      	bge.n	80069d8 <__sfputc_r+0x1e>
 80069c6:	6994      	ldr	r4, [r2, #24]
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	db01      	blt.n	80069d0 <__sfputc_r+0x16>
 80069cc:	290a      	cmp	r1, #10
 80069ce:	d103      	bne.n	80069d8 <__sfputc_r+0x1e>
 80069d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d4:	f000 b94a 	b.w	8006c6c <__swbuf_r>
 80069d8:	6813      	ldr	r3, [r2, #0]
 80069da:	1c58      	adds	r0, r3, #1
 80069dc:	6010      	str	r0, [r2, #0]
 80069de:	7019      	strb	r1, [r3, #0]
 80069e0:	4608      	mov	r0, r1
 80069e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <__sfputs_r>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	4606      	mov	r6, r0
 80069ec:	460f      	mov	r7, r1
 80069ee:	4614      	mov	r4, r2
 80069f0:	18d5      	adds	r5, r2, r3
 80069f2:	42ac      	cmp	r4, r5
 80069f4:	d101      	bne.n	80069fa <__sfputs_r+0x12>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e007      	b.n	8006a0a <__sfputs_r+0x22>
 80069fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069fe:	463a      	mov	r2, r7
 8006a00:	4630      	mov	r0, r6
 8006a02:	f7ff ffda 	bl	80069ba <__sfputc_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d1f3      	bne.n	80069f2 <__sfputs_r+0xa>
 8006a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a0c <_vfiprintf_r>:
 8006a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a10:	460d      	mov	r5, r1
 8006a12:	b09d      	sub	sp, #116	; 0x74
 8006a14:	4614      	mov	r4, r2
 8006a16:	4698      	mov	r8, r3
 8006a18:	4606      	mov	r6, r0
 8006a1a:	b118      	cbz	r0, 8006a24 <_vfiprintf_r+0x18>
 8006a1c:	6983      	ldr	r3, [r0, #24]
 8006a1e:	b90b      	cbnz	r3, 8006a24 <_vfiprintf_r+0x18>
 8006a20:	f000 fb14 	bl	800704c <__sinit>
 8006a24:	4b89      	ldr	r3, [pc, #548]	; (8006c4c <_vfiprintf_r+0x240>)
 8006a26:	429d      	cmp	r5, r3
 8006a28:	d11b      	bne.n	8006a62 <_vfiprintf_r+0x56>
 8006a2a:	6875      	ldr	r5, [r6, #4]
 8006a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a2e:	07d9      	lsls	r1, r3, #31
 8006a30:	d405      	bmi.n	8006a3e <_vfiprintf_r+0x32>
 8006a32:	89ab      	ldrh	r3, [r5, #12]
 8006a34:	059a      	lsls	r2, r3, #22
 8006a36:	d402      	bmi.n	8006a3e <_vfiprintf_r+0x32>
 8006a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a3a:	f000 fba5 	bl	8007188 <__retarget_lock_acquire_recursive>
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	071b      	lsls	r3, r3, #28
 8006a42:	d501      	bpl.n	8006a48 <_vfiprintf_r+0x3c>
 8006a44:	692b      	ldr	r3, [r5, #16]
 8006a46:	b9eb      	cbnz	r3, 8006a84 <_vfiprintf_r+0x78>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f000 f96e 	bl	8006d2c <__swsetup_r>
 8006a50:	b1c0      	cbz	r0, 8006a84 <_vfiprintf_r+0x78>
 8006a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a54:	07dc      	lsls	r4, r3, #31
 8006a56:	d50e      	bpl.n	8006a76 <_vfiprintf_r+0x6a>
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	b01d      	add	sp, #116	; 0x74
 8006a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a62:	4b7b      	ldr	r3, [pc, #492]	; (8006c50 <_vfiprintf_r+0x244>)
 8006a64:	429d      	cmp	r5, r3
 8006a66:	d101      	bne.n	8006a6c <_vfiprintf_r+0x60>
 8006a68:	68b5      	ldr	r5, [r6, #8]
 8006a6a:	e7df      	b.n	8006a2c <_vfiprintf_r+0x20>
 8006a6c:	4b79      	ldr	r3, [pc, #484]	; (8006c54 <_vfiprintf_r+0x248>)
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	bf08      	it	eq
 8006a72:	68f5      	ldreq	r5, [r6, #12]
 8006a74:	e7da      	b.n	8006a2c <_vfiprintf_r+0x20>
 8006a76:	89ab      	ldrh	r3, [r5, #12]
 8006a78:	0598      	lsls	r0, r3, #22
 8006a7a:	d4ed      	bmi.n	8006a58 <_vfiprintf_r+0x4c>
 8006a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a7e:	f000 fb84 	bl	800718a <__retarget_lock_release_recursive>
 8006a82:	e7e9      	b.n	8006a58 <_vfiprintf_r+0x4c>
 8006a84:	2300      	movs	r3, #0
 8006a86:	9309      	str	r3, [sp, #36]	; 0x24
 8006a88:	2320      	movs	r3, #32
 8006a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a92:	2330      	movs	r3, #48	; 0x30
 8006a94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c58 <_vfiprintf_r+0x24c>
 8006a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a9c:	f04f 0901 	mov.w	r9, #1
 8006aa0:	4623      	mov	r3, r4
 8006aa2:	469a      	mov	sl, r3
 8006aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aa8:	b10a      	cbz	r2, 8006aae <_vfiprintf_r+0xa2>
 8006aaa:	2a25      	cmp	r2, #37	; 0x25
 8006aac:	d1f9      	bne.n	8006aa2 <_vfiprintf_r+0x96>
 8006aae:	ebba 0b04 	subs.w	fp, sl, r4
 8006ab2:	d00b      	beq.n	8006acc <_vfiprintf_r+0xc0>
 8006ab4:	465b      	mov	r3, fp
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	4629      	mov	r1, r5
 8006aba:	4630      	mov	r0, r6
 8006abc:	f7ff ff94 	bl	80069e8 <__sfputs_r>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f000 80aa 	beq.w	8006c1a <_vfiprintf_r+0x20e>
 8006ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ac8:	445a      	add	r2, fp
 8006aca:	9209      	str	r2, [sp, #36]	; 0x24
 8006acc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80a2 	beq.w	8006c1a <_vfiprintf_r+0x20e>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8006adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ae0:	f10a 0a01 	add.w	sl, sl, #1
 8006ae4:	9304      	str	r3, [sp, #16]
 8006ae6:	9307      	str	r3, [sp, #28]
 8006ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aec:	931a      	str	r3, [sp, #104]	; 0x68
 8006aee:	4654      	mov	r4, sl
 8006af0:	2205      	movs	r2, #5
 8006af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af6:	4858      	ldr	r0, [pc, #352]	; (8006c58 <_vfiprintf_r+0x24c>)
 8006af8:	f7f9 fb7a 	bl	80001f0 <memchr>
 8006afc:	9a04      	ldr	r2, [sp, #16]
 8006afe:	b9d8      	cbnz	r0, 8006b38 <_vfiprintf_r+0x12c>
 8006b00:	06d1      	lsls	r1, r2, #27
 8006b02:	bf44      	itt	mi
 8006b04:	2320      	movmi	r3, #32
 8006b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b0a:	0713      	lsls	r3, r2, #28
 8006b0c:	bf44      	itt	mi
 8006b0e:	232b      	movmi	r3, #43	; 0x2b
 8006b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b14:	f89a 3000 	ldrb.w	r3, [sl]
 8006b18:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1a:	d015      	beq.n	8006b48 <_vfiprintf_r+0x13c>
 8006b1c:	9a07      	ldr	r2, [sp, #28]
 8006b1e:	4654      	mov	r4, sl
 8006b20:	2000      	movs	r0, #0
 8006b22:	f04f 0c0a 	mov.w	ip, #10
 8006b26:	4621      	mov	r1, r4
 8006b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b2c:	3b30      	subs	r3, #48	; 0x30
 8006b2e:	2b09      	cmp	r3, #9
 8006b30:	d94e      	bls.n	8006bd0 <_vfiprintf_r+0x1c4>
 8006b32:	b1b0      	cbz	r0, 8006b62 <_vfiprintf_r+0x156>
 8006b34:	9207      	str	r2, [sp, #28]
 8006b36:	e014      	b.n	8006b62 <_vfiprintf_r+0x156>
 8006b38:	eba0 0308 	sub.w	r3, r0, r8
 8006b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b40:	4313      	orrs	r3, r2
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	46a2      	mov	sl, r4
 8006b46:	e7d2      	b.n	8006aee <_vfiprintf_r+0xe2>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	1d19      	adds	r1, r3, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	9103      	str	r1, [sp, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bfbb      	ittet	lt
 8006b54:	425b      	neglt	r3, r3
 8006b56:	f042 0202 	orrlt.w	r2, r2, #2
 8006b5a:	9307      	strge	r3, [sp, #28]
 8006b5c:	9307      	strlt	r3, [sp, #28]
 8006b5e:	bfb8      	it	lt
 8006b60:	9204      	strlt	r2, [sp, #16]
 8006b62:	7823      	ldrb	r3, [r4, #0]
 8006b64:	2b2e      	cmp	r3, #46	; 0x2e
 8006b66:	d10c      	bne.n	8006b82 <_vfiprintf_r+0x176>
 8006b68:	7863      	ldrb	r3, [r4, #1]
 8006b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6c:	d135      	bne.n	8006bda <_vfiprintf_r+0x1ce>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	1d1a      	adds	r2, r3, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	9203      	str	r2, [sp, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bfb8      	it	lt
 8006b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b7e:	3402      	adds	r4, #2
 8006b80:	9305      	str	r3, [sp, #20]
 8006b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c68 <_vfiprintf_r+0x25c>
 8006b86:	7821      	ldrb	r1, [r4, #0]
 8006b88:	2203      	movs	r2, #3
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	f7f9 fb30 	bl	80001f0 <memchr>
 8006b90:	b140      	cbz	r0, 8006ba4 <_vfiprintf_r+0x198>
 8006b92:	2340      	movs	r3, #64	; 0x40
 8006b94:	eba0 000a 	sub.w	r0, r0, sl
 8006b98:	fa03 f000 	lsl.w	r0, r3, r0
 8006b9c:	9b04      	ldr	r3, [sp, #16]
 8006b9e:	4303      	orrs	r3, r0
 8006ba0:	3401      	adds	r4, #1
 8006ba2:	9304      	str	r3, [sp, #16]
 8006ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba8:	482c      	ldr	r0, [pc, #176]	; (8006c5c <_vfiprintf_r+0x250>)
 8006baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bae:	2206      	movs	r2, #6
 8006bb0:	f7f9 fb1e 	bl	80001f0 <memchr>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d03f      	beq.n	8006c38 <_vfiprintf_r+0x22c>
 8006bb8:	4b29      	ldr	r3, [pc, #164]	; (8006c60 <_vfiprintf_r+0x254>)
 8006bba:	bb1b      	cbnz	r3, 8006c04 <_vfiprintf_r+0x1f8>
 8006bbc:	9b03      	ldr	r3, [sp, #12]
 8006bbe:	3307      	adds	r3, #7
 8006bc0:	f023 0307 	bic.w	r3, r3, #7
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	9303      	str	r3, [sp, #12]
 8006bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bca:	443b      	add	r3, r7
 8006bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bce:	e767      	b.n	8006aa0 <_vfiprintf_r+0x94>
 8006bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	e7a5      	b.n	8006b26 <_vfiprintf_r+0x11a>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	3401      	adds	r4, #1
 8006bde:	9305      	str	r3, [sp, #20]
 8006be0:	4619      	mov	r1, r3
 8006be2:	f04f 0c0a 	mov.w	ip, #10
 8006be6:	4620      	mov	r0, r4
 8006be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bec:	3a30      	subs	r2, #48	; 0x30
 8006bee:	2a09      	cmp	r2, #9
 8006bf0:	d903      	bls.n	8006bfa <_vfiprintf_r+0x1ee>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0c5      	beq.n	8006b82 <_vfiprintf_r+0x176>
 8006bf6:	9105      	str	r1, [sp, #20]
 8006bf8:	e7c3      	b.n	8006b82 <_vfiprintf_r+0x176>
 8006bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bfe:	4604      	mov	r4, r0
 8006c00:	2301      	movs	r3, #1
 8006c02:	e7f0      	b.n	8006be6 <_vfiprintf_r+0x1da>
 8006c04:	ab03      	add	r3, sp, #12
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	462a      	mov	r2, r5
 8006c0a:	4b16      	ldr	r3, [pc, #88]	; (8006c64 <_vfiprintf_r+0x258>)
 8006c0c:	a904      	add	r1, sp, #16
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f7fd fdd8 	bl	80047c4 <_printf_float>
 8006c14:	4607      	mov	r7, r0
 8006c16:	1c78      	adds	r0, r7, #1
 8006c18:	d1d6      	bne.n	8006bc8 <_vfiprintf_r+0x1bc>
 8006c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c1c:	07d9      	lsls	r1, r3, #31
 8006c1e:	d405      	bmi.n	8006c2c <_vfiprintf_r+0x220>
 8006c20:	89ab      	ldrh	r3, [r5, #12]
 8006c22:	059a      	lsls	r2, r3, #22
 8006c24:	d402      	bmi.n	8006c2c <_vfiprintf_r+0x220>
 8006c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c28:	f000 faaf 	bl	800718a <__retarget_lock_release_recursive>
 8006c2c:	89ab      	ldrh	r3, [r5, #12]
 8006c2e:	065b      	lsls	r3, r3, #25
 8006c30:	f53f af12 	bmi.w	8006a58 <_vfiprintf_r+0x4c>
 8006c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c36:	e711      	b.n	8006a5c <_vfiprintf_r+0x50>
 8006c38:	ab03      	add	r3, sp, #12
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <_vfiprintf_r+0x258>)
 8006c40:	a904      	add	r1, sp, #16
 8006c42:	4630      	mov	r0, r6
 8006c44:	f7fe f862 	bl	8004d0c <_printf_i>
 8006c48:	e7e4      	b.n	8006c14 <_vfiprintf_r+0x208>
 8006c4a:	bf00      	nop
 8006c4c:	0800940c 	.word	0x0800940c
 8006c50:	0800942c 	.word	0x0800942c
 8006c54:	080093ec 	.word	0x080093ec
 8006c58:	08009294 	.word	0x08009294
 8006c5c:	0800929e 	.word	0x0800929e
 8006c60:	080047c5 	.word	0x080047c5
 8006c64:	080069e9 	.word	0x080069e9
 8006c68:	0800929a 	.word	0x0800929a

08006c6c <__swbuf_r>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	460e      	mov	r6, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	4605      	mov	r5, r0
 8006c74:	b118      	cbz	r0, 8006c7e <__swbuf_r+0x12>
 8006c76:	6983      	ldr	r3, [r0, #24]
 8006c78:	b90b      	cbnz	r3, 8006c7e <__swbuf_r+0x12>
 8006c7a:	f000 f9e7 	bl	800704c <__sinit>
 8006c7e:	4b21      	ldr	r3, [pc, #132]	; (8006d04 <__swbuf_r+0x98>)
 8006c80:	429c      	cmp	r4, r3
 8006c82:	d12b      	bne.n	8006cdc <__swbuf_r+0x70>
 8006c84:	686c      	ldr	r4, [r5, #4]
 8006c86:	69a3      	ldr	r3, [r4, #24]
 8006c88:	60a3      	str	r3, [r4, #8]
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	071a      	lsls	r2, r3, #28
 8006c8e:	d52f      	bpl.n	8006cf0 <__swbuf_r+0x84>
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	b36b      	cbz	r3, 8006cf0 <__swbuf_r+0x84>
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	6820      	ldr	r0, [r4, #0]
 8006c98:	1ac0      	subs	r0, r0, r3
 8006c9a:	6963      	ldr	r3, [r4, #20]
 8006c9c:	b2f6      	uxtb	r6, r6
 8006c9e:	4283      	cmp	r3, r0
 8006ca0:	4637      	mov	r7, r6
 8006ca2:	dc04      	bgt.n	8006cae <__swbuf_r+0x42>
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 f93c 	bl	8006f24 <_fflush_r>
 8006cac:	bb30      	cbnz	r0, 8006cfc <__swbuf_r+0x90>
 8006cae:	68a3      	ldr	r3, [r4, #8]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	60a3      	str	r3, [r4, #8]
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	6022      	str	r2, [r4, #0]
 8006cba:	701e      	strb	r6, [r3, #0]
 8006cbc:	6963      	ldr	r3, [r4, #20]
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	4283      	cmp	r3, r0
 8006cc2:	d004      	beq.n	8006cce <__swbuf_r+0x62>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	07db      	lsls	r3, r3, #31
 8006cc8:	d506      	bpl.n	8006cd8 <__swbuf_r+0x6c>
 8006cca:	2e0a      	cmp	r6, #10
 8006ccc:	d104      	bne.n	8006cd8 <__swbuf_r+0x6c>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f000 f927 	bl	8006f24 <_fflush_r>
 8006cd6:	b988      	cbnz	r0, 8006cfc <__swbuf_r+0x90>
 8006cd8:	4638      	mov	r0, r7
 8006cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <__swbuf_r+0x9c>)
 8006cde:	429c      	cmp	r4, r3
 8006ce0:	d101      	bne.n	8006ce6 <__swbuf_r+0x7a>
 8006ce2:	68ac      	ldr	r4, [r5, #8]
 8006ce4:	e7cf      	b.n	8006c86 <__swbuf_r+0x1a>
 8006ce6:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <__swbuf_r+0xa0>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	bf08      	it	eq
 8006cec:	68ec      	ldreq	r4, [r5, #12]
 8006cee:	e7ca      	b.n	8006c86 <__swbuf_r+0x1a>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 f81a 	bl	8006d2c <__swsetup_r>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d0cb      	beq.n	8006c94 <__swbuf_r+0x28>
 8006cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8006d00:	e7ea      	b.n	8006cd8 <__swbuf_r+0x6c>
 8006d02:	bf00      	nop
 8006d04:	0800940c 	.word	0x0800940c
 8006d08:	0800942c 	.word	0x0800942c
 8006d0c:	080093ec 	.word	0x080093ec

08006d10 <__ascii_wctomb>:
 8006d10:	b149      	cbz	r1, 8006d26 <__ascii_wctomb+0x16>
 8006d12:	2aff      	cmp	r2, #255	; 0xff
 8006d14:	bf85      	ittet	hi
 8006d16:	238a      	movhi	r3, #138	; 0x8a
 8006d18:	6003      	strhi	r3, [r0, #0]
 8006d1a:	700a      	strbls	r2, [r1, #0]
 8006d1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d20:	bf98      	it	ls
 8006d22:	2001      	movls	r0, #1
 8006d24:	4770      	bx	lr
 8006d26:	4608      	mov	r0, r1
 8006d28:	4770      	bx	lr
	...

08006d2c <__swsetup_r>:
 8006d2c:	4b32      	ldr	r3, [pc, #200]	; (8006df8 <__swsetup_r+0xcc>)
 8006d2e:	b570      	push	{r4, r5, r6, lr}
 8006d30:	681d      	ldr	r5, [r3, #0]
 8006d32:	4606      	mov	r6, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	b125      	cbz	r5, 8006d42 <__swsetup_r+0x16>
 8006d38:	69ab      	ldr	r3, [r5, #24]
 8006d3a:	b913      	cbnz	r3, 8006d42 <__swsetup_r+0x16>
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f000 f985 	bl	800704c <__sinit>
 8006d42:	4b2e      	ldr	r3, [pc, #184]	; (8006dfc <__swsetup_r+0xd0>)
 8006d44:	429c      	cmp	r4, r3
 8006d46:	d10f      	bne.n	8006d68 <__swsetup_r+0x3c>
 8006d48:	686c      	ldr	r4, [r5, #4]
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d50:	0719      	lsls	r1, r3, #28
 8006d52:	d42c      	bmi.n	8006dae <__swsetup_r+0x82>
 8006d54:	06dd      	lsls	r5, r3, #27
 8006d56:	d411      	bmi.n	8006d7c <__swsetup_r+0x50>
 8006d58:	2309      	movs	r3, #9
 8006d5a:	6033      	str	r3, [r6, #0]
 8006d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	e03e      	b.n	8006de6 <__swsetup_r+0xba>
 8006d68:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <__swsetup_r+0xd4>)
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	d101      	bne.n	8006d72 <__swsetup_r+0x46>
 8006d6e:	68ac      	ldr	r4, [r5, #8]
 8006d70:	e7eb      	b.n	8006d4a <__swsetup_r+0x1e>
 8006d72:	4b24      	ldr	r3, [pc, #144]	; (8006e04 <__swsetup_r+0xd8>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	bf08      	it	eq
 8006d78:	68ec      	ldreq	r4, [r5, #12]
 8006d7a:	e7e6      	b.n	8006d4a <__swsetup_r+0x1e>
 8006d7c:	0758      	lsls	r0, r3, #29
 8006d7e:	d512      	bpl.n	8006da6 <__swsetup_r+0x7a>
 8006d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d82:	b141      	cbz	r1, 8006d96 <__swsetup_r+0x6a>
 8006d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	d002      	beq.n	8006d92 <__swsetup_r+0x66>
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7ff fb31 	bl	80063f4 <_free_r>
 8006d92:	2300      	movs	r3, #0
 8006d94:	6363      	str	r3, [r4, #52]	; 0x34
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6063      	str	r3, [r4, #4]
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	f043 0308 	orr.w	r3, r3, #8
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	b94b      	cbnz	r3, 8006dc6 <__swsetup_r+0x9a>
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dbc:	d003      	beq.n	8006dc6 <__swsetup_r+0x9a>
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f000 fa09 	bl	80071d8 <__smakebuf_r>
 8006dc6:	89a0      	ldrh	r0, [r4, #12]
 8006dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dcc:	f010 0301 	ands.w	r3, r0, #1
 8006dd0:	d00a      	beq.n	8006de8 <__swsetup_r+0xbc>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60a3      	str	r3, [r4, #8]
 8006dd6:	6963      	ldr	r3, [r4, #20]
 8006dd8:	425b      	negs	r3, r3
 8006dda:	61a3      	str	r3, [r4, #24]
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	b943      	cbnz	r3, 8006df2 <__swsetup_r+0xc6>
 8006de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006de4:	d1ba      	bne.n	8006d5c <__swsetup_r+0x30>
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	0781      	lsls	r1, r0, #30
 8006dea:	bf58      	it	pl
 8006dec:	6963      	ldrpl	r3, [r4, #20]
 8006dee:	60a3      	str	r3, [r4, #8]
 8006df0:	e7f4      	b.n	8006ddc <__swsetup_r+0xb0>
 8006df2:	2000      	movs	r0, #0
 8006df4:	e7f7      	b.n	8006de6 <__swsetup_r+0xba>
 8006df6:	bf00      	nop
 8006df8:	20000010 	.word	0x20000010
 8006dfc:	0800940c 	.word	0x0800940c
 8006e00:	0800942c 	.word	0x0800942c
 8006e04:	080093ec 	.word	0x080093ec

08006e08 <abort>:
 8006e08:	b508      	push	{r3, lr}
 8006e0a:	2006      	movs	r0, #6
 8006e0c:	f000 fa54 	bl	80072b8 <raise>
 8006e10:	2001      	movs	r0, #1
 8006e12:	f001 fe79 	bl	8008b08 <_exit>
	...

08006e18 <__sflush_r>:
 8006e18:	898a      	ldrh	r2, [r1, #12]
 8006e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1e:	4605      	mov	r5, r0
 8006e20:	0710      	lsls	r0, r2, #28
 8006e22:	460c      	mov	r4, r1
 8006e24:	d458      	bmi.n	8006ed8 <__sflush_r+0xc0>
 8006e26:	684b      	ldr	r3, [r1, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dc05      	bgt.n	8006e38 <__sflush_r+0x20>
 8006e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	dc02      	bgt.n	8006e38 <__sflush_r+0x20>
 8006e32:	2000      	movs	r0, #0
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e3a:	2e00      	cmp	r6, #0
 8006e3c:	d0f9      	beq.n	8006e32 <__sflush_r+0x1a>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e44:	682f      	ldr	r7, [r5, #0]
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	d032      	beq.n	8006eb0 <__sflush_r+0x98>
 8006e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	075a      	lsls	r2, r3, #29
 8006e50:	d505      	bpl.n	8006e5e <__sflush_r+0x46>
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	1ac0      	subs	r0, r0, r3
 8006e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e58:	b10b      	cbz	r3, 8006e5e <__sflush_r+0x46>
 8006e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e5c:	1ac0      	subs	r0, r0, r3
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4602      	mov	r2, r0
 8006e62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e64:	6a21      	ldr	r1, [r4, #32]
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b0      	blx	r6
 8006e6a:	1c43      	adds	r3, r0, #1
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	d106      	bne.n	8006e7e <__sflush_r+0x66>
 8006e70:	6829      	ldr	r1, [r5, #0]
 8006e72:	291d      	cmp	r1, #29
 8006e74:	d82c      	bhi.n	8006ed0 <__sflush_r+0xb8>
 8006e76:	4a2a      	ldr	r2, [pc, #168]	; (8006f20 <__sflush_r+0x108>)
 8006e78:	40ca      	lsrs	r2, r1
 8006e7a:	07d6      	lsls	r6, r2, #31
 8006e7c:	d528      	bpl.n	8006ed0 <__sflush_r+0xb8>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	6062      	str	r2, [r4, #4]
 8006e82:	04d9      	lsls	r1, r3, #19
 8006e84:	6922      	ldr	r2, [r4, #16]
 8006e86:	6022      	str	r2, [r4, #0]
 8006e88:	d504      	bpl.n	8006e94 <__sflush_r+0x7c>
 8006e8a:	1c42      	adds	r2, r0, #1
 8006e8c:	d101      	bne.n	8006e92 <__sflush_r+0x7a>
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	b903      	cbnz	r3, 8006e94 <__sflush_r+0x7c>
 8006e92:	6560      	str	r0, [r4, #84]	; 0x54
 8006e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e96:	602f      	str	r7, [r5, #0]
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	d0ca      	beq.n	8006e32 <__sflush_r+0x1a>
 8006e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	d002      	beq.n	8006eaa <__sflush_r+0x92>
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f7ff faa5 	bl	80063f4 <_free_r>
 8006eaa:	2000      	movs	r0, #0
 8006eac:	6360      	str	r0, [r4, #52]	; 0x34
 8006eae:	e7c1      	b.n	8006e34 <__sflush_r+0x1c>
 8006eb0:	6a21      	ldr	r1, [r4, #32]
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b0      	blx	r6
 8006eb8:	1c41      	adds	r1, r0, #1
 8006eba:	d1c7      	bne.n	8006e4c <__sflush_r+0x34>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0c4      	beq.n	8006e4c <__sflush_r+0x34>
 8006ec2:	2b1d      	cmp	r3, #29
 8006ec4:	d001      	beq.n	8006eca <__sflush_r+0xb2>
 8006ec6:	2b16      	cmp	r3, #22
 8006ec8:	d101      	bne.n	8006ece <__sflush_r+0xb6>
 8006eca:	602f      	str	r7, [r5, #0]
 8006ecc:	e7b1      	b.n	8006e32 <__sflush_r+0x1a>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	e7ad      	b.n	8006e34 <__sflush_r+0x1c>
 8006ed8:	690f      	ldr	r7, [r1, #16]
 8006eda:	2f00      	cmp	r7, #0
 8006edc:	d0a9      	beq.n	8006e32 <__sflush_r+0x1a>
 8006ede:	0793      	lsls	r3, r2, #30
 8006ee0:	680e      	ldr	r6, [r1, #0]
 8006ee2:	bf08      	it	eq
 8006ee4:	694b      	ldreq	r3, [r1, #20]
 8006ee6:	600f      	str	r7, [r1, #0]
 8006ee8:	bf18      	it	ne
 8006eea:	2300      	movne	r3, #0
 8006eec:	eba6 0807 	sub.w	r8, r6, r7
 8006ef0:	608b      	str	r3, [r1, #8]
 8006ef2:	f1b8 0f00 	cmp.w	r8, #0
 8006ef6:	dd9c      	ble.n	8006e32 <__sflush_r+0x1a>
 8006ef8:	6a21      	ldr	r1, [r4, #32]
 8006efa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006efc:	4643      	mov	r3, r8
 8006efe:	463a      	mov	r2, r7
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b0      	blx	r6
 8006f04:	2800      	cmp	r0, #0
 8006f06:	dc06      	bgt.n	8006f16 <__sflush_r+0xfe>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f0e:	81a3      	strh	r3, [r4, #12]
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	e78e      	b.n	8006e34 <__sflush_r+0x1c>
 8006f16:	4407      	add	r7, r0
 8006f18:	eba8 0800 	sub.w	r8, r8, r0
 8006f1c:	e7e9      	b.n	8006ef2 <__sflush_r+0xda>
 8006f1e:	bf00      	nop
 8006f20:	20400001 	.word	0x20400001

08006f24 <_fflush_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	690b      	ldr	r3, [r1, #16]
 8006f28:	4605      	mov	r5, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	b913      	cbnz	r3, 8006f34 <_fflush_r+0x10>
 8006f2e:	2500      	movs	r5, #0
 8006f30:	4628      	mov	r0, r5
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
 8006f34:	b118      	cbz	r0, 8006f3e <_fflush_r+0x1a>
 8006f36:	6983      	ldr	r3, [r0, #24]
 8006f38:	b90b      	cbnz	r3, 8006f3e <_fflush_r+0x1a>
 8006f3a:	f000 f887 	bl	800704c <__sinit>
 8006f3e:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <_fflush_r+0x6c>)
 8006f40:	429c      	cmp	r4, r3
 8006f42:	d11b      	bne.n	8006f7c <_fflush_r+0x58>
 8006f44:	686c      	ldr	r4, [r5, #4]
 8006f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0ef      	beq.n	8006f2e <_fflush_r+0xa>
 8006f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f50:	07d0      	lsls	r0, r2, #31
 8006f52:	d404      	bmi.n	8006f5e <_fflush_r+0x3a>
 8006f54:	0599      	lsls	r1, r3, #22
 8006f56:	d402      	bmi.n	8006f5e <_fflush_r+0x3a>
 8006f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f5a:	f000 f915 	bl	8007188 <__retarget_lock_acquire_recursive>
 8006f5e:	4628      	mov	r0, r5
 8006f60:	4621      	mov	r1, r4
 8006f62:	f7ff ff59 	bl	8006e18 <__sflush_r>
 8006f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f68:	07da      	lsls	r2, r3, #31
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	d4e0      	bmi.n	8006f30 <_fflush_r+0xc>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	059b      	lsls	r3, r3, #22
 8006f72:	d4dd      	bmi.n	8006f30 <_fflush_r+0xc>
 8006f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f76:	f000 f908 	bl	800718a <__retarget_lock_release_recursive>
 8006f7a:	e7d9      	b.n	8006f30 <_fflush_r+0xc>
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <_fflush_r+0x70>)
 8006f7e:	429c      	cmp	r4, r3
 8006f80:	d101      	bne.n	8006f86 <_fflush_r+0x62>
 8006f82:	68ac      	ldr	r4, [r5, #8]
 8006f84:	e7df      	b.n	8006f46 <_fflush_r+0x22>
 8006f86:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <_fflush_r+0x74>)
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	bf08      	it	eq
 8006f8c:	68ec      	ldreq	r4, [r5, #12]
 8006f8e:	e7da      	b.n	8006f46 <_fflush_r+0x22>
 8006f90:	0800940c 	.word	0x0800940c
 8006f94:	0800942c 	.word	0x0800942c
 8006f98:	080093ec 	.word	0x080093ec

08006f9c <std>:
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006faa:	6083      	str	r3, [r0, #8]
 8006fac:	8181      	strh	r1, [r0, #12]
 8006fae:	6643      	str	r3, [r0, #100]	; 0x64
 8006fb0:	81c2      	strh	r2, [r0, #14]
 8006fb2:	6183      	str	r3, [r0, #24]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	305c      	adds	r0, #92	; 0x5c
 8006fba:	f7fd fb5b 	bl	8004674 <memset>
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <std+0x38>)
 8006fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8006fc2:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <std+0x3c>)
 8006fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <std+0x40>)
 8006fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <std+0x44>)
 8006fcc:	6224      	str	r4, [r4, #32]
 8006fce:	6323      	str	r3, [r4, #48]	; 0x30
 8006fd0:	bd10      	pop	{r4, pc}
 8006fd2:	bf00      	nop
 8006fd4:	080072f1 	.word	0x080072f1
 8006fd8:	08007313 	.word	0x08007313
 8006fdc:	0800734b 	.word	0x0800734b
 8006fe0:	0800736f 	.word	0x0800736f

08006fe4 <_cleanup_r>:
 8006fe4:	4901      	ldr	r1, [pc, #4]	; (8006fec <_cleanup_r+0x8>)
 8006fe6:	f000 b8af 	b.w	8007148 <_fwalk_reent>
 8006fea:	bf00      	nop
 8006fec:	08006f25 	.word	0x08006f25

08006ff0 <__sfmoreglue>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	2268      	movs	r2, #104	; 0x68
 8006ff4:	1e4d      	subs	r5, r1, #1
 8006ff6:	4355      	muls	r5, r2
 8006ff8:	460e      	mov	r6, r1
 8006ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ffe:	f7ff fa65 	bl	80064cc <_malloc_r>
 8007002:	4604      	mov	r4, r0
 8007004:	b140      	cbz	r0, 8007018 <__sfmoreglue+0x28>
 8007006:	2100      	movs	r1, #0
 8007008:	e9c0 1600 	strd	r1, r6, [r0]
 800700c:	300c      	adds	r0, #12
 800700e:	60a0      	str	r0, [r4, #8]
 8007010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007014:	f7fd fb2e 	bl	8004674 <memset>
 8007018:	4620      	mov	r0, r4
 800701a:	bd70      	pop	{r4, r5, r6, pc}

0800701c <__sfp_lock_acquire>:
 800701c:	4801      	ldr	r0, [pc, #4]	; (8007024 <__sfp_lock_acquire+0x8>)
 800701e:	f000 b8b3 	b.w	8007188 <__retarget_lock_acquire_recursive>
 8007022:	bf00      	nop
 8007024:	20000241 	.word	0x20000241

08007028 <__sfp_lock_release>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__sfp_lock_release+0x8>)
 800702a:	f000 b8ae 	b.w	800718a <__retarget_lock_release_recursive>
 800702e:	bf00      	nop
 8007030:	20000241 	.word	0x20000241

08007034 <__sinit_lock_acquire>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__sinit_lock_acquire+0x8>)
 8007036:	f000 b8a7 	b.w	8007188 <__retarget_lock_acquire_recursive>
 800703a:	bf00      	nop
 800703c:	20000242 	.word	0x20000242

08007040 <__sinit_lock_release>:
 8007040:	4801      	ldr	r0, [pc, #4]	; (8007048 <__sinit_lock_release+0x8>)
 8007042:	f000 b8a2 	b.w	800718a <__retarget_lock_release_recursive>
 8007046:	bf00      	nop
 8007048:	20000242 	.word	0x20000242

0800704c <__sinit>:
 800704c:	b510      	push	{r4, lr}
 800704e:	4604      	mov	r4, r0
 8007050:	f7ff fff0 	bl	8007034 <__sinit_lock_acquire>
 8007054:	69a3      	ldr	r3, [r4, #24]
 8007056:	b11b      	cbz	r3, 8007060 <__sinit+0x14>
 8007058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800705c:	f7ff bff0 	b.w	8007040 <__sinit_lock_release>
 8007060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007064:	6523      	str	r3, [r4, #80]	; 0x50
 8007066:	4b13      	ldr	r3, [pc, #76]	; (80070b4 <__sinit+0x68>)
 8007068:	4a13      	ldr	r2, [pc, #76]	; (80070b8 <__sinit+0x6c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	62a2      	str	r2, [r4, #40]	; 0x28
 800706e:	42a3      	cmp	r3, r4
 8007070:	bf04      	itt	eq
 8007072:	2301      	moveq	r3, #1
 8007074:	61a3      	streq	r3, [r4, #24]
 8007076:	4620      	mov	r0, r4
 8007078:	f000 f820 	bl	80070bc <__sfp>
 800707c:	6060      	str	r0, [r4, #4]
 800707e:	4620      	mov	r0, r4
 8007080:	f000 f81c 	bl	80070bc <__sfp>
 8007084:	60a0      	str	r0, [r4, #8]
 8007086:	4620      	mov	r0, r4
 8007088:	f000 f818 	bl	80070bc <__sfp>
 800708c:	2200      	movs	r2, #0
 800708e:	60e0      	str	r0, [r4, #12]
 8007090:	2104      	movs	r1, #4
 8007092:	6860      	ldr	r0, [r4, #4]
 8007094:	f7ff ff82 	bl	8006f9c <std>
 8007098:	68a0      	ldr	r0, [r4, #8]
 800709a:	2201      	movs	r2, #1
 800709c:	2109      	movs	r1, #9
 800709e:	f7ff ff7d 	bl	8006f9c <std>
 80070a2:	68e0      	ldr	r0, [r4, #12]
 80070a4:	2202      	movs	r2, #2
 80070a6:	2112      	movs	r1, #18
 80070a8:	f7ff ff78 	bl	8006f9c <std>
 80070ac:	2301      	movs	r3, #1
 80070ae:	61a3      	str	r3, [r4, #24]
 80070b0:	e7d2      	b.n	8007058 <__sinit+0xc>
 80070b2:	bf00      	nop
 80070b4:	08009074 	.word	0x08009074
 80070b8:	08006fe5 	.word	0x08006fe5

080070bc <__sfp>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	4607      	mov	r7, r0
 80070c0:	f7ff ffac 	bl	800701c <__sfp_lock_acquire>
 80070c4:	4b1e      	ldr	r3, [pc, #120]	; (8007140 <__sfp+0x84>)
 80070c6:	681e      	ldr	r6, [r3, #0]
 80070c8:	69b3      	ldr	r3, [r6, #24]
 80070ca:	b913      	cbnz	r3, 80070d2 <__sfp+0x16>
 80070cc:	4630      	mov	r0, r6
 80070ce:	f7ff ffbd 	bl	800704c <__sinit>
 80070d2:	3648      	adds	r6, #72	; 0x48
 80070d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070d8:	3b01      	subs	r3, #1
 80070da:	d503      	bpl.n	80070e4 <__sfp+0x28>
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	b30b      	cbz	r3, 8007124 <__sfp+0x68>
 80070e0:	6836      	ldr	r6, [r6, #0]
 80070e2:	e7f7      	b.n	80070d4 <__sfp+0x18>
 80070e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070e8:	b9d5      	cbnz	r5, 8007120 <__sfp+0x64>
 80070ea:	4b16      	ldr	r3, [pc, #88]	; (8007144 <__sfp+0x88>)
 80070ec:	60e3      	str	r3, [r4, #12]
 80070ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070f2:	6665      	str	r5, [r4, #100]	; 0x64
 80070f4:	f000 f847 	bl	8007186 <__retarget_lock_init_recursive>
 80070f8:	f7ff ff96 	bl	8007028 <__sfp_lock_release>
 80070fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007104:	6025      	str	r5, [r4, #0]
 8007106:	61a5      	str	r5, [r4, #24]
 8007108:	2208      	movs	r2, #8
 800710a:	4629      	mov	r1, r5
 800710c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007110:	f7fd fab0 	bl	8004674 <memset>
 8007114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800711c:	4620      	mov	r0, r4
 800711e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007120:	3468      	adds	r4, #104	; 0x68
 8007122:	e7d9      	b.n	80070d8 <__sfp+0x1c>
 8007124:	2104      	movs	r1, #4
 8007126:	4638      	mov	r0, r7
 8007128:	f7ff ff62 	bl	8006ff0 <__sfmoreglue>
 800712c:	4604      	mov	r4, r0
 800712e:	6030      	str	r0, [r6, #0]
 8007130:	2800      	cmp	r0, #0
 8007132:	d1d5      	bne.n	80070e0 <__sfp+0x24>
 8007134:	f7ff ff78 	bl	8007028 <__sfp_lock_release>
 8007138:	230c      	movs	r3, #12
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	e7ee      	b.n	800711c <__sfp+0x60>
 800713e:	bf00      	nop
 8007140:	08009074 	.word	0x08009074
 8007144:	ffff0001 	.word	0xffff0001

08007148 <_fwalk_reent>:
 8007148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800714c:	4606      	mov	r6, r0
 800714e:	4688      	mov	r8, r1
 8007150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007154:	2700      	movs	r7, #0
 8007156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800715a:	f1b9 0901 	subs.w	r9, r9, #1
 800715e:	d505      	bpl.n	800716c <_fwalk_reent+0x24>
 8007160:	6824      	ldr	r4, [r4, #0]
 8007162:	2c00      	cmp	r4, #0
 8007164:	d1f7      	bne.n	8007156 <_fwalk_reent+0xe>
 8007166:	4638      	mov	r0, r7
 8007168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716c:	89ab      	ldrh	r3, [r5, #12]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d907      	bls.n	8007182 <_fwalk_reent+0x3a>
 8007172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007176:	3301      	adds	r3, #1
 8007178:	d003      	beq.n	8007182 <_fwalk_reent+0x3a>
 800717a:	4629      	mov	r1, r5
 800717c:	4630      	mov	r0, r6
 800717e:	47c0      	blx	r8
 8007180:	4307      	orrs	r7, r0
 8007182:	3568      	adds	r5, #104	; 0x68
 8007184:	e7e9      	b.n	800715a <_fwalk_reent+0x12>

08007186 <__retarget_lock_init_recursive>:
 8007186:	4770      	bx	lr

08007188 <__retarget_lock_acquire_recursive>:
 8007188:	4770      	bx	lr

0800718a <__retarget_lock_release_recursive>:
 800718a:	4770      	bx	lr

0800718c <__swhatbuf_r>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	460e      	mov	r6, r1
 8007190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007194:	2900      	cmp	r1, #0
 8007196:	b096      	sub	sp, #88	; 0x58
 8007198:	4614      	mov	r4, r2
 800719a:	461d      	mov	r5, r3
 800719c:	da08      	bge.n	80071b0 <__swhatbuf_r+0x24>
 800719e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	602a      	str	r2, [r5, #0]
 80071a6:	061a      	lsls	r2, r3, #24
 80071a8:	d410      	bmi.n	80071cc <__swhatbuf_r+0x40>
 80071aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ae:	e00e      	b.n	80071ce <__swhatbuf_r+0x42>
 80071b0:	466a      	mov	r2, sp
 80071b2:	f000 f903 	bl	80073bc <_fstat_r>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	dbf1      	blt.n	800719e <__swhatbuf_r+0x12>
 80071ba:	9a01      	ldr	r2, [sp, #4]
 80071bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071c4:	425a      	negs	r2, r3
 80071c6:	415a      	adcs	r2, r3
 80071c8:	602a      	str	r2, [r5, #0]
 80071ca:	e7ee      	b.n	80071aa <__swhatbuf_r+0x1e>
 80071cc:	2340      	movs	r3, #64	; 0x40
 80071ce:	2000      	movs	r0, #0
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	b016      	add	sp, #88	; 0x58
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080071d8 <__smakebuf_r>:
 80071d8:	898b      	ldrh	r3, [r1, #12]
 80071da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071dc:	079d      	lsls	r5, r3, #30
 80071de:	4606      	mov	r6, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	d507      	bpl.n	80071f4 <__smakebuf_r+0x1c>
 80071e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	2301      	movs	r3, #1
 80071ee:	6163      	str	r3, [r4, #20]
 80071f0:	b002      	add	sp, #8
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	ab01      	add	r3, sp, #4
 80071f6:	466a      	mov	r2, sp
 80071f8:	f7ff ffc8 	bl	800718c <__swhatbuf_r>
 80071fc:	9900      	ldr	r1, [sp, #0]
 80071fe:	4605      	mov	r5, r0
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff f963 	bl	80064cc <_malloc_r>
 8007206:	b948      	cbnz	r0, 800721c <__smakebuf_r+0x44>
 8007208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720c:	059a      	lsls	r2, r3, #22
 800720e:	d4ef      	bmi.n	80071f0 <__smakebuf_r+0x18>
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	f043 0302 	orr.w	r3, r3, #2
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	e7e3      	b.n	80071e4 <__smakebuf_r+0xc>
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <__smakebuf_r+0x7c>)
 800721e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	6020      	str	r0, [r4, #0]
 8007224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	9b00      	ldr	r3, [sp, #0]
 800722c:	6163      	str	r3, [r4, #20]
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	6120      	str	r0, [r4, #16]
 8007232:	b15b      	cbz	r3, 800724c <__smakebuf_r+0x74>
 8007234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007238:	4630      	mov	r0, r6
 800723a:	f000 f8d1 	bl	80073e0 <_isatty_r>
 800723e:	b128      	cbz	r0, 800724c <__smakebuf_r+0x74>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	f023 0303 	bic.w	r3, r3, #3
 8007246:	f043 0301 	orr.w	r3, r3, #1
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	89a0      	ldrh	r0, [r4, #12]
 800724e:	4305      	orrs	r5, r0
 8007250:	81a5      	strh	r5, [r4, #12]
 8007252:	e7cd      	b.n	80071f0 <__smakebuf_r+0x18>
 8007254:	08006fe5 	.word	0x08006fe5

08007258 <_malloc_usable_size_r>:
 8007258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800725c:	1f18      	subs	r0, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	bfbc      	itt	lt
 8007262:	580b      	ldrlt	r3, [r1, r0]
 8007264:	18c0      	addlt	r0, r0, r3
 8007266:	4770      	bx	lr

08007268 <_raise_r>:
 8007268:	291f      	cmp	r1, #31
 800726a:	b538      	push	{r3, r4, r5, lr}
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
 8007270:	d904      	bls.n	800727c <_raise_r+0x14>
 8007272:	2316      	movs	r3, #22
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	f04f 30ff 	mov.w	r0, #4294967295
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800727e:	b112      	cbz	r2, 8007286 <_raise_r+0x1e>
 8007280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007284:	b94b      	cbnz	r3, 800729a <_raise_r+0x32>
 8007286:	4620      	mov	r0, r4
 8007288:	f000 f830 	bl	80072ec <_getpid_r>
 800728c:	462a      	mov	r2, r5
 800728e:	4601      	mov	r1, r0
 8007290:	4620      	mov	r0, r4
 8007292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007296:	f000 b817 	b.w	80072c8 <_kill_r>
 800729a:	2b01      	cmp	r3, #1
 800729c:	d00a      	beq.n	80072b4 <_raise_r+0x4c>
 800729e:	1c59      	adds	r1, r3, #1
 80072a0:	d103      	bne.n	80072aa <_raise_r+0x42>
 80072a2:	2316      	movs	r3, #22
 80072a4:	6003      	str	r3, [r0, #0]
 80072a6:	2001      	movs	r0, #1
 80072a8:	e7e7      	b.n	800727a <_raise_r+0x12>
 80072aa:	2400      	movs	r4, #0
 80072ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072b0:	4628      	mov	r0, r5
 80072b2:	4798      	blx	r3
 80072b4:	2000      	movs	r0, #0
 80072b6:	e7e0      	b.n	800727a <_raise_r+0x12>

080072b8 <raise>:
 80072b8:	4b02      	ldr	r3, [pc, #8]	; (80072c4 <raise+0xc>)
 80072ba:	4601      	mov	r1, r0
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f7ff bfd3 	b.w	8007268 <_raise_r>
 80072c2:	bf00      	nop
 80072c4:	20000010 	.word	0x20000010

080072c8 <_kill_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4d07      	ldr	r5, [pc, #28]	; (80072e8 <_kill_r+0x20>)
 80072cc:	2300      	movs	r3, #0
 80072ce:	4604      	mov	r4, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	4611      	mov	r1, r2
 80072d4:	602b      	str	r3, [r5, #0]
 80072d6:	f001 fbe9 	bl	8008aac <_kill>
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	d102      	bne.n	80072e4 <_kill_r+0x1c>
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	b103      	cbz	r3, 80072e4 <_kill_r+0x1c>
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
 80072e6:	bf00      	nop
 80072e8:	2000023c 	.word	0x2000023c

080072ec <_getpid_r>:
 80072ec:	f001 bbce 	b.w	8008a8c <_getpid>

080072f0 <__sread>:
 80072f0:	b510      	push	{r4, lr}
 80072f2:	460c      	mov	r4, r1
 80072f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f8:	f000 f894 	bl	8007424 <_read_r>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	bfab      	itete	ge
 8007300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007302:	89a3      	ldrhlt	r3, [r4, #12]
 8007304:	181b      	addge	r3, r3, r0
 8007306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800730a:	bfac      	ite	ge
 800730c:	6563      	strge	r3, [r4, #84]	; 0x54
 800730e:	81a3      	strhlt	r3, [r4, #12]
 8007310:	bd10      	pop	{r4, pc}

08007312 <__swrite>:
 8007312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007316:	461f      	mov	r7, r3
 8007318:	898b      	ldrh	r3, [r1, #12]
 800731a:	05db      	lsls	r3, r3, #23
 800731c:	4605      	mov	r5, r0
 800731e:	460c      	mov	r4, r1
 8007320:	4616      	mov	r6, r2
 8007322:	d505      	bpl.n	8007330 <__swrite+0x1e>
 8007324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007328:	2302      	movs	r3, #2
 800732a:	2200      	movs	r2, #0
 800732c:	f000 f868 	bl	8007400 <_lseek_r>
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800733a:	81a3      	strh	r3, [r4, #12]
 800733c:	4632      	mov	r2, r6
 800733e:	463b      	mov	r3, r7
 8007340:	4628      	mov	r0, r5
 8007342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007346:	f000 b817 	b.w	8007378 <_write_r>

0800734a <__sseek>:
 800734a:	b510      	push	{r4, lr}
 800734c:	460c      	mov	r4, r1
 800734e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007352:	f000 f855 	bl	8007400 <_lseek_r>
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	bf15      	itete	ne
 800735c:	6560      	strne	r0, [r4, #84]	; 0x54
 800735e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007366:	81a3      	strheq	r3, [r4, #12]
 8007368:	bf18      	it	ne
 800736a:	81a3      	strhne	r3, [r4, #12]
 800736c:	bd10      	pop	{r4, pc}

0800736e <__sclose>:
 800736e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007372:	f000 b813 	b.w	800739c <_close_r>
	...

08007378 <_write_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d07      	ldr	r5, [pc, #28]	; (8007398 <_write_r+0x20>)
 800737c:	4604      	mov	r4, r0
 800737e:	4608      	mov	r0, r1
 8007380:	4611      	mov	r1, r2
 8007382:	2200      	movs	r2, #0
 8007384:	602a      	str	r2, [r5, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	f001 fbb6 	bl	8008af8 <_write>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_write_r+0x1e>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	b103      	cbz	r3, 8007396 <_write_r+0x1e>
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	2000023c 	.word	0x2000023c

0800739c <_close_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d06      	ldr	r5, [pc, #24]	; (80073b8 <_close_r+0x1c>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	f001 fb60 	bl	8008a6c <_close>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_close_r+0x1a>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_close_r+0x1a>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	2000023c 	.word	0x2000023c

080073bc <_fstat_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d07      	ldr	r5, [pc, #28]	; (80073dc <_fstat_r+0x20>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	4611      	mov	r1, r2
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	f001 fb57 	bl	8008a7c <_fstat>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	d102      	bne.n	80073d8 <_fstat_r+0x1c>
 80073d2:	682b      	ldr	r3, [r5, #0]
 80073d4:	b103      	cbz	r3, 80073d8 <_fstat_r+0x1c>
 80073d6:	6023      	str	r3, [r4, #0]
 80073d8:	bd38      	pop	{r3, r4, r5, pc}
 80073da:	bf00      	nop
 80073dc:	2000023c 	.word	0x2000023c

080073e0 <_isatty_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d06      	ldr	r5, [pc, #24]	; (80073fc <_isatty_r+0x1c>)
 80073e4:	2300      	movs	r3, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	f001 fb56 	bl	8008a9c <_isatty>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_isatty_r+0x1a>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_isatty_r+0x1a>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	2000023c 	.word	0x2000023c

08007400 <_lseek_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d07      	ldr	r5, [pc, #28]	; (8007420 <_lseek_r+0x20>)
 8007404:	4604      	mov	r4, r0
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	2200      	movs	r2, #0
 800740c:	602a      	str	r2, [r5, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	f001 fb54 	bl	8008abc <_lseek>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_lseek_r+0x1e>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_lseek_r+0x1e>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	2000023c 	.word	0x2000023c

08007424 <_read_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d07      	ldr	r5, [pc, #28]	; (8007444 <_read_r+0x20>)
 8007428:	4604      	mov	r4, r0
 800742a:	4608      	mov	r0, r1
 800742c:	4611      	mov	r1, r2
 800742e:	2200      	movs	r2, #0
 8007430:	602a      	str	r2, [r5, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f001 fb4a 	bl	8008acc <_read>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_read_r+0x1e>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_read_r+0x1e>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	2000023c 	.word	0x2000023c

08007448 <cos>:
 8007448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800744a:	ec53 2b10 	vmov	r2, r3, d0
 800744e:	4826      	ldr	r0, [pc, #152]	; (80074e8 <cos+0xa0>)
 8007450:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007454:	4281      	cmp	r1, r0
 8007456:	dc06      	bgt.n	8007466 <cos+0x1e>
 8007458:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80074e0 <cos+0x98>
 800745c:	b005      	add	sp, #20
 800745e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007462:	f000 bb79 	b.w	8007b58 <__kernel_cos>
 8007466:	4821      	ldr	r0, [pc, #132]	; (80074ec <cos+0xa4>)
 8007468:	4281      	cmp	r1, r0
 800746a:	dd09      	ble.n	8007480 <cos+0x38>
 800746c:	ee10 0a10 	vmov	r0, s0
 8007470:	4619      	mov	r1, r3
 8007472:	f7f8 ff11 	bl	8000298 <__aeabi_dsub>
 8007476:	ec41 0b10 	vmov	d0, r0, r1
 800747a:	b005      	add	sp, #20
 800747c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007480:	4668      	mov	r0, sp
 8007482:	f000 f95d 	bl	8007740 <__ieee754_rem_pio2>
 8007486:	f000 0003 	and.w	r0, r0, #3
 800748a:	2801      	cmp	r0, #1
 800748c:	d00b      	beq.n	80074a6 <cos+0x5e>
 800748e:	2802      	cmp	r0, #2
 8007490:	d016      	beq.n	80074c0 <cos+0x78>
 8007492:	b9e0      	cbnz	r0, 80074ce <cos+0x86>
 8007494:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007498:	ed9d 0b00 	vldr	d0, [sp]
 800749c:	f000 fb5c 	bl	8007b58 <__kernel_cos>
 80074a0:	ec51 0b10 	vmov	r0, r1, d0
 80074a4:	e7e7      	b.n	8007476 <cos+0x2e>
 80074a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074aa:	ed9d 0b00 	vldr	d0, [sp]
 80074ae:	f000 ff6b 	bl	8008388 <__kernel_sin>
 80074b2:	ec53 2b10 	vmov	r2, r3, d0
 80074b6:	ee10 0a10 	vmov	r0, s0
 80074ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80074be:	e7da      	b.n	8007476 <cos+0x2e>
 80074c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074c4:	ed9d 0b00 	vldr	d0, [sp]
 80074c8:	f000 fb46 	bl	8007b58 <__kernel_cos>
 80074cc:	e7f1      	b.n	80074b2 <cos+0x6a>
 80074ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074d2:	ed9d 0b00 	vldr	d0, [sp]
 80074d6:	2001      	movs	r0, #1
 80074d8:	f000 ff56 	bl	8008388 <__kernel_sin>
 80074dc:	e7e0      	b.n	80074a0 <cos+0x58>
 80074de:	bf00      	nop
	...
 80074e8:	3fe921fb 	.word	0x3fe921fb
 80074ec:	7fefffff 	.word	0x7fefffff

080074f0 <sin>:
 80074f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074f2:	ec53 2b10 	vmov	r2, r3, d0
 80074f6:	4828      	ldr	r0, [pc, #160]	; (8007598 <sin+0xa8>)
 80074f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074fc:	4281      	cmp	r1, r0
 80074fe:	dc07      	bgt.n	8007510 <sin+0x20>
 8007500:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007590 <sin+0xa0>
 8007504:	2000      	movs	r0, #0
 8007506:	b005      	add	sp, #20
 8007508:	f85d eb04 	ldr.w	lr, [sp], #4
 800750c:	f000 bf3c 	b.w	8008388 <__kernel_sin>
 8007510:	4822      	ldr	r0, [pc, #136]	; (800759c <sin+0xac>)
 8007512:	4281      	cmp	r1, r0
 8007514:	dd09      	ble.n	800752a <sin+0x3a>
 8007516:	ee10 0a10 	vmov	r0, s0
 800751a:	4619      	mov	r1, r3
 800751c:	f7f8 febc 	bl	8000298 <__aeabi_dsub>
 8007520:	ec41 0b10 	vmov	d0, r0, r1
 8007524:	b005      	add	sp, #20
 8007526:	f85d fb04 	ldr.w	pc, [sp], #4
 800752a:	4668      	mov	r0, sp
 800752c:	f000 f908 	bl	8007740 <__ieee754_rem_pio2>
 8007530:	f000 0003 	and.w	r0, r0, #3
 8007534:	2801      	cmp	r0, #1
 8007536:	d00c      	beq.n	8007552 <sin+0x62>
 8007538:	2802      	cmp	r0, #2
 800753a:	d011      	beq.n	8007560 <sin+0x70>
 800753c:	b9f0      	cbnz	r0, 800757c <sin+0x8c>
 800753e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007542:	ed9d 0b00 	vldr	d0, [sp]
 8007546:	2001      	movs	r0, #1
 8007548:	f000 ff1e 	bl	8008388 <__kernel_sin>
 800754c:	ec51 0b10 	vmov	r0, r1, d0
 8007550:	e7e6      	b.n	8007520 <sin+0x30>
 8007552:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007556:	ed9d 0b00 	vldr	d0, [sp]
 800755a:	f000 fafd 	bl	8007b58 <__kernel_cos>
 800755e:	e7f5      	b.n	800754c <sin+0x5c>
 8007560:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007564:	ed9d 0b00 	vldr	d0, [sp]
 8007568:	2001      	movs	r0, #1
 800756a:	f000 ff0d 	bl	8008388 <__kernel_sin>
 800756e:	ec53 2b10 	vmov	r2, r3, d0
 8007572:	ee10 0a10 	vmov	r0, s0
 8007576:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800757a:	e7d1      	b.n	8007520 <sin+0x30>
 800757c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007580:	ed9d 0b00 	vldr	d0, [sp]
 8007584:	f000 fae8 	bl	8007b58 <__kernel_cos>
 8007588:	e7f1      	b.n	800756e <sin+0x7e>
 800758a:	bf00      	nop
 800758c:	f3af 8000 	nop.w
	...
 8007598:	3fe921fb 	.word	0x3fe921fb
 800759c:	7fefffff 	.word	0x7fefffff

080075a0 <atan2>:
 80075a0:	f000 b802 	b.w	80075a8 <__ieee754_atan2>
 80075a4:	0000      	movs	r0, r0
	...

080075a8 <__ieee754_atan2>:
 80075a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ac:	ec57 6b11 	vmov	r6, r7, d1
 80075b0:	4273      	negs	r3, r6
 80075b2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007738 <__ieee754_atan2+0x190>
 80075b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80075ba:	4333      	orrs	r3, r6
 80075bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80075c0:	4573      	cmp	r3, lr
 80075c2:	ec51 0b10 	vmov	r0, r1, d0
 80075c6:	ee11 8a10 	vmov	r8, s2
 80075ca:	d80a      	bhi.n	80075e2 <__ieee754_atan2+0x3a>
 80075cc:	4244      	negs	r4, r0
 80075ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075d2:	4304      	orrs	r4, r0
 80075d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80075d8:	4574      	cmp	r4, lr
 80075da:	ee10 9a10 	vmov	r9, s0
 80075de:	468c      	mov	ip, r1
 80075e0:	d907      	bls.n	80075f2 <__ieee754_atan2+0x4a>
 80075e2:	4632      	mov	r2, r6
 80075e4:	463b      	mov	r3, r7
 80075e6:	f7f8 fe59 	bl	800029c <__adddf3>
 80075ea:	ec41 0b10 	vmov	d0, r0, r1
 80075ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80075f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075fa:	4334      	orrs	r4, r6
 80075fc:	d103      	bne.n	8007606 <__ieee754_atan2+0x5e>
 80075fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007602:	f000 bf81 	b.w	8008508 <atan>
 8007606:	17bc      	asrs	r4, r7, #30
 8007608:	f004 0402 	and.w	r4, r4, #2
 800760c:	ea53 0909 	orrs.w	r9, r3, r9
 8007610:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007614:	d107      	bne.n	8007626 <__ieee754_atan2+0x7e>
 8007616:	2c02      	cmp	r4, #2
 8007618:	d060      	beq.n	80076dc <__ieee754_atan2+0x134>
 800761a:	2c03      	cmp	r4, #3
 800761c:	d1e5      	bne.n	80075ea <__ieee754_atan2+0x42>
 800761e:	a142      	add	r1, pc, #264	; (adr r1, 8007728 <__ieee754_atan2+0x180>)
 8007620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007624:	e7e1      	b.n	80075ea <__ieee754_atan2+0x42>
 8007626:	ea52 0808 	orrs.w	r8, r2, r8
 800762a:	d106      	bne.n	800763a <__ieee754_atan2+0x92>
 800762c:	f1bc 0f00 	cmp.w	ip, #0
 8007630:	da5f      	bge.n	80076f2 <__ieee754_atan2+0x14a>
 8007632:	a13f      	add	r1, pc, #252	; (adr r1, 8007730 <__ieee754_atan2+0x188>)
 8007634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007638:	e7d7      	b.n	80075ea <__ieee754_atan2+0x42>
 800763a:	4572      	cmp	r2, lr
 800763c:	d10f      	bne.n	800765e <__ieee754_atan2+0xb6>
 800763e:	4293      	cmp	r3, r2
 8007640:	f104 34ff 	add.w	r4, r4, #4294967295
 8007644:	d107      	bne.n	8007656 <__ieee754_atan2+0xae>
 8007646:	2c02      	cmp	r4, #2
 8007648:	d84c      	bhi.n	80076e4 <__ieee754_atan2+0x13c>
 800764a:	4b35      	ldr	r3, [pc, #212]	; (8007720 <__ieee754_atan2+0x178>)
 800764c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007650:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007654:	e7c9      	b.n	80075ea <__ieee754_atan2+0x42>
 8007656:	2c02      	cmp	r4, #2
 8007658:	d848      	bhi.n	80076ec <__ieee754_atan2+0x144>
 800765a:	4b32      	ldr	r3, [pc, #200]	; (8007724 <__ieee754_atan2+0x17c>)
 800765c:	e7f6      	b.n	800764c <__ieee754_atan2+0xa4>
 800765e:	4573      	cmp	r3, lr
 8007660:	d0e4      	beq.n	800762c <__ieee754_atan2+0x84>
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007668:	ea4f 5223 	mov.w	r2, r3, asr #20
 800766c:	da1e      	bge.n	80076ac <__ieee754_atan2+0x104>
 800766e:	2f00      	cmp	r7, #0
 8007670:	da01      	bge.n	8007676 <__ieee754_atan2+0xce>
 8007672:	323c      	adds	r2, #60	; 0x3c
 8007674:	db1e      	blt.n	80076b4 <__ieee754_atan2+0x10c>
 8007676:	4632      	mov	r2, r6
 8007678:	463b      	mov	r3, r7
 800767a:	f7f9 f8ef 	bl	800085c <__aeabi_ddiv>
 800767e:	ec41 0b10 	vmov	d0, r0, r1
 8007682:	f001 f8e1 	bl	8008848 <fabs>
 8007686:	f000 ff3f 	bl	8008508 <atan>
 800768a:	ec51 0b10 	vmov	r0, r1, d0
 800768e:	2c01      	cmp	r4, #1
 8007690:	d013      	beq.n	80076ba <__ieee754_atan2+0x112>
 8007692:	2c02      	cmp	r4, #2
 8007694:	d015      	beq.n	80076c2 <__ieee754_atan2+0x11a>
 8007696:	2c00      	cmp	r4, #0
 8007698:	d0a7      	beq.n	80075ea <__ieee754_atan2+0x42>
 800769a:	a319      	add	r3, pc, #100	; (adr r3, 8007700 <__ieee754_atan2+0x158>)
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f7f8 fdfa 	bl	8000298 <__aeabi_dsub>
 80076a4:	a318      	add	r3, pc, #96	; (adr r3, 8007708 <__ieee754_atan2+0x160>)
 80076a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076aa:	e014      	b.n	80076d6 <__ieee754_atan2+0x12e>
 80076ac:	a118      	add	r1, pc, #96	; (adr r1, 8007710 <__ieee754_atan2+0x168>)
 80076ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076b2:	e7ec      	b.n	800768e <__ieee754_atan2+0xe6>
 80076b4:	2000      	movs	r0, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	e7e9      	b.n	800768e <__ieee754_atan2+0xe6>
 80076ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076be:	4619      	mov	r1, r3
 80076c0:	e793      	b.n	80075ea <__ieee754_atan2+0x42>
 80076c2:	a30f      	add	r3, pc, #60	; (adr r3, 8007700 <__ieee754_atan2+0x158>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	f7f8 fde6 	bl	8000298 <__aeabi_dsub>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	a10d      	add	r1, pc, #52	; (adr r1, 8007708 <__ieee754_atan2+0x160>)
 80076d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d6:	f7f8 fddf 	bl	8000298 <__aeabi_dsub>
 80076da:	e786      	b.n	80075ea <__ieee754_atan2+0x42>
 80076dc:	a10a      	add	r1, pc, #40	; (adr r1, 8007708 <__ieee754_atan2+0x160>)
 80076de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076e2:	e782      	b.n	80075ea <__ieee754_atan2+0x42>
 80076e4:	a10c      	add	r1, pc, #48	; (adr r1, 8007718 <__ieee754_atan2+0x170>)
 80076e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ea:	e77e      	b.n	80075ea <__ieee754_atan2+0x42>
 80076ec:	2000      	movs	r0, #0
 80076ee:	2100      	movs	r1, #0
 80076f0:	e77b      	b.n	80075ea <__ieee754_atan2+0x42>
 80076f2:	a107      	add	r1, pc, #28	; (adr r1, 8007710 <__ieee754_atan2+0x168>)
 80076f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f8:	e777      	b.n	80075ea <__ieee754_atan2+0x42>
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	33145c07 	.word	0x33145c07
 8007704:	3ca1a626 	.word	0x3ca1a626
 8007708:	54442d18 	.word	0x54442d18
 800770c:	400921fb 	.word	0x400921fb
 8007710:	54442d18 	.word	0x54442d18
 8007714:	3ff921fb 	.word	0x3ff921fb
 8007718:	54442d18 	.word	0x54442d18
 800771c:	3fe921fb 	.word	0x3fe921fb
 8007720:	08009450 	.word	0x08009450
 8007724:	08009468 	.word	0x08009468
 8007728:	54442d18 	.word	0x54442d18
 800772c:	c00921fb 	.word	0xc00921fb
 8007730:	54442d18 	.word	0x54442d18
 8007734:	bff921fb 	.word	0xbff921fb
 8007738:	7ff00000 	.word	0x7ff00000
 800773c:	00000000 	.word	0x00000000

08007740 <__ieee754_rem_pio2>:
 8007740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	ed2d 8b02 	vpush	{d8}
 8007748:	ec55 4b10 	vmov	r4, r5, d0
 800774c:	4bca      	ldr	r3, [pc, #808]	; (8007a78 <__ieee754_rem_pio2+0x338>)
 800774e:	b08b      	sub	sp, #44	; 0x2c
 8007750:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007754:	4598      	cmp	r8, r3
 8007756:	4682      	mov	sl, r0
 8007758:	9502      	str	r5, [sp, #8]
 800775a:	dc08      	bgt.n	800776e <__ieee754_rem_pio2+0x2e>
 800775c:	2200      	movs	r2, #0
 800775e:	2300      	movs	r3, #0
 8007760:	ed80 0b00 	vstr	d0, [r0]
 8007764:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007768:	f04f 0b00 	mov.w	fp, #0
 800776c:	e028      	b.n	80077c0 <__ieee754_rem_pio2+0x80>
 800776e:	4bc3      	ldr	r3, [pc, #780]	; (8007a7c <__ieee754_rem_pio2+0x33c>)
 8007770:	4598      	cmp	r8, r3
 8007772:	dc78      	bgt.n	8007866 <__ieee754_rem_pio2+0x126>
 8007774:	9b02      	ldr	r3, [sp, #8]
 8007776:	4ec2      	ldr	r6, [pc, #776]	; (8007a80 <__ieee754_rem_pio2+0x340>)
 8007778:	2b00      	cmp	r3, #0
 800777a:	ee10 0a10 	vmov	r0, s0
 800777e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007a40 <__ieee754_rem_pio2+0x300>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	4629      	mov	r1, r5
 8007786:	dd39      	ble.n	80077fc <__ieee754_rem_pio2+0xbc>
 8007788:	f7f8 fd86 	bl	8000298 <__aeabi_dsub>
 800778c:	45b0      	cmp	r8, r6
 800778e:	4604      	mov	r4, r0
 8007790:	460d      	mov	r5, r1
 8007792:	d01b      	beq.n	80077cc <__ieee754_rem_pio2+0x8c>
 8007794:	a3ac      	add	r3, pc, #688	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 fd7d 	bl	8000298 <__aeabi_dsub>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	e9ca 2300 	strd	r2, r3, [sl]
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f8 fd75 	bl	8000298 <__aeabi_dsub>
 80077ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f7f8 fd70 	bl	8000298 <__aeabi_dsub>
 80077b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80077bc:	f04f 0b01 	mov.w	fp, #1
 80077c0:	4658      	mov	r0, fp
 80077c2:	b00b      	add	sp, #44	; 0x2c
 80077c4:	ecbd 8b02 	vpop	{d8}
 80077c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007a50 <__ieee754_rem_pio2+0x310>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd61 	bl	8000298 <__aeabi_dsub>
 80077d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	f7f8 fd5a 	bl	8000298 <__aeabi_dsub>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	e9ca 2300 	strd	r2, r3, [sl]
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fd52 	bl	8000298 <__aeabi_dsub>
 80077f4:	a398      	add	r3, pc, #608	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	e7db      	b.n	80077b4 <__ieee754_rem_pio2+0x74>
 80077fc:	f7f8 fd4e 	bl	800029c <__adddf3>
 8007800:	45b0      	cmp	r8, r6
 8007802:	4604      	mov	r4, r0
 8007804:	460d      	mov	r5, r1
 8007806:	d016      	beq.n	8007836 <__ieee754_rem_pio2+0xf6>
 8007808:	a38f      	add	r3, pc, #572	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fd45 	bl	800029c <__adddf3>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	e9ca 2300 	strd	r2, r3, [sl]
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f8 fd3b 	bl	8000298 <__aeabi_dsub>
 8007822:	a389      	add	r3, pc, #548	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fd38 	bl	800029c <__adddf3>
 800782c:	f04f 3bff 	mov.w	fp, #4294967295
 8007830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007834:	e7c4      	b.n	80077c0 <__ieee754_rem_pio2+0x80>
 8007836:	a386      	add	r3, pc, #536	; (adr r3, 8007a50 <__ieee754_rem_pio2+0x310>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fd2e 	bl	800029c <__adddf3>
 8007840:	a385      	add	r3, pc, #532	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	f7f8 fd27 	bl	800029c <__adddf3>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	e9ca 2300 	strd	r2, r3, [sl]
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fd1d 	bl	8000298 <__aeabi_dsub>
 800785e:	a37e      	add	r3, pc, #504	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	e7e0      	b.n	8007828 <__ieee754_rem_pio2+0xe8>
 8007866:	4b87      	ldr	r3, [pc, #540]	; (8007a84 <__ieee754_rem_pio2+0x344>)
 8007868:	4598      	cmp	r8, r3
 800786a:	f300 80d9 	bgt.w	8007a20 <__ieee754_rem_pio2+0x2e0>
 800786e:	f000 ffeb 	bl	8008848 <fabs>
 8007872:	ec55 4b10 	vmov	r4, r5, d0
 8007876:	ee10 0a10 	vmov	r0, s0
 800787a:	a379      	add	r3, pc, #484	; (adr r3, 8007a60 <__ieee754_rem_pio2+0x320>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	4629      	mov	r1, r5
 8007882:	f7f8 fec1 	bl	8000608 <__aeabi_dmul>
 8007886:	4b80      	ldr	r3, [pc, #512]	; (8007a88 <__ieee754_rem_pio2+0x348>)
 8007888:	2200      	movs	r2, #0
 800788a:	f7f8 fd07 	bl	800029c <__adddf3>
 800788e:	f7f9 f96b 	bl	8000b68 <__aeabi_d2iz>
 8007892:	4683      	mov	fp, r0
 8007894:	f7f8 fe4e 	bl	8000534 <__aeabi_i2d>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	ec43 2b18 	vmov	d8, r2, r3
 80078a0:	a367      	add	r3, pc, #412	; (adr r3, 8007a40 <__ieee754_rem_pio2+0x300>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 feaf 	bl	8000608 <__aeabi_dmul>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f8 fcf1 	bl	8000298 <__aeabi_dsub>
 80078b6:	a364      	add	r3, pc, #400	; (adr r3, 8007a48 <__ieee754_rem_pio2+0x308>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	4606      	mov	r6, r0
 80078be:	460f      	mov	r7, r1
 80078c0:	ec51 0b18 	vmov	r0, r1, d8
 80078c4:	f7f8 fea0 	bl	8000608 <__aeabi_dmul>
 80078c8:	f1bb 0f1f 	cmp.w	fp, #31
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	dc0d      	bgt.n	80078ee <__ieee754_rem_pio2+0x1ae>
 80078d2:	4b6e      	ldr	r3, [pc, #440]	; (8007a8c <__ieee754_rem_pio2+0x34c>)
 80078d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	4543      	cmp	r3, r8
 80078de:	d006      	beq.n	80078ee <__ieee754_rem_pio2+0x1ae>
 80078e0:	4622      	mov	r2, r4
 80078e2:	462b      	mov	r3, r5
 80078e4:	4630      	mov	r0, r6
 80078e6:	4639      	mov	r1, r7
 80078e8:	f7f8 fcd6 	bl	8000298 <__aeabi_dsub>
 80078ec:	e00f      	b.n	800790e <__ieee754_rem_pio2+0x1ce>
 80078ee:	462b      	mov	r3, r5
 80078f0:	4622      	mov	r2, r4
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f8 fccf 	bl	8000298 <__aeabi_dsub>
 80078fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007904:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007908:	f1b8 0f10 	cmp.w	r8, #16
 800790c:	dc02      	bgt.n	8007914 <__ieee754_rem_pio2+0x1d4>
 800790e:	e9ca 0100 	strd	r0, r1, [sl]
 8007912:	e039      	b.n	8007988 <__ieee754_rem_pio2+0x248>
 8007914:	a34e      	add	r3, pc, #312	; (adr r3, 8007a50 <__ieee754_rem_pio2+0x310>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	ec51 0b18 	vmov	r0, r1, d8
 800791e:	f7f8 fe73 	bl	8000608 <__aeabi_dmul>
 8007922:	4604      	mov	r4, r0
 8007924:	460d      	mov	r5, r1
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4630      	mov	r0, r6
 800792c:	4639      	mov	r1, r7
 800792e:	f7f8 fcb3 	bl	8000298 <__aeabi_dsub>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4680      	mov	r8, r0
 8007938:	4689      	mov	r9, r1
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f8 fcab 	bl	8000298 <__aeabi_dsub>
 8007942:	4622      	mov	r2, r4
 8007944:	462b      	mov	r3, r5
 8007946:	f7f8 fca7 	bl	8000298 <__aeabi_dsub>
 800794a:	a343      	add	r3, pc, #268	; (adr r3, 8007a58 <__ieee754_rem_pio2+0x318>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	ec51 0b18 	vmov	r0, r1, d8
 8007958:	f7f8 fe56 	bl	8000608 <__aeabi_dmul>
 800795c:	4622      	mov	r2, r4
 800795e:	462b      	mov	r3, r5
 8007960:	f7f8 fc9a 	bl	8000298 <__aeabi_dsub>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4604      	mov	r4, r0
 800796a:	460d      	mov	r5, r1
 800796c:	4640      	mov	r0, r8
 800796e:	4649      	mov	r1, r9
 8007970:	f7f8 fc92 	bl	8000298 <__aeabi_dsub>
 8007974:	9a03      	ldr	r2, [sp, #12]
 8007976:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b31      	cmp	r3, #49	; 0x31
 800797e:	dc24      	bgt.n	80079ca <__ieee754_rem_pio2+0x28a>
 8007980:	e9ca 0100 	strd	r0, r1, [sl]
 8007984:	4646      	mov	r6, r8
 8007986:	464f      	mov	r7, r9
 8007988:	e9da 8900 	ldrd	r8, r9, [sl]
 800798c:	4630      	mov	r0, r6
 800798e:	4642      	mov	r2, r8
 8007990:	464b      	mov	r3, r9
 8007992:	4639      	mov	r1, r7
 8007994:	f7f8 fc80 	bl	8000298 <__aeabi_dsub>
 8007998:	462b      	mov	r3, r5
 800799a:	4622      	mov	r2, r4
 800799c:	f7f8 fc7c 	bl	8000298 <__aeabi_dsub>
 80079a0:	9b02      	ldr	r3, [sp, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079a8:	f6bf af0a 	bge.w	80077c0 <__ieee754_rem_pio2+0x80>
 80079ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80079b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80079b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079b8:	f8ca 8000 	str.w	r8, [sl]
 80079bc:	f8ca 0008 	str.w	r0, [sl, #8]
 80079c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80079c4:	f1cb 0b00 	rsb	fp, fp, #0
 80079c8:	e6fa      	b.n	80077c0 <__ieee754_rem_pio2+0x80>
 80079ca:	a327      	add	r3, pc, #156	; (adr r3, 8007a68 <__ieee754_rem_pio2+0x328>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	ec51 0b18 	vmov	r0, r1, d8
 80079d4:	f7f8 fe18 	bl	8000608 <__aeabi_dmul>
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4640      	mov	r0, r8
 80079e2:	4649      	mov	r1, r9
 80079e4:	f7f8 fc58 	bl	8000298 <__aeabi_dsub>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4606      	mov	r6, r0
 80079ee:	460f      	mov	r7, r1
 80079f0:	4640      	mov	r0, r8
 80079f2:	4649      	mov	r1, r9
 80079f4:	f7f8 fc50 	bl	8000298 <__aeabi_dsub>
 80079f8:	4622      	mov	r2, r4
 80079fa:	462b      	mov	r3, r5
 80079fc:	f7f8 fc4c 	bl	8000298 <__aeabi_dsub>
 8007a00:	a31b      	add	r3, pc, #108	; (adr r3, 8007a70 <__ieee754_rem_pio2+0x330>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	4604      	mov	r4, r0
 8007a08:	460d      	mov	r5, r1
 8007a0a:	ec51 0b18 	vmov	r0, r1, d8
 8007a0e:	f7f8 fdfb 	bl	8000608 <__aeabi_dmul>
 8007a12:	4622      	mov	r2, r4
 8007a14:	462b      	mov	r3, r5
 8007a16:	f7f8 fc3f 	bl	8000298 <__aeabi_dsub>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	e75f      	b.n	80078e0 <__ieee754_rem_pio2+0x1a0>
 8007a20:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <__ieee754_rem_pio2+0x350>)
 8007a22:	4598      	cmp	r8, r3
 8007a24:	dd36      	ble.n	8007a94 <__ieee754_rem_pio2+0x354>
 8007a26:	ee10 2a10 	vmov	r2, s0
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7f8 fc32 	bl	8000298 <__aeabi_dsub>
 8007a34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a38:	e9ca 0100 	strd	r0, r1, [sl]
 8007a3c:	e694      	b.n	8007768 <__ieee754_rem_pio2+0x28>
 8007a3e:	bf00      	nop
 8007a40:	54400000 	.word	0x54400000
 8007a44:	3ff921fb 	.word	0x3ff921fb
 8007a48:	1a626331 	.word	0x1a626331
 8007a4c:	3dd0b461 	.word	0x3dd0b461
 8007a50:	1a600000 	.word	0x1a600000
 8007a54:	3dd0b461 	.word	0x3dd0b461
 8007a58:	2e037073 	.word	0x2e037073
 8007a5c:	3ba3198a 	.word	0x3ba3198a
 8007a60:	6dc9c883 	.word	0x6dc9c883
 8007a64:	3fe45f30 	.word	0x3fe45f30
 8007a68:	2e000000 	.word	0x2e000000
 8007a6c:	3ba3198a 	.word	0x3ba3198a
 8007a70:	252049c1 	.word	0x252049c1
 8007a74:	397b839a 	.word	0x397b839a
 8007a78:	3fe921fb 	.word	0x3fe921fb
 8007a7c:	4002d97b 	.word	0x4002d97b
 8007a80:	3ff921fb 	.word	0x3ff921fb
 8007a84:	413921fb 	.word	0x413921fb
 8007a88:	3fe00000 	.word	0x3fe00000
 8007a8c:	08009480 	.word	0x08009480
 8007a90:	7fefffff 	.word	0x7fefffff
 8007a94:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007a98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007a9c:	ee10 0a10 	vmov	r0, s0
 8007aa0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007aa4:	ee10 6a10 	vmov	r6, s0
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	f7f9 f85d 	bl	8000b68 <__aeabi_d2iz>
 8007aae:	f7f8 fd41 	bl	8000534 <__aeabi_i2d>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007abe:	f7f8 fbeb 	bl	8000298 <__aeabi_dsub>
 8007ac2:	4b23      	ldr	r3, [pc, #140]	; (8007b50 <__ieee754_rem_pio2+0x410>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f7f8 fd9f 	bl	8000608 <__aeabi_dmul>
 8007aca:	460f      	mov	r7, r1
 8007acc:	4606      	mov	r6, r0
 8007ace:	f7f9 f84b 	bl	8000b68 <__aeabi_d2iz>
 8007ad2:	f7f8 fd2f 	bl	8000534 <__aeabi_i2d>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ae2:	f7f8 fbd9 	bl	8000298 <__aeabi_dsub>
 8007ae6:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <__ieee754_rem_pio2+0x410>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f7f8 fd8d 	bl	8000608 <__aeabi_dmul>
 8007aee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007af2:	ad04      	add	r5, sp, #16
 8007af4:	f04f 0803 	mov.w	r8, #3
 8007af8:	46a9      	mov	r9, r5
 8007afa:	2600      	movs	r6, #0
 8007afc:	2700      	movs	r7, #0
 8007afe:	4632      	mov	r2, r6
 8007b00:	463b      	mov	r3, r7
 8007b02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007b06:	46c3      	mov	fp, r8
 8007b08:	3d08      	subs	r5, #8
 8007b0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b0e:	f7f8 ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d1f3      	bne.n	8007afe <__ieee754_rem_pio2+0x3be>
 8007b16:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <__ieee754_rem_pio2+0x414>)
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4622      	mov	r2, r4
 8007b20:	465b      	mov	r3, fp
 8007b22:	4651      	mov	r1, sl
 8007b24:	4648      	mov	r0, r9
 8007b26:	f000 f8df 	bl	8007ce8 <__kernel_rem_pio2>
 8007b2a:	9b02      	ldr	r3, [sp, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	4683      	mov	fp, r0
 8007b30:	f6bf ae46 	bge.w	80077c0 <__ieee754_rem_pio2+0x80>
 8007b34:	e9da 2100 	ldrd	r2, r1, [sl]
 8007b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b3c:	e9ca 2300 	strd	r2, r3, [sl]
 8007b40:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007b44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b48:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007b4c:	e73a      	b.n	80079c4 <__ieee754_rem_pio2+0x284>
 8007b4e:	bf00      	nop
 8007b50:	41700000 	.word	0x41700000
 8007b54:	08009500 	.word	0x08009500

08007b58 <__kernel_cos>:
 8007b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	ec57 6b10 	vmov	r6, r7, d0
 8007b60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007b64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007b68:	ed8d 1b00 	vstr	d1, [sp]
 8007b6c:	da07      	bge.n	8007b7e <__kernel_cos+0x26>
 8007b6e:	ee10 0a10 	vmov	r0, s0
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 fff8 	bl	8000b68 <__aeabi_d2iz>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	f000 8088 	beq.w	8007c8e <__kernel_cos+0x136>
 8007b7e:	4632      	mov	r2, r6
 8007b80:	463b      	mov	r3, r7
 8007b82:	4630      	mov	r0, r6
 8007b84:	4639      	mov	r1, r7
 8007b86:	f7f8 fd3f 	bl	8000608 <__aeabi_dmul>
 8007b8a:	4b51      	ldr	r3, [pc, #324]	; (8007cd0 <__kernel_cos+0x178>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	460d      	mov	r5, r1
 8007b92:	f7f8 fd39 	bl	8000608 <__aeabi_dmul>
 8007b96:	a340      	add	r3, pc, #256	; (adr r3, 8007c98 <__kernel_cos+0x140>)
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	468b      	mov	fp, r1
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	f7f8 fd30 	bl	8000608 <__aeabi_dmul>
 8007ba8:	a33d      	add	r3, pc, #244	; (adr r3, 8007ca0 <__kernel_cos+0x148>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fb75 	bl	800029c <__adddf3>
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	f7f8 fd27 	bl	8000608 <__aeabi_dmul>
 8007bba:	a33b      	add	r3, pc, #236	; (adr r3, 8007ca8 <__kernel_cos+0x150>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fb6a 	bl	8000298 <__aeabi_dsub>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	462b      	mov	r3, r5
 8007bc8:	f7f8 fd1e 	bl	8000608 <__aeabi_dmul>
 8007bcc:	a338      	add	r3, pc, #224	; (adr r3, 8007cb0 <__kernel_cos+0x158>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	f7f8 fb63 	bl	800029c <__adddf3>
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	462b      	mov	r3, r5
 8007bda:	f7f8 fd15 	bl	8000608 <__aeabi_dmul>
 8007bde:	a336      	add	r3, pc, #216	; (adr r3, 8007cb8 <__kernel_cos+0x160>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f7f8 fb58 	bl	8000298 <__aeabi_dsub>
 8007be8:	4622      	mov	r2, r4
 8007bea:	462b      	mov	r3, r5
 8007bec:	f7f8 fd0c 	bl	8000608 <__aeabi_dmul>
 8007bf0:	a333      	add	r3, pc, #204	; (adr r3, 8007cc0 <__kernel_cos+0x168>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fb51 	bl	800029c <__adddf3>
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	f7f8 fd03 	bl	8000608 <__aeabi_dmul>
 8007c02:	4622      	mov	r2, r4
 8007c04:	462b      	mov	r3, r5
 8007c06:	f7f8 fcff 	bl	8000608 <__aeabi_dmul>
 8007c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c0e:	4604      	mov	r4, r0
 8007c10:	460d      	mov	r5, r1
 8007c12:	4630      	mov	r0, r6
 8007c14:	4639      	mov	r1, r7
 8007c16:	f7f8 fcf7 	bl	8000608 <__aeabi_dmul>
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7f8 fb39 	bl	8000298 <__aeabi_dsub>
 8007c26:	4b2b      	ldr	r3, [pc, #172]	; (8007cd4 <__kernel_cos+0x17c>)
 8007c28:	4598      	cmp	r8, r3
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	dc10      	bgt.n	8007c52 <__kernel_cos+0xfa>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4650      	mov	r0, sl
 8007c36:	4659      	mov	r1, fp
 8007c38:	f7f8 fb2e 	bl	8000298 <__aeabi_dsub>
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4926      	ldr	r1, [pc, #152]	; (8007cd8 <__kernel_cos+0x180>)
 8007c40:	4602      	mov	r2, r0
 8007c42:	2000      	movs	r0, #0
 8007c44:	f7f8 fb28 	bl	8000298 <__aeabi_dsub>
 8007c48:	ec41 0b10 	vmov	d0, r0, r1
 8007c4c:	b003      	add	sp, #12
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	4b22      	ldr	r3, [pc, #136]	; (8007cdc <__kernel_cos+0x184>)
 8007c54:	4920      	ldr	r1, [pc, #128]	; (8007cd8 <__kernel_cos+0x180>)
 8007c56:	4598      	cmp	r8, r3
 8007c58:	bfcc      	ite	gt
 8007c5a:	4d21      	ldrgt	r5, [pc, #132]	; (8007ce0 <__kernel_cos+0x188>)
 8007c5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007c60:	2400      	movs	r4, #0
 8007c62:	4622      	mov	r2, r4
 8007c64:	462b      	mov	r3, r5
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7f8 fb16 	bl	8000298 <__aeabi_dsub>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4689      	mov	r9, r1
 8007c72:	462b      	mov	r3, r5
 8007c74:	4650      	mov	r0, sl
 8007c76:	4659      	mov	r1, fp
 8007c78:	f7f8 fb0e 	bl	8000298 <__aeabi_dsub>
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	463b      	mov	r3, r7
 8007c80:	f7f8 fb0a 	bl	8000298 <__aeabi_dsub>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	e7da      	b.n	8007c44 <__kernel_cos+0xec>
 8007c8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007cc8 <__kernel_cos+0x170>
 8007c92:	e7db      	b.n	8007c4c <__kernel_cos+0xf4>
 8007c94:	f3af 8000 	nop.w
 8007c98:	be8838d4 	.word	0xbe8838d4
 8007c9c:	bda8fae9 	.word	0xbda8fae9
 8007ca0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007ca4:	3e21ee9e 	.word	0x3e21ee9e
 8007ca8:	809c52ad 	.word	0x809c52ad
 8007cac:	3e927e4f 	.word	0x3e927e4f
 8007cb0:	19cb1590 	.word	0x19cb1590
 8007cb4:	3efa01a0 	.word	0x3efa01a0
 8007cb8:	16c15177 	.word	0x16c15177
 8007cbc:	3f56c16c 	.word	0x3f56c16c
 8007cc0:	5555554c 	.word	0x5555554c
 8007cc4:	3fa55555 	.word	0x3fa55555
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	3ff00000 	.word	0x3ff00000
 8007cd0:	3fe00000 	.word	0x3fe00000
 8007cd4:	3fd33332 	.word	0x3fd33332
 8007cd8:	3ff00000 	.word	0x3ff00000
 8007cdc:	3fe90000 	.word	0x3fe90000
 8007ce0:	3fd20000 	.word	0x3fd20000
 8007ce4:	00000000 	.word	0x00000000

08007ce8 <__kernel_rem_pio2>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	ed2d 8b02 	vpush	{d8}
 8007cf0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007cf4:	f112 0f14 	cmn.w	r2, #20
 8007cf8:	9308      	str	r3, [sp, #32]
 8007cfa:	9101      	str	r1, [sp, #4]
 8007cfc:	4bc4      	ldr	r3, [pc, #784]	; (8008010 <__kernel_rem_pio2+0x328>)
 8007cfe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007d00:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d06:	9302      	str	r3, [sp, #8]
 8007d08:	9b08      	ldr	r3, [sp, #32]
 8007d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d0e:	bfa8      	it	ge
 8007d10:	1ed4      	subge	r4, r2, #3
 8007d12:	9306      	str	r3, [sp, #24]
 8007d14:	bfb2      	itee	lt
 8007d16:	2400      	movlt	r4, #0
 8007d18:	2318      	movge	r3, #24
 8007d1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007d1e:	f06f 0317 	mvn.w	r3, #23
 8007d22:	fb04 3303 	mla	r3, r4, r3, r3
 8007d26:	eb03 0a02 	add.w	sl, r3, r2
 8007d2a:	9b02      	ldr	r3, [sp, #8]
 8007d2c:	9a06      	ldr	r2, [sp, #24]
 8007d2e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008000 <__kernel_rem_pio2+0x318>
 8007d32:	eb03 0802 	add.w	r8, r3, r2
 8007d36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007d38:	1aa7      	subs	r7, r4, r2
 8007d3a:	ae22      	add	r6, sp, #136	; 0x88
 8007d3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007d40:	2500      	movs	r5, #0
 8007d42:	4545      	cmp	r5, r8
 8007d44:	dd13      	ble.n	8007d6e <__kernel_rem_pio2+0x86>
 8007d46:	9b08      	ldr	r3, [sp, #32]
 8007d48:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008000 <__kernel_rem_pio2+0x318>
 8007d4c:	aa22      	add	r2, sp, #136	; 0x88
 8007d4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007d52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	9b02      	ldr	r3, [sp, #8]
 8007d5c:	4598      	cmp	r8, r3
 8007d5e:	dc2f      	bgt.n	8007dc0 <__kernel_rem_pio2+0xd8>
 8007d60:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007d64:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007d68:	462f      	mov	r7, r5
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	e01b      	b.n	8007da6 <__kernel_rem_pio2+0xbe>
 8007d6e:	42ef      	cmn	r7, r5
 8007d70:	d407      	bmi.n	8007d82 <__kernel_rem_pio2+0x9a>
 8007d72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007d76:	f7f8 fbdd 	bl	8000534 <__aeabi_i2d>
 8007d7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007d7e:	3501      	adds	r5, #1
 8007d80:	e7df      	b.n	8007d42 <__kernel_rem_pio2+0x5a>
 8007d82:	ec51 0b18 	vmov	r0, r1, d8
 8007d86:	e7f8      	b.n	8007d7a <__kernel_rem_pio2+0x92>
 8007d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007d90:	f7f8 fc3a 	bl	8000608 <__aeabi_dmul>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d9c:	f7f8 fa7e 	bl	800029c <__adddf3>
 8007da0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007da4:	3601      	adds	r6, #1
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	429e      	cmp	r6, r3
 8007daa:	f1a7 0708 	sub.w	r7, r7, #8
 8007dae:	ddeb      	ble.n	8007d88 <__kernel_rem_pio2+0xa0>
 8007db0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007db4:	f108 0801 	add.w	r8, r8, #1
 8007db8:	ecab 7b02 	vstmia	fp!, {d7}
 8007dbc:	3508      	adds	r5, #8
 8007dbe:	e7cc      	b.n	8007d5a <__kernel_rem_pio2+0x72>
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	aa0e      	add	r2, sp, #56	; 0x38
 8007dc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dc8:	930d      	str	r3, [sp, #52]	; 0x34
 8007dca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007dcc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007dd0:	9c02      	ldr	r4, [sp, #8]
 8007dd2:	930c      	str	r3, [sp, #48]	; 0x30
 8007dd4:	00e3      	lsls	r3, r4, #3
 8007dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007dd8:	ab9a      	add	r3, sp, #616	; 0x268
 8007dda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007dde:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007de2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007de6:	ab72      	add	r3, sp, #456	; 0x1c8
 8007de8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007dec:	46c3      	mov	fp, r8
 8007dee:	46a1      	mov	r9, r4
 8007df0:	f1b9 0f00 	cmp.w	r9, #0
 8007df4:	f1a5 0508 	sub.w	r5, r5, #8
 8007df8:	dc77      	bgt.n	8007eea <__kernel_rem_pio2+0x202>
 8007dfa:	ec47 6b10 	vmov	d0, r6, r7
 8007dfe:	4650      	mov	r0, sl
 8007e00:	f000 fdae 	bl	8008960 <scalbn>
 8007e04:	ec57 6b10 	vmov	r6, r7, d0
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007e0e:	ee10 0a10 	vmov	r0, s0
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fbf8 	bl	8000608 <__aeabi_dmul>
 8007e18:	ec41 0b10 	vmov	d0, r0, r1
 8007e1c:	f000 fd20 	bl	8008860 <floor>
 8007e20:	4b7c      	ldr	r3, [pc, #496]	; (8008014 <__kernel_rem_pio2+0x32c>)
 8007e22:	ec51 0b10 	vmov	r0, r1, d0
 8007e26:	2200      	movs	r2, #0
 8007e28:	f7f8 fbee 	bl	8000608 <__aeabi_dmul>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 fa30 	bl	8000298 <__aeabi_dsub>
 8007e38:	460f      	mov	r7, r1
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	f7f8 fe94 	bl	8000b68 <__aeabi_d2iz>
 8007e40:	9004      	str	r0, [sp, #16]
 8007e42:	f7f8 fb77 	bl	8000534 <__aeabi_i2d>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	f7f8 fa23 	bl	8000298 <__aeabi_dsub>
 8007e52:	f1ba 0f00 	cmp.w	sl, #0
 8007e56:	4606      	mov	r6, r0
 8007e58:	460f      	mov	r7, r1
 8007e5a:	dd6d      	ble.n	8007f38 <__kernel_rem_pio2+0x250>
 8007e5c:	1e62      	subs	r2, r4, #1
 8007e5e:	ab0e      	add	r3, sp, #56	; 0x38
 8007e60:	9d04      	ldr	r5, [sp, #16]
 8007e62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007e66:	f1ca 0118 	rsb	r1, sl, #24
 8007e6a:	fa40 f301 	asr.w	r3, r0, r1
 8007e6e:	441d      	add	r5, r3
 8007e70:	408b      	lsls	r3, r1
 8007e72:	1ac0      	subs	r0, r0, r3
 8007e74:	ab0e      	add	r3, sp, #56	; 0x38
 8007e76:	9504      	str	r5, [sp, #16]
 8007e78:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007e7c:	f1ca 0317 	rsb	r3, sl, #23
 8007e80:	fa40 fb03 	asr.w	fp, r0, r3
 8007e84:	f1bb 0f00 	cmp.w	fp, #0
 8007e88:	dd65      	ble.n	8007f56 <__kernel_rem_pio2+0x26e>
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	3301      	adds	r3, #1
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	4615      	mov	r5, r2
 8007e94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007e98:	4294      	cmp	r4, r2
 8007e9a:	f300 809c 	bgt.w	8007fd6 <__kernel_rem_pio2+0x2ee>
 8007e9e:	f1ba 0f00 	cmp.w	sl, #0
 8007ea2:	dd07      	ble.n	8007eb4 <__kernel_rem_pio2+0x1cc>
 8007ea4:	f1ba 0f01 	cmp.w	sl, #1
 8007ea8:	f000 80c0 	beq.w	800802c <__kernel_rem_pio2+0x344>
 8007eac:	f1ba 0f02 	cmp.w	sl, #2
 8007eb0:	f000 80c6 	beq.w	8008040 <__kernel_rem_pio2+0x358>
 8007eb4:	f1bb 0f02 	cmp.w	fp, #2
 8007eb8:	d14d      	bne.n	8007f56 <__kernel_rem_pio2+0x26e>
 8007eba:	4632      	mov	r2, r6
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	4956      	ldr	r1, [pc, #344]	; (8008018 <__kernel_rem_pio2+0x330>)
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f7f8 f9e9 	bl	8000298 <__aeabi_dsub>
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	d043      	beq.n	8007f56 <__kernel_rem_pio2+0x26e>
 8007ece:	4650      	mov	r0, sl
 8007ed0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008008 <__kernel_rem_pio2+0x320>
 8007ed4:	f000 fd44 	bl	8008960 <scalbn>
 8007ed8:	4630      	mov	r0, r6
 8007eda:	4639      	mov	r1, r7
 8007edc:	ec53 2b10 	vmov	r2, r3, d0
 8007ee0:	f7f8 f9da 	bl	8000298 <__aeabi_dsub>
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	e035      	b.n	8007f56 <__kernel_rem_pio2+0x26e>
 8007eea:	4b4c      	ldr	r3, [pc, #304]	; (800801c <__kernel_rem_pio2+0x334>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 fb89 	bl	8000608 <__aeabi_dmul>
 8007ef6:	f7f8 fe37 	bl	8000b68 <__aeabi_d2iz>
 8007efa:	f7f8 fb1b 	bl	8000534 <__aeabi_i2d>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	ec43 2b18 	vmov	d8, r2, r3
 8007f06:	4b46      	ldr	r3, [pc, #280]	; (8008020 <__kernel_rem_pio2+0x338>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f7f8 fb7d 	bl	8000608 <__aeabi_dmul>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4630      	mov	r0, r6
 8007f14:	4639      	mov	r1, r7
 8007f16:	f7f8 f9bf 	bl	8000298 <__aeabi_dsub>
 8007f1a:	f7f8 fe25 	bl	8000b68 <__aeabi_d2iz>
 8007f1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f22:	f84b 0b04 	str.w	r0, [fp], #4
 8007f26:	ec51 0b18 	vmov	r0, r1, d8
 8007f2a:	f7f8 f9b7 	bl	800029c <__adddf3>
 8007f2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	e75b      	b.n	8007df0 <__kernel_rem_pio2+0x108>
 8007f38:	d106      	bne.n	8007f48 <__kernel_rem_pio2+0x260>
 8007f3a:	1e63      	subs	r3, r4, #1
 8007f3c:	aa0e      	add	r2, sp, #56	; 0x38
 8007f3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007f42:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007f46:	e79d      	b.n	8007e84 <__kernel_rem_pio2+0x19c>
 8007f48:	4b36      	ldr	r3, [pc, #216]	; (8008024 <__kernel_rem_pio2+0x33c>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f7f8 fde2 	bl	8000b14 <__aeabi_dcmpge>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d13d      	bne.n	8007fd0 <__kernel_rem_pio2+0x2e8>
 8007f54:	4683      	mov	fp, r0
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	f7f8 fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f000 80c0 	beq.w	80080e8 <__kernel_rem_pio2+0x400>
 8007f68:	1e65      	subs	r5, r4, #1
 8007f6a:	462b      	mov	r3, r5
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	9902      	ldr	r1, [sp, #8]
 8007f70:	428b      	cmp	r3, r1
 8007f72:	da6c      	bge.n	800804e <__kernel_rem_pio2+0x366>
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	f000 8089 	beq.w	800808c <__kernel_rem_pio2+0x3a4>
 8007f7a:	ab0e      	add	r3, sp, #56	; 0x38
 8007f7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007f80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80ad 	beq.w	80080e4 <__kernel_rem_pio2+0x3fc>
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008008 <__kernel_rem_pio2+0x320>
 8007f90:	f000 fce6 	bl	8008960 <scalbn>
 8007f94:	ab9a      	add	r3, sp, #616	; 0x268
 8007f96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007f9a:	ec57 6b10 	vmov	r6, r7, d0
 8007f9e:	00ec      	lsls	r4, r5, #3
 8007fa0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007fa4:	46aa      	mov	sl, r5
 8007fa6:	f1ba 0f00 	cmp.w	sl, #0
 8007faa:	f280 80d6 	bge.w	800815a <__kernel_rem_pio2+0x472>
 8007fae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008000 <__kernel_rem_pio2+0x318>
 8007fb2:	462e      	mov	r6, r5
 8007fb4:	2e00      	cmp	r6, #0
 8007fb6:	f2c0 8104 	blt.w	80081c2 <__kernel_rem_pio2+0x4da>
 8007fba:	ab72      	add	r3, sp, #456	; 0x1c8
 8007fbc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007fc0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008028 <__kernel_rem_pio2+0x340>
 8007fc4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007fc8:	f04f 0800 	mov.w	r8, #0
 8007fcc:	1baf      	subs	r7, r5, r6
 8007fce:	e0ea      	b.n	80081a6 <__kernel_rem_pio2+0x4be>
 8007fd0:	f04f 0b02 	mov.w	fp, #2
 8007fd4:	e759      	b.n	8007e8a <__kernel_rem_pio2+0x1a2>
 8007fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fda:	b955      	cbnz	r5, 8007ff2 <__kernel_rem_pio2+0x30a>
 8007fdc:	b123      	cbz	r3, 8007fe8 <__kernel_rem_pio2+0x300>
 8007fde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007fe2:	f8c8 3000 	str.w	r3, [r8]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	3201      	adds	r2, #1
 8007fea:	f108 0804 	add.w	r8, r8, #4
 8007fee:	461d      	mov	r5, r3
 8007ff0:	e752      	b.n	8007e98 <__kernel_rem_pio2+0x1b0>
 8007ff2:	1acb      	subs	r3, r1, r3
 8007ff4:	f8c8 3000 	str.w	r3, [r8]
 8007ff8:	462b      	mov	r3, r5
 8007ffa:	e7f5      	b.n	8007fe8 <__kernel_rem_pio2+0x300>
 8007ffc:	f3af 8000 	nop.w
	...
 800800c:	3ff00000 	.word	0x3ff00000
 8008010:	08009648 	.word	0x08009648
 8008014:	40200000 	.word	0x40200000
 8008018:	3ff00000 	.word	0x3ff00000
 800801c:	3e700000 	.word	0x3e700000
 8008020:	41700000 	.word	0x41700000
 8008024:	3fe00000 	.word	0x3fe00000
 8008028:	08009608 	.word	0x08009608
 800802c:	1e62      	subs	r2, r4, #1
 800802e:	ab0e      	add	r3, sp, #56	; 0x38
 8008030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008034:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008038:	a90e      	add	r1, sp, #56	; 0x38
 800803a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800803e:	e739      	b.n	8007eb4 <__kernel_rem_pio2+0x1cc>
 8008040:	1e62      	subs	r2, r4, #1
 8008042:	ab0e      	add	r3, sp, #56	; 0x38
 8008044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008048:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800804c:	e7f4      	b.n	8008038 <__kernel_rem_pio2+0x350>
 800804e:	a90e      	add	r1, sp, #56	; 0x38
 8008050:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008054:	3b01      	subs	r3, #1
 8008056:	430a      	orrs	r2, r1
 8008058:	e789      	b.n	8007f6e <__kernel_rem_pio2+0x286>
 800805a:	3301      	adds	r3, #1
 800805c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008060:	2900      	cmp	r1, #0
 8008062:	d0fa      	beq.n	800805a <__kernel_rem_pio2+0x372>
 8008064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008066:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800806a:	446a      	add	r2, sp
 800806c:	3a98      	subs	r2, #152	; 0x98
 800806e:	920a      	str	r2, [sp, #40]	; 0x28
 8008070:	9a08      	ldr	r2, [sp, #32]
 8008072:	18e3      	adds	r3, r4, r3
 8008074:	18a5      	adds	r5, r4, r2
 8008076:	aa22      	add	r2, sp, #136	; 0x88
 8008078:	f104 0801 	add.w	r8, r4, #1
 800807c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008080:	9304      	str	r3, [sp, #16]
 8008082:	9b04      	ldr	r3, [sp, #16]
 8008084:	4543      	cmp	r3, r8
 8008086:	da04      	bge.n	8008092 <__kernel_rem_pio2+0x3aa>
 8008088:	461c      	mov	r4, r3
 800808a:	e6a3      	b.n	8007dd4 <__kernel_rem_pio2+0xec>
 800808c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800808e:	2301      	movs	r3, #1
 8008090:	e7e4      	b.n	800805c <__kernel_rem_pio2+0x374>
 8008092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008094:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008098:	f7f8 fa4c 	bl	8000534 <__aeabi_i2d>
 800809c:	e8e5 0102 	strd	r0, r1, [r5], #8
 80080a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a2:	46ab      	mov	fp, r5
 80080a4:	461c      	mov	r4, r3
 80080a6:	f04f 0900 	mov.w	r9, #0
 80080aa:	2600      	movs	r6, #0
 80080ac:	2700      	movs	r7, #0
 80080ae:	9b06      	ldr	r3, [sp, #24]
 80080b0:	4599      	cmp	r9, r3
 80080b2:	dd06      	ble.n	80080c2 <__kernel_rem_pio2+0x3da>
 80080b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80080ba:	f108 0801 	add.w	r8, r8, #1
 80080be:	930a      	str	r3, [sp, #40]	; 0x28
 80080c0:	e7df      	b.n	8008082 <__kernel_rem_pio2+0x39a>
 80080c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80080c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80080ca:	f7f8 fa9d 	bl	8000608 <__aeabi_dmul>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4630      	mov	r0, r6
 80080d4:	4639      	mov	r1, r7
 80080d6:	f7f8 f8e1 	bl	800029c <__adddf3>
 80080da:	f109 0901 	add.w	r9, r9, #1
 80080de:	4606      	mov	r6, r0
 80080e0:	460f      	mov	r7, r1
 80080e2:	e7e4      	b.n	80080ae <__kernel_rem_pio2+0x3c6>
 80080e4:	3d01      	subs	r5, #1
 80080e6:	e748      	b.n	8007f7a <__kernel_rem_pio2+0x292>
 80080e8:	ec47 6b10 	vmov	d0, r6, r7
 80080ec:	f1ca 0000 	rsb	r0, sl, #0
 80080f0:	f000 fc36 	bl	8008960 <scalbn>
 80080f4:	ec57 6b10 	vmov	r6, r7, d0
 80080f8:	4ba0      	ldr	r3, [pc, #640]	; (800837c <__kernel_rem_pio2+0x694>)
 80080fa:	ee10 0a10 	vmov	r0, s0
 80080fe:	2200      	movs	r2, #0
 8008100:	4639      	mov	r1, r7
 8008102:	f7f8 fd07 	bl	8000b14 <__aeabi_dcmpge>
 8008106:	b1f8      	cbz	r0, 8008148 <__kernel_rem_pio2+0x460>
 8008108:	4b9d      	ldr	r3, [pc, #628]	; (8008380 <__kernel_rem_pio2+0x698>)
 800810a:	2200      	movs	r2, #0
 800810c:	4630      	mov	r0, r6
 800810e:	4639      	mov	r1, r7
 8008110:	f7f8 fa7a 	bl	8000608 <__aeabi_dmul>
 8008114:	f7f8 fd28 	bl	8000b68 <__aeabi_d2iz>
 8008118:	4680      	mov	r8, r0
 800811a:	f7f8 fa0b 	bl	8000534 <__aeabi_i2d>
 800811e:	4b97      	ldr	r3, [pc, #604]	; (800837c <__kernel_rem_pio2+0x694>)
 8008120:	2200      	movs	r2, #0
 8008122:	f7f8 fa71 	bl	8000608 <__aeabi_dmul>
 8008126:	460b      	mov	r3, r1
 8008128:	4602      	mov	r2, r0
 800812a:	4639      	mov	r1, r7
 800812c:	4630      	mov	r0, r6
 800812e:	f7f8 f8b3 	bl	8000298 <__aeabi_dsub>
 8008132:	f7f8 fd19 	bl	8000b68 <__aeabi_d2iz>
 8008136:	1c65      	adds	r5, r4, #1
 8008138:	ab0e      	add	r3, sp, #56	; 0x38
 800813a:	f10a 0a18 	add.w	sl, sl, #24
 800813e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008142:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008146:	e720      	b.n	8007f8a <__kernel_rem_pio2+0x2a2>
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fd0c 	bl	8000b68 <__aeabi_d2iz>
 8008150:	ab0e      	add	r3, sp, #56	; 0x38
 8008152:	4625      	mov	r5, r4
 8008154:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008158:	e717      	b.n	8007f8a <__kernel_rem_pio2+0x2a2>
 800815a:	ab0e      	add	r3, sp, #56	; 0x38
 800815c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008160:	f7f8 f9e8 	bl	8000534 <__aeabi_i2d>
 8008164:	4632      	mov	r2, r6
 8008166:	463b      	mov	r3, r7
 8008168:	f7f8 fa4e 	bl	8000608 <__aeabi_dmul>
 800816c:	4b84      	ldr	r3, [pc, #528]	; (8008380 <__kernel_rem_pio2+0x698>)
 800816e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008172:	2200      	movs	r2, #0
 8008174:	4630      	mov	r0, r6
 8008176:	4639      	mov	r1, r7
 8008178:	f7f8 fa46 	bl	8000608 <__aeabi_dmul>
 800817c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008180:	4606      	mov	r6, r0
 8008182:	460f      	mov	r7, r1
 8008184:	e70f      	b.n	8007fa6 <__kernel_rem_pio2+0x2be>
 8008186:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800818a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800818e:	f7f8 fa3b 	bl	8000608 <__aeabi_dmul>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800819a:	f7f8 f87f 	bl	800029c <__adddf3>
 800819e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081a2:	f108 0801 	add.w	r8, r8, #1
 80081a6:	9b02      	ldr	r3, [sp, #8]
 80081a8:	4598      	cmp	r8, r3
 80081aa:	dc01      	bgt.n	80081b0 <__kernel_rem_pio2+0x4c8>
 80081ac:	45b8      	cmp	r8, r7
 80081ae:	ddea      	ble.n	8008186 <__kernel_rem_pio2+0x49e>
 80081b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80081b4:	ab4a      	add	r3, sp, #296	; 0x128
 80081b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80081ba:	ed87 7b00 	vstr	d7, [r7]
 80081be:	3e01      	subs	r6, #1
 80081c0:	e6f8      	b.n	8007fb4 <__kernel_rem_pio2+0x2cc>
 80081c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	dc0b      	bgt.n	80081e0 <__kernel_rem_pio2+0x4f8>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc35      	bgt.n	8008238 <__kernel_rem_pio2+0x550>
 80081cc:	d059      	beq.n	8008282 <__kernel_rem_pio2+0x59a>
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	f003 0007 	and.w	r0, r3, #7
 80081d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80081d8:	ecbd 8b02 	vpop	{d8}
 80081dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d1f3      	bne.n	80081ce <__kernel_rem_pio2+0x4e6>
 80081e6:	ab4a      	add	r3, sp, #296	; 0x128
 80081e8:	4423      	add	r3, r4
 80081ea:	9306      	str	r3, [sp, #24]
 80081ec:	461c      	mov	r4, r3
 80081ee:	469a      	mov	sl, r3
 80081f0:	9502      	str	r5, [sp, #8]
 80081f2:	9b02      	ldr	r3, [sp, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f1aa 0a08 	sub.w	sl, sl, #8
 80081fa:	dc6b      	bgt.n	80082d4 <__kernel_rem_pio2+0x5ec>
 80081fc:	46aa      	mov	sl, r5
 80081fe:	f1ba 0f01 	cmp.w	sl, #1
 8008202:	f1a4 0408 	sub.w	r4, r4, #8
 8008206:	f300 8085 	bgt.w	8008314 <__kernel_rem_pio2+0x62c>
 800820a:	9c06      	ldr	r4, [sp, #24]
 800820c:	2000      	movs	r0, #0
 800820e:	3408      	adds	r4, #8
 8008210:	2100      	movs	r1, #0
 8008212:	2d01      	cmp	r5, #1
 8008214:	f300 809d 	bgt.w	8008352 <__kernel_rem_pio2+0x66a>
 8008218:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800821c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008220:	f1bb 0f00 	cmp.w	fp, #0
 8008224:	f040 809b 	bne.w	800835e <__kernel_rem_pio2+0x676>
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	e9c3 5600 	strd	r5, r6, [r3]
 800822e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008232:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008236:	e7ca      	b.n	80081ce <__kernel_rem_pio2+0x4e6>
 8008238:	3408      	adds	r4, #8
 800823a:	ab4a      	add	r3, sp, #296	; 0x128
 800823c:	441c      	add	r4, r3
 800823e:	462e      	mov	r6, r5
 8008240:	2000      	movs	r0, #0
 8008242:	2100      	movs	r1, #0
 8008244:	2e00      	cmp	r6, #0
 8008246:	da36      	bge.n	80082b6 <__kernel_rem_pio2+0x5ce>
 8008248:	f1bb 0f00 	cmp.w	fp, #0
 800824c:	d039      	beq.n	80082c2 <__kernel_rem_pio2+0x5da>
 800824e:	4602      	mov	r2, r0
 8008250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008254:	9c01      	ldr	r4, [sp, #4]
 8008256:	e9c4 2300 	strd	r2, r3, [r4]
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008262:	f7f8 f819 	bl	8000298 <__aeabi_dsub>
 8008266:	ae4c      	add	r6, sp, #304	; 0x130
 8008268:	2401      	movs	r4, #1
 800826a:	42a5      	cmp	r5, r4
 800826c:	da2c      	bge.n	80082c8 <__kernel_rem_pio2+0x5e0>
 800826e:	f1bb 0f00 	cmp.w	fp, #0
 8008272:	d002      	beq.n	800827a <__kernel_rem_pio2+0x592>
 8008274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008278:	4619      	mov	r1, r3
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008280:	e7a5      	b.n	80081ce <__kernel_rem_pio2+0x4e6>
 8008282:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008286:	eb0d 0403 	add.w	r4, sp, r3
 800828a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800828e:	2000      	movs	r0, #0
 8008290:	2100      	movs	r1, #0
 8008292:	2d00      	cmp	r5, #0
 8008294:	da09      	bge.n	80082aa <__kernel_rem_pio2+0x5c2>
 8008296:	f1bb 0f00 	cmp.w	fp, #0
 800829a:	d002      	beq.n	80082a2 <__kernel_rem_pio2+0x5ba>
 800829c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082a0:	4619      	mov	r1, r3
 80082a2:	9b01      	ldr	r3, [sp, #4]
 80082a4:	e9c3 0100 	strd	r0, r1, [r3]
 80082a8:	e791      	b.n	80081ce <__kernel_rem_pio2+0x4e6>
 80082aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80082ae:	f7f7 fff5 	bl	800029c <__adddf3>
 80082b2:	3d01      	subs	r5, #1
 80082b4:	e7ed      	b.n	8008292 <__kernel_rem_pio2+0x5aa>
 80082b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80082ba:	f7f7 ffef 	bl	800029c <__adddf3>
 80082be:	3e01      	subs	r6, #1
 80082c0:	e7c0      	b.n	8008244 <__kernel_rem_pio2+0x55c>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	e7c5      	b.n	8008254 <__kernel_rem_pio2+0x56c>
 80082c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80082cc:	f7f7 ffe6 	bl	800029c <__adddf3>
 80082d0:	3401      	adds	r4, #1
 80082d2:	e7ca      	b.n	800826a <__kernel_rem_pio2+0x582>
 80082d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80082d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80082dc:	9b02      	ldr	r3, [sp, #8]
 80082de:	3b01      	subs	r3, #1
 80082e0:	9302      	str	r3, [sp, #8]
 80082e2:	4632      	mov	r2, r6
 80082e4:	463b      	mov	r3, r7
 80082e6:	4640      	mov	r0, r8
 80082e8:	4649      	mov	r1, r9
 80082ea:	f7f7 ffd7 	bl	800029c <__adddf3>
 80082ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	f7f7 ffcd 	bl	8000298 <__aeabi_dsub>
 80082fe:	4632      	mov	r2, r6
 8008300:	463b      	mov	r3, r7
 8008302:	f7f7 ffcb 	bl	800029c <__adddf3>
 8008306:	ed9d 7b08 	vldr	d7, [sp, #32]
 800830a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800830e:	ed8a 7b00 	vstr	d7, [sl]
 8008312:	e76e      	b.n	80081f2 <__kernel_rem_pio2+0x50a>
 8008314:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008318:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800831c:	4640      	mov	r0, r8
 800831e:	4632      	mov	r2, r6
 8008320:	463b      	mov	r3, r7
 8008322:	4649      	mov	r1, r9
 8008324:	f7f7 ffba 	bl	800029c <__adddf3>
 8008328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4640      	mov	r0, r8
 8008332:	4649      	mov	r1, r9
 8008334:	f7f7 ffb0 	bl	8000298 <__aeabi_dsub>
 8008338:	4632      	mov	r2, r6
 800833a:	463b      	mov	r3, r7
 800833c:	f7f7 ffae 	bl	800029c <__adddf3>
 8008340:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008344:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008348:	ed84 7b00 	vstr	d7, [r4]
 800834c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008350:	e755      	b.n	80081fe <__kernel_rem_pio2+0x516>
 8008352:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008356:	f7f7 ffa1 	bl	800029c <__adddf3>
 800835a:	3d01      	subs	r5, #1
 800835c:	e759      	b.n	8008212 <__kernel_rem_pio2+0x52a>
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	9a01      	ldr	r2, [sp, #4]
 8008362:	601d      	str	r5, [r3, #0]
 8008364:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008368:	605c      	str	r4, [r3, #4]
 800836a:	609f      	str	r7, [r3, #8]
 800836c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008370:	60d3      	str	r3, [r2, #12]
 8008372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008376:	6110      	str	r0, [r2, #16]
 8008378:	6153      	str	r3, [r2, #20]
 800837a:	e728      	b.n	80081ce <__kernel_rem_pio2+0x4e6>
 800837c:	41700000 	.word	0x41700000
 8008380:	3e700000 	.word	0x3e700000
 8008384:	00000000 	.word	0x00000000

08008388 <__kernel_sin>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	ed2d 8b04 	vpush	{d8-d9}
 8008390:	eeb0 8a41 	vmov.f32	s16, s2
 8008394:	eef0 8a61 	vmov.f32	s17, s3
 8008398:	ec55 4b10 	vmov	r4, r5, d0
 800839c:	b083      	sub	sp, #12
 800839e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80083a6:	9001      	str	r0, [sp, #4]
 80083a8:	da06      	bge.n	80083b8 <__kernel_sin+0x30>
 80083aa:	ee10 0a10 	vmov	r0, s0
 80083ae:	4629      	mov	r1, r5
 80083b0:	f7f8 fbda 	bl	8000b68 <__aeabi_d2iz>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d051      	beq.n	800845c <__kernel_sin+0xd4>
 80083b8:	4622      	mov	r2, r4
 80083ba:	462b      	mov	r3, r5
 80083bc:	4620      	mov	r0, r4
 80083be:	4629      	mov	r1, r5
 80083c0:	f7f8 f922 	bl	8000608 <__aeabi_dmul>
 80083c4:	4682      	mov	sl, r0
 80083c6:	468b      	mov	fp, r1
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4620      	mov	r0, r4
 80083ce:	4629      	mov	r1, r5
 80083d0:	f7f8 f91a 	bl	8000608 <__aeabi_dmul>
 80083d4:	a341      	add	r3, pc, #260	; (adr r3, 80084dc <__kernel_sin+0x154>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	4680      	mov	r8, r0
 80083dc:	4689      	mov	r9, r1
 80083de:	4650      	mov	r0, sl
 80083e0:	4659      	mov	r1, fp
 80083e2:	f7f8 f911 	bl	8000608 <__aeabi_dmul>
 80083e6:	a33f      	add	r3, pc, #252	; (adr r3, 80084e4 <__kernel_sin+0x15c>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	f7f7 ff54 	bl	8000298 <__aeabi_dsub>
 80083f0:	4652      	mov	r2, sl
 80083f2:	465b      	mov	r3, fp
 80083f4:	f7f8 f908 	bl	8000608 <__aeabi_dmul>
 80083f8:	a33c      	add	r3, pc, #240	; (adr r3, 80084ec <__kernel_sin+0x164>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f7 ff4d 	bl	800029c <__adddf3>
 8008402:	4652      	mov	r2, sl
 8008404:	465b      	mov	r3, fp
 8008406:	f7f8 f8ff 	bl	8000608 <__aeabi_dmul>
 800840a:	a33a      	add	r3, pc, #232	; (adr r3, 80084f4 <__kernel_sin+0x16c>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f7 ff42 	bl	8000298 <__aeabi_dsub>
 8008414:	4652      	mov	r2, sl
 8008416:	465b      	mov	r3, fp
 8008418:	f7f8 f8f6 	bl	8000608 <__aeabi_dmul>
 800841c:	a337      	add	r3, pc, #220	; (adr r3, 80084fc <__kernel_sin+0x174>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f7 ff3b 	bl	800029c <__adddf3>
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	4606      	mov	r6, r0
 800842a:	460f      	mov	r7, r1
 800842c:	b9eb      	cbnz	r3, 800846a <__kernel_sin+0xe2>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4650      	mov	r0, sl
 8008434:	4659      	mov	r1, fp
 8008436:	f7f8 f8e7 	bl	8000608 <__aeabi_dmul>
 800843a:	a325      	add	r3, pc, #148	; (adr r3, 80084d0 <__kernel_sin+0x148>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f7 ff2a 	bl	8000298 <__aeabi_dsub>
 8008444:	4642      	mov	r2, r8
 8008446:	464b      	mov	r3, r9
 8008448:	f7f8 f8de 	bl	8000608 <__aeabi_dmul>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4620      	mov	r0, r4
 8008452:	4629      	mov	r1, r5
 8008454:	f7f7 ff22 	bl	800029c <__adddf3>
 8008458:	4604      	mov	r4, r0
 800845a:	460d      	mov	r5, r1
 800845c:	ec45 4b10 	vmov	d0, r4, r5
 8008460:	b003      	add	sp, #12
 8008462:	ecbd 8b04 	vpop	{d8-d9}
 8008466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <__kernel_sin+0x150>)
 800846c:	ec51 0b18 	vmov	r0, r1, d8
 8008470:	2200      	movs	r2, #0
 8008472:	f7f8 f8c9 	bl	8000608 <__aeabi_dmul>
 8008476:	4632      	mov	r2, r6
 8008478:	ec41 0b19 	vmov	d9, r0, r1
 800847c:	463b      	mov	r3, r7
 800847e:	4640      	mov	r0, r8
 8008480:	4649      	mov	r1, r9
 8008482:	f7f8 f8c1 	bl	8000608 <__aeabi_dmul>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	ec51 0b19 	vmov	r0, r1, d9
 800848e:	f7f7 ff03 	bl	8000298 <__aeabi_dsub>
 8008492:	4652      	mov	r2, sl
 8008494:	465b      	mov	r3, fp
 8008496:	f7f8 f8b7 	bl	8000608 <__aeabi_dmul>
 800849a:	ec53 2b18 	vmov	r2, r3, d8
 800849e:	f7f7 fefb 	bl	8000298 <__aeabi_dsub>
 80084a2:	a30b      	add	r3, pc, #44	; (adr r3, 80084d0 <__kernel_sin+0x148>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	4606      	mov	r6, r0
 80084aa:	460f      	mov	r7, r1
 80084ac:	4640      	mov	r0, r8
 80084ae:	4649      	mov	r1, r9
 80084b0:	f7f8 f8aa 	bl	8000608 <__aeabi_dmul>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4630      	mov	r0, r6
 80084ba:	4639      	mov	r1, r7
 80084bc:	f7f7 feee 	bl	800029c <__adddf3>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4620      	mov	r0, r4
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7f7 fee6 	bl	8000298 <__aeabi_dsub>
 80084cc:	e7c4      	b.n	8008458 <__kernel_sin+0xd0>
 80084ce:	bf00      	nop
 80084d0:	55555549 	.word	0x55555549
 80084d4:	3fc55555 	.word	0x3fc55555
 80084d8:	3fe00000 	.word	0x3fe00000
 80084dc:	5acfd57c 	.word	0x5acfd57c
 80084e0:	3de5d93a 	.word	0x3de5d93a
 80084e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80084e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80084ec:	57b1fe7d 	.word	0x57b1fe7d
 80084f0:	3ec71de3 	.word	0x3ec71de3
 80084f4:	19c161d5 	.word	0x19c161d5
 80084f8:	3f2a01a0 	.word	0x3f2a01a0
 80084fc:	1110f8a6 	.word	0x1110f8a6
 8008500:	3f811111 	.word	0x3f811111
 8008504:	00000000 	.word	0x00000000

08008508 <atan>:
 8008508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	ec55 4b10 	vmov	r4, r5, d0
 8008510:	4bc3      	ldr	r3, [pc, #780]	; (8008820 <atan+0x318>)
 8008512:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008516:	429e      	cmp	r6, r3
 8008518:	46ab      	mov	fp, r5
 800851a:	dd18      	ble.n	800854e <atan+0x46>
 800851c:	4bc1      	ldr	r3, [pc, #772]	; (8008824 <atan+0x31c>)
 800851e:	429e      	cmp	r6, r3
 8008520:	dc01      	bgt.n	8008526 <atan+0x1e>
 8008522:	d109      	bne.n	8008538 <atan+0x30>
 8008524:	b144      	cbz	r4, 8008538 <atan+0x30>
 8008526:	4622      	mov	r2, r4
 8008528:	462b      	mov	r3, r5
 800852a:	4620      	mov	r0, r4
 800852c:	4629      	mov	r1, r5
 800852e:	f7f7 feb5 	bl	800029c <__adddf3>
 8008532:	4604      	mov	r4, r0
 8008534:	460d      	mov	r5, r1
 8008536:	e006      	b.n	8008546 <atan+0x3e>
 8008538:	f1bb 0f00 	cmp.w	fp, #0
 800853c:	f300 8131 	bgt.w	80087a2 <atan+0x29a>
 8008540:	a59b      	add	r5, pc, #620	; (adr r5, 80087b0 <atan+0x2a8>)
 8008542:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008546:	ec45 4b10 	vmov	d0, r4, r5
 800854a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854e:	4bb6      	ldr	r3, [pc, #728]	; (8008828 <atan+0x320>)
 8008550:	429e      	cmp	r6, r3
 8008552:	dc14      	bgt.n	800857e <atan+0x76>
 8008554:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008558:	429e      	cmp	r6, r3
 800855a:	dc0d      	bgt.n	8008578 <atan+0x70>
 800855c:	a396      	add	r3, pc, #600	; (adr r3, 80087b8 <atan+0x2b0>)
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	ee10 0a10 	vmov	r0, s0
 8008566:	4629      	mov	r1, r5
 8008568:	f7f7 fe98 	bl	800029c <__adddf3>
 800856c:	4baf      	ldr	r3, [pc, #700]	; (800882c <atan+0x324>)
 800856e:	2200      	movs	r2, #0
 8008570:	f7f8 fada 	bl	8000b28 <__aeabi_dcmpgt>
 8008574:	2800      	cmp	r0, #0
 8008576:	d1e6      	bne.n	8008546 <atan+0x3e>
 8008578:	f04f 3aff 	mov.w	sl, #4294967295
 800857c:	e02b      	b.n	80085d6 <atan+0xce>
 800857e:	f000 f963 	bl	8008848 <fabs>
 8008582:	4bab      	ldr	r3, [pc, #684]	; (8008830 <atan+0x328>)
 8008584:	429e      	cmp	r6, r3
 8008586:	ec55 4b10 	vmov	r4, r5, d0
 800858a:	f300 80bf 	bgt.w	800870c <atan+0x204>
 800858e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008592:	429e      	cmp	r6, r3
 8008594:	f300 80a0 	bgt.w	80086d8 <atan+0x1d0>
 8008598:	ee10 2a10 	vmov	r2, s0
 800859c:	ee10 0a10 	vmov	r0, s0
 80085a0:	462b      	mov	r3, r5
 80085a2:	4629      	mov	r1, r5
 80085a4:	f7f7 fe7a 	bl	800029c <__adddf3>
 80085a8:	4ba0      	ldr	r3, [pc, #640]	; (800882c <atan+0x324>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	f7f7 fe74 	bl	8000298 <__aeabi_dsub>
 80085b0:	2200      	movs	r2, #0
 80085b2:	4606      	mov	r6, r0
 80085b4:	460f      	mov	r7, r1
 80085b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085ba:	4620      	mov	r0, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f7 fe6d 	bl	800029c <__adddf3>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4630      	mov	r0, r6
 80085c8:	4639      	mov	r1, r7
 80085ca:	f7f8 f947 	bl	800085c <__aeabi_ddiv>
 80085ce:	f04f 0a00 	mov.w	sl, #0
 80085d2:	4604      	mov	r4, r0
 80085d4:	460d      	mov	r5, r1
 80085d6:	4622      	mov	r2, r4
 80085d8:	462b      	mov	r3, r5
 80085da:	4620      	mov	r0, r4
 80085dc:	4629      	mov	r1, r5
 80085de:	f7f8 f813 	bl	8000608 <__aeabi_dmul>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4680      	mov	r8, r0
 80085e8:	4689      	mov	r9, r1
 80085ea:	f7f8 f80d 	bl	8000608 <__aeabi_dmul>
 80085ee:	a374      	add	r3, pc, #464	; (adr r3, 80087c0 <atan+0x2b8>)
 80085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f4:	4606      	mov	r6, r0
 80085f6:	460f      	mov	r7, r1
 80085f8:	f7f8 f806 	bl	8000608 <__aeabi_dmul>
 80085fc:	a372      	add	r3, pc, #456	; (adr r3, 80087c8 <atan+0x2c0>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	f7f7 fe4b 	bl	800029c <__adddf3>
 8008606:	4632      	mov	r2, r6
 8008608:	463b      	mov	r3, r7
 800860a:	f7f7 fffd 	bl	8000608 <__aeabi_dmul>
 800860e:	a370      	add	r3, pc, #448	; (adr r3, 80087d0 <atan+0x2c8>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f7f7 fe42 	bl	800029c <__adddf3>
 8008618:	4632      	mov	r2, r6
 800861a:	463b      	mov	r3, r7
 800861c:	f7f7 fff4 	bl	8000608 <__aeabi_dmul>
 8008620:	a36d      	add	r3, pc, #436	; (adr r3, 80087d8 <atan+0x2d0>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f7f7 fe39 	bl	800029c <__adddf3>
 800862a:	4632      	mov	r2, r6
 800862c:	463b      	mov	r3, r7
 800862e:	f7f7 ffeb 	bl	8000608 <__aeabi_dmul>
 8008632:	a36b      	add	r3, pc, #428	; (adr r3, 80087e0 <atan+0x2d8>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fe30 	bl	800029c <__adddf3>
 800863c:	4632      	mov	r2, r6
 800863e:	463b      	mov	r3, r7
 8008640:	f7f7 ffe2 	bl	8000608 <__aeabi_dmul>
 8008644:	a368      	add	r3, pc, #416	; (adr r3, 80087e8 <atan+0x2e0>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f7 fe27 	bl	800029c <__adddf3>
 800864e:	4642      	mov	r2, r8
 8008650:	464b      	mov	r3, r9
 8008652:	f7f7 ffd9 	bl	8000608 <__aeabi_dmul>
 8008656:	a366      	add	r3, pc, #408	; (adr r3, 80087f0 <atan+0x2e8>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	4680      	mov	r8, r0
 800865e:	4689      	mov	r9, r1
 8008660:	4630      	mov	r0, r6
 8008662:	4639      	mov	r1, r7
 8008664:	f7f7 ffd0 	bl	8000608 <__aeabi_dmul>
 8008668:	a363      	add	r3, pc, #396	; (adr r3, 80087f8 <atan+0x2f0>)
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f7f7 fe13 	bl	8000298 <__aeabi_dsub>
 8008672:	4632      	mov	r2, r6
 8008674:	463b      	mov	r3, r7
 8008676:	f7f7 ffc7 	bl	8000608 <__aeabi_dmul>
 800867a:	a361      	add	r3, pc, #388	; (adr r3, 8008800 <atan+0x2f8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 fe0a 	bl	8000298 <__aeabi_dsub>
 8008684:	4632      	mov	r2, r6
 8008686:	463b      	mov	r3, r7
 8008688:	f7f7 ffbe 	bl	8000608 <__aeabi_dmul>
 800868c:	a35e      	add	r3, pc, #376	; (adr r3, 8008808 <atan+0x300>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	f7f7 fe01 	bl	8000298 <__aeabi_dsub>
 8008696:	4632      	mov	r2, r6
 8008698:	463b      	mov	r3, r7
 800869a:	f7f7 ffb5 	bl	8000608 <__aeabi_dmul>
 800869e:	a35c      	add	r3, pc, #368	; (adr r3, 8008810 <atan+0x308>)
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f7f7 fdf8 	bl	8000298 <__aeabi_dsub>
 80086a8:	4632      	mov	r2, r6
 80086aa:	463b      	mov	r3, r7
 80086ac:	f7f7 ffac 	bl	8000608 <__aeabi_dmul>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4640      	mov	r0, r8
 80086b6:	4649      	mov	r1, r9
 80086b8:	f7f7 fdf0 	bl	800029c <__adddf3>
 80086bc:	4622      	mov	r2, r4
 80086be:	462b      	mov	r3, r5
 80086c0:	f7f7 ffa2 	bl	8000608 <__aeabi_dmul>
 80086c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	d14b      	bne.n	8008766 <atan+0x25e>
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f7 fde1 	bl	8000298 <__aeabi_dsub>
 80086d6:	e72c      	b.n	8008532 <atan+0x2a>
 80086d8:	ee10 0a10 	vmov	r0, s0
 80086dc:	4b53      	ldr	r3, [pc, #332]	; (800882c <atan+0x324>)
 80086de:	2200      	movs	r2, #0
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f7 fdd9 	bl	8000298 <__aeabi_dsub>
 80086e6:	4b51      	ldr	r3, [pc, #324]	; (800882c <atan+0x324>)
 80086e8:	4606      	mov	r6, r0
 80086ea:	460f      	mov	r7, r1
 80086ec:	2200      	movs	r2, #0
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f7 fdd3 	bl	800029c <__adddf3>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4630      	mov	r0, r6
 80086fc:	4639      	mov	r1, r7
 80086fe:	f7f8 f8ad 	bl	800085c <__aeabi_ddiv>
 8008702:	f04f 0a01 	mov.w	sl, #1
 8008706:	4604      	mov	r4, r0
 8008708:	460d      	mov	r5, r1
 800870a:	e764      	b.n	80085d6 <atan+0xce>
 800870c:	4b49      	ldr	r3, [pc, #292]	; (8008834 <atan+0x32c>)
 800870e:	429e      	cmp	r6, r3
 8008710:	da1d      	bge.n	800874e <atan+0x246>
 8008712:	ee10 0a10 	vmov	r0, s0
 8008716:	4b48      	ldr	r3, [pc, #288]	; (8008838 <atan+0x330>)
 8008718:	2200      	movs	r2, #0
 800871a:	4629      	mov	r1, r5
 800871c:	f7f7 fdbc 	bl	8000298 <__aeabi_dsub>
 8008720:	4b45      	ldr	r3, [pc, #276]	; (8008838 <atan+0x330>)
 8008722:	4606      	mov	r6, r0
 8008724:	460f      	mov	r7, r1
 8008726:	2200      	movs	r2, #0
 8008728:	4620      	mov	r0, r4
 800872a:	4629      	mov	r1, r5
 800872c:	f7f7 ff6c 	bl	8000608 <__aeabi_dmul>
 8008730:	4b3e      	ldr	r3, [pc, #248]	; (800882c <atan+0x324>)
 8008732:	2200      	movs	r2, #0
 8008734:	f7f7 fdb2 	bl	800029c <__adddf3>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4630      	mov	r0, r6
 800873e:	4639      	mov	r1, r7
 8008740:	f7f8 f88c 	bl	800085c <__aeabi_ddiv>
 8008744:	f04f 0a02 	mov.w	sl, #2
 8008748:	4604      	mov	r4, r0
 800874a:	460d      	mov	r5, r1
 800874c:	e743      	b.n	80085d6 <atan+0xce>
 800874e:	462b      	mov	r3, r5
 8008750:	ee10 2a10 	vmov	r2, s0
 8008754:	4939      	ldr	r1, [pc, #228]	; (800883c <atan+0x334>)
 8008756:	2000      	movs	r0, #0
 8008758:	f7f8 f880 	bl	800085c <__aeabi_ddiv>
 800875c:	f04f 0a03 	mov.w	sl, #3
 8008760:	4604      	mov	r4, r0
 8008762:	460d      	mov	r5, r1
 8008764:	e737      	b.n	80085d6 <atan+0xce>
 8008766:	4b36      	ldr	r3, [pc, #216]	; (8008840 <atan+0x338>)
 8008768:	4e36      	ldr	r6, [pc, #216]	; (8008844 <atan+0x33c>)
 800876a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800876e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008772:	e9da 2300 	ldrd	r2, r3, [sl]
 8008776:	f7f7 fd8f 	bl	8000298 <__aeabi_dsub>
 800877a:	4622      	mov	r2, r4
 800877c:	462b      	mov	r3, r5
 800877e:	f7f7 fd8b 	bl	8000298 <__aeabi_dsub>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	e9d6 0100 	ldrd	r0, r1, [r6]
 800878a:	f7f7 fd85 	bl	8000298 <__aeabi_dsub>
 800878e:	f1bb 0f00 	cmp.w	fp, #0
 8008792:	4604      	mov	r4, r0
 8008794:	460d      	mov	r5, r1
 8008796:	f6bf aed6 	bge.w	8008546 <atan+0x3e>
 800879a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800879e:	461d      	mov	r5, r3
 80087a0:	e6d1      	b.n	8008546 <atan+0x3e>
 80087a2:	a51d      	add	r5, pc, #116	; (adr r5, 8008818 <atan+0x310>)
 80087a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087a8:	e6cd      	b.n	8008546 <atan+0x3e>
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w
 80087b0:	54442d18 	.word	0x54442d18
 80087b4:	bff921fb 	.word	0xbff921fb
 80087b8:	8800759c 	.word	0x8800759c
 80087bc:	7e37e43c 	.word	0x7e37e43c
 80087c0:	e322da11 	.word	0xe322da11
 80087c4:	3f90ad3a 	.word	0x3f90ad3a
 80087c8:	24760deb 	.word	0x24760deb
 80087cc:	3fa97b4b 	.word	0x3fa97b4b
 80087d0:	a0d03d51 	.word	0xa0d03d51
 80087d4:	3fb10d66 	.word	0x3fb10d66
 80087d8:	c54c206e 	.word	0xc54c206e
 80087dc:	3fb745cd 	.word	0x3fb745cd
 80087e0:	920083ff 	.word	0x920083ff
 80087e4:	3fc24924 	.word	0x3fc24924
 80087e8:	5555550d 	.word	0x5555550d
 80087ec:	3fd55555 	.word	0x3fd55555
 80087f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80087f4:	bfa2b444 	.word	0xbfa2b444
 80087f8:	52defd9a 	.word	0x52defd9a
 80087fc:	3fadde2d 	.word	0x3fadde2d
 8008800:	af749a6d 	.word	0xaf749a6d
 8008804:	3fb3b0f2 	.word	0x3fb3b0f2
 8008808:	fe231671 	.word	0xfe231671
 800880c:	3fbc71c6 	.word	0x3fbc71c6
 8008810:	9998ebc4 	.word	0x9998ebc4
 8008814:	3fc99999 	.word	0x3fc99999
 8008818:	54442d18 	.word	0x54442d18
 800881c:	3ff921fb 	.word	0x3ff921fb
 8008820:	440fffff 	.word	0x440fffff
 8008824:	7ff00000 	.word	0x7ff00000
 8008828:	3fdbffff 	.word	0x3fdbffff
 800882c:	3ff00000 	.word	0x3ff00000
 8008830:	3ff2ffff 	.word	0x3ff2ffff
 8008834:	40038000 	.word	0x40038000
 8008838:	3ff80000 	.word	0x3ff80000
 800883c:	bff00000 	.word	0xbff00000
 8008840:	08009678 	.word	0x08009678
 8008844:	08009658 	.word	0x08009658

08008848 <fabs>:
 8008848:	ec51 0b10 	vmov	r0, r1, d0
 800884c:	ee10 2a10 	vmov	r2, s0
 8008850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008854:	ec43 2b10 	vmov	d0, r2, r3
 8008858:	4770      	bx	lr
 800885a:	0000      	movs	r0, r0
 800885c:	0000      	movs	r0, r0
	...

08008860 <floor>:
 8008860:	ec51 0b10 	vmov	r0, r1, d0
 8008864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008868:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800886c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008870:	2e13      	cmp	r6, #19
 8008872:	ee10 5a10 	vmov	r5, s0
 8008876:	ee10 8a10 	vmov	r8, s0
 800887a:	460c      	mov	r4, r1
 800887c:	dc32      	bgt.n	80088e4 <floor+0x84>
 800887e:	2e00      	cmp	r6, #0
 8008880:	da14      	bge.n	80088ac <floor+0x4c>
 8008882:	a333      	add	r3, pc, #204	; (adr r3, 8008950 <floor+0xf0>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fd08 	bl	800029c <__adddf3>
 800888c:	2200      	movs	r2, #0
 800888e:	2300      	movs	r3, #0
 8008890:	f7f8 f94a 	bl	8000b28 <__aeabi_dcmpgt>
 8008894:	b138      	cbz	r0, 80088a6 <floor+0x46>
 8008896:	2c00      	cmp	r4, #0
 8008898:	da57      	bge.n	800894a <floor+0xea>
 800889a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800889e:	431d      	orrs	r5, r3
 80088a0:	d001      	beq.n	80088a6 <floor+0x46>
 80088a2:	4c2d      	ldr	r4, [pc, #180]	; (8008958 <floor+0xf8>)
 80088a4:	2500      	movs	r5, #0
 80088a6:	4621      	mov	r1, r4
 80088a8:	4628      	mov	r0, r5
 80088aa:	e025      	b.n	80088f8 <floor+0x98>
 80088ac:	4f2b      	ldr	r7, [pc, #172]	; (800895c <floor+0xfc>)
 80088ae:	4137      	asrs	r7, r6
 80088b0:	ea01 0307 	and.w	r3, r1, r7
 80088b4:	4303      	orrs	r3, r0
 80088b6:	d01f      	beq.n	80088f8 <floor+0x98>
 80088b8:	a325      	add	r3, pc, #148	; (adr r3, 8008950 <floor+0xf0>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fced 	bl	800029c <__adddf3>
 80088c2:	2200      	movs	r2, #0
 80088c4:	2300      	movs	r3, #0
 80088c6:	f7f8 f92f 	bl	8000b28 <__aeabi_dcmpgt>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d0eb      	beq.n	80088a6 <floor+0x46>
 80088ce:	2c00      	cmp	r4, #0
 80088d0:	bfbe      	ittt	lt
 80088d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80088d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80088da:	19a4      	addlt	r4, r4, r6
 80088dc:	ea24 0407 	bic.w	r4, r4, r7
 80088e0:	2500      	movs	r5, #0
 80088e2:	e7e0      	b.n	80088a6 <floor+0x46>
 80088e4:	2e33      	cmp	r6, #51	; 0x33
 80088e6:	dd0b      	ble.n	8008900 <floor+0xa0>
 80088e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80088ec:	d104      	bne.n	80088f8 <floor+0x98>
 80088ee:	ee10 2a10 	vmov	r2, s0
 80088f2:	460b      	mov	r3, r1
 80088f4:	f7f7 fcd2 	bl	800029c <__adddf3>
 80088f8:	ec41 0b10 	vmov	d0, r0, r1
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
 8008908:	fa23 f707 	lsr.w	r7, r3, r7
 800890c:	4207      	tst	r7, r0
 800890e:	d0f3      	beq.n	80088f8 <floor+0x98>
 8008910:	a30f      	add	r3, pc, #60	; (adr r3, 8008950 <floor+0xf0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fcc1 	bl	800029c <__adddf3>
 800891a:	2200      	movs	r2, #0
 800891c:	2300      	movs	r3, #0
 800891e:	f7f8 f903 	bl	8000b28 <__aeabi_dcmpgt>
 8008922:	2800      	cmp	r0, #0
 8008924:	d0bf      	beq.n	80088a6 <floor+0x46>
 8008926:	2c00      	cmp	r4, #0
 8008928:	da02      	bge.n	8008930 <floor+0xd0>
 800892a:	2e14      	cmp	r6, #20
 800892c:	d103      	bne.n	8008936 <floor+0xd6>
 800892e:	3401      	adds	r4, #1
 8008930:	ea25 0507 	bic.w	r5, r5, r7
 8008934:	e7b7      	b.n	80088a6 <floor+0x46>
 8008936:	2301      	movs	r3, #1
 8008938:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800893c:	fa03 f606 	lsl.w	r6, r3, r6
 8008940:	4435      	add	r5, r6
 8008942:	4545      	cmp	r5, r8
 8008944:	bf38      	it	cc
 8008946:	18e4      	addcc	r4, r4, r3
 8008948:	e7f2      	b.n	8008930 <floor+0xd0>
 800894a:	2500      	movs	r5, #0
 800894c:	462c      	mov	r4, r5
 800894e:	e7aa      	b.n	80088a6 <floor+0x46>
 8008950:	8800759c 	.word	0x8800759c
 8008954:	7e37e43c 	.word	0x7e37e43c
 8008958:	bff00000 	.word	0xbff00000
 800895c:	000fffff 	.word	0x000fffff

08008960 <scalbn>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	ec55 4b10 	vmov	r4, r5, d0
 8008966:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800896a:	4606      	mov	r6, r0
 800896c:	462b      	mov	r3, r5
 800896e:	b99a      	cbnz	r2, 8008998 <scalbn+0x38>
 8008970:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008974:	4323      	orrs	r3, r4
 8008976:	d036      	beq.n	80089e6 <scalbn+0x86>
 8008978:	4b39      	ldr	r3, [pc, #228]	; (8008a60 <scalbn+0x100>)
 800897a:	4629      	mov	r1, r5
 800897c:	ee10 0a10 	vmov	r0, s0
 8008980:	2200      	movs	r2, #0
 8008982:	f7f7 fe41 	bl	8000608 <__aeabi_dmul>
 8008986:	4b37      	ldr	r3, [pc, #220]	; (8008a64 <scalbn+0x104>)
 8008988:	429e      	cmp	r6, r3
 800898a:	4604      	mov	r4, r0
 800898c:	460d      	mov	r5, r1
 800898e:	da10      	bge.n	80089b2 <scalbn+0x52>
 8008990:	a32b      	add	r3, pc, #172	; (adr r3, 8008a40 <scalbn+0xe0>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	e03a      	b.n	8008a0e <scalbn+0xae>
 8008998:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800899c:	428a      	cmp	r2, r1
 800899e:	d10c      	bne.n	80089ba <scalbn+0x5a>
 80089a0:	ee10 2a10 	vmov	r2, s0
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f7 fc78 	bl	800029c <__adddf3>
 80089ac:	4604      	mov	r4, r0
 80089ae:	460d      	mov	r5, r1
 80089b0:	e019      	b.n	80089e6 <scalbn+0x86>
 80089b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80089b6:	460b      	mov	r3, r1
 80089b8:	3a36      	subs	r2, #54	; 0x36
 80089ba:	4432      	add	r2, r6
 80089bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80089c0:	428a      	cmp	r2, r1
 80089c2:	dd08      	ble.n	80089d6 <scalbn+0x76>
 80089c4:	2d00      	cmp	r5, #0
 80089c6:	a120      	add	r1, pc, #128	; (adr r1, 8008a48 <scalbn+0xe8>)
 80089c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089cc:	da1c      	bge.n	8008a08 <scalbn+0xa8>
 80089ce:	a120      	add	r1, pc, #128	; (adr r1, 8008a50 <scalbn+0xf0>)
 80089d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d4:	e018      	b.n	8008a08 <scalbn+0xa8>
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	dd08      	ble.n	80089ec <scalbn+0x8c>
 80089da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80089de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80089e6:	ec45 4b10 	vmov	d0, r4, r5
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80089f0:	da19      	bge.n	8008a26 <scalbn+0xc6>
 80089f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80089f6:	429e      	cmp	r6, r3
 80089f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80089fc:	dd0a      	ble.n	8008a14 <scalbn+0xb4>
 80089fe:	a112      	add	r1, pc, #72	; (adr r1, 8008a48 <scalbn+0xe8>)
 8008a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e2      	bne.n	80089ce <scalbn+0x6e>
 8008a08:	a30f      	add	r3, pc, #60	; (adr r3, 8008a48 <scalbn+0xe8>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fdfb 	bl	8000608 <__aeabi_dmul>
 8008a12:	e7cb      	b.n	80089ac <scalbn+0x4c>
 8008a14:	a10a      	add	r1, pc, #40	; (adr r1, 8008a40 <scalbn+0xe0>)
 8008a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0b8      	beq.n	8008990 <scalbn+0x30>
 8008a1e:	a10e      	add	r1, pc, #56	; (adr r1, 8008a58 <scalbn+0xf8>)
 8008a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a24:	e7b4      	b.n	8008990 <scalbn+0x30>
 8008a26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a2a:	3236      	adds	r2, #54	; 0x36
 8008a2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008a34:	4620      	mov	r0, r4
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <scalbn+0x108>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	e7e8      	b.n	8008a0e <scalbn+0xae>
 8008a3c:	f3af 8000 	nop.w
 8008a40:	c2f8f359 	.word	0xc2f8f359
 8008a44:	01a56e1f 	.word	0x01a56e1f
 8008a48:	8800759c 	.word	0x8800759c
 8008a4c:	7e37e43c 	.word	0x7e37e43c
 8008a50:	8800759c 	.word	0x8800759c
 8008a54:	fe37e43c 	.word	0xfe37e43c
 8008a58:	c2f8f359 	.word	0xc2f8f359
 8008a5c:	81a56e1f 	.word	0x81a56e1f
 8008a60:	43500000 	.word	0x43500000
 8008a64:	ffff3cb0 	.word	0xffff3cb0
 8008a68:	3c900000 	.word	0x3c900000

08008a6c <_close>:
 8008a6c:	4b02      	ldr	r3, [pc, #8]	; (8008a78 <_close+0xc>)
 8008a6e:	2258      	movs	r2, #88	; 0x58
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	f04f 30ff 	mov.w	r0, #4294967295
 8008a76:	4770      	bx	lr
 8008a78:	2000023c 	.word	0x2000023c

08008a7c <_fstat>:
 8008a7c:	4b02      	ldr	r3, [pc, #8]	; (8008a88 <_fstat+0xc>)
 8008a7e:	2258      	movs	r2, #88	; 0x58
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	4770      	bx	lr
 8008a88:	2000023c 	.word	0x2000023c

08008a8c <_getpid>:
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <_getpid+0xc>)
 8008a8e:	2258      	movs	r2, #88	; 0x58
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	f04f 30ff 	mov.w	r0, #4294967295
 8008a96:	4770      	bx	lr
 8008a98:	2000023c 	.word	0x2000023c

08008a9c <_isatty>:
 8008a9c:	4b02      	ldr	r3, [pc, #8]	; (8008aa8 <_isatty+0xc>)
 8008a9e:	2258      	movs	r2, #88	; 0x58
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	2000023c 	.word	0x2000023c

08008aac <_kill>:
 8008aac:	4b02      	ldr	r3, [pc, #8]	; (8008ab8 <_kill+0xc>)
 8008aae:	2258      	movs	r2, #88	; 0x58
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab6:	4770      	bx	lr
 8008ab8:	2000023c 	.word	0x2000023c

08008abc <_lseek>:
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <_lseek+0xc>)
 8008abe:	2258      	movs	r2, #88	; 0x58
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac6:	4770      	bx	lr
 8008ac8:	2000023c 	.word	0x2000023c

08008acc <_read>:
 8008acc:	4b02      	ldr	r3, [pc, #8]	; (8008ad8 <_read+0xc>)
 8008ace:	2258      	movs	r2, #88	; 0x58
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad6:	4770      	bx	lr
 8008ad8:	2000023c 	.word	0x2000023c

08008adc <_sbrk>:
 8008adc:	4a04      	ldr	r2, [pc, #16]	; (8008af0 <_sbrk+0x14>)
 8008ade:	6811      	ldr	r1, [r2, #0]
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	b909      	cbnz	r1, 8008ae8 <_sbrk+0xc>
 8008ae4:	4903      	ldr	r1, [pc, #12]	; (8008af4 <_sbrk+0x18>)
 8008ae6:	6011      	str	r1, [r2, #0]
 8008ae8:	6810      	ldr	r0, [r2, #0]
 8008aea:	4403      	add	r3, r0
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	4770      	bx	lr
 8008af0:	20000244 	.word	0x20000244
 8008af4:	20000248 	.word	0x20000248

08008af8 <_write>:
 8008af8:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <_write+0xc>)
 8008afa:	2258      	movs	r2, #88	; 0x58
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	f04f 30ff 	mov.w	r0, #4294967295
 8008b02:	4770      	bx	lr
 8008b04:	2000023c 	.word	0x2000023c

08008b08 <_exit>:
 8008b08:	e7fe      	b.n	8008b08 <_exit>
	...

08008b0c <_init>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr

08008b18 <_fini>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	bf00      	nop
 8008b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	469e      	mov	lr, r3
 8008b22:	4770      	bx	lr
