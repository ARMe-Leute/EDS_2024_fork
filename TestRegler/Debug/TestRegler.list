
TestRegler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000758c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af8  08007730  08007730  00017730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008228  08008228  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008230  08008230  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  200001e0  08008418  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08008418  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007462  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184e  00000000  00000000  00027672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00028ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010022  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d43  00000000  00000000  00039baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056972  00000000  00000000  000408ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009725f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed0  00000000  00000000  000972b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0009a180  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0009a24c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007714 	.word	0x08007714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007714 	.word	0x08007714

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <i2cActivate>:
// Init hardware



void i2cActivate()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <i2cActivate+0xc8>)
 8000ec4:	60fb      	str	r3, [r7, #12]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <i2cActivate+0xcc>)
 8000ec8:	60bb      	str	r3, [r7, #8]
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 8000eca:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <i2cActivate+0xd0>)
 8000ecc:	607b      	str	r3, [r7, #4]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f002 f846 	bl	8002f60 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f001 fd9b 	bl	8002a10 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8000eda:	2202      	movs	r2, #2
 8000edc:	2108      	movs	r1, #8
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f001 fe5c 	bl	8002b9c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 fef9 	bl	8002ce0 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8000eee:	2202      	movs	r2, #2
 8000ef0:	2109      	movs	r1, #9
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f001 fe52 	bl	8002b9c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8000ef8:	2204      	movs	r2, #4
 8000efa:	2109      	movs	r1, #9
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f001 feef 	bl	8002ce0 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 8000f02:	2201      	movs	r2, #1
 8000f04:	2108      	movs	r1, #8
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f001 ff53 	bl	8002db2 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2109      	movs	r1, #9
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f001 ff4e 	bl	8002db2 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 8000f16:	2300      	movs	r3, #0
 8000f18:	2211      	movs	r2, #17
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f002 f8d1 	bl	80030c4 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f002 f91e 	bl	8003164 <i2cEnableDevice>
#ifdef BALA2024

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f002 f819 	bl	8002f60 <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 8000f2e:	2202      	movs	r2, #2
 8000f30:	210a      	movs	r1, #10
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f001 fe32 	bl	8002b9c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 8000f38:	2204      	movs	r2, #4
 8000f3a:	210a      	movs	r1, #10
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f001 fecf 	bl	8002ce0 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 8000f42:	2202      	movs	r2, #2
 8000f44:	2103      	movs	r1, #3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f001 fe28 	bl	8002b9c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 8000f4c:	2209      	movs	r2, #9
 8000f4e:	2103      	movs	r1, #3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 fec5 	bl	8002ce0 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 8000f56:	2201      	movs	r2, #1
 8000f58:	210a      	movs	r1, #10
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f001 ff29 	bl	8002db2 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 8000f60:	2201      	movs	r2, #1
 8000f62:	2103      	movs	r1, #3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f001 ff24 	bl	8002db2 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2211      	movs	r2, #17
 8000f6e:	2100      	movs	r1, #0
 8000f70:	68b8      	ldr	r0, [r7, #8]
 8000f72:	f002 f8a7 	bl	80030c4 <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 8000f76:	68b8      	ldr	r0, [r7, #8]
 8000f78:	f002 f8f4 	bl	8003164 <i2cEnableDevice>
#endif /* BALA2024 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40005400 	.word	0x40005400
 8000f88:	40005800 	.word	0x40005800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <ledActivate>:




void ledActivate(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8000f94:	481e      	ldr	r0, [pc, #120]	; (8001010 <ledActivate+0x80>)
 8000f96:	f001 fd9d 	bl	8002ad4 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	481c      	ldr	r0, [pc, #112]	; (8001010 <ledActivate+0x80>)
 8000fa0:	f001 fdfc 	bl	8002b9c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	4819      	ldr	r0, [pc, #100]	; (8001010 <ledActivate+0x80>)
 8000faa:	f001 ff02 	bl	8002db2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <ledActivate+0x80>)
 8000fb4:	f001 ff46 	bl	8002e44 <gpioSelectPushPullMode>
    LED_red_off;
 8000fb8:	210f      	movs	r1, #15
 8000fba:	4815      	ldr	r0, [pc, #84]	; (8001010 <ledActivate+0x80>)
 8000fbc:	f001 fe39 	bl	8002c32 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	210e      	movs	r1, #14
 8000fc4:	4812      	ldr	r0, [pc, #72]	; (8001010 <ledActivate+0x80>)
 8000fc6:	f001 fde9 	bl	8002b9c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	210e      	movs	r1, #14
 8000fce:	4810      	ldr	r0, [pc, #64]	; (8001010 <ledActivate+0x80>)
 8000fd0:	f001 feef 	bl	8002db2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	210e      	movs	r1, #14
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <ledActivate+0x80>)
 8000fda:	f001 ff33 	bl	8002e44 <gpioSelectPushPullMode>
    LED_green_off;
 8000fde:	210e      	movs	r1, #14
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <ledActivate+0x80>)
 8000fe2:	f001 fe26 	bl	8002c32 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	210d      	movs	r1, #13
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <ledActivate+0x80>)
 8000fec:	f001 fdd6 	bl	8002b9c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	210d      	movs	r1, #13
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <ledActivate+0x80>)
 8000ff6:	f001 fedc 	bl	8002db2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	210d      	movs	r1, #13
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <ledActivate+0x80>)
 8001000:	f001 ff20 	bl	8002e44 <gpioSelectPushPullMode>
    LED_blue_off;
 8001004:	210d      	movs	r1, #13
 8001006:	4802      	ldr	r0, [pc, #8]	; (8001010 <ledActivate+0x80>)
 8001008:	f001 fe13 	bl	8002c32 <gpioSetPin>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40020400 	.word	0x40020400

08001014 <BALOsetup>:

void BALOsetup(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 8001018:	f7ff ffba 	bl	8000f90 <ledActivate>
   i2cActivate();
 800101c:	f7ff ff4e 	bl	8000ebc <i2cActivate>

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <AlBeOszi>:



uint16_t AlBeOszi(float *AlphaBeta)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

// Variables for Oszi Function
const int16_t oszi[3] = {70,50,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
const uint16_t osziColor = tft_GREY;
 800102c:	f641 1323 	movw	r3, #6435	; 0x1923
 8001030:	82fb      	strh	r3, [r7, #22]
const uint16_t aColor = tft_YELLOW;
 8001032:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001036:	82bb      	strh	r3, [r7, #20]
const uint16_t bColor = tft_MAGENTA;
 8001038:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800103c:	827b      	strh	r3, [r7, #18]

static int16_t timepos = 0;

// kleines Oszi als Zeitmitschrieb
	if (AlphaBeta[0] > 1) {AlphaBeta[0]= 1;}
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	dd03      	ble.n	800105a <AlBeOszi+0x36>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001058:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[0] < -1) {AlphaBeta[0]= -1;}
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	d502      	bpl.n	8001074 <AlBeOszi+0x50>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <AlBeOszi+0x1cc>)
 8001072:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] > 1) {AlphaBeta[1]= 1;}
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3304      	adds	r3, #4
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	dd04      	ble.n	8001094 <AlBeOszi+0x70>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3304      	adds	r3, #4
 800108e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001092:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] < -1) {AlphaBeta[1]= -1;}
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3304      	adds	r3, #4
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80010a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	d503      	bpl.n	80010b2 <AlBeOszi+0x8e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3304      	adds	r3, #4
 80010ae:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <AlBeOszi+0x1cc>)
 80010b0:	601a      	str	r2, [r3, #0]
	int16_t Ya = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[0]);			// - ST7735 y = 0 upper line inverter direct to y Scale
 80010b2:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <AlBeOszi+0x1d0>)
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <AlBeOszi+0x1d0>)
 80010bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d8:	ee17 3a90 	vmov	r3, s15
 80010dc:	b21b      	sxth	r3, r3
 80010de:	b29b      	uxth	r3, r3
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	823b      	strh	r3, [r7, #16]
	int16_t Yb = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[1]);
 80010e6:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <AlBeOszi+0x1d0>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <AlBeOszi+0x1d0>)
 80010f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3304      	adds	r3, #4
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110e:	ee17 3a90 	vmov	r3, s15
 8001112:	b21b      	sxth	r3, r3
 8001114:	b29b      	uxth	r3, r3
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	b29b      	uxth	r3, r3
 800111a:	81fb      	strh	r3, [r7, #14]
	int16_t osziHight = oszi[1]*2;
 800111c:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <AlBeOszi+0x1d0>)
 800111e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001122:	b29b      	uxth	r3, r3
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	81bb      	strh	r3, [r7, #12]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 800112a:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <AlBeOszi+0x1d4>)
 800112c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <AlBeOszi+0x1d0>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <AlBeOszi+0x1d0>)
 800113a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800113e:	b29b      	uxth	r3, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	b219      	sxth	r1, r3
 8001146:	8afb      	ldrh	r3, [r7, #22]
 8001148:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800114c:	f000 fbda 	bl	8001904 <tftDrawFastVLine>
	if (Ya == Yb)
 8001150:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001154:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001158:	429a      	cmp	r2, r3
 800115a:	d10a      	bne.n	8001172 <AlBeOszi+0x14e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <AlBeOszi+0x1d4>)
 800115e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001162:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fb0c 	bl	8001788 <tftDrawPixel>
 8001170:	e011      	b.n	8001196 <AlBeOszi+0x172>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <AlBeOszi+0x1d4>)
 8001174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001178:	8aba      	ldrh	r2, [r7, #20]
 800117a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fb02 	bl	8001788 <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <AlBeOszi+0x1d4>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	8a7a      	ldrh	r2, [r7, #18]
 800118c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 faf9 	bl	8001788 <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <AlBeOszi+0x1d4>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	b29b      	uxth	r3, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <AlBeOszi+0x1d4>)
 80011a6:	801a      	strh	r2, [r3, #0]
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <AlBeOszi+0x1d4>)
 80011aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <AlBeOszi+0x1d0>)
 80011b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dd02      	ble.n	80011be <AlBeOszi+0x19a>
	{
		timepos = 0;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <AlBeOszi+0x1d4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <AlBeOszi+0x1d4>)
 80011c0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <AlBeOszi+0x1d0>)
 80011c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <AlBeOszi+0x1d0>)
 80011cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011d0:	0fda      	lsrs	r2, r3, #31
 80011d2:	4413      	add	r3, r2
 80011d4:	105b      	asrs	r3, r3, #1
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011dc:	f000 fb92 	bl	8001904 <tftDrawFastVLine>
	return timepos;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <AlBeOszi+0x1d4>)
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e6:	b29b      	uxth	r3, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	bf800000 	.word	0xbf800000
 80011f4:	08007748 	.word	0x08007748
 80011f8:	200001fc 	.word	0x200001fc

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 800123c:	482b      	ldr	r0, [pc, #172]	; (80012ec <initRotaryPushButton+0xb4>)
 800123e:	f001 fbe7 	bl	8002a10 <gpioInitPort>
	gpioInitPort(GPIOB);
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <initRotaryPushButton+0xb8>)
 8001244:	f001 fbe4 	bl	8002a10 <gpioInitPort>
	gpioInitPort(GPIOC);
 8001248:	482a      	ldr	r0, [pc, #168]	; (80012f4 <initRotaryPushButton+0xbc>)
 800124a:	f001 fbe1 	bl	8002a10 <gpioInitPort>
	gpioInitPort(GPIOD);
 800124e:	482a      	ldr	r0, [pc, #168]	; (80012f8 <initRotaryPushButton+0xc0>)
 8001250:	f001 fbde 	bl	8002a10 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <initRotaryPushButton+0xc4>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <initRotaryPushButton+0xc4>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001262:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	4821      	ldr	r0, [pc, #132]	; (80012f0 <initRotaryPushButton+0xb8>)
 800126a:	f001 fc97 	bl	8002b9c <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 800126e:	2201      	movs	r2, #1
 8001270:	2100      	movs	r1, #0
 8001272:	481f      	ldr	r0, [pc, #124]	; (80012f0 <initRotaryPushButton+0xb8>)
 8001274:	f001 fde6 	bl	8002e44 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	481c      	ldr	r0, [pc, #112]	; (80012f0 <initRotaryPushButton+0xb8>)
 800127e:	f001 fc8d 	bl	8002b9c <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 8001282:	2201      	movs	r2, #1
 8001284:	2101      	movs	r1, #1
 8001286:	481a      	ldr	r0, [pc, #104]	; (80012f0 <initRotaryPushButton+0xb8>)
 8001288:	f001 fddc 	bl	8002e44 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 800128c:	2200      	movs	r2, #0
 800128e:	210a      	movs	r1, #10
 8001290:	4816      	ldr	r0, [pc, #88]	; (80012ec <initRotaryPushButton+0xb4>)
 8001292:	f001 fc83 	bl	8002b9c <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 8001296:	2201      	movs	r2, #1
 8001298:	210a      	movs	r1, #10
 800129a:	4814      	ldr	r0, [pc, #80]	; (80012ec <initRotaryPushButton+0xb4>)
 800129c:	f001 fdd2 	bl	8002e44 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 80012a0:	f001 f960 	bl	8002564 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 80012a4:	2100      	movs	r1, #0
 80012a6:	4812      	ldr	r0, [pc, #72]	; (80012f0 <initRotaryPushButton+0xb8>)
 80012a8:	f001 f978 	bl	800259c <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 80012ac:	210a      	movs	r1, #10
 80012ae:	480f      	ldr	r0, [pc, #60]	; (80012ec <initRotaryPushButton+0xb4>)
 80012b0:	f001 f974 	bl	800259c <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f001 fa25 	bl	8002704 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f001 fa22 	bl	8002704 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 80012c0:	2101      	movs	r1, #1
 80012c2:	2000      	movs	r0, #0
 80012c4:	f001 fa40 	bl	8002748 <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 80012c8:	2100      	movs	r1, #0
 80012ca:	200a      	movs	r0, #10
 80012cc:	f001 fa3c 	bl	8002748 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 80012d0:	2006      	movs	r0, #6
 80012d2:	f7ff ff93 	bl	80011fc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 80012d6:	2028      	movs	r0, #40	; 0x28
 80012d8:	f7ff ff90 	bl	80011fc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80012dc:	b662      	cpsie	i
}
 80012de:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <initRotaryPushButton+0xc8>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40023800 	.word	0x40023800
 8001300:	20000205 	.word	0x20000205

08001304 <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <getRotaryPushButton+0x3c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f083 0301 	eor.w	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <getRotaryPushButton+0x1c>
	{
		initRotaryPushButton();
 8001318:	f7ff ff8e 	bl	8001238 <initRotaryPushButton>
		return ERROR_VALUE;
 800131c:	2301      	movs	r3, #1
 800131e:	e00a      	b.n	8001336 <getRotaryPushButton+0x32>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <getRotaryPushButton+0x40>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <getRotaryPushButton+0x40>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <getRotaryPushButton+0x30>
	{
		pushButtonFlag = false;
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <getRotaryPushButton+0x40>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000205 	.word	0x20000205
 8001344:	20000204 	.word	0x20000204

08001348 <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <getRotaryPosition+0x24>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	f083 0301 	eor.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 800135a:	2301      	movs	r3, #1
 800135c:	e001      	b.n	8001362 <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <getRotaryPosition+0x28>)
 8001360:	681b      	ldr	r3, [r3, #0]
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000205 	.word	0x20000205
 8001370:	20000200 	.word	0x20000200

08001374 <setRotaryPosition>:

uint16_t setRotaryPosition(int32_t position)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	if (initRotaryPushButtonDone == false)
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <setRotaryPosition+0x30>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f083 0301 	eor.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <setRotaryPosition+0x1a>
	{
		return ERROR_VALUE;
 800138a:	2301      	movs	r3, #1
 800138c:	e003      	b.n	8001396 <setRotaryPosition+0x22>
	}

	rotoryPosition = position;
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <setRotaryPosition+0x34>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6013      	str	r3, [r2, #0]

	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000205 	.word	0x20000205
 80013a8:	20000200 	.word	0x20000200

080013ac <EXTI0_IRQHandler>:




void ROTARY_A_HANDLER(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 80013b0:	2101      	movs	r1, #1
 80013b2:	480f      	ldr	r0, [pc, #60]	; (80013f0 <EXTI0_IRQHandler+0x44>)
 80013b4:	f001 fda3 	bl	8002efe <gpioGetPinState>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <EXTI0_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <EXTI0_IRQHandler+0x48>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <EXTI0_IRQHandler+0x48>)
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e004      	b.n	80013d4 <EXTI0_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <EXTI0_IRQHandler+0x48>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <EXTI0_IRQHandler+0x48>)
 80013d2:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <EXTI0_IRQHandler+0x4c>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <EXTI0_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <EXTI0_IRQHandler+0x4c>)
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <EXTI0_IRQHandler+0x4c>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6153      	str	r3, [r2, #20]
	}
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020400 	.word	0x40020400
 80013f4:	20000200 	.word	0x20000200
 80013f8:	40013c00 	.word	0x40013c00

080013fc <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <EXTI15_10_IRQHandler+0x2c>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <EXTI15_10_IRQHandler+0x30>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <EXTI15_10_IRQHandler+0x30>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <EXTI15_10_IRQHandler+0x30>)
 8001418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141c:	6153      	str	r3, [r2, #20]
	}
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	20000204 	.word	0x20000204
 800142c:	40013c00 	.word	0x40013c00

08001430 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4803      	ldr	r0, [pc, #12]	; (8001448 <delayms+0x18>)
 800143c:	f002 fb16 	bl	8003a6c <systickDelay>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000228 	.word	0x20000228

0800144c <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <tftSPISenddata+0x20>)
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	220f      	movs	r2, #15
 800145e:	4904      	ldr	r1, [pc, #16]	; (8001470 <tftSPISenddata+0x24>)
 8001460:	f002 f9f5 	bl	800384e <spiWriteByte>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000004 	.word	0x20000004
 8001470:	40020000 	.word	0x40020000

08001474 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 800147e:	2105      	movs	r1, #5
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <tftSendCmd+0x24>)
 8001482:	f001 fc01 	bl	8002c88 <gpioResetPin>
    tftSPISenddata(cmd);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffdf 	bl	800144c <tftSPISenddata>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40020400 	.word	0x40020400

0800149c <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 80014a6:	2105      	movs	r1, #5
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <tftSendData+0x24>)
 80014aa:	f001 fbc2 	bl	8002c32 <gpioSetPin>
    tftSPISenddata(data);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ffcb 	bl	800144c <tftSPISenddata>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40020400 	.word	0x40020400

080014c4 <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 80014ca:	4825      	ldr	r0, [pc, #148]	; (8001560 <spiInit+0x9c>)
 80014cc:	f001 fb02 	bl	8002ad4 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 80014d0:	2201      	movs	r2, #1
 80014d2:	2104      	movs	r1, #4
 80014d4:	4822      	ldr	r0, [pc, #136]	; (8001560 <spiInit+0x9c>)
 80014d6:	f001 fb61 	bl	8002b9c <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 80014da:	4821      	ldr	r0, [pc, #132]	; (8001560 <spiInit+0x9c>)
 80014dc:	f001 fafa 	bl	8002ad4 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 80014e0:	2201      	movs	r2, #1
 80014e2:	2105      	movs	r1, #5
 80014e4:	481e      	ldr	r0, [pc, #120]	; (8001560 <spiInit+0x9c>)
 80014e6:	f001 fb59 	bl	8002b9c <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 80014ea:	481e      	ldr	r0, [pc, #120]	; (8001564 <spiInit+0xa0>)
 80014ec:	f001 fa90 	bl	8002a10 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 80014f0:	2201      	movs	r2, #1
 80014f2:	210f      	movs	r1, #15
 80014f4:	481b      	ldr	r0, [pc, #108]	; (8001564 <spiInit+0xa0>)
 80014f6:	f001 fb51 	bl	8002b9c <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 80014fa:	2201      	movs	r2, #1
 80014fc:	210f      	movs	r1, #15
 80014fe:	4819      	ldr	r0, [pc, #100]	; (8001564 <spiInit+0xa0>)
 8001500:	f001 fca0 	bl	8002e44 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <spiInit+0xa0>)
 8001506:	f001 fa83 	bl	8002a10 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 800150a:	2202      	movs	r2, #2
 800150c:	2105      	movs	r1, #5
 800150e:	4815      	ldr	r0, [pc, #84]	; (8001564 <spiInit+0xa0>)
 8001510:	f001 fb44 	bl	8002b9c <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8001514:	2205      	movs	r2, #5
 8001516:	2105      	movs	r1, #5
 8001518:	4812      	ldr	r0, [pc, #72]	; (8001564 <spiInit+0xa0>)
 800151a:	f001 fbe1 	bl	8002ce0 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 800151e:	2202      	movs	r2, #2
 8001520:	2107      	movs	r1, #7
 8001522:	4810      	ldr	r0, [pc, #64]	; (8001564 <spiInit+0xa0>)
 8001524:	f001 fb3a 	bl	8002b9c <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8001528:	2205      	movs	r2, #5
 800152a:	2107      	movs	r1, #7
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <spiInit+0xa0>)
 800152e:	f001 fbd7 	bl	8002ce0 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <spiInit+0xa4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 f92e 	bl	8003798 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <spiInit+0xa4>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	2300      	movs	r3, #0
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	2300      	movs	r3, #0
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	2301      	movs	r3, #1
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2301      	movs	r3, #1
 8001552:	2200      	movs	r2, #0
 8001554:	2103      	movs	r1, #3
 8001556:	f002 f831 	bl	80035bc <spiInitSPI>

}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40020400 	.word	0x40020400
 8001564:	40020000 	.word	0x40020000
 8001568:	20000004 	.word	0x20000004

0800156c <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 800157e:	e033      	b.n	80015e8 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff73 	bl	8001474 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	b29b      	uxth	r3, r3
 800159c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a0:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
 80015a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015a8:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 80015aa:	e006      	b.n	80015ba <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff71 	bl	800149c <tftSendData>
		while(numArgs--) {                   //   For each argument...
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	1e5a      	subs	r2, r3, #1
 80015be:	73ba      	strb	r2, [r7, #14]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f3      	bne.n	80015ac <commandList+0x40>
		}

		if(ms) {
 80015c4:	89bb      	ldrh	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00e      	beq.n	80015e8 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80015d4:	89bb      	ldrh	r3, [r7, #12]
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d102      	bne.n	80015e0 <commandList+0x74>
 80015da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015de:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff24 	bl	8001430 <delayms>
	while(numCommands--) {                 // For each command...
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	1e5a      	subs	r2, r3, #1
 80015ec:	73fa      	strb	r2, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1c6      	bne.n	8001580 <commandList+0x14>
		}
	}
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8001604:	210f      	movs	r1, #15
 8001606:	480c      	ldr	r0, [pc, #48]	; (8001638 <commonInit+0x3c>)
 8001608:	f001 fb3e 	bl	8002c88 <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 800160c:	2104      	movs	r1, #4
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <commonInit+0x40>)
 8001610:	f001 fb3a 	bl	8002c88 <gpioResetPin>
	delayms(50);  //default value 500
 8001614:	2032      	movs	r0, #50	; 0x32
 8001616:	f7ff ff0b 	bl	8001430 <delayms>
	ST7735_RST1;
 800161a:	2104      	movs	r1, #4
 800161c:	4807      	ldr	r0, [pc, #28]	; (800163c <commonInit+0x40>)
 800161e:	f001 fb08 	bl	8002c32 <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <commonInit+0x32>
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff9f 	bl	800156c <commandList>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400

08001640 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 800164a:	2032      	movs	r0, #50	; 0x32
 800164c:	f7ff fef0 	bl	8001430 <delayms>
	commonInit(Rcmd1);
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <tftInitR+0x58>)
 8001652:	f7ff ffd3 	bl	80015fc <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <tftInitR+0x5c>)
 800165e:	f7ff ff85 	bl	800156c <commandList>
		//Starting position of rows and columns
		colstart = 2;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <tftInitR+0x60>)
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <tftInitR+0x64>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e002      	b.n	8001676 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <tftInitR+0x68>)
 8001672:	f7ff ff7b 	bl	800156c <commandList>
	}
	commandList(Rcmd3);
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <tftInitR+0x6c>)
 8001678:	f7ff ff78 	bl	800156c <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d105      	bne.n	800168e <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 8001682:	2036      	movs	r0, #54	; 0x36
 8001684:	f7ff fef6 	bl	8001474 <tftSendCmd>
		tftSendData(0xC0);
 8001688:	20c0      	movs	r0, #192	; 0xc0
 800168a:	f7ff ff07 	bl	800149c <tftSendData>
	}

	//  tabcolor = options;
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	08007bc8 	.word	0x08007bc8
 800169c:	08007c04 	.word	0x08007c04
 80016a0:	20000208 	.word	0x20000208
 80016a4:	2000020c 	.word	0x2000020c
 80016a8:	08007c14 	.word	0x08007c14
 80016ac:	08007c24 	.word	0x08007c24

080016b0 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4604      	mov	r4, r0
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	4603      	mov	r3, r0
 80016c4:	71bb      	strb	r3, [r7, #6]
 80016c6:	460b      	mov	r3, r1
 80016c8:	717b      	strb	r3, [r7, #5]
 80016ca:	4613      	mov	r3, r2
 80016cc:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 80016ce:	202a      	movs	r0, #42	; 0x2a
 80016d0:	f7ff fed0 	bl	8001474 <tftSendCmd>
	tftSendData(0x00);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fee1 	bl	800149c <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <tftSetAddrWindow+0x98>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fed8 	bl	800149c <tftSendData>
	tftSendData(0x00);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fed5 	bl	800149c <tftSendData>
	tftSendData(x1+colstart);     // XEND
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <tftSetAddrWindow+0x98>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	4413      	add	r3, r2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fecc 	bl	800149c <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8001704:	202b      	movs	r0, #43	; 0x2b
 8001706:	f7ff feb5 	bl	8001474 <tftSendCmd>
	tftSendData(0x00);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fec6 	bl	800149c <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <tftSetAddrWindow+0x9c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	4413      	add	r3, r2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff febd 	bl	800149c <tftSendData>
	tftSendData(0x00);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff feba 	bl	800149c <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <tftSetAddrWindow+0x9c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	793b      	ldrb	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff feb1 	bl	800149c <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 800173a:	202c      	movs	r0, #44	; 0x2c
 800173c:	f7ff fe9a 	bl	8001474 <tftSendCmd>
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	20000208 	.word	0x20000208
 800174c:	2000020c 	.word	0x2000020c

08001750 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 800175a:	2105      	movs	r1, #5
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <tftPushColor+0x34>)
 800175e:	f001 fa68 	bl	8002c32 <gpioSetPin>
	putpix(color);
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fe6e 	bl	800144c <tftSPISenddata>
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fe69 	bl	800144c <tftSPISenddata>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020400 	.word	0x40020400

08001788 <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
 8001792:	460b      	mov	r3, r1
 8001794:	80bb      	strh	r3, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db22      	blt.n	80017e8 <tftDrawPixel+0x60>
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <tftDrawPixel+0x68>)
 80017a8:	8812      	ldrh	r2, [r2, #0]
 80017aa:	4293      	cmp	r3, r2
 80017ac:	da1c      	bge.n	80017e8 <tftDrawPixel+0x60>
 80017ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db18      	blt.n	80017e8 <tftDrawPixel+0x60>
 80017b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <tftDrawPixel+0x6c>)
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	4293      	cmp	r3, r2
 80017c0:	da12      	bge.n	80017e8 <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	b2d8      	uxtb	r0, r3
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	b2d9      	uxtb	r1, r3
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f7ff ff69 	bl	80016b0 <tftSetAddrWindow>
	tftPushColor(color);
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffb5 	bl	8001750 <tftPushColor>
 80017e6:	e000      	b.n	80017ea <tftDrawPixel+0x62>
		return;
 80017e8:	bf00      	nop
}
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000002 	.word	0x20000002

080017f8 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4604      	mov	r4, r0
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4623      	mov	r3, r4
 8001808:	80fb      	strh	r3, [r7, #6]
 800180a:	4603      	mov	r3, r0
 800180c:	80bb      	strh	r3, [r7, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	807b      	strh	r3, [r7, #2]
 8001812:	4613      	mov	r3, r2
 8001814:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	4a37      	ldr	r2, [pc, #220]	; (80018f8 <tftFillRect+0x100>)
 800181c:	8812      	ldrh	r2, [r2, #0]
 800181e:	4293      	cmp	r3, r2
 8001820:	da65      	bge.n	80018ee <tftFillRect+0xf6>
 8001822:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001826:	4a35      	ldr	r2, [pc, #212]	; (80018fc <tftFillRect+0x104>)
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	4293      	cmp	r3, r2
 800182c:	da5f      	bge.n	80018ee <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 800182e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001832:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001836:	4413      	add	r3, r2
 8001838:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <tftFillRect+0x100>)
 800183a:	8812      	ldrh	r2, [r2, #0]
 800183c:	4293      	cmp	r3, r2
 800183e:	dd05      	ble.n	800184c <tftFillRect+0x54>
		{
		w = width  - x;
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <tftFillRect+0x100>)
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b29b      	uxth	r3, r3
 800184a:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 800184c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001850:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001854:	4413      	add	r3, r2
 8001856:	4a29      	ldr	r2, [pc, #164]	; (80018fc <tftFillRect+0x104>)
 8001858:	8812      	ldrh	r2, [r2, #0]
 800185a:	4293      	cmp	r3, r2
 800185c:	dd05      	ble.n	800186a <tftFillRect+0x72>
		{
		h = height - y;
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <tftFillRect+0x104>)
 8001860:	881a      	ldrh	r2, [r3, #0]
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	b2d8      	uxtb	r0, r3
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	b2d9      	uxtb	r1, r3
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b2db      	uxtb	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b2dc      	uxtb	r4, r3
 8001882:	88bb      	ldrh	r3, [r7, #4]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	883b      	ldrh	r3, [r7, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4413      	add	r3, r2
 800188c:	b2db      	uxtb	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4622      	mov	r2, r4
 8001894:	f7ff ff0c 	bl	80016b0 <tftSetAddrWindow>

	ST7735_DC1;
 8001898:	2105      	movs	r1, #5
 800189a:	4819      	ldr	r0, [pc, #100]	; (8001900 <tftFillRect+0x108>)
 800189c:	f001 f9c9 	bl	8002c32 <gpioSetPin>
	for(y=h; y>0; y--)
 80018a0:	883b      	ldrh	r3, [r7, #0]
 80018a2:	80bb      	strh	r3, [r7, #4]
 80018a4:	e01e      	b.n	80018e4 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	80fb      	strh	r3, [r7, #6]
 80018aa:	e011      	b.n	80018d0 <tftFillRect+0xd8>
		{
			putpix(color);
 80018ac:	8b3b      	ldrh	r3, [r7, #24]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fdc9 	bl	800144c <tftSPISenddata>
 80018ba:	8b3b      	ldrh	r3, [r7, #24]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fdc4 	bl	800144c <tftSPISenddata>
		for(x=w; x>0; x--)
 80018c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	80fb      	strh	r3, [r7, #6]
 80018d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	dce9      	bgt.n	80018ac <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 80018d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	80bb      	strh	r3, [r7, #4]
 80018e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	dcdc      	bgt.n	80018a6 <tftFillRect+0xae>
 80018ec:	e000      	b.n	80018f0 <tftFillRect+0xf8>
		return;
 80018ee:	bf00      	nop
		}
	}
}
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000002 	.word	0x20000002
 8001900:	40020400 	.word	0x40020400

08001904 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4604      	mov	r4, r0
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4623      	mov	r3, r4
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	4603      	mov	r3, r0
 8001918:	80bb      	strh	r3, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8001922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001926:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <tftDrawFastVLine+0xb4>)
 8001928:	8812      	ldrh	r2, [r2, #0]
 800192a:	4293      	cmp	r3, r2
 800192c:	da3f      	bge.n	80019ae <tftDrawFastVLine+0xaa>
 800192e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001932:	4a22      	ldr	r2, [pc, #136]	; (80019bc <tftDrawFastVLine+0xb8>)
 8001934:	8812      	ldrh	r2, [r2, #0]
 8001936:	4293      	cmp	r3, r2
 8001938:	da39      	bge.n	80019ae <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 800193a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800193e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001942:	4413      	add	r3, r2
 8001944:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <tftDrawFastVLine+0xb8>)
 8001946:	8812      	ldrh	r2, [r2, #0]
 8001948:	4293      	cmp	r3, r2
 800194a:	dd05      	ble.n	8001958 <tftDrawFastVLine+0x54>
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <tftDrawFastVLine+0xb8>)
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	88bb      	ldrh	r3, [r7, #4]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	b2d8      	uxtb	r0, r3
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	b2d9      	uxtb	r1, r3
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	b2dc      	uxtb	r4, r3
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3b01      	subs	r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4622      	mov	r2, r4
 8001976:	f7ff fe9b 	bl	80016b0 <tftSetAddrWindow>

	ST7735_DC1;
 800197a:	2105      	movs	r1, #5
 800197c:	4810      	ldr	r0, [pc, #64]	; (80019c0 <tftDrawFastVLine+0xbc>)
 800197e:	f001 f958 	bl	8002c32 <gpioSetPin>
	while (h--) {
 8001982:	e00b      	b.n	800199c <tftDrawFastVLine+0x98>
		putpix(color);
 8001984:	883b      	ldrh	r3, [r7, #0]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b29b      	uxth	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fd5d 	bl	800144c <tftSPISenddata>
 8001992:	883b      	ldrh	r3, [r7, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fd58 	bl	800144c <tftSPISenddata>
	while (h--) {
 800199c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	3a01      	subs	r2, #1
 80019a4:	b292      	uxth	r2, r2
 80019a6:	807a      	strh	r2, [r7, #2]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1eb      	bne.n	8001984 <tftDrawFastVLine+0x80>
 80019ac:	e000      	b.n	80019b0 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 80019ae:	bf00      	nop
	}
}
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000002 	.word	0x20000002
 80019c0:	40020400 	.word	0x40020400

080019c4 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <tftSetFont+0x40>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <tftSetFont+0x40>)
 80019d8:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	785a      	ldrb	r2, [r3, #1]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <tftSetFont+0x40>)
 80019e0:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	789a      	ldrb	r2, [r3, #2]
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <tftSetFont+0x40>)
 80019e8:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3303      	adds	r3, #3
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <tftSetFont+0x40>)
 80019f4:	811a      	strh	r2, [r3, #8]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000214 	.word	0x20000214

08001a08 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8001a16:	4b74      	ldr	r3, [pc, #464]	; (8001be8 <tftPrintChar+0x1e0>)
 8001a18:	791b      	ldrb	r3, [r3, #4]
 8001a1a:	2b07      	cmp	r3, #7
 8001a1c:	d803      	bhi.n	8001a26 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <tftPrintChar+0x1e0>)
 8001a20:	791b      	ldrb	r3, [r3, #4]
 8001a22:	77bb      	strb	r3, [r7, #30]
 8001a24:	e003      	b.n	8001a2e <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8001a26:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <tftPrintChar+0x1e0>)
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	08db      	lsrs	r3, r3, #3
 8001a2c:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <tftPrintChar+0x1e4>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d15e      	bne.n	8001af4 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	b2d8      	uxtb	r0, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	b2d9      	uxtb	r1, r3
 8001a3e:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <tftPrintChar+0x1e0>)
 8001a40:	791a      	ldrb	r2, [r3, #4]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b2dc      	uxtb	r4, r3
 8001a4e:	4b66      	ldr	r3, [pc, #408]	; (8001be8 <tftPrintChar+0x1e0>)
 8001a50:	795a      	ldrb	r2, [r3, #5]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4622      	mov	r2, r4
 8001a60:	f7ff fe26 	bl	80016b0 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4a60      	ldr	r2, [pc, #384]	; (8001be8 <tftPrintChar+0x1e0>)
 8001a68:	7992      	ldrb	r2, [r2, #6]
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	7fbb      	ldrb	r3, [r7, #30]
 8001a70:	b299      	uxth	r1, r3
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <tftPrintChar+0x1e0>)
 8001a74:	795b      	ldrb	r3, [r3, #5]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	fb11 f303 	smulbb	r3, r1, r3
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	fb12 f303 	smulbb	r3, r2, r3
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3304      	adds	r3, #4
 8001a86:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	83bb      	strh	r3, [r7, #28]
 8001a8c:	e029      	b.n	8001ae2 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8001a8e:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <tftPrintChar+0x1e0>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	8b7b      	ldrh	r3, [r7, #26]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	77fb      	strb	r3, [r7, #31]
 8001a9e:	e017      	b.n	8001ad0 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8001aa0:	7cfa      	ldrb	r2, [r7, #19]
 8001aa2:	7ffb      	ldrb	r3, [r7, #31]
 8001aa4:	f1c3 0307 	rsb	r3, r3, #7
 8001aa8:	fa42 f303 	asr.w	r3, r2, r3
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <tftPrintChar+0x1e8>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fe49 	bl	8001750 <tftPushColor>
 8001abe:	e004      	b.n	8001aca <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <tftPrintChar+0x1ec>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fe43 	bl	8001750 <tftPushColor>
			for(i=0;i<8;i++)
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	3301      	adds	r3, #1
 8001ace:	77fb      	strb	r3, [r7, #31]
 8001ad0:	7ffb      	ldrb	r3, [r7, #31]
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	d9e4      	bls.n	8001aa0 <tftPrintChar+0x98>
				}
			}
			temp++;
 8001ad6:	8b7b      	ldrh	r3, [r7, #26]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8001adc:	8bbb      	ldrh	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	83bb      	strh	r3, [r7, #28]
 8001ae2:	8bba      	ldrh	r2, [r7, #28]
 8001ae4:	7fbb      	ldrb	r3, [r7, #30]
 8001ae6:	4940      	ldr	r1, [pc, #256]	; (8001be8 <tftPrintChar+0x1e0>)
 8001ae8:	7949      	ldrb	r1, [r1, #5]
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbcd      	blt.n	8001a8e <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001af2:	e075      	b.n	8001be0 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	4a3c      	ldr	r2, [pc, #240]	; (8001be8 <tftPrintChar+0x1e0>)
 8001af8:	7992      	ldrb	r2, [r2, #6]
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	7fbb      	ldrb	r3, [r7, #30]
 8001b00:	b299      	uxth	r1, r3
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <tftPrintChar+0x1e0>)
 8001b04:	795b      	ldrb	r3, [r3, #5]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	fb11 f303 	smulbb	r3, r1, r3
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	fb12 f303 	smulbb	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3304      	adds	r3, #4
 8001b16:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	83bb      	strh	r3, [r7, #28]
 8001b1c:	e05a      	b.n	8001bd4 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e04b      	b.n	8001bbc <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <tftPrintChar+0x1e0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	8b79      	ldrh	r1, [r7, #26]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	440a      	add	r2, r1
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	77fb      	strb	r3, [r7, #31]
 8001b38:	e03a      	b.n	8001bb0 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	4413      	add	r3, r2
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b2d8      	uxtb	r0, r3
 8001b50:	8bbb      	ldrh	r3, [r7, #28]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2d9      	uxtb	r1, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	7ffb      	ldrb	r3, [r7, #31]
 8001b62:	4413      	add	r3, r2
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	b2dc      	uxtb	r4, r3
 8001b76:	8bbb      	ldrh	r3, [r7, #28]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4622      	mov	r2, r4
 8001b88:	f7ff fd92 	bl	80016b0 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8001b8c:	7cfa      	ldrb	r2, [r7, #19]
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	f1c3 0307 	rsb	r3, r3, #7
 8001b94:	fa42 f303 	asr.w	r3, r2, r3
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <tftPrintChar+0x1e8>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fdd3 	bl	8001750 <tftPushColor>
				for(i=0;i<8;i++)
 8001baa:	7ffb      	ldrb	r3, [r7, #31]
 8001bac:	3301      	adds	r3, #1
 8001bae:	77fb      	strb	r3, [r7, #31]
 8001bb0:	7ffb      	ldrb	r3, [r7, #31]
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	d9c1      	bls.n	8001b3a <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	7fbb      	ldrb	r3, [r7, #30]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbaf      	blt.n	8001b24 <tftPrintChar+0x11c>
			temp+=(fz);
 8001bc4:	7fbb      	ldrb	r3, [r7, #30]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	8b7b      	ldrh	r3, [r7, #26]
 8001bca:	4413      	add	r3, r2
 8001bcc:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001bce:	8bbb      	ldrh	r3, [r7, #28]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	83bb      	strh	r3, [r7, #28]
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <tftPrintChar+0x1e0>)
 8001bd6:	795b      	ldrb	r3, [r3, #5]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	8bba      	ldrh	r2, [r7, #28]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d39e      	bcc.n	8001b1e <tftPrintChar+0x116>
}
 8001be0:	bf00      	nop
 8001be2:	3724      	adds	r7, #36	; 0x24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}
 8001be8:	20000214 	.word	0x20000214
 8001bec:	20000220 	.word	0x20000220
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000222 	.word	0x20000222

08001bf8 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b08e      	sub	sp, #56	; 0x38
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8001c0a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001c0c:	f7fe fc92 	bl	8000534 <__aeabi_i2d>
 8001c10:	a395      	add	r3, pc, #596	; (adr r3, 8001e68 <tftRotateChar+0x270>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fcf7 	bl	8000608 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8001c22:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <tftRotateChar+0x260>)
 8001c24:	791b      	ldrb	r3, [r3, #4]
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d804      	bhi.n	8001c34 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8001c2a:	4b8b      	ldr	r3, [pc, #556]	; (8001e58 <tftRotateChar+0x260>)
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001c32:	e017      	b.n	8001c64 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8001c34:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <tftRotateChar+0x260>)
 8001c36:	791b      	ldrb	r3, [r3, #4]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	4a85      	ldr	r2, [pc, #532]	; (8001e58 <tftRotateChar+0x260>)
 8001c42:	7992      	ldrb	r2, [r2, #6]
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c4c:	b299      	uxth	r1, r3
 8001c4e:	4b82      	ldr	r3, [pc, #520]	; (8001e58 <tftRotateChar+0x260>)
 8001c50:	795b      	ldrb	r3, [r3, #5]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	fb11 f303 	smulbb	r3, r1, r3
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	fb12 f303 	smulbb	r3, r2, r3
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3304      	adds	r3, #4
 8001c62:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001c6a:	e0e6      	b.n	8001e3a <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c70:	e0d2      	b.n	8001e18 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8001c72:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <tftRotateChar+0x260>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7a:	440a      	add	r2, r1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c88:	e0be      	b.n	8001e08 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001c8a:	68b8      	ldr	r0, [r7, #8]
 8001c8c:	f7fe fc52 	bl	8000534 <__aeabi_i2d>
 8001c90:	4604      	mov	r4, r0
 8001c92:	460d      	mov	r5, r1
 8001c94:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	441a      	add	r2, r3
 8001c9e:	4b6e      	ldr	r3, [pc, #440]	; (8001e58 <tftRotateChar+0x260>)
 8001ca0:	791b      	ldrb	r3, [r3, #4]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc41 	bl	8000534 <__aeabi_i2d>
 8001cb2:	4680      	mov	r8, r0
 8001cb4:	4689      	mov	r9, r1
 8001cb6:	ed97 0b08 	vldr	d0, [r7, #32]
 8001cba:	f004 fc3d 	bl	8006538 <cos>
 8001cbe:	ec53 2b10 	vmov	r2, r3, d0
 8001cc2:	4640      	mov	r0, r8
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	f7fe fc9f 	bl	8000608 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4692      	mov	sl, r2
 8001cd0:	469b      	mov	fp, r3
 8001cd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc2c 	bl	8000534 <__aeabi_i2d>
 8001cdc:	4680      	mov	r8, r0
 8001cde:	4689      	mov	r9, r1
 8001ce0:	ed97 0b08 	vldr	d0, [r7, #32]
 8001ce4:	f004 fc7c 	bl	80065e0 <sin>
 8001ce8:	ec53 2b10 	vmov	r2, r3, d0
 8001cec:	4640      	mov	r0, r8
 8001cee:	4649      	mov	r1, r9
 8001cf0:	f7fe fc8a 	bl	8000608 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4650      	mov	r0, sl
 8001cfa:	4659      	mov	r1, fp
 8001cfc:	f7fe facc 	bl	8000298 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4620      	mov	r0, r4
 8001d06:	4629      	mov	r1, r5
 8001d08:	f7fe fac8 	bl	800029c <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ff28 	bl	8000b68 <__aeabi_d2iz>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7fe fc09 	bl	8000534 <__aeabi_i2d>
 8001d22:	4604      	mov	r4, r0
 8001d24:	460d      	mov	r5, r1
 8001d26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc02 	bl	8000534 <__aeabi_i2d>
 8001d30:	4680      	mov	r8, r0
 8001d32:	4689      	mov	r9, r1
 8001d34:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d38:	f004 fbfe 	bl	8006538 <cos>
 8001d3c:	ec53 2b10 	vmov	r2, r3, d0
 8001d40:	4640      	mov	r0, r8
 8001d42:	4649      	mov	r1, r9
 8001d44:	f7fe fc60 	bl	8000608 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4692      	mov	sl, r2
 8001d4e:	469b      	mov	fp, r3
 8001d50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	441a      	add	r2, r3
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <tftRotateChar+0x260>)
 8001d5c:	791b      	ldrb	r3, [r3, #4]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbe3 	bl	8000534 <__aeabi_i2d>
 8001d6e:	4680      	mov	r8, r0
 8001d70:	4689      	mov	r9, r1
 8001d72:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d76:	f004 fc33 	bl	80065e0 <sin>
 8001d7a:	ec53 2b10 	vmov	r2, r3, d0
 8001d7e:	4640      	mov	r0, r8
 8001d80:	4649      	mov	r1, r9
 8001d82:	f7fe fc41 	bl	8000608 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4650      	mov	r0, sl
 8001d8c:	4659      	mov	r1, fp
 8001d8e:	f7fe fa85 	bl	800029c <__adddf3>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f7fe fa7f 	bl	800029c <__adddf3>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fedf 	bl	8000b68 <__aeabi_d2iz>
 8001daa:	4603      	mov	r3, r0
 8001dac:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	b2d8      	uxtb	r0, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	b2d9      	uxtb	r1, r3
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f7ff fc73 	bl	80016b0 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8001dca:	7ffa      	ldrb	r2, [r7, #31]
 8001dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dd0:	f1c3 0307 	rsb	r3, r3, #7
 8001dd4:	fa42 f303 	asr.w	r3, r2, r3
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <tftRotateChar+0x264>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fcb3 	bl	8001750 <tftPushColor>
 8001dea:	e008      	b.n	8001dfe <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <tftRotateChar+0x268>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <tftRotateChar+0x26c>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fca9 	bl	8001750 <tftPushColor>
			for(i=0;i<8;i++)
 8001dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e02:	3301      	adds	r3, #1
 8001e04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	f67f af3c 	bls.w	8001c8a <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8001e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e14:	3301      	adds	r3, #1
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e18:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	f6ff af27 	blt.w	8001c72 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8001e24:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001e2c:	4413      	add	r3, r2
 8001e2e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8001e30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e34:	3301      	adds	r3, #1
 8001e36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <tftRotateChar+0x260>)
 8001e3c:	795b      	ldrb	r3, [r3, #5]
 8001e3e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001e42:	429a      	cmp	r2, r3
 8001e44:	f4ff af12 	bcc.w	8001c6c <tftRotateChar+0x74>
	}
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3738      	adds	r7, #56	; 0x38
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e54:	f3af 8000 	nop.w
 8001e58:	20000214 	.word	0x20000214
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	20000220 	.word	0x20000220
 8001e64:	20000222 	.word	0x20000222
 8001e68:	1eb851ec 	.word	0x1eb851ec
 8001e6c:	3f91eb85 	.word	0x3f91eb85

08001e70 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7fe f9a8 	bl	80001e0 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f113 0f02 	cmn.w	r3, #2
 8001e9a:	d10a      	bne.n	8001eb2 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <tftPrint+0x128>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <tftPrint+0x12c>)
 8001ea4:	791b      	ldrb	r3, [r3, #4]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d10d      	bne.n	8001ed6 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <tftPrint+0x130>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <tftPrint+0x12c>)
 8001ec2:	791b      	ldrb	r3, [r3, #4]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	0fda      	lsrs	r2, r3, #31
 8001ed0:	4413      	add	r3, r2
 8001ed2:	105b      	asrs	r3, r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	e053      	b.n	8001f84 <tftPrint+0x114>
	{
		lettercount++;
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d112      	bne.n	8001f0e <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60fa      	str	r2, [r7, #12]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	69f9      	ldr	r1, [r7, #28]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fd87 	bl	8001a08 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 8001efa:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <tftPrint+0x12c>)
 8001efc:	791b      	ldrb	r3, [r3, #4]
 8001efe:	461a      	mov	r2, r3
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	4413      	add	r3, r2
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	e00a      	b.n	8001f24 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	60fa      	str	r2, [r7, #12]
 8001f14:	7818      	ldrb	r0, [r3, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	f7ff fe6a 	bl	8001bf8 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8001f24:	f000 f8c4 	bl	80020b0 <tftGetWidth>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <tftPrint+0x12c>)
 8001f2e:	791b      	ldrb	r3, [r3, #4]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	db1f      	blt.n	8001f7e <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <tftPrint+0x12c>)
 8001f48:	795b      	ldrb	r3, [r3, #5]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 8001f52:	f000 f8b9 	bl	80020c8 <tftGetHeight>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <tftPrint+0x12c>)
 8001f5c:	795b      	ldrb	r3, [r3, #5]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	dd09      	ble.n	8001f7a <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 8001f66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f6a:	f7ff fa61 	bl	8001430 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f834 	bl	8001fdc <tftFillScreen>
				y=0; // start at top left of new Page
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	e001      	b.n	8001f7e <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	3301      	adds	r3, #1
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
 8001f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dba7      	blt.n	8001edc <tftPrint+0x6c>
			}

		}

	}
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000214 	.word	0x20000214
 8001fa0:	20000002 	.word	0x20000002

08001fa4 <tftPrintColor>:
void tftPrintColor(char *st, int x, int y, uint16_t FontColor)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	807b      	strh	r3, [r7, #2]
	uint16_t _fg_old = _fg;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <tftPrintColor+0x34>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	82fb      	strh	r3, [r7, #22]
	_fg = FontColor;
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <tftPrintColor+0x34>)
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	8013      	strh	r3, [r2, #0]
	tftPrint(st, x, y, 0);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff ff53 	bl	8001e70 <tftPrint>
	_fg = _fg_old;
 8001fca:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <tftPrintColor+0x34>)
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
 8001fce:	8013      	strh	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000008 	.word	0x20000008

08001fdc <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <tftFillScreen+0x2c>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <tftFillScreen+0x30>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b219      	sxth	r1, r3
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff fbfc 	bl	80017f8 <tftFillRect>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000000 	.word	0x20000000
 800200c:	20000002 	.word	0x20000002

08002010 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 8002022:	2036      	movs	r0, #54	; 0x36
 8002024:	f7ff fa26 	bl	8001474 <tftSendCmd>

	switch (rotation)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d836      	bhi.n	800209c <tftSetRotation+0x8c>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <tftSetRotation+0x24>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	08002059 	.word	0x08002059
 800203c:	0800206d 	.word	0x0800206d
 8002040:	08002081 	.word	0x08002081
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8002044:	20c0      	movs	r0, #192	; 0xc0
 8002046:	f7ff fa29 	bl	800149c <tftSendData>
		width  = ST7735_TFTWIDTH;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <tftSetRotation+0x94>)
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <tftSetRotation+0x98>)
 8002052:	22a0      	movs	r2, #160	; 0xa0
 8002054:	801a      	strh	r2, [r3, #0]
		break;
 8002056:	e01d      	b.n	8002094 <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8002058:	20a0      	movs	r0, #160	; 0xa0
 800205a:	f7ff fa1f 	bl	800149c <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <tftSetRotation+0x94>)
 8002060:	22a0      	movs	r2, #160	; 0xa0
 8002062:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <tftSetRotation+0x98>)
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	801a      	strh	r2, [r3, #0]
		   break;
 800206a:	e013      	b.n	8002094 <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff fa15 	bl	800149c <tftSendData>
		   width  = ST7735_TFTWIDTH;
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <tftSetRotation+0x94>)
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <tftSetRotation+0x98>)
 800207a:	22a0      	movs	r2, #160	; 0xa0
 800207c:	801a      	strh	r2, [r3, #0]
		   break;
 800207e:	e009      	b.n	8002094 <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8002080:	2060      	movs	r0, #96	; 0x60
 8002082:	f7ff fa0b 	bl	800149c <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <tftSetRotation+0x94>)
 8002088:	22a0      	movs	r2, #160	; 0xa0
 800208a:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <tftSetRotation+0x98>)
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	801a      	strh	r2, [r3, #0]
		   break;
 8002092:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 8002094:	4a05      	ldr	r2, [pc, #20]	; (80020ac <tftSetRotation+0x9c>)
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	7013      	strb	r3, [r2, #0]
 800209a:	e000      	b.n	800209e <tftSetRotation+0x8e>
		   return;
 800209c:	bf00      	nop
}
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000002 	.word	0x20000002
 80020ac:	20000210 	.word	0x20000210

080020b0 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <tftGetWidth+0x14>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b2db      	uxtb	r3, r3
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	20000000 	.word	0x20000000

080020c8 <tftGetHeight>:


uint8_t tftGetHeight()
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <tftGetHeight+0x14>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	20000002 	.word	0x20000002

080020e0 <main>:
// StepTask Time for the main process with the period of xx ms
#define StepTaskTime 6


int main(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b090      	sub	sp, #64	; 0x40
 80020e4:	af00      	add	r7, sp, #0

		uint8_t        scanAddr = 0x7F;  //7Bit Adresse
		I2C_TypeDef   *i2c  = I2C1;
		I2C_TypeDef   *i2c2  = I2C2;
	*/
	uint32_t   i2cTaskTime = 50UL;
 80020e6:	2332      	movs	r3, #50	; 0x32
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c

	float AlphaBeta[2];  // Wertepaar


	// This is the Array, of all Timer-Variables
    uint32_t *timerList[] = { &I2C_Timer, &ST7735_Timer /*, additional timer */ };
 80020ea:	4a4d      	ldr	r2, [pc, #308]	; (8002220 <main+0x140>)
 80020ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020f4:	e883 0003 	stmia.w	r3, {r0, r1}
	// size of the array  are calculated
	size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 80020f8:	2302      	movs	r3, #2
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38

	    BALOsetup();
 80020fc:	f7fe ff8a 	bl	8001014 <BALOsetup>
	    LED_red_on;
 8002100:	210f      	movs	r1, #15
 8002102:	4848      	ldr	r0, [pc, #288]	; (8002224 <main+0x144>)
 8002104:	f000 fdc0 	bl	8002c88 <gpioResetPin>
	    struct PIDContr PID_Pos;


		// Inits needed for TFT Display
	    // Initialisiert den Systick-Timer
		systickInit(SYSTICK_1MS);
 8002108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800210c:	f001 fc2c 	bl	8003968 <systickInit>
		spiInit();
 8002110:	f7ff f9d8 	bl	80014c4 <spiInit>
		tftInitR(INITR_REDTAB);
 8002114:	2001      	movs	r0, #1
 8002116:	f7ff fa93 	bl	8001640 <tftInitR>

		//display setup
	    tftSetRotation(LANDSCAPE_FLIP);
 800211a:	2003      	movs	r0, #3
 800211c:	f7ff ff78 	bl	8002010 <tftSetRotation>
	    tftSetFont((uint8_t *)&SmallFont[0]);
 8002120:	4841      	ldr	r0, [pc, #260]	; (8002228 <main+0x148>)
 8002122:	f7ff fc4f 	bl	80019c4 <tftSetFont>
	    tftFillScreen(tft_BLACK);
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff ff58 	bl	8001fdc <tftFillScreen>

	    /* initialize the rotary push button module */
	    initRotaryPushButton();
 800212c:	f7ff f884 	bl	8001238 <initRotaryPushButton>

	    systickSetMillis(&I2C_Timer, i2cTaskTime);
 8002130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002132:	483e      	ldr	r0, [pc, #248]	; (800222c <main+0x14c>)
 8002134:	f001 fc0a 	bl	800394c <systickSetMillis>

	    LED_red_off;
 8002138:	210f      	movs	r1, #15
 800213a:	483a      	ldr	r0, [pc, #232]	; (8002224 <main+0x144>)
 800213c:	f000 fd79 	bl	8002c32 <gpioSetPin>
	    tftPrintColor((char *)"TestRegler \0",0,0,tft_MAGENTA);
 8002140:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	4839      	ldr	r0, [pc, #228]	; (8002230 <main+0x150>)
 800214a:	f7ff ff2b 	bl	8001fa4 <tftPrintColor>

	    initPID(&PID_Pos, 0.5, 0.5, 0.1, (float)0.0001*i2cTaskTime);  // Init der PID-Koeffizienten des Positions-Regler
 800214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002158:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002234 <main+0x154>
 800215c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002160:	463b      	mov	r3, r7
 8002162:	eef0 1a67 	vmov.f32	s3, s15
 8002166:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8002238 <main+0x158>
 800216a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800216e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f866 	bl	8002244 <initPID>

	    while (1)
	    {
		   if (true == timerTrigger)
 8002178:	4b30      	ldr	r3, [pc, #192]	; (800223c <main+0x15c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <main+0xb0>
		   {
				systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	b2da      	uxtb	r2, r3
 8002184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f001 fc44 	bl	8003a18 <systickUpdateTimerList>
		   }
		   if (isSystickExpired(I2C_Timer))
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <main+0x14c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f001 fc09 	bl	80039ac <isSystickExpired>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0eb      	beq.n	8002178 <main+0x98>
		   {
			   systickSetTicktime(&I2C_Timer, i2cTaskTime);
 80021a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021a2:	4822      	ldr	r0, [pc, #136]	; (800222c <main+0x14c>)
 80021a4:	f001 fbf4 	bl	8003990 <systickSetTicktime>

			   if (getRotaryPushButton() != 0)
 80021a8:	f7ff f8ac 	bl	8001304 <getRotaryPushButton>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d017      	beq.n	80021e2 <main+0x102>
			   {
				   setRotaryPosition(0);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7ff f8de 	bl	8001374 <setRotaryPosition>
				   initPID(&PID_Pos, 0.5, 0.5, 0.1, (float)0.0001*i2cTaskTime);
 80021b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002234 <main+0x154>
 80021c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ca:	463b      	mov	r3, r7
 80021cc:	eef0 1a67 	vmov.f32	s3, s15
 80021d0:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8002238 <main+0x158>
 80021d4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80021d8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f831 	bl	8002244 <initPID>
			   }

			   AlphaBeta[0] = (float)getRotaryPosition()/50;
 80021e2:	f7ff f8b1 	bl	8001348 <getRotaryPosition>
 80021e6:	ee07 0a90 	vmov	s15, r0
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002240 <main+0x160>
 80021f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

			   AlphaBeta[1] = runPID(&PID_Pos,AlphaBeta[0]);
 80021fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021fe:	463b      	mov	r3, r7
 8002200:	eeb0 0a67 	vmov.f32	s0, s15
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f843 	bl	8002290 <runPID>
 800220a:	eef0 7a40 	vmov.f32	s15, s0
 800220e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

			   AlBeOszi(AlphaBeta);
 8002212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe ff04 	bl	8001024 <AlBeOszi>
		   if (true == timerTrigger)
 800221c:	e7ac      	b.n	8002178 <main+0x98>
 800221e:	bf00      	nop
 8002220:	08007740 	.word	0x08007740
 8002224:	40020400 	.word	0x40020400
 8002228:	08007750 	.word	0x08007750
 800222c:	2000022c 	.word	0x2000022c
 8002230:	08007730 	.word	0x08007730
 8002234:	38d1b717 	.word	0x38d1b717
 8002238:	3dcccccd 	.word	0x3dcccccd
 800223c:	20000224 	.word	0x20000224
 8002240:	42480000 	.word	0x42480000

08002244 <initPID>:
}



void initPID(PIDContr_t* PIDParam, float KP, float KI, float KD, float TA)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6178      	str	r0, [r7, #20]
 800224c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002250:	edc7 0a03 	vstr	s1, [r7, #12]
 8002254:	ed87 1a02 	vstr	s2, [r7, #8]
 8002258:	edc7 1a01 	vstr	s3, [r7, #4]
	PIDParam->ISUM = 0;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
	PIDParam->KP = KP;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	601a      	str	r2, [r3, #0]
	PIDParam->KI = KI;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
	PIDParam->KD = KD;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	609a      	str	r2, [r3, #8]
	PIDParam->TA = TA;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	611a      	str	r2, [r3, #16]
	PIDParam->InpOld =0;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	615a      	str	r2, [r3, #20]
};
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <runPID>:


float runPID(PIDContr_t* PID, float Diff)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	ed87 0a00 	vstr	s0, [r7]
	PID->ISUM += Diff;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	ed93 7a03 	vldr	s14, [r3, #12]
 80022a2:	edd7 7a00 	vldr	s15, [r7]
 80022a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	edc3 7a03 	vstr	s15, [r3, #12]
	float result = (PID->KP * Diff) + (PID->KI * PID->ISUM *PID->TA) + (PID->KD / PID->TA)*(Diff - PID->InpOld);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	ed93 7a00 	vldr	s14, [r3]
 80022b6:	edd7 7a00 	vldr	s15, [r7]
 80022ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80022d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	ed93 6a02 	vldr	s12, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80022e8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80022f2:	ed97 6a00 	vldr	s12, [r7]
 80022f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	edc7 7a03 	vstr	s15, [r7, #12]
	PID->InpOld = Diff;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	615a      	str	r2, [r3, #20]
	return result;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	ee07 3a90 	vmov	s15, r3
};
 8002312:	eeb0 0a67 	vmov.f32	s0, s15
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <SystemInit+0x20>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <SystemInit+0x20>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	2302      	movs	r3, #2
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	2302      	movs	r3, #2
 800235c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800235e:	4b34      	ldr	r3, [pc, #208]	; (8002430 <SystemCoreClockUpdate+0xec>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b08      	cmp	r3, #8
 800236c:	d011      	beq.n	8002392 <SystemCoreClockUpdate+0x4e>
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d844      	bhi.n	80023fe <SystemCoreClockUpdate+0xba>
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <SystemCoreClockUpdate+0x3e>
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d004      	beq.n	800238a <SystemCoreClockUpdate+0x46>
 8002380:	e03d      	b.n	80023fe <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002382:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <SystemCoreClockUpdate+0xf0>)
 8002384:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <SystemCoreClockUpdate+0xf4>)
 8002386:	601a      	str	r2, [r3, #0]
      break;
 8002388:	e03d      	b.n	8002406 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <SystemCoreClockUpdate+0xf0>)
 800238c:	4a2b      	ldr	r2, [pc, #172]	; (800243c <SystemCoreClockUpdate+0xf8>)
 800238e:	601a      	str	r2, [r3, #0]
      break;
 8002390:	e039      	b.n	8002406 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002392:	4b27      	ldr	r3, [pc, #156]	; (8002430 <SystemCoreClockUpdate+0xec>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0d9b      	lsrs	r3, r3, #22
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <SystemCoreClockUpdate+0xec>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80023ae:	4a23      	ldr	r2, [pc, #140]	; (800243c <SystemCoreClockUpdate+0xf8>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <SystemCoreClockUpdate+0xec>)
 80023b8:	6852      	ldr	r2, [r2, #4]
 80023ba:	0992      	lsrs	r2, r2, #6
 80023bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e00b      	b.n	80023e0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <SystemCoreClockUpdate+0xf4>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	4a17      	ldr	r2, [pc, #92]	; (8002430 <SystemCoreClockUpdate+0xec>)
 80023d2:	6852      	ldr	r2, [r2, #4]
 80023d4:	0992      	lsrs	r2, r2, #6
 80023d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <SystemCoreClockUpdate+0xec>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <SystemCoreClockUpdate+0xf0>)
 80023fa:	6013      	str	r3, [r2, #0]
      break;
 80023fc:	e003      	b.n	8002406 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <SystemCoreClockUpdate+0xf0>)
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <SystemCoreClockUpdate+0xf4>)
 8002402:	601a      	str	r2, [r3, #0]
      break;
 8002404:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <SystemCoreClockUpdate+0xec>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <SystemCoreClockUpdate+0xfc>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <SystemCoreClockUpdate+0xf0>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <SystemCoreClockUpdate+0xf0>)
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	bf00      	nop
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40023800 	.word	0x40023800
 8002434:	2000000c 	.word	0x2000000c
 8002438:	00f42400 	.word	0x00f42400
 800243c:	007a1200 	.word	0x007a1200
 8002440:	08007c50 	.word	0x08007c50

08002444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002444:	480d      	ldr	r0, [pc, #52]	; (800247c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002448:	f7ff ff6a 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <LoopForever+0x6>)
  ldr r1, =_edata
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <LoopForever+0xe>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002454:	e002      	b.n	800245c <LoopCopyDataInit>

08002456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245a:	3304      	adds	r3, #4

0800245c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800245c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002460:	d3f9      	bcc.n	8002456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002464:	4c0a      	ldr	r4, [pc, #40]	; (8002490 <LoopForever+0x16>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002468:	e001      	b.n	800246e <LoopFillZerobss>

0800246a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800246c:	3204      	adds	r2, #4

0800246e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002470:	d3fb      	bcc.n	800246a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002472:	f001 fb1f 	bl	8003ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002476:	f7ff fe33 	bl	80020e0 <main>

0800247a <LoopForever>:

LoopForever:
  b LoopForever
 800247a:	e7fe      	b.n	800247a <LoopForever>
  ldr   r0, =_estack
 800247c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002484:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002488:	08008238 	.word	0x08008238
  ldr r2, =_sbss
 800248c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002490:	20000244 	.word	0x20000244

08002494 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC_IRQHandler>

08002496 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d03e      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d03b      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d038      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d035      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d032      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d02f      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d02c      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b07      	cmp	r3, #7
 80024ce:	d029      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d026      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d023      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b0a      	cmp	r3, #10
 80024e0:	d020      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b0b      	cmp	r3, #11
 80024e6:	d01d      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d01a      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2b0d      	cmp	r3, #13
 80024f2:	d017      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b0e      	cmp	r3, #14
 80024f8:	d014      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d011      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d00e      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b11      	cmp	r3, #17
 800250a:	d00b      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b12      	cmp	r3, #18
 8002510:	d008      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b14      	cmp	r3, #20
 8002516:	d005      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2b15      	cmp	r3, #21
 800251c:	d002      	beq.n	8002524 <extiVerifyIrqNum+0x8e>
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b16      	cmp	r3, #22
 8002522:	d101      	bne.n	8002528 <extiVerifyIrqNum+0x92>
    {
        return true;
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <extiVerifyIrqNum+0x94>
    }
    return false;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <extiVerifyTrigger+0x1c>
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d002      	beq.n	8002552 <extiVerifyTrigger+0x1c>
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d101      	bne.n	8002556 <extiVerifyTrigger+0x20>
    {
        return true;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <extiVerifyTrigger+0x22>
    }
    return false;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 800256a:	2300      	movs	r3, #0
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	e008      	b.n	8002582 <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 8002570:	4a09      	ldr	r2, [pc, #36]	; (8002598 <extiInit+0x34>)
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	3302      	adds	r3, #2
 8002576:	2100      	movs	r1, #0
 8002578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	3301      	adds	r3, #1
 8002580:	71fb      	strb	r3, [r7, #7]
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d9f3      	bls.n	8002570 <extiInit+0xc>
    }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40013800 	.word	0x40013800

0800259c <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f937 	bl	8002828 <gpioVerifyPort>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 80025c6:	23ff      	movs	r3, #255	; 0xff
 80025c8:	e08a      	b.n	80026e0 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f95d 	bl	800288c <gpioVerifyPin>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f083 0301 	eor.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 80025de:	23fe      	movs	r3, #254	; 0xfe
 80025e0:	e07e      	b.n	80026e0 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d841      	bhi.n	800266c <extiConfigIrq+0xd0>
 80025e8:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <extiConfigIrq+0x54>)
 80025ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ee:	bf00      	nop
 80025f0:	08002631 	.word	0x08002631
 80025f4:	08002631 	.word	0x08002631
 80025f8:	08002631 	.word	0x08002631
 80025fc:	08002631 	.word	0x08002631
 8002600:	0800263d 	.word	0x0800263d
 8002604:	0800263d 	.word	0x0800263d
 8002608:	0800263d 	.word	0x0800263d
 800260c:	0800263d 	.word	0x0800263d
 8002610:	0800264d 	.word	0x0800264d
 8002614:	0800264d 	.word	0x0800264d
 8002618:	0800264d 	.word	0x0800264d
 800261c:	0800264d 	.word	0x0800264d
 8002620:	0800265d 	.word	0x0800265d
 8002624:	0800265d 	.word	0x0800265d
 8002628:	0800265d 	.word	0x0800265d
 800262c:	0800265d 	.word	0x0800265d
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
            break;
 800263a:	e017      	b.n	800266c <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	3b04      	subs	r3, #4
 8002640:	b2db      	uxtb	r3, r3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	73bb      	strb	r3, [r7, #14]
            index = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
            break;
 800264a:	e00f      	b.n	800266c <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	3b08      	subs	r3, #8
 8002650:	b2db      	uxtb	r3, r3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8002656:	2302      	movs	r3, #2
 8002658:	73fb      	strb	r3, [r7, #15]
            break;
 800265a:	e007      	b.n	800266c <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	3b0c      	subs	r3, #12
 8002660:	b2db      	uxtb	r3, r3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8002666:	2303      	movs	r3, #3
 8002668:	73fb      	strb	r3, [r7, #15]
            break;
 800266a:	bf00      	nop
    }

    if (GPIOA == port)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <extiConfigIrq+0x14c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d102      	bne.n	800267a <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8002674:	2300      	movs	r3, #0
 8002676:	737b      	strb	r3, [r7, #13]
 8002678:	e021      	b.n	80026be <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <extiConfigIrq+0x150>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d102      	bne.n	8002688 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 8002682:	2301      	movs	r3, #1
 8002684:	737b      	strb	r3, [r7, #13]
 8002686:	e01a      	b.n	80026be <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <extiConfigIrq+0x154>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d102      	bne.n	8002696 <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 8002690:	2302      	movs	r3, #2
 8002692:	737b      	strb	r3, [r7, #13]
 8002694:	e013      	b.n	80026be <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <extiConfigIrq+0x158>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d102      	bne.n	80026a4 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 800269e:	2303      	movs	r3, #3
 80026a0:	737b      	strb	r3, [r7, #13]
 80026a2:	e00c      	b.n	80026be <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <extiConfigIrq+0x15c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d102      	bne.n	80026b2 <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 80026ac:	2304      	movs	r3, #4
 80026ae:	737b      	strb	r3, [r7, #13]
 80026b0:	e005      	b.n	80026be <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <extiConfigIrq+0x160>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 80026ba:	2307      	movs	r3, #7
 80026bc:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 80026be:	4a10      	ldr	r2, [pc, #64]	; (8002700 <extiConfigIrq+0x164>)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	3302      	adds	r3, #2
 80026c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026c8:	7b79      	ldrb	r1, [r7, #13]
 80026ca:	7bbb      	ldrb	r3, [r7, #14]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	490b      	ldr	r1, [pc, #44]	; (8002700 <extiConfigIrq+0x164>)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	4302      	orrs	r2, r0
 80026d8:	3302      	adds	r3, #2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021c00 	.word	0x40021c00
 8002700:	40013800 	.word	0x40013800

08002704 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fec0 	bl	8002496 <extiVerifyIrqNum>
 8002716:	4603      	mov	r3, r0
 8002718:	f083 0301 	eor.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8002722:	23d8      	movs	r3, #216	; 0xd8
 8002724:	e00a      	b.n	800273c <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <extiEnableIrq+0x40>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	79fa      	ldrb	r2, [r7, #7]
 800272c:	2101      	movs	r1, #1
 800272e:	fa01 f202 	lsl.w	r2, r1, r2
 8002732:	4611      	mov	r1, r2
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <extiEnableIrq+0x40>)
 8002736:	430b      	orrs	r3, r1
 8002738:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40013c00 	.word	0x40013c00

08002748 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	460a      	mov	r2, r1
 8002752:	71fb      	strb	r3, [r7, #7]
 8002754:	4613      	mov	r3, r2
 8002756:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fe9b 	bl	8002496 <extiVerifyIrqNum>
 8002760:	4603      	mov	r3, r0
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 800276c:	23d8      	movs	r3, #216	; 0xd8
 800276e:	e055      	b.n	800281c <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 8002770:	79bb      	ldrb	r3, [r7, #6]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fedf 	bl	8002536 <extiVerifyTrigger>
 8002778:	4603      	mov	r3, r0
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 8002784:	23d7      	movs	r3, #215	; 0xd7
 8002786:	e049      	b.n	800281c <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 8002788:	79bb      	ldrb	r3, [r7, #6]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 800278e:	4b25      	ldr	r3, [pc, #148]	; (8002824 <extiSetTriggerEdge+0xdc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	79fa      	ldrb	r2, [r7, #7]
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f202 	lsl.w	r2, r1, r2
 800279a:	4611      	mov	r1, r2
 800279c:	4a21      	ldr	r2, [pc, #132]	; (8002824 <extiSetTriggerEdge+0xdc>)
 800279e:	430b      	orrs	r3, r1
 80027a0:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <extiSetTriggerEdge+0xdc>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	79fa      	ldrb	r2, [r7, #7]
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	43d2      	mvns	r2, r2
 80027b0:	4611      	mov	r1, r2
 80027b2:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <extiSetTriggerEdge+0xdc>)
 80027b4:	400b      	ands	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]
 80027b8:	e02f      	b.n	800281a <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d115      	bne.n	80027ec <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <extiSetTriggerEdge+0xdc>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	4611      	mov	r1, r2
 80027ce:	4a15      	ldr	r2, [pc, #84]	; (8002824 <extiSetTriggerEdge+0xdc>)
 80027d0:	430b      	orrs	r3, r1
 80027d2:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <extiSetTriggerEdge+0xdc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	43d2      	mvns	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <extiSetTriggerEdge+0xdc>)
 80027e6:	400b      	ands	r3, r1
 80027e8:	6093      	str	r3, [r2, #8]
 80027ea:	e016      	b.n	800281a <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d113      	bne.n	800281a <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <extiSetTriggerEdge+0xdc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	79fa      	ldrb	r2, [r7, #7]
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	4611      	mov	r1, r2
 8002800:	4a08      	ldr	r2, [pc, #32]	; (8002824 <extiSetTriggerEdge+0xdc>)
 8002802:	430b      	orrs	r3, r1
 8002804:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <extiSetTriggerEdge+0xdc>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	79fa      	ldrb	r2, [r7, #7]
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4611      	mov	r1, r2
 8002814:	4a03      	ldr	r2, [pc, #12]	; (8002824 <extiSetTriggerEdge+0xdc>)
 8002816:	430b      	orrs	r3, r1
 8002818:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40013c00 	.word	0x40013c00

08002828 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <gpioVerifyPort+0x4c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <gpioVerifyPort+0x38>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <gpioVerifyPort+0x50>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00f      	beq.n	8002860 <gpioVerifyPort+0x38>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <gpioVerifyPort+0x54>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00b      	beq.n	8002860 <gpioVerifyPort+0x38>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <gpioVerifyPort+0x58>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d007      	beq.n	8002860 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <gpioVerifyPort+0x5c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <gpioVerifyPort+0x38>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <gpioVerifyPort+0x60>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <gpioVerifyPort+0x3c>
    {
        return true;
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <gpioVerifyPort+0x3e>
    }
    return false;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400
 800287c:	40020800 	.word	0x40020800
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021000 	.word	0x40021000
 8002888:	40021c00 	.word	0x40021c00

0800288c <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02c      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d029      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d026      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d023      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d020      	beq.n	80028f6 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d01d      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b06      	cmp	r3, #6
 80028be:	d01a      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	2b07      	cmp	r3, #7
 80028c4:	d017      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d014      	beq.n	80028f6 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2b09      	cmp	r3, #9
 80028d0:	d011      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b0a      	cmp	r3, #10
 80028d6:	d00e      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	2b0b      	cmp	r3, #11
 80028dc:	d00b      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d008      	beq.n	80028f6 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b0d      	cmp	r3, #13
 80028e8:	d005      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b0e      	cmp	r3, #14
 80028ee:	d002      	beq.n	80028f6 <gpioVerifyPin+0x6a>
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	d101      	bne.n	80028fa <gpioVerifyPin+0x6e>
    {
        return true;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <gpioVerifyPin+0x70>
    }
    return false;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02c      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d029      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d026      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d023      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d020      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	2b05      	cmp	r3, #5
 8002934:	d01d      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	2b06      	cmp	r3, #6
 800293a:	d01a      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2b07      	cmp	r3, #7
 8002940:	d017      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d014      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	2b09      	cmp	r3, #9
 800294c:	d011      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	2b0a      	cmp	r3, #10
 8002952:	d00e      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b0b      	cmp	r3, #11
 8002958:	d00b      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	2b0c      	cmp	r3, #12
 800295e:	d008      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	2b0d      	cmp	r3, #13
 8002964:	d005      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2b0e      	cmp	r3, #14
 800296a:	d002      	beq.n	8002972 <gpioVerifyAltFunc+0x6a>
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	2b0f      	cmp	r3, #15
 8002970:	d101      	bne.n	8002976 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <gpioVerifyPinMode+0x22>
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d005      	beq.n	80029a6 <gpioVerifyPinMode+0x22>
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d002      	beq.n	80029a6 <gpioVerifyPinMode+0x22>
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d101      	bne.n	80029aa <gpioVerifyPinMode+0x26>
    {
        return true;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <gpioVerifyPinMode+0x28>
    }

    return false;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <gpioVerifyOutputType+0x16>
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <gpioVerifyOutputType+0x1a>
    {
        return true;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <gpioVerifyOutputType+0x1c>
    }

    return false;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <gpioVerifyPushPullMode+0x1c>
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d002      	beq.n	80029fc <gpioVerifyPushPullMode+0x1c>
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d101      	bne.n	8002a00 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff05 	bl	8002828 <gpioVerifyPort>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d042      	beq.n	8002aaa <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a24      	ldr	r2, [pc, #144]	; (8002ab8 <gpioInitPort+0xa8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d106      	bne.n	8002a3a <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002a2c:	4b23      	ldr	r3, [pc, #140]	; (8002abc <gpioInitPort+0xac>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <gpioInitPort+0xac>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6313      	str	r3, [r2, #48]	; 0x30
 8002a38:	e035      	b.n	8002aa6 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <gpioInitPort+0xb0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d106      	bne.n	8002a50 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <gpioInitPort+0xac>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <gpioInitPort+0xac>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	e02a      	b.n	8002aa6 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <gpioInitPort+0xb4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d106      	bne.n	8002a66 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <gpioInitPort+0xac>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <gpioInitPort+0xac>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6313      	str	r3, [r2, #48]	; 0x30
 8002a64:	e01f      	b.n	8002aa6 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <gpioInitPort+0xb8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d106      	bne.n	8002a7c <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <gpioInitPort+0xac>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <gpioInitPort+0xac>)
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	e014      	b.n	8002aa6 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <gpioInitPort+0xbc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d106      	bne.n	8002a92 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <gpioInitPort+0xac>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <gpioInitPort+0xac>)
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
 8002a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a90:	e009      	b.n	8002aa6 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <gpioInitPort+0xc0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d105      	bne.n	8002aa6 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <gpioInitPort+0xac>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a07      	ldr	r2, [pc, #28]	; (8002abc <gpioInitPort+0xac>)
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e001      	b.n	8002aae <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40021c00 	.word	0x40021c00

08002ad4 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fea3 	bl	8002828 <gpioVerifyPort>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	e041      	b.n	8002b78 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <gpioSelectPort+0xac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d106      	bne.n	8002b0a <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <gpioSelectPort+0xb0>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6313      	str	r3, [r2, #48]	; 0x30
 8002b08:	e035      	b.n	8002b76 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <gpioSelectPort+0xb4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d106      	bne.n	8002b20 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	e02a      	b.n	8002b76 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <gpioSelectPort+0xb8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d106      	bne.n	8002b36 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	e01f      	b.n	8002b76 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <gpioSelectPort+0xbc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d106      	bne.n	8002b4c <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b44:	f043 0308 	orr.w	r3, r3, #8
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	e014      	b.n	8002b76 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <gpioSelectPort+0xc0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d106      	bne.n	8002b62 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b60:	e009      	b.n	8002b76 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <gpioSelectPort+0xc4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d105      	bne.n	8002b76 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <gpioSelectPort+0xb0>)
 8002b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40021c00 	.word	0x40021c00

08002b9c <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fe3b 	bl	8002828 <gpioVerifyPort>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f083 0301 	eor.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e032      	b.n	8002c2a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fe60 	bl	800288c <gpioVerifyPin>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8002bd8:	f06f 0301 	mvn.w	r3, #1
 8002bdc:	e025      	b.n	8002c2a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8002bde:	78bb      	ldrb	r3, [r7, #2]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fecf 	bl	8002984 <gpioVerifyPinMode>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8002bf2:	f06f 0305 	mvn.w	r3, #5
 8002bf6:	e018      	b.n	8002c2a <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	0052      	lsls	r2, r2, #1
 8002c00:	2103      	movs	r1, #3
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	43d2      	mvns	r2, r2
 8002c08:	401a      	ands	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8002c0e:	78bb      	ldrb	r3, [r7, #2]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	78b9      	ldrb	r1, [r7, #2]
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	0052      	lsls	r2, r2, #1
 8002c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fdf2 	bl	8002828 <gpioVerifyPort>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	e014      	b.n	8002c80 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fe17 	bl	800288c <gpioVerifyPin>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f083 0301 	eor.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8002c6a:	f06f 0301 	mvn.w	r3, #1
 8002c6e:	e007      	b.n	8002c80 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2201      	movs	r2, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fdc7 	bl	8002828 <gpioVerifyPort>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f083 0301 	eor.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e015      	b.n	8002cd8 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fdec 	bl	800288c <gpioVerifyPin>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f083 0301 	eor.w	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8002cc0:	f06f 0301 	mvn.w	r3, #1
 8002cc4:	e008      	b.n	8002cd8 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	3310      	adds	r3, #16
 8002cca:	2201      	movs	r2, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	70fb      	strb	r3, [r7, #3]
 8002cec:	4613      	mov	r3, r2
 8002cee:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fd99 	bl	8002828 <gpioVerifyPort>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f083 0301 	eor.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e050      	b.n	8002daa <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fdbe 	bl	800288c <gpioVerifyPin>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8002d1c:	f06f 0301 	mvn.w	r3, #1
 8002d20:	e043      	b.n	8002daa <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8002d22:	78bb      	ldrb	r3, [r7, #2]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fdef 	bl	8002908 <gpioVerifyAltFunc>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8002d36:	f06f 0302 	mvn.w	r3, #2
 8002d3a:	e036      	b.n	8002daa <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ff2a 	bl	8002b9c <gpioSelectPinMode>

	if (pin <= PIN7)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b07      	cmp	r3, #7
 8002d4c:	d815      	bhi.n	8002d7a <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	0092      	lsls	r2, r2, #2
 8002d56:	210f      	movs	r1, #15
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	43d2      	mvns	r2, r2
 8002d5e:	401a      	ands	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	78b9      	ldrb	r1, [r7, #2]
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	621a      	str	r2, [r3, #32]
 8002d78:	e016      	b.n	8002da8 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	3a08      	subs	r2, #8
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	210f      	movs	r1, #15
 8002d86:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8a:	43d2      	mvns	r2, r2
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	78b9      	ldrb	r1, [r7, #2]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	3a08      	subs	r2, #8
 8002d9c:	0092      	lsls	r2, r2, #2
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fd30 	bl	8002828 <gpioVerifyPort>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f083 0301 	eor.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	e030      	b.n	8002e3c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fd55 	bl	800288c <gpioVerifyPin>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f083 0301 	eor.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8002dee:	f06f 0301 	mvn.w	r3, #1
 8002df2:	e023      	b.n	8002e3c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8002df4:	78bb      	ldrb	r3, [r7, #2]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fdde 	bl	80029b8 <gpioVerifyOutputType>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f083 0301 	eor.w	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8002e08:	f06f 0303 	mvn.w	r3, #3
 8002e0c:	e016      	b.n	8002e3c <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	43d2      	mvns	r2, r2
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8002e22:	78bb      	ldrb	r3, [r7, #2]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d108      	bne.n	8002e3a <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
 8002e50:	4613      	mov	r3, r2
 8002e52:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff fce7 	bl	8002828 <gpioVerifyPort>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f083 0301 	eor.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e044      	b.n	8002ef6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fd0c 	bl	800288c <gpioVerifyPin>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8002e80:	f06f 0301 	mvn.w	r3, #1
 8002e84:	e037      	b.n	8002ef6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8002e86:	78bb      	ldrb	r3, [r7, #2]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fda9 	bl	80029e0 <gpioVerifyPushPullMode>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f083 0301 	eor.w	r3, r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8002e9a:	f06f 0306 	mvn.w	r3, #6
 8002e9e:	e02a      	b.n	8002ef6 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	0052      	lsls	r2, r2, #1
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002eae:	43d2      	mvns	r2, r2
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d11a      	bne.n	8002ef4 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8002ebe:	78bb      	ldrb	r3, [r7, #2]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10a      	bne.n	8002eda <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	0052      	lsls	r2, r2, #1
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	e00c      	b.n	8002ef4 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8002eda:	78bb      	ldrb	r3, [r7, #2]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d109      	bne.n	8002ef4 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	0052      	lsls	r2, r2, #1
 8002ee8:	2102      	movs	r1, #2
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f202 	lsl.w	r2, r1, r2
 8002f16:	4013      	ands	r3, r2
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <i2cVerifyDutyCycle+0x16>
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <i2cSelectI2C+0x58>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d106      	bne.n	8002f7e <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <i2cSelectI2C+0x5c>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <i2cSelectI2C+0x5c>)
 8002f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7c:	e014      	b.n	8002fa8 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <i2cSelectI2C+0x60>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d106      	bne.n	8002f94 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <i2cSelectI2C+0x5c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <i2cSelectI2C+0x5c>)
 8002f8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	e009      	b.n	8002fa8 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <i2cSelectI2C+0x64>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d105      	bne.n	8002fa8 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <i2cSelectI2C+0x5c>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <i2cSelectI2C+0x5c>)
 8002fa2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40005400 	.word	0x40005400
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40005800 	.word	0x40005800
 8002fc4:	40005c00 	.word	0x40005c00

08002fc8 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <i2cSetClkSpd+0x2a>
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d008      	beq.n	8002ff2 <i2cSetClkSpd+0x2a>
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d005      	beq.n	8002ff2 <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d002      	beq.n	8002ff2 <i2cSetClkSpd+0x2a>
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d160      	bne.n	80030b4 <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 8002ff2:	bf00      	nop
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f9      	bne.n	8002ff4 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800300e:	f023 030f 	bic.w	r3, r3, #15
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	61da      	str	r2, [r3, #28]
    	switch (spd)
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d836      	bhi.n	8003096 <i2cSetClkSpd+0xce>
 8003028:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <i2cSetClkSpd+0x68>)
 800302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302e:	bf00      	nop
 8003030:	08003045 	.word	0x08003045
 8003034:	08003053 	.word	0x08003053
 8003038:	08003061 	.word	0x08003061
 800303c:	0800306f 	.word	0x0800306f
 8003040:	0800307d 	.word	0x0800307d
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	61da      	str	r2, [r3, #28]
				break;
 8003050:	e02e      	b.n	80030b0 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	61da      	str	r2, [r3, #28]
    			break;
 800305e:	e027      	b.n	80030b0 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	61da      	str	r2, [r3, #28]
    				break;
 800306c:	e020      	b.n	80030b0 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f043 0214 	orr.w	r2, r3, #20
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	61da      	str	r2, [r3, #28]
    			break;
 800307a:	e019      	b.n	80030b0 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f043 0205 	orr.w	r2, r3, #5
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	61da      	str	r2, [r3, #28]
				break;
 8003094:	e00c      	b.n	80030b0 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	61da      	str	r2, [r3, #28]
    			break;
 80030ae:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e001      	b.n	80030b8 <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 80030b4:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70bb      	strb	r3, [r7, #2]
 80030da:	4613      	mov	r3, r2
 80030dc:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff28 	bl	8002f36 <i2cVerifyDutyCycle>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f083 0301 	eor.w	r3, r3, #1
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 80030f2:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 80030f6:	e02f      	b.n	8003158 <i2cInitI2C+0x94>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030fe:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0201 	bic.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 8003112:	f000 f967 	bl	80033e4 <rccGetPclk1Freq>
 8003116:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a11      	ldr	r2, [pc, #68]	; (8003160 <i2cInitI2C+0x9c>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	0c9a      	lsrs	r2, r3, #18
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2211      	movs	r2, #17
 800312a:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8003140:	787b      	ldrb	r3, [r7, #1]
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff3f 	bl	8002fc8 <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	431bde83 	.word	0x431bde83

08003164 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f043 0201 	orr.w	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8003188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800318c:	b094      	sub	sp, #80	; 0x50
 800318e:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8003190:	2300      	movs	r3, #0
 8003192:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8003194:	2300      	movs	r3, #0
 8003196:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8003198:	2300      	movs	r3, #0
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 800319c:	2300      	movs	r3, #0
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <rccGetSysClock+0x200>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d00d      	beq.n	80031c8 <rccGetSysClock+0x40>
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	f200 80e1 	bhi.w	8003374 <rccGetSysClock+0x1ec>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <rccGetSysClock+0x34>
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d003      	beq.n	80031c2 <rccGetSysClock+0x3a>
 80031ba:	e0db      	b.n	8003374 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80031bc:	4b73      	ldr	r3, [pc, #460]	; (800338c <rccGetSysClock+0x204>)
 80031be:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80031c0:	e0db      	b.n	800337a <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80031c2:	4b73      	ldr	r3, [pc, #460]	; (8003390 <rccGetSysClock+0x208>)
 80031c4:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80031c6:	e0d8      	b.n	800337a <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c8:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <rccGetSysClock+0x200>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <rccGetSysClock+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d063      	beq.n	80032a6 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80031de:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <rccGetSysClock+0x200>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	2200      	movs	r2, #0
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
 80031f2:	2300      	movs	r3, #0
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
 80031f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031fa:	4622      	mov	r2, r4
 80031fc:	462b      	mov	r3, r5
 80031fe:	f04f 0000 	mov.w	r0, #0
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	0159      	lsls	r1, r3, #5
 8003208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320c:	0150      	lsls	r0, r2, #5
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4621      	mov	r1, r4
 8003214:	1a51      	subs	r1, r2, r1
 8003216:	6139      	str	r1, [r7, #16]
 8003218:	4629      	mov	r1, r5
 800321a:	eb63 0301 	sbc.w	r3, r3, r1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800322c:	4659      	mov	r1, fp
 800322e:	018b      	lsls	r3, r1, #6
 8003230:	4651      	mov	r1, sl
 8003232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003236:	4651      	mov	r1, sl
 8003238:	018a      	lsls	r2, r1, #6
 800323a:	4651      	mov	r1, sl
 800323c:	ebb2 0801 	subs.w	r8, r2, r1
 8003240:	4659      	mov	r1, fp
 8003242:	eb63 0901 	sbc.w	r9, r3, r1
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800325a:	4690      	mov	r8, r2
 800325c:	4699      	mov	r9, r3
 800325e:	4623      	mov	r3, r4
 8003260:	eb18 0303 	adds.w	r3, r8, r3
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	462b      	mov	r3, r5
 8003268:	eb49 0303 	adc.w	r3, r9, r3
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800327a:	4629      	mov	r1, r5
 800327c:	024b      	lsls	r3, r1, #9
 800327e:	4621      	mov	r1, r4
 8003280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003284:	4621      	mov	r1, r4
 8003286:	024a      	lsls	r2, r1, #9
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328e:	2200      	movs	r2, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
 8003292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003298:	f7fd fc8e 	bl	8000bb8 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80032a0:	4613      	mov	r3, r2
 80032a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a4:	e058      	b.n	8003358 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <rccGetSysClock+0x200>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	4611      	mov	r1, r2
 80032b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032c0:	4642      	mov	r2, r8
 80032c2:	464b      	mov	r3, r9
 80032c4:	f04f 0000 	mov.w	r0, #0
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	0159      	lsls	r1, r3, #5
 80032ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d2:	0150      	lsls	r0, r2, #5
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4641      	mov	r1, r8
 80032da:	ebb2 0a01 	subs.w	sl, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032f8:	ebb2 040a 	subs.w	r4, r2, sl
 80032fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	00eb      	lsls	r3, r5, #3
 800330a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330e:	00e2      	lsls	r2, r4, #3
 8003310:	4614      	mov	r4, r2
 8003312:	461d      	mov	r5, r3
 8003314:	4643      	mov	r3, r8
 8003316:	18e3      	adds	r3, r4, r3
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	464b      	mov	r3, r9
 800331c:	eb45 0303 	adc.w	r3, r5, r3
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800332e:	4629      	mov	r1, r5
 8003330:	028b      	lsls	r3, r1, #10
 8003332:	4621      	mov	r1, r4
 8003334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003338:	4621      	mov	r1, r4
 800333a:	028a      	lsls	r2, r1, #10
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003342:	2200      	movs	r2, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	61fa      	str	r2, [r7, #28]
 8003348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334c:	f7fd fc34 	bl	8000bb8 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003354:	4613      	mov	r3, r2
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <rccGetSysClock+0x200>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8003368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800336a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003372:	e002      	b.n	800337a <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <rccGetSysClock+0x204>)
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003378:	bf00      	nop
    }

    return sysClock;
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800337c:	4618      	mov	r0, r3
 800337e:	3750      	adds	r7, #80	; 0x50
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	00f42400 	.word	0x00f42400
 8003390:	007a1200 	.word	0x007a1200

08003394 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 800339a:	f7ff fef5 	bl	8003188 <rccGetSysClock>
 800339e:	4601      	mov	r1, r0
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <rccGetHclkFreq+0x44>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a8:	22f0      	movs	r2, #240	; 0xf0
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	fa92 f2a2 	rbit	r2, r2
 80033b2:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	fab2 f282 	clz	r2, r2
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	40d3      	lsrs	r3, r2
 80033be:	4a07      	ldr	r2, [pc, #28]	; (80033dc <rccGetHclkFreq+0x48>)
 80033c0:	5cd3      	ldrb	r3, [r2, r3]
 80033c2:	fa21 f303 	lsr.w	r3, r1, r3
 80033c6:	4a06      	ldr	r2, [pc, #24]	; (80033e0 <rccGetHclkFreq+0x4c>)
 80033c8:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <rccGetHclkFreq+0x4c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08007c60 	.word	0x08007c60
 80033e0:	2000000c 	.word	0x2000000c

080033e4 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80033ea:	f7ff ffd3 	bl	8003394 <rccGetHclkFreq>
 80033ee:	4601      	mov	r1, r0
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <rccGetPclk1Freq+0x3c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80033f8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80033fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	fa92 f2a2 	rbit	r2, r2
 8003404:	603a      	str	r2, [r7, #0]
  return result;
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	40d3      	lsrs	r3, r2
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <rccGetPclk1Freq+0x40>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	08007c60 	.word	0x08007c60

08003428 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8003430:	bf00      	nop
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f9      	beq.n	8003432 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 800343e:	2300      	movs	r3, #0
 8003440:	81fb      	strh	r3, [r7, #14]
 8003442:	e002      	b.n	800344a <__spi_Chk_TX_empty+0x22>
 8003444:	89fb      	ldrh	r3, [r7, #14]
 8003446:	3301      	adds	r3, #1
 8003448:	81fb      	strh	r3, [r7, #14]
 800344a:	89fb      	ldrh	r3, [r7, #14]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d9f9      	bls.n	8003444 <__spi_Chk_TX_empty+0x1c>

}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8003466:	bf00      	nop
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f9      	bne.n	8003468 <__spi_Chk_notBSY+0xa>
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <spiVerifySPI+0x3c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <spiVerifySPI+0x28>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <spiVerifySPI+0x40>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <spiVerifySPI+0x28>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <spiVerifySPI+0x44>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <spiVerifySPI+0x28>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <spiVerifySPI+0x48>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <spiVerifySPI+0x2c>
    {
        return true;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <spiVerifySPI+0x2e>
    }
    return false;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40013000 	.word	0x40013000
 80034c4:	40003800 	.word	0x40003800
 80034c8:	40003c00 	.word	0x40003c00
 80034cc:	40013400 	.word	0x40013400

080034d0 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d014      	beq.n	800350a <spiVerifyClkDivider+0x3a>
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d011      	beq.n	800350a <spiVerifyClkDivider+0x3a>
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d00e      	beq.n	800350a <spiVerifyClkDivider+0x3a>
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d00b      	beq.n	800350a <spiVerifyClkDivider+0x3a>
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d008      	beq.n	800350a <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d005      	beq.n	800350a <spiVerifyClkDivider+0x3a>
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d002      	beq.n	800350a <spiVerifyClkDivider+0x3a>
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	2b07      	cmp	r3, #7
 8003508:	d101      	bne.n	800350e <spiVerifyClkDivider+0x3e>
    {
        return true;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <spiVerifyClkDivider+0x40>
    }
    return false;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d002      	beq.n	8003532 <spiVerifySSM+0x16>
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <spiVerifySSM+0x1a>
    {
        return true;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <spiVerifySSM+0x1c>
    }
    return false;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <spiVerifyOpMode+0x16>
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <spiVerifyOpMode+0x1a>
    {
        return true;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <spiVerifyOpMode+0x1c>
    }
    return false;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <spiVerifyPhase+0x16>
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <spiVerifyPhase+0x1a>
    {
        return true;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <spiVerifyPhase+0x1c>
    }
    return false;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <spiVerifyIdlePolarity+0x16>
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	70fb      	strb	r3, [r7, #3]
 80035ce:	460b      	mov	r3, r1
 80035d0:	70bb      	strb	r3, [r7, #2]
 80035d2:	4613      	mov	r3, r2
 80035d4:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff77 	bl	80034d0 <spiVerifyClkDivider>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f083 0301 	eor.w	r3, r3, #1
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 80035ee:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80035f2:	e0cc      	b.n	800378e <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 80035f4:	787b      	ldrb	r3, [r7, #1]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff90 	bl	800351c <spiVerifySSM>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f083 0301 	eor.w	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8003608:	f06f 0352 	mvn.w	r3, #82	; 0x52
 800360c:	e0bf      	b.n	800378e <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 800360e:	7f3b      	ldrb	r3, [r7, #28]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff97 	bl	8003544 <spiVerifyOpMode>
 8003616:	4603      	mov	r3, r0
 8003618:	f083 0301 	eor.w	r3, r3, #1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8003622:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8003626:	e0b2      	b.n	800378e <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8003628:	f897 3020 	ldrb.w	r3, [r7, #32]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff9d 	bl	800356c <spiVerifyPhase>
 8003632:	4603      	mov	r3, r0
 8003634:	f083 0301 	eor.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 800363e:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8003642:	e0a4      	b.n	800378e <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8003644:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ffa3 	bl	8003594 <spiVerifyIdlePolarity>
 800364e:	4603      	mov	r3, r0
 8003650:	f083 0301 	eor.w	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 800365a:	f06f 0357 	mvn.w	r3, #87	; 0x57
 800365e:	e096      	b.n	800378e <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	2b07      	cmp	r3, #7
 8003664:	d83a      	bhi.n	80036dc <spiInitSPI+0x120>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <spiInitSPI+0xb0>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	0800368d 	.word	0x0800368d
 8003670:	08003697 	.word	0x08003697
 8003674:	080036a1 	.word	0x080036a1
 8003678:	080036ab 	.word	0x080036ab
 800367c:	080036b5 	.word	0x080036b5
 8003680:	080036bf 	.word	0x080036bf
 8003684:	080036c9 	.word	0x080036c9
 8003688:	080036d3 	.word	0x080036d3
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800368c:	89fb      	ldrh	r3, [r7, #14]
 800368e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003692:	81fb      	strh	r3, [r7, #14]
            break;
 8003694:	e027      	b.n	80036e6 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8003696:	89fb      	ldrh	r3, [r7, #14]
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	81fb      	strh	r3, [r7, #14]
            break;
 800369e:	e022      	b.n	80036e6 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 80036a0:	89fb      	ldrh	r3, [r7, #14]
 80036a2:	f043 0310 	orr.w	r3, r3, #16
 80036a6:	81fb      	strh	r3, [r7, #14]
            break;
 80036a8:	e01d      	b.n	80036e6 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80036aa:	89fb      	ldrh	r3, [r7, #14]
 80036ac:	f043 0318 	orr.w	r3, r3, #24
 80036b0:	81fb      	strh	r3, [r7, #14]
            break;
 80036b2:	e018      	b.n	80036e6 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 80036b4:	89fb      	ldrh	r3, [r7, #14]
 80036b6:	f043 0320 	orr.w	r3, r3, #32
 80036ba:	81fb      	strh	r3, [r7, #14]
            break;
 80036bc:	e013      	b.n	80036e6 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 80036be:	89fb      	ldrh	r3, [r7, #14]
 80036c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80036c4:	81fb      	strh	r3, [r7, #14]
            break;
 80036c6:	e00e      	b.n	80036e6 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036ce:	81fb      	strh	r3, [r7, #14]
            break;
 80036d0:	e009      	b.n	80036e6 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80036d2:	89fb      	ldrh	r3, [r7, #14]
 80036d4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80036d8:	81fb      	strh	r3, [r7, #14]
            break;
 80036da:	e004      	b.n	80036e6 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80036dc:	89fb      	ldrh	r3, [r7, #14]
 80036de:	f043 0318 	orr.w	r3, r3, #24
 80036e2:	81fb      	strh	r3, [r7, #14]
            break;
 80036e4:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 80036e6:	78bb      	ldrb	r3, [r7, #2]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036f2:	81fb      	strh	r3, [r7, #14]
 80036f4:	e003      	b.n	80036fe <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036fc:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 80036fe:	787b      	ldrb	r3, [r7, #1]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d110      	bne.n	8003726 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8003704:	89fb      	ldrh	r3, [r7, #14]
 8003706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800370a:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 800370c:	7e3b      	ldrb	r3, [r7, #24]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d104      	bne.n	800371c <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8003712:	89fb      	ldrh	r3, [r7, #14]
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	81fb      	strh	r3, [r7, #14]
 800371a:	e008      	b.n	800372e <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003722:	81fb      	strh	r3, [r7, #14]
 8003724:	e003      	b.n	800372e <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800372c:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 800372e:	7f3b      	ldrb	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8003734:	89fb      	ldrh	r3, [r7, #14]
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	81fb      	strh	r3, [r7, #14]
 800373c:	e003      	b.n	8003746 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 800373e:	89fb      	ldrh	r3, [r7, #14]
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8003746:	f897 3020 	ldrb.w	r3, [r7, #32]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 800374e:	89fb      	ldrh	r3, [r7, #14]
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	81fb      	strh	r3, [r7, #14]
 8003756:	e003      	b.n	8003760 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8003758:	89fb      	ldrh	r3, [r7, #14]
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8003760:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8003768:	89fb      	ldrh	r3, [r7, #14]
 800376a:	f023 0302 	bic.w	r3, r3, #2
 800376e:	81fb      	strh	r3, [r7, #14]
 8003770:	e003      	b.n	800377a <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8003772:	89fb      	ldrh	r3, [r7, #14]
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 800377a:	89fa      	ldrh	r2, [r7, #14]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f846 	bl	8003818 <spiEnableSPI>

    return SPI_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop

08003798 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a18      	ldr	r2, [pc, #96]	; (8003804 <spiSelectSPI+0x6c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d106      	bne.n	80037b6 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80037a8:	4b17      	ldr	r3, [pc, #92]	; (8003808 <spiSelectSPI+0x70>)
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	4a16      	ldr	r2, [pc, #88]	; (8003808 <spiSelectSPI+0x70>)
 80037ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037b2:	6453      	str	r3, [r2, #68]	; 0x44
 80037b4:	e01f      	b.n	80037f6 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <spiSelectSPI+0x74>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d106      	bne.n	80037cc <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <spiSelectSPI+0x70>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <spiSelectSPI+0x70>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	e014      	b.n	80037f6 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <spiSelectSPI+0x78>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d106      	bne.n	80037e2 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <spiSelectSPI+0x70>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <spiSelectSPI+0x70>)
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	6413      	str	r3, [r2, #64]	; 0x40
 80037e0:	e009      	b.n	80037f6 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <spiSelectSPI+0x7c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d105      	bne.n	80037f6 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <spiSelectSPI+0x70>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	4a06      	ldr	r2, [pc, #24]	; (8003808 <spiSelectSPI+0x70>)
 80037f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037f4:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	40013000 	.word	0x40013000
 8003808:	40023800 	.word	0x40023800
 800380c:	40003800 	.word	0x40003800
 8003810:	40003c00 	.word	0x40003c00
 8003814:	40013400 	.word	0x40013400

08003818 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fe2f 	bl	8003484 <spiVerifySPI>
 8003826:	4603      	mov	r3, r0
 8003828:	f083 0301 	eor.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8003832:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8003836:	e006      	b.n	8003846 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	4611      	mov	r1, r2
 800385a:	461a      	mov	r2, r3
 800385c:	460b      	mov	r3, r1
 800385e:	71fb      	strb	r3, [r7, #7]
 8003860:	4613      	mov	r3, r2
 8003862:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f810 	bl	800288c <gpioVerifyPin>
 800386c:	4603      	mov	r3, r0
 800386e:	f083 0301 	eor.w	r3, r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8003878:	f06f 0301 	mvn.w	r3, #1
 800387c:	e016      	b.n	80038ac <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff fdd2 	bl	8003428 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	4619      	mov	r1, r3
 8003888:	68b8      	ldr	r0, [r7, #8]
 800388a:	f7ff f9fd 	bl	8002c88 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 800388e:	79ba      	ldrb	r2, [r7, #6]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff fdc7 	bl	8003428 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7ff fddf 	bl	800345e <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	4619      	mov	r1, r3
 80038a4:	68b8      	ldr	r0, [r7, #8]
 80038a6:	f7ff f9c4 	bl	8002c32 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	; (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003918:	d301      	bcc.n	800391e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391a:	2301      	movs	r3, #1
 800391c:	e00f      	b.n	800393e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <SysTick_Config+0x40>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003926:	210f      	movs	r1, #15
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	f7ff ffc2 	bl	80038b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <SysTick_Config+0x40>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <SysTick_Config+0x40>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000e010 	.word	0xe000e010

0800394c <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	601a      	str	r2, [r3, #0]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8003970:	f7fe fce8 	bl	8002344 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <systickInit+0x24>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ffc2 	bl	8003908 <SysTick_Config>
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	2000000c 	.word	0x2000000c

08003990 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	601a      	str	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <isSystickExpired+0x16>
	{
		timerState = true;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
	timerTrigger = true;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <SysTick_Handler+0x14>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	20000224 	.word	0x20000224

080039e8 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <systickUpdateTimer+0x1a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8003a02:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <systickUpdateTimer+0x2c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	20000224 	.word	0x20000224

08003a18 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	e011      	b.n	8003a4e <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <systickUpdateTimerList+0x30>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	1e5a      	subs	r2, r3, #1
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d3e9      	bcc.n	8003a2a <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <systickUpdateTimerList+0x50>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20000224 	.word	0x20000224

08003a6c <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8003a76:	6839      	ldr	r1, [r7, #0]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff67 	bl	800394c <systickSetMillis>
    while (!isSystickExpired(*timer))
 8003a7e:	e006      	b.n	8003a8e <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <systickDelay+0x44>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ffad 	bl	80039e8 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff8a 	bl	80039ac <isSystickExpired>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f083 0301 	eor.w	r3, r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ed      	bne.n	8003a80 <systickDelay+0x14>
        }
    }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000224 	.word	0x20000224

08003ab4 <__libc_init_array>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4d0d      	ldr	r5, [pc, #52]	; (8003aec <__libc_init_array+0x38>)
 8003ab8:	4c0d      	ldr	r4, [pc, #52]	; (8003af0 <__libc_init_array+0x3c>)
 8003aba:	1b64      	subs	r4, r4, r5
 8003abc:	10a4      	asrs	r4, r4, #2
 8003abe:	2600      	movs	r6, #0
 8003ac0:	42a6      	cmp	r6, r4
 8003ac2:	d109      	bne.n	8003ad8 <__libc_init_array+0x24>
 8003ac4:	4d0b      	ldr	r5, [pc, #44]	; (8003af4 <__libc_init_array+0x40>)
 8003ac6:	4c0c      	ldr	r4, [pc, #48]	; (8003af8 <__libc_init_array+0x44>)
 8003ac8:	f003 fe24 	bl	8007714 <_init>
 8003acc:	1b64      	subs	r4, r4, r5
 8003ace:	10a4      	asrs	r4, r4, #2
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	42a6      	cmp	r6, r4
 8003ad4:	d105      	bne.n	8003ae2 <__libc_init_array+0x2e>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003adc:	4798      	blx	r3
 8003ade:	3601      	adds	r6, #1
 8003ae0:	e7ee      	b.n	8003ac0 <__libc_init_array+0xc>
 8003ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae6:	4798      	blx	r3
 8003ae8:	3601      	adds	r6, #1
 8003aea:	e7f2      	b.n	8003ad2 <__libc_init_array+0x1e>
 8003aec:	08008230 	.word	0x08008230
 8003af0:	08008230 	.word	0x08008230
 8003af4:	08008230 	.word	0x08008230
 8003af8:	08008234 	.word	0x08008234

08003afc <memset>:
 8003afc:	4402      	add	r2, r0
 8003afe:	4603      	mov	r3, r0
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d100      	bne.n	8003b06 <memset+0xa>
 8003b04:	4770      	bx	lr
 8003b06:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0a:	e7f9      	b.n	8003b00 <memset+0x4>

08003b0c <__cvt>:
 8003b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b10:	ec55 4b10 	vmov	r4, r5, d0
 8003b14:	2d00      	cmp	r5, #0
 8003b16:	460e      	mov	r6, r1
 8003b18:	4619      	mov	r1, r3
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	bfbb      	ittet	lt
 8003b1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b22:	461d      	movlt	r5, r3
 8003b24:	2300      	movge	r3, #0
 8003b26:	232d      	movlt	r3, #45	; 0x2d
 8003b28:	700b      	strb	r3, [r1, #0]
 8003b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b30:	4691      	mov	r9, r2
 8003b32:	f023 0820 	bic.w	r8, r3, #32
 8003b36:	bfbc      	itt	lt
 8003b38:	4622      	movlt	r2, r4
 8003b3a:	4614      	movlt	r4, r2
 8003b3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b40:	d005      	beq.n	8003b4e <__cvt+0x42>
 8003b42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b46:	d100      	bne.n	8003b4a <__cvt+0x3e>
 8003b48:	3601      	adds	r6, #1
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	e000      	b.n	8003b50 <__cvt+0x44>
 8003b4e:	2103      	movs	r1, #3
 8003b50:	ab03      	add	r3, sp, #12
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	ab02      	add	r3, sp, #8
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	ec45 4b10 	vmov	d0, r4, r5
 8003b5c:	4653      	mov	r3, sl
 8003b5e:	4632      	mov	r2, r6
 8003b60:	f000 fcca 	bl	80044f8 <_dtoa_r>
 8003b64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b68:	4607      	mov	r7, r0
 8003b6a:	d102      	bne.n	8003b72 <__cvt+0x66>
 8003b6c:	f019 0f01 	tst.w	r9, #1
 8003b70:	d022      	beq.n	8003bb8 <__cvt+0xac>
 8003b72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b76:	eb07 0906 	add.w	r9, r7, r6
 8003b7a:	d110      	bne.n	8003b9e <__cvt+0x92>
 8003b7c:	783b      	ldrb	r3, [r7, #0]
 8003b7e:	2b30      	cmp	r3, #48	; 0x30
 8003b80:	d10a      	bne.n	8003b98 <__cvt+0x8c>
 8003b82:	2200      	movs	r2, #0
 8003b84:	2300      	movs	r3, #0
 8003b86:	4620      	mov	r0, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	f7fc ffa5 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b8e:	b918      	cbnz	r0, 8003b98 <__cvt+0x8c>
 8003b90:	f1c6 0601 	rsb	r6, r6, #1
 8003b94:	f8ca 6000 	str.w	r6, [sl]
 8003b98:	f8da 3000 	ldr.w	r3, [sl]
 8003b9c:	4499      	add	r9, r3
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f7fc ff97 	bl	8000ad8 <__aeabi_dcmpeq>
 8003baa:	b108      	cbz	r0, 8003bb0 <__cvt+0xa4>
 8003bac:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bb0:	2230      	movs	r2, #48	; 0x30
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	454b      	cmp	r3, r9
 8003bb6:	d307      	bcc.n	8003bc8 <__cvt+0xbc>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bbc:	1bdb      	subs	r3, r3, r7
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	b004      	add	sp, #16
 8003bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc8:	1c59      	adds	r1, r3, #1
 8003bca:	9103      	str	r1, [sp, #12]
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e7f0      	b.n	8003bb2 <__cvt+0xa6>

08003bd0 <__exponent>:
 8003bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	bfb8      	it	lt
 8003bd8:	4249      	neglt	r1, r1
 8003bda:	f803 2b02 	strb.w	r2, [r3], #2
 8003bde:	bfb4      	ite	lt
 8003be0:	222d      	movlt	r2, #45	; 0x2d
 8003be2:	222b      	movge	r2, #43	; 0x2b
 8003be4:	2909      	cmp	r1, #9
 8003be6:	7042      	strb	r2, [r0, #1]
 8003be8:	dd2a      	ble.n	8003c40 <__exponent+0x70>
 8003bea:	f10d 0407 	add.w	r4, sp, #7
 8003bee:	46a4      	mov	ip, r4
 8003bf0:	270a      	movs	r7, #10
 8003bf2:	46a6      	mov	lr, r4
 8003bf4:	460a      	mov	r2, r1
 8003bf6:	fb91 f6f7 	sdiv	r6, r1, r7
 8003bfa:	fb07 1516 	mls	r5, r7, r6, r1
 8003bfe:	3530      	adds	r5, #48	; 0x30
 8003c00:	2a63      	cmp	r2, #99	; 0x63
 8003c02:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	dcf1      	bgt.n	8003bf2 <__exponent+0x22>
 8003c0e:	3130      	adds	r1, #48	; 0x30
 8003c10:	f1ae 0502 	sub.w	r5, lr, #2
 8003c14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c18:	1c44      	adds	r4, r0, #1
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	4561      	cmp	r1, ip
 8003c1e:	d30a      	bcc.n	8003c36 <__exponent+0x66>
 8003c20:	f10d 0209 	add.w	r2, sp, #9
 8003c24:	eba2 020e 	sub.w	r2, r2, lr
 8003c28:	4565      	cmp	r5, ip
 8003c2a:	bf88      	it	hi
 8003c2c:	2200      	movhi	r2, #0
 8003c2e:	4413      	add	r3, r2
 8003c30:	1a18      	subs	r0, r3, r0
 8003c32:	b003      	add	sp, #12
 8003c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c3e:	e7ed      	b.n	8003c1c <__exponent+0x4c>
 8003c40:	2330      	movs	r3, #48	; 0x30
 8003c42:	3130      	adds	r1, #48	; 0x30
 8003c44:	7083      	strb	r3, [r0, #2]
 8003c46:	70c1      	strb	r1, [r0, #3]
 8003c48:	1d03      	adds	r3, r0, #4
 8003c4a:	e7f1      	b.n	8003c30 <__exponent+0x60>

08003c4c <_printf_float>:
 8003c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c50:	ed2d 8b02 	vpush	{d8}
 8003c54:	b08d      	sub	sp, #52	; 0x34
 8003c56:	460c      	mov	r4, r1
 8003c58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c5c:	4616      	mov	r6, r2
 8003c5e:	461f      	mov	r7, r3
 8003c60:	4605      	mov	r5, r0
 8003c62:	f001 fa37 	bl	80050d4 <_localeconv_r>
 8003c66:	f8d0 a000 	ldr.w	sl, [r0]
 8003c6a:	4650      	mov	r0, sl
 8003c6c:	f7fc fab8 	bl	80001e0 <strlen>
 8003c70:	2300      	movs	r3, #0
 8003c72:	930a      	str	r3, [sp, #40]	; 0x28
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	9305      	str	r3, [sp, #20]
 8003c78:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c80:	3307      	adds	r3, #7
 8003c82:	f023 0307 	bic.w	r3, r3, #7
 8003c86:	f103 0208 	add.w	r2, r3, #8
 8003c8a:	f8c8 2000 	str.w	r2, [r8]
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c9e:	9307      	str	r3, [sp, #28]
 8003ca0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ca4:	ee08 0a10 	vmov	s16, r0
 8003ca8:	4b9f      	ldr	r3, [pc, #636]	; (8003f28 <_printf_float+0x2dc>)
 8003caa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cae:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb2:	f7fc ff43 	bl	8000b3c <__aeabi_dcmpun>
 8003cb6:	bb88      	cbnz	r0, 8003d1c <_printf_float+0xd0>
 8003cb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cbc:	4b9a      	ldr	r3, [pc, #616]	; (8003f28 <_printf_float+0x2dc>)
 8003cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc2:	f7fc ff1d 	bl	8000b00 <__aeabi_dcmple>
 8003cc6:	bb48      	cbnz	r0, 8003d1c <_printf_float+0xd0>
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2300      	movs	r3, #0
 8003ccc:	4640      	mov	r0, r8
 8003cce:	4649      	mov	r1, r9
 8003cd0:	f7fc ff0c 	bl	8000aec <__aeabi_dcmplt>
 8003cd4:	b110      	cbz	r0, 8003cdc <_printf_float+0x90>
 8003cd6:	232d      	movs	r3, #45	; 0x2d
 8003cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cdc:	4b93      	ldr	r3, [pc, #588]	; (8003f2c <_printf_float+0x2e0>)
 8003cde:	4894      	ldr	r0, [pc, #592]	; (8003f30 <_printf_float+0x2e4>)
 8003ce0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ce4:	bf94      	ite	ls
 8003ce6:	4698      	movls	r8, r3
 8003ce8:	4680      	movhi	r8, r0
 8003cea:	2303      	movs	r3, #3
 8003cec:	6123      	str	r3, [r4, #16]
 8003cee:	9b05      	ldr	r3, [sp, #20]
 8003cf0:	f023 0204 	bic.w	r2, r3, #4
 8003cf4:	6022      	str	r2, [r4, #0]
 8003cf6:	f04f 0900 	mov.w	r9, #0
 8003cfa:	9700      	str	r7, [sp, #0]
 8003cfc:	4633      	mov	r3, r6
 8003cfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d00:	4621      	mov	r1, r4
 8003d02:	4628      	mov	r0, r5
 8003d04:	f000 f9d8 	bl	80040b8 <_printf_common>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	f040 8090 	bne.w	8003e2e <_printf_float+0x1e2>
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d12:	b00d      	add	sp, #52	; 0x34
 8003d14:	ecbd 8b02 	vpop	{d8}
 8003d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	4640      	mov	r0, r8
 8003d22:	4649      	mov	r1, r9
 8003d24:	f7fc ff0a 	bl	8000b3c <__aeabi_dcmpun>
 8003d28:	b140      	cbz	r0, 8003d3c <_printf_float+0xf0>
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bfbc      	itt	lt
 8003d30:	232d      	movlt	r3, #45	; 0x2d
 8003d32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d36:	487f      	ldr	r0, [pc, #508]	; (8003f34 <_printf_float+0x2e8>)
 8003d38:	4b7f      	ldr	r3, [pc, #508]	; (8003f38 <_printf_float+0x2ec>)
 8003d3a:	e7d1      	b.n	8003ce0 <_printf_float+0x94>
 8003d3c:	6863      	ldr	r3, [r4, #4]
 8003d3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d42:	9206      	str	r2, [sp, #24]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	d13f      	bne.n	8003dc8 <_printf_float+0x17c>
 8003d48:	2306      	movs	r3, #6
 8003d4a:	6063      	str	r3, [r4, #4]
 8003d4c:	9b05      	ldr	r3, [sp, #20]
 8003d4e:	6861      	ldr	r1, [r4, #4]
 8003d50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d54:	2300      	movs	r3, #0
 8003d56:	9303      	str	r3, [sp, #12]
 8003d58:	ab0a      	add	r3, sp, #40	; 0x28
 8003d5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d5e:	ab09      	add	r3, sp, #36	; 0x24
 8003d60:	ec49 8b10 	vmov	d0, r8, r9
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	6022      	str	r2, [r4, #0]
 8003d68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f7ff fecd 	bl	8003b0c <__cvt>
 8003d72:	9b06      	ldr	r3, [sp, #24]
 8003d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d76:	2b47      	cmp	r3, #71	; 0x47
 8003d78:	4680      	mov	r8, r0
 8003d7a:	d108      	bne.n	8003d8e <_printf_float+0x142>
 8003d7c:	1cc8      	adds	r0, r1, #3
 8003d7e:	db02      	blt.n	8003d86 <_printf_float+0x13a>
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	4299      	cmp	r1, r3
 8003d84:	dd41      	ble.n	8003e0a <_printf_float+0x1be>
 8003d86:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d8a:	fa5f fb8b 	uxtb.w	fp, fp
 8003d8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d92:	d820      	bhi.n	8003dd6 <_printf_float+0x18a>
 8003d94:	3901      	subs	r1, #1
 8003d96:	465a      	mov	r2, fp
 8003d98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d9c:	9109      	str	r1, [sp, #36]	; 0x24
 8003d9e:	f7ff ff17 	bl	8003bd0 <__exponent>
 8003da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003da4:	1813      	adds	r3, r2, r0
 8003da6:	2a01      	cmp	r2, #1
 8003da8:	4681      	mov	r9, r0
 8003daa:	6123      	str	r3, [r4, #16]
 8003dac:	dc02      	bgt.n	8003db4 <_printf_float+0x168>
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	07d2      	lsls	r2, r2, #31
 8003db2:	d501      	bpl.n	8003db8 <_printf_float+0x16c>
 8003db4:	3301      	adds	r3, #1
 8003db6:	6123      	str	r3, [r4, #16]
 8003db8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d09c      	beq.n	8003cfa <_printf_float+0xae>
 8003dc0:	232d      	movs	r3, #45	; 0x2d
 8003dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc6:	e798      	b.n	8003cfa <_printf_float+0xae>
 8003dc8:	9a06      	ldr	r2, [sp, #24]
 8003dca:	2a47      	cmp	r2, #71	; 0x47
 8003dcc:	d1be      	bne.n	8003d4c <_printf_float+0x100>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1bc      	bne.n	8003d4c <_printf_float+0x100>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e7b9      	b.n	8003d4a <_printf_float+0xfe>
 8003dd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003dda:	d118      	bne.n	8003e0e <_printf_float+0x1c2>
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	6863      	ldr	r3, [r4, #4]
 8003de0:	dd0b      	ble.n	8003dfa <_printf_float+0x1ae>
 8003de2:	6121      	str	r1, [r4, #16]
 8003de4:	b913      	cbnz	r3, 8003dec <_printf_float+0x1a0>
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	07d0      	lsls	r0, r2, #31
 8003dea:	d502      	bpl.n	8003df2 <_printf_float+0x1a6>
 8003dec:	3301      	adds	r3, #1
 8003dee:	440b      	add	r3, r1
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	65a1      	str	r1, [r4, #88]	; 0x58
 8003df4:	f04f 0900 	mov.w	r9, #0
 8003df8:	e7de      	b.n	8003db8 <_printf_float+0x16c>
 8003dfa:	b913      	cbnz	r3, 8003e02 <_printf_float+0x1b6>
 8003dfc:	6822      	ldr	r2, [r4, #0]
 8003dfe:	07d2      	lsls	r2, r2, #31
 8003e00:	d501      	bpl.n	8003e06 <_printf_float+0x1ba>
 8003e02:	3302      	adds	r3, #2
 8003e04:	e7f4      	b.n	8003df0 <_printf_float+0x1a4>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e7f2      	b.n	8003df0 <_printf_float+0x1a4>
 8003e0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e10:	4299      	cmp	r1, r3
 8003e12:	db05      	blt.n	8003e20 <_printf_float+0x1d4>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	6121      	str	r1, [r4, #16]
 8003e18:	07d8      	lsls	r0, r3, #31
 8003e1a:	d5ea      	bpl.n	8003df2 <_printf_float+0x1a6>
 8003e1c:	1c4b      	adds	r3, r1, #1
 8003e1e:	e7e7      	b.n	8003df0 <_printf_float+0x1a4>
 8003e20:	2900      	cmp	r1, #0
 8003e22:	bfd4      	ite	le
 8003e24:	f1c1 0202 	rsble	r2, r1, #2
 8003e28:	2201      	movgt	r2, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	e7e0      	b.n	8003df0 <_printf_float+0x1a4>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	055a      	lsls	r2, r3, #21
 8003e32:	d407      	bmi.n	8003e44 <_printf_float+0x1f8>
 8003e34:	6923      	ldr	r3, [r4, #16]
 8003e36:	4642      	mov	r2, r8
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	47b8      	blx	r7
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d12c      	bne.n	8003e9c <_printf_float+0x250>
 8003e42:	e764      	b.n	8003d0e <_printf_float+0xc2>
 8003e44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e48:	f240 80e0 	bls.w	800400c <_printf_float+0x3c0>
 8003e4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e50:	2200      	movs	r2, #0
 8003e52:	2300      	movs	r3, #0
 8003e54:	f7fc fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d034      	beq.n	8003ec6 <_printf_float+0x27a>
 8003e5c:	4a37      	ldr	r2, [pc, #220]	; (8003f3c <_printf_float+0x2f0>)
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4631      	mov	r1, r6
 8003e62:	4628      	mov	r0, r5
 8003e64:	47b8      	blx	r7
 8003e66:	3001      	adds	r0, #1
 8003e68:	f43f af51 	beq.w	8003d0e <_printf_float+0xc2>
 8003e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e70:	429a      	cmp	r2, r3
 8003e72:	db02      	blt.n	8003e7a <_printf_float+0x22e>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	07d8      	lsls	r0, r3, #31
 8003e78:	d510      	bpl.n	8003e9c <_printf_float+0x250>
 8003e7a:	ee18 3a10 	vmov	r3, s16
 8003e7e:	4652      	mov	r2, sl
 8003e80:	4631      	mov	r1, r6
 8003e82:	4628      	mov	r0, r5
 8003e84:	47b8      	blx	r7
 8003e86:	3001      	adds	r0, #1
 8003e88:	f43f af41 	beq.w	8003d0e <_printf_float+0xc2>
 8003e8c:	f04f 0800 	mov.w	r8, #0
 8003e90:	f104 091a 	add.w	r9, r4, #26
 8003e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e96:	3b01      	subs	r3, #1
 8003e98:	4543      	cmp	r3, r8
 8003e9a:	dc09      	bgt.n	8003eb0 <_printf_float+0x264>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	079b      	lsls	r3, r3, #30
 8003ea0:	f100 8105 	bmi.w	80040ae <_printf_float+0x462>
 8003ea4:	68e0      	ldr	r0, [r4, #12]
 8003ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ea8:	4298      	cmp	r0, r3
 8003eaa:	bfb8      	it	lt
 8003eac:	4618      	movlt	r0, r3
 8003eae:	e730      	b.n	8003d12 <_printf_float+0xc6>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	464a      	mov	r2, r9
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	47b8      	blx	r7
 8003eba:	3001      	adds	r0, #1
 8003ebc:	f43f af27 	beq.w	8003d0e <_printf_float+0xc2>
 8003ec0:	f108 0801 	add.w	r8, r8, #1
 8003ec4:	e7e6      	b.n	8003e94 <_printf_float+0x248>
 8003ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	dc39      	bgt.n	8003f40 <_printf_float+0x2f4>
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <_printf_float+0x2f0>)
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f43f af19 	beq.w	8003d0e <_printf_float+0xc2>
 8003edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	d102      	bne.n	8003eea <_printf_float+0x29e>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	07d9      	lsls	r1, r3, #31
 8003ee8:	d5d8      	bpl.n	8003e9c <_printf_float+0x250>
 8003eea:	ee18 3a10 	vmov	r3, s16
 8003eee:	4652      	mov	r2, sl
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	47b8      	blx	r7
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	f43f af09 	beq.w	8003d0e <_printf_float+0xc2>
 8003efc:	f04f 0900 	mov.w	r9, #0
 8003f00:	f104 0a1a 	add.w	sl, r4, #26
 8003f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f06:	425b      	negs	r3, r3
 8003f08:	454b      	cmp	r3, r9
 8003f0a:	dc01      	bgt.n	8003f10 <_printf_float+0x2c4>
 8003f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f0e:	e792      	b.n	8003e36 <_printf_float+0x1ea>
 8003f10:	2301      	movs	r3, #1
 8003f12:	4652      	mov	r2, sl
 8003f14:	4631      	mov	r1, r6
 8003f16:	4628      	mov	r0, r5
 8003f18:	47b8      	blx	r7
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	f43f aef7 	beq.w	8003d0e <_printf_float+0xc2>
 8003f20:	f109 0901 	add.w	r9, r9, #1
 8003f24:	e7ee      	b.n	8003f04 <_printf_float+0x2b8>
 8003f26:	bf00      	nop
 8003f28:	7fefffff 	.word	0x7fefffff
 8003f2c:	08007c74 	.word	0x08007c74
 8003f30:	08007c78 	.word	0x08007c78
 8003f34:	08007c80 	.word	0x08007c80
 8003f38:	08007c7c 	.word	0x08007c7c
 8003f3c:	08007c84 	.word	0x08007c84
 8003f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f44:	429a      	cmp	r2, r3
 8003f46:	bfa8      	it	ge
 8003f48:	461a      	movge	r2, r3
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	4691      	mov	r9, r2
 8003f4e:	dc37      	bgt.n	8003fc0 <_printf_float+0x374>
 8003f50:	f04f 0b00 	mov.w	fp, #0
 8003f54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f58:	f104 021a 	add.w	r2, r4, #26
 8003f5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f5e:	9305      	str	r3, [sp, #20]
 8003f60:	eba3 0309 	sub.w	r3, r3, r9
 8003f64:	455b      	cmp	r3, fp
 8003f66:	dc33      	bgt.n	8003fd0 <_printf_float+0x384>
 8003f68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	db3b      	blt.n	8003fe8 <_printf_float+0x39c>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	07da      	lsls	r2, r3, #31
 8003f74:	d438      	bmi.n	8003fe8 <_printf_float+0x39c>
 8003f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f78:	9a05      	ldr	r2, [sp, #20]
 8003f7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f7c:	1a9a      	subs	r2, r3, r2
 8003f7e:	eba3 0901 	sub.w	r9, r3, r1
 8003f82:	4591      	cmp	r9, r2
 8003f84:	bfa8      	it	ge
 8003f86:	4691      	movge	r9, r2
 8003f88:	f1b9 0f00 	cmp.w	r9, #0
 8003f8c:	dc35      	bgt.n	8003ffa <_printf_float+0x3ae>
 8003f8e:	f04f 0800 	mov.w	r8, #0
 8003f92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f96:	f104 0a1a 	add.w	sl, r4, #26
 8003f9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	eba3 0309 	sub.w	r3, r3, r9
 8003fa4:	4543      	cmp	r3, r8
 8003fa6:	f77f af79 	ble.w	8003e9c <_printf_float+0x250>
 8003faa:	2301      	movs	r3, #1
 8003fac:	4652      	mov	r2, sl
 8003fae:	4631      	mov	r1, r6
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	47b8      	blx	r7
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	f43f aeaa 	beq.w	8003d0e <_printf_float+0xc2>
 8003fba:	f108 0801 	add.w	r8, r8, #1
 8003fbe:	e7ec      	b.n	8003f9a <_printf_float+0x34e>
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	47b8      	blx	r7
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d1c0      	bne.n	8003f50 <_printf_float+0x304>
 8003fce:	e69e      	b.n	8003d0e <_printf_float+0xc2>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	9205      	str	r2, [sp, #20]
 8003fd8:	47b8      	blx	r7
 8003fda:	3001      	adds	r0, #1
 8003fdc:	f43f ae97 	beq.w	8003d0e <_printf_float+0xc2>
 8003fe0:	9a05      	ldr	r2, [sp, #20]
 8003fe2:	f10b 0b01 	add.w	fp, fp, #1
 8003fe6:	e7b9      	b.n	8003f5c <_printf_float+0x310>
 8003fe8:	ee18 3a10 	vmov	r3, s16
 8003fec:	4652      	mov	r2, sl
 8003fee:	4631      	mov	r1, r6
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	47b8      	blx	r7
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d1be      	bne.n	8003f76 <_printf_float+0x32a>
 8003ff8:	e689      	b.n	8003d0e <_printf_float+0xc2>
 8003ffa:	9a05      	ldr	r2, [sp, #20]
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	4442      	add	r2, r8
 8004000:	4631      	mov	r1, r6
 8004002:	4628      	mov	r0, r5
 8004004:	47b8      	blx	r7
 8004006:	3001      	adds	r0, #1
 8004008:	d1c1      	bne.n	8003f8e <_printf_float+0x342>
 800400a:	e680      	b.n	8003d0e <_printf_float+0xc2>
 800400c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800400e:	2a01      	cmp	r2, #1
 8004010:	dc01      	bgt.n	8004016 <_printf_float+0x3ca>
 8004012:	07db      	lsls	r3, r3, #31
 8004014:	d538      	bpl.n	8004088 <_printf_float+0x43c>
 8004016:	2301      	movs	r3, #1
 8004018:	4642      	mov	r2, r8
 800401a:	4631      	mov	r1, r6
 800401c:	4628      	mov	r0, r5
 800401e:	47b8      	blx	r7
 8004020:	3001      	adds	r0, #1
 8004022:	f43f ae74 	beq.w	8003d0e <_printf_float+0xc2>
 8004026:	ee18 3a10 	vmov	r3, s16
 800402a:	4652      	mov	r2, sl
 800402c:	4631      	mov	r1, r6
 800402e:	4628      	mov	r0, r5
 8004030:	47b8      	blx	r7
 8004032:	3001      	adds	r0, #1
 8004034:	f43f ae6b 	beq.w	8003d0e <_printf_float+0xc2>
 8004038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800403c:	2200      	movs	r2, #0
 800403e:	2300      	movs	r3, #0
 8004040:	f7fc fd4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004044:	b9d8      	cbnz	r0, 800407e <_printf_float+0x432>
 8004046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004048:	f108 0201 	add.w	r2, r8, #1
 800404c:	3b01      	subs	r3, #1
 800404e:	4631      	mov	r1, r6
 8004050:	4628      	mov	r0, r5
 8004052:	47b8      	blx	r7
 8004054:	3001      	adds	r0, #1
 8004056:	d10e      	bne.n	8004076 <_printf_float+0x42a>
 8004058:	e659      	b.n	8003d0e <_printf_float+0xc2>
 800405a:	2301      	movs	r3, #1
 800405c:	4652      	mov	r2, sl
 800405e:	4631      	mov	r1, r6
 8004060:	4628      	mov	r0, r5
 8004062:	47b8      	blx	r7
 8004064:	3001      	adds	r0, #1
 8004066:	f43f ae52 	beq.w	8003d0e <_printf_float+0xc2>
 800406a:	f108 0801 	add.w	r8, r8, #1
 800406e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	4543      	cmp	r3, r8
 8004074:	dcf1      	bgt.n	800405a <_printf_float+0x40e>
 8004076:	464b      	mov	r3, r9
 8004078:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800407c:	e6dc      	b.n	8003e38 <_printf_float+0x1ec>
 800407e:	f04f 0800 	mov.w	r8, #0
 8004082:	f104 0a1a 	add.w	sl, r4, #26
 8004086:	e7f2      	b.n	800406e <_printf_float+0x422>
 8004088:	2301      	movs	r3, #1
 800408a:	4642      	mov	r2, r8
 800408c:	e7df      	b.n	800404e <_printf_float+0x402>
 800408e:	2301      	movs	r3, #1
 8004090:	464a      	mov	r2, r9
 8004092:	4631      	mov	r1, r6
 8004094:	4628      	mov	r0, r5
 8004096:	47b8      	blx	r7
 8004098:	3001      	adds	r0, #1
 800409a:	f43f ae38 	beq.w	8003d0e <_printf_float+0xc2>
 800409e:	f108 0801 	add.w	r8, r8, #1
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040a6:	1a5b      	subs	r3, r3, r1
 80040a8:	4543      	cmp	r3, r8
 80040aa:	dcf0      	bgt.n	800408e <_printf_float+0x442>
 80040ac:	e6fa      	b.n	8003ea4 <_printf_float+0x258>
 80040ae:	f04f 0800 	mov.w	r8, #0
 80040b2:	f104 0919 	add.w	r9, r4, #25
 80040b6:	e7f4      	b.n	80040a2 <_printf_float+0x456>

080040b8 <_printf_common>:
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	4616      	mov	r6, r2
 80040be:	4699      	mov	r9, r3
 80040c0:	688a      	ldr	r2, [r1, #8]
 80040c2:	690b      	ldr	r3, [r1, #16]
 80040c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c8:	4293      	cmp	r3, r2
 80040ca:	bfb8      	it	lt
 80040cc:	4613      	movlt	r3, r2
 80040ce:	6033      	str	r3, [r6, #0]
 80040d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d4:	4607      	mov	r7, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	b10a      	cbz	r2, 80040de <_printf_common+0x26>
 80040da:	3301      	adds	r3, #1
 80040dc:	6033      	str	r3, [r6, #0]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	0699      	lsls	r1, r3, #26
 80040e2:	bf42      	ittt	mi
 80040e4:	6833      	ldrmi	r3, [r6, #0]
 80040e6:	3302      	addmi	r3, #2
 80040e8:	6033      	strmi	r3, [r6, #0]
 80040ea:	6825      	ldr	r5, [r4, #0]
 80040ec:	f015 0506 	ands.w	r5, r5, #6
 80040f0:	d106      	bne.n	8004100 <_printf_common+0x48>
 80040f2:	f104 0a19 	add.w	sl, r4, #25
 80040f6:	68e3      	ldr	r3, [r4, #12]
 80040f8:	6832      	ldr	r2, [r6, #0]
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	42ab      	cmp	r3, r5
 80040fe:	dc26      	bgt.n	800414e <_printf_common+0x96>
 8004100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004104:	1e13      	subs	r3, r2, #0
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	bf18      	it	ne
 800410a:	2301      	movne	r3, #1
 800410c:	0692      	lsls	r2, r2, #26
 800410e:	d42b      	bmi.n	8004168 <_printf_common+0xb0>
 8004110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004114:	4649      	mov	r1, r9
 8004116:	4638      	mov	r0, r7
 8004118:	47c0      	blx	r8
 800411a:	3001      	adds	r0, #1
 800411c:	d01e      	beq.n	800415c <_printf_common+0xa4>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	68e5      	ldr	r5, [r4, #12]
 8004122:	6832      	ldr	r2, [r6, #0]
 8004124:	f003 0306 	and.w	r3, r3, #6
 8004128:	2b04      	cmp	r3, #4
 800412a:	bf08      	it	eq
 800412c:	1aad      	subeq	r5, r5, r2
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	6922      	ldr	r2, [r4, #16]
 8004132:	bf0c      	ite	eq
 8004134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004138:	2500      	movne	r5, #0
 800413a:	4293      	cmp	r3, r2
 800413c:	bfc4      	itt	gt
 800413e:	1a9b      	subgt	r3, r3, r2
 8004140:	18ed      	addgt	r5, r5, r3
 8004142:	2600      	movs	r6, #0
 8004144:	341a      	adds	r4, #26
 8004146:	42b5      	cmp	r5, r6
 8004148:	d11a      	bne.n	8004180 <_printf_common+0xc8>
 800414a:	2000      	movs	r0, #0
 800414c:	e008      	b.n	8004160 <_printf_common+0xa8>
 800414e:	2301      	movs	r3, #1
 8004150:	4652      	mov	r2, sl
 8004152:	4649      	mov	r1, r9
 8004154:	4638      	mov	r0, r7
 8004156:	47c0      	blx	r8
 8004158:	3001      	adds	r0, #1
 800415a:	d103      	bne.n	8004164 <_printf_common+0xac>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004164:	3501      	adds	r5, #1
 8004166:	e7c6      	b.n	80040f6 <_printf_common+0x3e>
 8004168:	18e1      	adds	r1, r4, r3
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	2030      	movs	r0, #48	; 0x30
 800416e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004172:	4422      	add	r2, r4
 8004174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800417c:	3302      	adds	r3, #2
 800417e:	e7c7      	b.n	8004110 <_printf_common+0x58>
 8004180:	2301      	movs	r3, #1
 8004182:	4622      	mov	r2, r4
 8004184:	4649      	mov	r1, r9
 8004186:	4638      	mov	r0, r7
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d0e6      	beq.n	800415c <_printf_common+0xa4>
 800418e:	3601      	adds	r6, #1
 8004190:	e7d9      	b.n	8004146 <_printf_common+0x8e>
	...

08004194 <_printf_i>:
 8004194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	7e0f      	ldrb	r7, [r1, #24]
 800419a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800419c:	2f78      	cmp	r7, #120	; 0x78
 800419e:	4691      	mov	r9, r2
 80041a0:	4680      	mov	r8, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	469a      	mov	sl, r3
 80041a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041aa:	d807      	bhi.n	80041bc <_printf_i+0x28>
 80041ac:	2f62      	cmp	r7, #98	; 0x62
 80041ae:	d80a      	bhi.n	80041c6 <_printf_i+0x32>
 80041b0:	2f00      	cmp	r7, #0
 80041b2:	f000 80d8 	beq.w	8004366 <_printf_i+0x1d2>
 80041b6:	2f58      	cmp	r7, #88	; 0x58
 80041b8:	f000 80a3 	beq.w	8004302 <_printf_i+0x16e>
 80041bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c4:	e03a      	b.n	800423c <_printf_i+0xa8>
 80041c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ca:	2b15      	cmp	r3, #21
 80041cc:	d8f6      	bhi.n	80041bc <_printf_i+0x28>
 80041ce:	a101      	add	r1, pc, #4	; (adr r1, 80041d4 <_printf_i+0x40>)
 80041d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	08004241 	.word	0x08004241
 80041dc:	080041bd 	.word	0x080041bd
 80041e0:	080041bd 	.word	0x080041bd
 80041e4:	080041bd 	.word	0x080041bd
 80041e8:	080041bd 	.word	0x080041bd
 80041ec:	08004241 	.word	0x08004241
 80041f0:	080041bd 	.word	0x080041bd
 80041f4:	080041bd 	.word	0x080041bd
 80041f8:	080041bd 	.word	0x080041bd
 80041fc:	080041bd 	.word	0x080041bd
 8004200:	0800434d 	.word	0x0800434d
 8004204:	08004271 	.word	0x08004271
 8004208:	0800432f 	.word	0x0800432f
 800420c:	080041bd 	.word	0x080041bd
 8004210:	080041bd 	.word	0x080041bd
 8004214:	0800436f 	.word	0x0800436f
 8004218:	080041bd 	.word	0x080041bd
 800421c:	08004271 	.word	0x08004271
 8004220:	080041bd 	.word	0x080041bd
 8004224:	080041bd 	.word	0x080041bd
 8004228:	08004337 	.word	0x08004337
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	602a      	str	r2, [r5, #0]
 8004234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423c:	2301      	movs	r3, #1
 800423e:	e0a3      	b.n	8004388 <_printf_i+0x1f4>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	6829      	ldr	r1, [r5, #0]
 8004244:	0606      	lsls	r6, r0, #24
 8004246:	f101 0304 	add.w	r3, r1, #4
 800424a:	d50a      	bpl.n	8004262 <_printf_i+0xce>
 800424c:	680e      	ldr	r6, [r1, #0]
 800424e:	602b      	str	r3, [r5, #0]
 8004250:	2e00      	cmp	r6, #0
 8004252:	da03      	bge.n	800425c <_printf_i+0xc8>
 8004254:	232d      	movs	r3, #45	; 0x2d
 8004256:	4276      	negs	r6, r6
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425c:	485e      	ldr	r0, [pc, #376]	; (80043d8 <_printf_i+0x244>)
 800425e:	230a      	movs	r3, #10
 8004260:	e019      	b.n	8004296 <_printf_i+0x102>
 8004262:	680e      	ldr	r6, [r1, #0]
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800426a:	bf18      	it	ne
 800426c:	b236      	sxthne	r6, r6
 800426e:	e7ef      	b.n	8004250 <_printf_i+0xbc>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	1d19      	adds	r1, r3, #4
 8004276:	6029      	str	r1, [r5, #0]
 8004278:	0601      	lsls	r1, r0, #24
 800427a:	d501      	bpl.n	8004280 <_printf_i+0xec>
 800427c:	681e      	ldr	r6, [r3, #0]
 800427e:	e002      	b.n	8004286 <_printf_i+0xf2>
 8004280:	0646      	lsls	r6, r0, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0xe8>
 8004284:	881e      	ldrh	r6, [r3, #0]
 8004286:	4854      	ldr	r0, [pc, #336]	; (80043d8 <_printf_i+0x244>)
 8004288:	2f6f      	cmp	r7, #111	; 0x6f
 800428a:	bf0c      	ite	eq
 800428c:	2308      	moveq	r3, #8
 800428e:	230a      	movne	r3, #10
 8004290:	2100      	movs	r1, #0
 8004292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004296:	6865      	ldr	r5, [r4, #4]
 8004298:	60a5      	str	r5, [r4, #8]
 800429a:	2d00      	cmp	r5, #0
 800429c:	bfa2      	ittt	ge
 800429e:	6821      	ldrge	r1, [r4, #0]
 80042a0:	f021 0104 	bicge.w	r1, r1, #4
 80042a4:	6021      	strge	r1, [r4, #0]
 80042a6:	b90e      	cbnz	r6, 80042ac <_printf_i+0x118>
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	d04d      	beq.n	8004348 <_printf_i+0x1b4>
 80042ac:	4615      	mov	r5, r2
 80042ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80042b2:	fb03 6711 	mls	r7, r3, r1, r6
 80042b6:	5dc7      	ldrb	r7, [r0, r7]
 80042b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042bc:	4637      	mov	r7, r6
 80042be:	42bb      	cmp	r3, r7
 80042c0:	460e      	mov	r6, r1
 80042c2:	d9f4      	bls.n	80042ae <_printf_i+0x11a>
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d10b      	bne.n	80042e0 <_printf_i+0x14c>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	07de      	lsls	r6, r3, #31
 80042cc:	d508      	bpl.n	80042e0 <_printf_i+0x14c>
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	6861      	ldr	r1, [r4, #4]
 80042d2:	4299      	cmp	r1, r3
 80042d4:	bfde      	ittt	le
 80042d6:	2330      	movle	r3, #48	; 0x30
 80042d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042e0:	1b52      	subs	r2, r2, r5
 80042e2:	6122      	str	r2, [r4, #16]
 80042e4:	f8cd a000 	str.w	sl, [sp]
 80042e8:	464b      	mov	r3, r9
 80042ea:	aa03      	add	r2, sp, #12
 80042ec:	4621      	mov	r1, r4
 80042ee:	4640      	mov	r0, r8
 80042f0:	f7ff fee2 	bl	80040b8 <_printf_common>
 80042f4:	3001      	adds	r0, #1
 80042f6:	d14c      	bne.n	8004392 <_printf_i+0x1fe>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	b004      	add	sp, #16
 80042fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004302:	4835      	ldr	r0, [pc, #212]	; (80043d8 <_printf_i+0x244>)
 8004304:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004308:	6829      	ldr	r1, [r5, #0]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004310:	6029      	str	r1, [r5, #0]
 8004312:	061d      	lsls	r5, r3, #24
 8004314:	d514      	bpl.n	8004340 <_printf_i+0x1ac>
 8004316:	07df      	lsls	r7, r3, #31
 8004318:	bf44      	itt	mi
 800431a:	f043 0320 	orrmi.w	r3, r3, #32
 800431e:	6023      	strmi	r3, [r4, #0]
 8004320:	b91e      	cbnz	r6, 800432a <_printf_i+0x196>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f023 0320 	bic.w	r3, r3, #32
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	2310      	movs	r3, #16
 800432c:	e7b0      	b.n	8004290 <_printf_i+0xfc>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	f043 0320 	orr.w	r3, r3, #32
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	2378      	movs	r3, #120	; 0x78
 8004338:	4828      	ldr	r0, [pc, #160]	; (80043dc <_printf_i+0x248>)
 800433a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800433e:	e7e3      	b.n	8004308 <_printf_i+0x174>
 8004340:	0659      	lsls	r1, r3, #25
 8004342:	bf48      	it	mi
 8004344:	b2b6      	uxthmi	r6, r6
 8004346:	e7e6      	b.n	8004316 <_printf_i+0x182>
 8004348:	4615      	mov	r5, r2
 800434a:	e7bb      	b.n	80042c4 <_printf_i+0x130>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	6826      	ldr	r6, [r4, #0]
 8004350:	6961      	ldr	r1, [r4, #20]
 8004352:	1d18      	adds	r0, r3, #4
 8004354:	6028      	str	r0, [r5, #0]
 8004356:	0635      	lsls	r5, r6, #24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	d501      	bpl.n	8004360 <_printf_i+0x1cc>
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	e002      	b.n	8004366 <_printf_i+0x1d2>
 8004360:	0670      	lsls	r0, r6, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0x1c8>
 8004364:	8019      	strh	r1, [r3, #0]
 8004366:	2300      	movs	r3, #0
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	4615      	mov	r5, r2
 800436c:	e7ba      	b.n	80042e4 <_printf_i+0x150>
 800436e:	682b      	ldr	r3, [r5, #0]
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	602a      	str	r2, [r5, #0]
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	2100      	movs	r1, #0
 800437a:	4628      	mov	r0, r5
 800437c:	f7fb ff38 	bl	80001f0 <memchr>
 8004380:	b108      	cbz	r0, 8004386 <_printf_i+0x1f2>
 8004382:	1b40      	subs	r0, r0, r5
 8004384:	6060      	str	r0, [r4, #4]
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	2300      	movs	r3, #0
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004390:	e7a8      	b.n	80042e4 <_printf_i+0x150>
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	462a      	mov	r2, r5
 8004396:	4649      	mov	r1, r9
 8004398:	4640      	mov	r0, r8
 800439a:	47d0      	blx	sl
 800439c:	3001      	adds	r0, #1
 800439e:	d0ab      	beq.n	80042f8 <_printf_i+0x164>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	079b      	lsls	r3, r3, #30
 80043a4:	d413      	bmi.n	80043ce <_printf_i+0x23a>
 80043a6:	68e0      	ldr	r0, [r4, #12]
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	4298      	cmp	r0, r3
 80043ac:	bfb8      	it	lt
 80043ae:	4618      	movlt	r0, r3
 80043b0:	e7a4      	b.n	80042fc <_printf_i+0x168>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4632      	mov	r2, r6
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d09b      	beq.n	80042f8 <_printf_i+0x164>
 80043c0:	3501      	adds	r5, #1
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	9903      	ldr	r1, [sp, #12]
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dcf2      	bgt.n	80043b2 <_printf_i+0x21e>
 80043cc:	e7eb      	b.n	80043a6 <_printf_i+0x212>
 80043ce:	2500      	movs	r5, #0
 80043d0:	f104 0619 	add.w	r6, r4, #25
 80043d4:	e7f5      	b.n	80043c2 <_printf_i+0x22e>
 80043d6:	bf00      	nop
 80043d8:	08007c86 	.word	0x08007c86
 80043dc:	08007c97 	.word	0x08007c97

080043e0 <quorem>:
 80043e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	6903      	ldr	r3, [r0, #16]
 80043e6:	690c      	ldr	r4, [r1, #16]
 80043e8:	42a3      	cmp	r3, r4
 80043ea:	4607      	mov	r7, r0
 80043ec:	f2c0 8081 	blt.w	80044f2 <quorem+0x112>
 80043f0:	3c01      	subs	r4, #1
 80043f2:	f101 0814 	add.w	r8, r1, #20
 80043f6:	f100 0514 	add.w	r5, r0, #20
 80043fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004404:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004408:	3301      	adds	r3, #1
 800440a:	429a      	cmp	r2, r3
 800440c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004410:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004414:	fbb2 f6f3 	udiv	r6, r2, r3
 8004418:	d331      	bcc.n	800447e <quorem+0x9e>
 800441a:	f04f 0e00 	mov.w	lr, #0
 800441e:	4640      	mov	r0, r8
 8004420:	46ac      	mov	ip, r5
 8004422:	46f2      	mov	sl, lr
 8004424:	f850 2b04 	ldr.w	r2, [r0], #4
 8004428:	b293      	uxth	r3, r2
 800442a:	fb06 e303 	mla	r3, r6, r3, lr
 800442e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004432:	b29b      	uxth	r3, r3
 8004434:	ebaa 0303 	sub.w	r3, sl, r3
 8004438:	f8dc a000 	ldr.w	sl, [ip]
 800443c:	0c12      	lsrs	r2, r2, #16
 800443e:	fa13 f38a 	uxtah	r3, r3, sl
 8004442:	fb06 e202 	mla	r2, r6, r2, lr
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	9b00      	ldr	r3, [sp, #0]
 800444a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800444e:	b292      	uxth	r2, r2
 8004450:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004458:	f8bd 3000 	ldrh.w	r3, [sp]
 800445c:	4581      	cmp	r9, r0
 800445e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004462:	f84c 3b04 	str.w	r3, [ip], #4
 8004466:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800446a:	d2db      	bcs.n	8004424 <quorem+0x44>
 800446c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004470:	b92b      	cbnz	r3, 800447e <quorem+0x9e>
 8004472:	9b01      	ldr	r3, [sp, #4]
 8004474:	3b04      	subs	r3, #4
 8004476:	429d      	cmp	r5, r3
 8004478:	461a      	mov	r2, r3
 800447a:	d32e      	bcc.n	80044da <quorem+0xfa>
 800447c:	613c      	str	r4, [r7, #16]
 800447e:	4638      	mov	r0, r7
 8004480:	f001 f8c4 	bl	800560c <__mcmp>
 8004484:	2800      	cmp	r0, #0
 8004486:	db24      	blt.n	80044d2 <quorem+0xf2>
 8004488:	3601      	adds	r6, #1
 800448a:	4628      	mov	r0, r5
 800448c:	f04f 0c00 	mov.w	ip, #0
 8004490:	f858 2b04 	ldr.w	r2, [r8], #4
 8004494:	f8d0 e000 	ldr.w	lr, [r0]
 8004498:	b293      	uxth	r3, r2
 800449a:	ebac 0303 	sub.w	r3, ip, r3
 800449e:	0c12      	lsrs	r2, r2, #16
 80044a0:	fa13 f38e 	uxtah	r3, r3, lr
 80044a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80044a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044b2:	45c1      	cmp	r9, r8
 80044b4:	f840 3b04 	str.w	r3, [r0], #4
 80044b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044bc:	d2e8      	bcs.n	8004490 <quorem+0xb0>
 80044be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044c6:	b922      	cbnz	r2, 80044d2 <quorem+0xf2>
 80044c8:	3b04      	subs	r3, #4
 80044ca:	429d      	cmp	r5, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	d30a      	bcc.n	80044e6 <quorem+0x106>
 80044d0:	613c      	str	r4, [r7, #16]
 80044d2:	4630      	mov	r0, r6
 80044d4:	b003      	add	sp, #12
 80044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	3b04      	subs	r3, #4
 80044de:	2a00      	cmp	r2, #0
 80044e0:	d1cc      	bne.n	800447c <quorem+0x9c>
 80044e2:	3c01      	subs	r4, #1
 80044e4:	e7c7      	b.n	8004476 <quorem+0x96>
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	d1f0      	bne.n	80044d0 <quorem+0xf0>
 80044ee:	3c01      	subs	r4, #1
 80044f0:	e7eb      	b.n	80044ca <quorem+0xea>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e7ee      	b.n	80044d4 <quorem+0xf4>
	...

080044f8 <_dtoa_r>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	ed2d 8b04 	vpush	{d8-d9}
 8004500:	ec57 6b10 	vmov	r6, r7, d0
 8004504:	b093      	sub	sp, #76	; 0x4c
 8004506:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004508:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800450c:	9106      	str	r1, [sp, #24]
 800450e:	ee10 aa10 	vmov	sl, s0
 8004512:	4604      	mov	r4, r0
 8004514:	9209      	str	r2, [sp, #36]	; 0x24
 8004516:	930c      	str	r3, [sp, #48]	; 0x30
 8004518:	46bb      	mov	fp, r7
 800451a:	b975      	cbnz	r5, 800453a <_dtoa_r+0x42>
 800451c:	2010      	movs	r0, #16
 800451e:	f000 fddd 	bl	80050dc <malloc>
 8004522:	4602      	mov	r2, r0
 8004524:	6260      	str	r0, [r4, #36]	; 0x24
 8004526:	b920      	cbnz	r0, 8004532 <_dtoa_r+0x3a>
 8004528:	4ba7      	ldr	r3, [pc, #668]	; (80047c8 <_dtoa_r+0x2d0>)
 800452a:	21ea      	movs	r1, #234	; 0xea
 800452c:	48a7      	ldr	r0, [pc, #668]	; (80047cc <_dtoa_r+0x2d4>)
 800452e:	f001 fa75 	bl	8005a1c <__assert_func>
 8004532:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004536:	6005      	str	r5, [r0, #0]
 8004538:	60c5      	str	r5, [r0, #12]
 800453a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	b151      	cbz	r1, 8004556 <_dtoa_r+0x5e>
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	604a      	str	r2, [r1, #4]
 8004544:	2301      	movs	r3, #1
 8004546:	4093      	lsls	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
 800454a:	4620      	mov	r0, r4
 800454c:	f000 fe1c 	bl	8005188 <_Bfree>
 8004550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	1e3b      	subs	r3, r7, #0
 8004558:	bfaa      	itet	ge
 800455a:	2300      	movge	r3, #0
 800455c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004560:	f8c8 3000 	strge.w	r3, [r8]
 8004564:	4b9a      	ldr	r3, [pc, #616]	; (80047d0 <_dtoa_r+0x2d8>)
 8004566:	bfbc      	itt	lt
 8004568:	2201      	movlt	r2, #1
 800456a:	f8c8 2000 	strlt.w	r2, [r8]
 800456e:	ea33 030b 	bics.w	r3, r3, fp
 8004572:	d11b      	bne.n	80045ac <_dtoa_r+0xb4>
 8004574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004576:	f242 730f 	movw	r3, #9999	; 0x270f
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004580:	4333      	orrs	r3, r6
 8004582:	f000 8592 	beq.w	80050aa <_dtoa_r+0xbb2>
 8004586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004588:	b963      	cbnz	r3, 80045a4 <_dtoa_r+0xac>
 800458a:	4b92      	ldr	r3, [pc, #584]	; (80047d4 <_dtoa_r+0x2dc>)
 800458c:	e022      	b.n	80045d4 <_dtoa_r+0xdc>
 800458e:	4b92      	ldr	r3, [pc, #584]	; (80047d8 <_dtoa_r+0x2e0>)
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	3308      	adds	r3, #8
 8004594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	9801      	ldr	r0, [sp, #4]
 800459a:	b013      	add	sp, #76	; 0x4c
 800459c:	ecbd 8b04 	vpop	{d8-d9}
 80045a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a4:	4b8b      	ldr	r3, [pc, #556]	; (80047d4 <_dtoa_r+0x2dc>)
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	3303      	adds	r3, #3
 80045aa:	e7f3      	b.n	8004594 <_dtoa_r+0x9c>
 80045ac:	2200      	movs	r2, #0
 80045ae:	2300      	movs	r3, #0
 80045b0:	4650      	mov	r0, sl
 80045b2:	4659      	mov	r1, fp
 80045b4:	f7fc fa90 	bl	8000ad8 <__aeabi_dcmpeq>
 80045b8:	ec4b ab19 	vmov	d9, sl, fp
 80045bc:	4680      	mov	r8, r0
 80045be:	b158      	cbz	r0, 80045d8 <_dtoa_r+0xe0>
 80045c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045c2:	2301      	movs	r3, #1
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 856b 	beq.w	80050a4 <_dtoa_r+0xbac>
 80045ce:	4883      	ldr	r0, [pc, #524]	; (80047dc <_dtoa_r+0x2e4>)
 80045d0:	6018      	str	r0, [r3, #0]
 80045d2:	1e43      	subs	r3, r0, #1
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	e7df      	b.n	8004598 <_dtoa_r+0xa0>
 80045d8:	ec4b ab10 	vmov	d0, sl, fp
 80045dc:	aa10      	add	r2, sp, #64	; 0x40
 80045de:	a911      	add	r1, sp, #68	; 0x44
 80045e0:	4620      	mov	r0, r4
 80045e2:	f001 f8b9 	bl	8005758 <__d2b>
 80045e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80045ea:	ee08 0a10 	vmov	s16, r0
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	f000 8084 	beq.w	80046fc <_dtoa_r+0x204>
 80045f4:	ee19 3a90 	vmov	r3, s19
 80045f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004600:	4656      	mov	r6, sl
 8004602:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800460a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800460e:	4b74      	ldr	r3, [pc, #464]	; (80047e0 <_dtoa_r+0x2e8>)
 8004610:	2200      	movs	r2, #0
 8004612:	4630      	mov	r0, r6
 8004614:	4639      	mov	r1, r7
 8004616:	f7fb fe3f 	bl	8000298 <__aeabi_dsub>
 800461a:	a365      	add	r3, pc, #404	; (adr r3, 80047b0 <_dtoa_r+0x2b8>)
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f7fb fff2 	bl	8000608 <__aeabi_dmul>
 8004624:	a364      	add	r3, pc, #400	; (adr r3, 80047b8 <_dtoa_r+0x2c0>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fb fe37 	bl	800029c <__adddf3>
 800462e:	4606      	mov	r6, r0
 8004630:	4628      	mov	r0, r5
 8004632:	460f      	mov	r7, r1
 8004634:	f7fb ff7e 	bl	8000534 <__aeabi_i2d>
 8004638:	a361      	add	r3, pc, #388	; (adr r3, 80047c0 <_dtoa_r+0x2c8>)
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f7fb ffe3 	bl	8000608 <__aeabi_dmul>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4630      	mov	r0, r6
 8004648:	4639      	mov	r1, r7
 800464a:	f7fb fe27 	bl	800029c <__adddf3>
 800464e:	4606      	mov	r6, r0
 8004650:	460f      	mov	r7, r1
 8004652:	f7fc fa89 	bl	8000b68 <__aeabi_d2iz>
 8004656:	2200      	movs	r2, #0
 8004658:	9000      	str	r0, [sp, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	4630      	mov	r0, r6
 800465e:	4639      	mov	r1, r7
 8004660:	f7fc fa44 	bl	8000aec <__aeabi_dcmplt>
 8004664:	b150      	cbz	r0, 800467c <_dtoa_r+0x184>
 8004666:	9800      	ldr	r0, [sp, #0]
 8004668:	f7fb ff64 	bl	8000534 <__aeabi_i2d>
 800466c:	4632      	mov	r2, r6
 800466e:	463b      	mov	r3, r7
 8004670:	f7fc fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 8004674:	b910      	cbnz	r0, 800467c <_dtoa_r+0x184>
 8004676:	9b00      	ldr	r3, [sp, #0]
 8004678:	3b01      	subs	r3, #1
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	9b00      	ldr	r3, [sp, #0]
 800467e:	2b16      	cmp	r3, #22
 8004680:	d85a      	bhi.n	8004738 <_dtoa_r+0x240>
 8004682:	9a00      	ldr	r2, [sp, #0]
 8004684:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <_dtoa_r+0x2ec>)
 8004686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	ec51 0b19 	vmov	r0, r1, d9
 8004692:	f7fc fa2b 	bl	8000aec <__aeabi_dcmplt>
 8004696:	2800      	cmp	r0, #0
 8004698:	d050      	beq.n	800473c <_dtoa_r+0x244>
 800469a:	9b00      	ldr	r3, [sp, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2300      	movs	r3, #0
 80046a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80046a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046a6:	1b5d      	subs	r5, r3, r5
 80046a8:	1e6b      	subs	r3, r5, #1
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	bf45      	ittet	mi
 80046ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80046b2:	9304      	strmi	r3, [sp, #16]
 80046b4:	2300      	movpl	r3, #0
 80046b6:	2300      	movmi	r3, #0
 80046b8:	bf4c      	ite	mi
 80046ba:	9305      	strmi	r3, [sp, #20]
 80046bc:	9304      	strpl	r3, [sp, #16]
 80046be:	9b00      	ldr	r3, [sp, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db3d      	blt.n	8004740 <_dtoa_r+0x248>
 80046c4:	9b05      	ldr	r3, [sp, #20]
 80046c6:	9a00      	ldr	r2, [sp, #0]
 80046c8:	920a      	str	r2, [sp, #40]	; 0x28
 80046ca:	4413      	add	r3, r2
 80046cc:	9305      	str	r3, [sp, #20]
 80046ce:	2300      	movs	r3, #0
 80046d0:	9307      	str	r3, [sp, #28]
 80046d2:	9b06      	ldr	r3, [sp, #24]
 80046d4:	2b09      	cmp	r3, #9
 80046d6:	f200 8089 	bhi.w	80047ec <_dtoa_r+0x2f4>
 80046da:	2b05      	cmp	r3, #5
 80046dc:	bfc4      	itt	gt
 80046de:	3b04      	subgt	r3, #4
 80046e0:	9306      	strgt	r3, [sp, #24]
 80046e2:	9b06      	ldr	r3, [sp, #24]
 80046e4:	f1a3 0302 	sub.w	r3, r3, #2
 80046e8:	bfcc      	ite	gt
 80046ea:	2500      	movgt	r5, #0
 80046ec:	2501      	movle	r5, #1
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	f200 8087 	bhi.w	8004802 <_dtoa_r+0x30a>
 80046f4:	e8df f003 	tbb	[pc, r3]
 80046f8:	59383a2d 	.word	0x59383a2d
 80046fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004700:	441d      	add	r5, r3
 8004702:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004706:	2b20      	cmp	r3, #32
 8004708:	bfc1      	itttt	gt
 800470a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800470e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004712:	fa0b f303 	lslgt.w	r3, fp, r3
 8004716:	fa26 f000 	lsrgt.w	r0, r6, r0
 800471a:	bfda      	itte	le
 800471c:	f1c3 0320 	rsble	r3, r3, #32
 8004720:	fa06 f003 	lslle.w	r0, r6, r3
 8004724:	4318      	orrgt	r0, r3
 8004726:	f7fb fef5 	bl	8000514 <__aeabi_ui2d>
 800472a:	2301      	movs	r3, #1
 800472c:	4606      	mov	r6, r0
 800472e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004732:	3d01      	subs	r5, #1
 8004734:	930e      	str	r3, [sp, #56]	; 0x38
 8004736:	e76a      	b.n	800460e <_dtoa_r+0x116>
 8004738:	2301      	movs	r3, #1
 800473a:	e7b2      	b.n	80046a2 <_dtoa_r+0x1aa>
 800473c:	900b      	str	r0, [sp, #44]	; 0x2c
 800473e:	e7b1      	b.n	80046a4 <_dtoa_r+0x1ac>
 8004740:	9b04      	ldr	r3, [sp, #16]
 8004742:	9a00      	ldr	r2, [sp, #0]
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	4253      	negs	r3, r2
 800474a:	9307      	str	r3, [sp, #28]
 800474c:	2300      	movs	r3, #0
 800474e:	930a      	str	r3, [sp, #40]	; 0x28
 8004750:	e7bf      	b.n	80046d2 <_dtoa_r+0x1da>
 8004752:	2300      	movs	r3, #0
 8004754:	9308      	str	r3, [sp, #32]
 8004756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004758:	2b00      	cmp	r3, #0
 800475a:	dc55      	bgt.n	8004808 <_dtoa_r+0x310>
 800475c:	2301      	movs	r3, #1
 800475e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004762:	461a      	mov	r2, r3
 8004764:	9209      	str	r2, [sp, #36]	; 0x24
 8004766:	e00c      	b.n	8004782 <_dtoa_r+0x28a>
 8004768:	2301      	movs	r3, #1
 800476a:	e7f3      	b.n	8004754 <_dtoa_r+0x25c>
 800476c:	2300      	movs	r3, #0
 800476e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004770:	9308      	str	r3, [sp, #32]
 8004772:	9b00      	ldr	r3, [sp, #0]
 8004774:	4413      	add	r3, r2
 8004776:	9302      	str	r3, [sp, #8]
 8004778:	3301      	adds	r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	9303      	str	r3, [sp, #12]
 800477e:	bfb8      	it	lt
 8004780:	2301      	movlt	r3, #1
 8004782:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004784:	2200      	movs	r2, #0
 8004786:	6042      	str	r2, [r0, #4]
 8004788:	2204      	movs	r2, #4
 800478a:	f102 0614 	add.w	r6, r2, #20
 800478e:	429e      	cmp	r6, r3
 8004790:	6841      	ldr	r1, [r0, #4]
 8004792:	d93d      	bls.n	8004810 <_dtoa_r+0x318>
 8004794:	4620      	mov	r0, r4
 8004796:	f000 fcb7 	bl	8005108 <_Balloc>
 800479a:	9001      	str	r0, [sp, #4]
 800479c:	2800      	cmp	r0, #0
 800479e:	d13b      	bne.n	8004818 <_dtoa_r+0x320>
 80047a0:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <_dtoa_r+0x2f0>)
 80047a2:	4602      	mov	r2, r0
 80047a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80047a8:	e6c0      	b.n	800452c <_dtoa_r+0x34>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e7df      	b.n	800476e <_dtoa_r+0x276>
 80047ae:	bf00      	nop
 80047b0:	636f4361 	.word	0x636f4361
 80047b4:	3fd287a7 	.word	0x3fd287a7
 80047b8:	8b60c8b3 	.word	0x8b60c8b3
 80047bc:	3fc68a28 	.word	0x3fc68a28
 80047c0:	509f79fb 	.word	0x509f79fb
 80047c4:	3fd34413 	.word	0x3fd34413
 80047c8:	08007cb5 	.word	0x08007cb5
 80047cc:	08007ccc 	.word	0x08007ccc
 80047d0:	7ff00000 	.word	0x7ff00000
 80047d4:	08007cb1 	.word	0x08007cb1
 80047d8:	08007ca8 	.word	0x08007ca8
 80047dc:	08007c85 	.word	0x08007c85
 80047e0:	3ff80000 	.word	0x3ff80000
 80047e4:	08007dc0 	.word	0x08007dc0
 80047e8:	08007d27 	.word	0x08007d27
 80047ec:	2501      	movs	r5, #1
 80047ee:	2300      	movs	r3, #0
 80047f0:	9306      	str	r3, [sp, #24]
 80047f2:	9508      	str	r5, [sp, #32]
 80047f4:	f04f 33ff 	mov.w	r3, #4294967295
 80047f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2312      	movs	r3, #18
 8004800:	e7b0      	b.n	8004764 <_dtoa_r+0x26c>
 8004802:	2301      	movs	r3, #1
 8004804:	9308      	str	r3, [sp, #32]
 8004806:	e7f5      	b.n	80047f4 <_dtoa_r+0x2fc>
 8004808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800480e:	e7b8      	b.n	8004782 <_dtoa_r+0x28a>
 8004810:	3101      	adds	r1, #1
 8004812:	6041      	str	r1, [r0, #4]
 8004814:	0052      	lsls	r2, r2, #1
 8004816:	e7b8      	b.n	800478a <_dtoa_r+0x292>
 8004818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481a:	9a01      	ldr	r2, [sp, #4]
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	2b0e      	cmp	r3, #14
 8004822:	f200 809d 	bhi.w	8004960 <_dtoa_r+0x468>
 8004826:	2d00      	cmp	r5, #0
 8004828:	f000 809a 	beq.w	8004960 <_dtoa_r+0x468>
 800482c:	9b00      	ldr	r3, [sp, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	dd32      	ble.n	8004898 <_dtoa_r+0x3a0>
 8004832:	4ab7      	ldr	r2, [pc, #732]	; (8004b10 <_dtoa_r+0x618>)
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800483c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004840:	9b00      	ldr	r3, [sp, #0]
 8004842:	05d8      	lsls	r0, r3, #23
 8004844:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004848:	d516      	bpl.n	8004878 <_dtoa_r+0x380>
 800484a:	4bb2      	ldr	r3, [pc, #712]	; (8004b14 <_dtoa_r+0x61c>)
 800484c:	ec51 0b19 	vmov	r0, r1, d9
 8004850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004854:	f7fc f802 	bl	800085c <__aeabi_ddiv>
 8004858:	f007 070f 	and.w	r7, r7, #15
 800485c:	4682      	mov	sl, r0
 800485e:	468b      	mov	fp, r1
 8004860:	2503      	movs	r5, #3
 8004862:	4eac      	ldr	r6, [pc, #688]	; (8004b14 <_dtoa_r+0x61c>)
 8004864:	b957      	cbnz	r7, 800487c <_dtoa_r+0x384>
 8004866:	4642      	mov	r2, r8
 8004868:	464b      	mov	r3, r9
 800486a:	4650      	mov	r0, sl
 800486c:	4659      	mov	r1, fp
 800486e:	f7fb fff5 	bl	800085c <__aeabi_ddiv>
 8004872:	4682      	mov	sl, r0
 8004874:	468b      	mov	fp, r1
 8004876:	e028      	b.n	80048ca <_dtoa_r+0x3d2>
 8004878:	2502      	movs	r5, #2
 800487a:	e7f2      	b.n	8004862 <_dtoa_r+0x36a>
 800487c:	07f9      	lsls	r1, r7, #31
 800487e:	d508      	bpl.n	8004892 <_dtoa_r+0x39a>
 8004880:	4640      	mov	r0, r8
 8004882:	4649      	mov	r1, r9
 8004884:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004888:	f7fb febe 	bl	8000608 <__aeabi_dmul>
 800488c:	3501      	adds	r5, #1
 800488e:	4680      	mov	r8, r0
 8004890:	4689      	mov	r9, r1
 8004892:	107f      	asrs	r7, r7, #1
 8004894:	3608      	adds	r6, #8
 8004896:	e7e5      	b.n	8004864 <_dtoa_r+0x36c>
 8004898:	f000 809b 	beq.w	80049d2 <_dtoa_r+0x4da>
 800489c:	9b00      	ldr	r3, [sp, #0]
 800489e:	4f9d      	ldr	r7, [pc, #628]	; (8004b14 <_dtoa_r+0x61c>)
 80048a0:	425e      	negs	r6, r3
 80048a2:	4b9b      	ldr	r3, [pc, #620]	; (8004b10 <_dtoa_r+0x618>)
 80048a4:	f006 020f 	and.w	r2, r6, #15
 80048a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	ec51 0b19 	vmov	r0, r1, d9
 80048b4:	f7fb fea8 	bl	8000608 <__aeabi_dmul>
 80048b8:	1136      	asrs	r6, r6, #4
 80048ba:	4682      	mov	sl, r0
 80048bc:	468b      	mov	fp, r1
 80048be:	2300      	movs	r3, #0
 80048c0:	2502      	movs	r5, #2
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	d17a      	bne.n	80049bc <_dtoa_r+0x4c4>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1d3      	bne.n	8004872 <_dtoa_r+0x37a>
 80048ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8082 	beq.w	80049d6 <_dtoa_r+0x4de>
 80048d2:	4b91      	ldr	r3, [pc, #580]	; (8004b18 <_dtoa_r+0x620>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	4650      	mov	r0, sl
 80048d8:	4659      	mov	r1, fp
 80048da:	f7fc f907 	bl	8000aec <__aeabi_dcmplt>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d079      	beq.n	80049d6 <_dtoa_r+0x4de>
 80048e2:	9b03      	ldr	r3, [sp, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d076      	beq.n	80049d6 <_dtoa_r+0x4de>
 80048e8:	9b02      	ldr	r3, [sp, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dd36      	ble.n	800495c <_dtoa_r+0x464>
 80048ee:	9b00      	ldr	r3, [sp, #0]
 80048f0:	4650      	mov	r0, sl
 80048f2:	4659      	mov	r1, fp
 80048f4:	1e5f      	subs	r7, r3, #1
 80048f6:	2200      	movs	r2, #0
 80048f8:	4b88      	ldr	r3, [pc, #544]	; (8004b1c <_dtoa_r+0x624>)
 80048fa:	f7fb fe85 	bl	8000608 <__aeabi_dmul>
 80048fe:	9e02      	ldr	r6, [sp, #8]
 8004900:	4682      	mov	sl, r0
 8004902:	468b      	mov	fp, r1
 8004904:	3501      	adds	r5, #1
 8004906:	4628      	mov	r0, r5
 8004908:	f7fb fe14 	bl	8000534 <__aeabi_i2d>
 800490c:	4652      	mov	r2, sl
 800490e:	465b      	mov	r3, fp
 8004910:	f7fb fe7a 	bl	8000608 <__aeabi_dmul>
 8004914:	4b82      	ldr	r3, [pc, #520]	; (8004b20 <_dtoa_r+0x628>)
 8004916:	2200      	movs	r2, #0
 8004918:	f7fb fcc0 	bl	800029c <__adddf3>
 800491c:	46d0      	mov	r8, sl
 800491e:	46d9      	mov	r9, fp
 8004920:	4682      	mov	sl, r0
 8004922:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004926:	2e00      	cmp	r6, #0
 8004928:	d158      	bne.n	80049dc <_dtoa_r+0x4e4>
 800492a:	4b7e      	ldr	r3, [pc, #504]	; (8004b24 <_dtoa_r+0x62c>)
 800492c:	2200      	movs	r2, #0
 800492e:	4640      	mov	r0, r8
 8004930:	4649      	mov	r1, r9
 8004932:	f7fb fcb1 	bl	8000298 <__aeabi_dsub>
 8004936:	4652      	mov	r2, sl
 8004938:	465b      	mov	r3, fp
 800493a:	4680      	mov	r8, r0
 800493c:	4689      	mov	r9, r1
 800493e:	f7fc f8f3 	bl	8000b28 <__aeabi_dcmpgt>
 8004942:	2800      	cmp	r0, #0
 8004944:	f040 8295 	bne.w	8004e72 <_dtoa_r+0x97a>
 8004948:	4652      	mov	r2, sl
 800494a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800494e:	4640      	mov	r0, r8
 8004950:	4649      	mov	r1, r9
 8004952:	f7fc f8cb 	bl	8000aec <__aeabi_dcmplt>
 8004956:	2800      	cmp	r0, #0
 8004958:	f040 8289 	bne.w	8004e6e <_dtoa_r+0x976>
 800495c:	ec5b ab19 	vmov	sl, fp, d9
 8004960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004962:	2b00      	cmp	r3, #0
 8004964:	f2c0 8148 	blt.w	8004bf8 <_dtoa_r+0x700>
 8004968:	9a00      	ldr	r2, [sp, #0]
 800496a:	2a0e      	cmp	r2, #14
 800496c:	f300 8144 	bgt.w	8004bf8 <_dtoa_r+0x700>
 8004970:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <_dtoa_r+0x618>)
 8004972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004976:	e9d3 8900 	ldrd	r8, r9, [r3]
 800497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	f280 80d5 	bge.w	8004b2c <_dtoa_r+0x634>
 8004982:	9b03      	ldr	r3, [sp, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f300 80d1 	bgt.w	8004b2c <_dtoa_r+0x634>
 800498a:	f040 826f 	bne.w	8004e6c <_dtoa_r+0x974>
 800498e:	4b65      	ldr	r3, [pc, #404]	; (8004b24 <_dtoa_r+0x62c>)
 8004990:	2200      	movs	r2, #0
 8004992:	4640      	mov	r0, r8
 8004994:	4649      	mov	r1, r9
 8004996:	f7fb fe37 	bl	8000608 <__aeabi_dmul>
 800499a:	4652      	mov	r2, sl
 800499c:	465b      	mov	r3, fp
 800499e:	f7fc f8b9 	bl	8000b14 <__aeabi_dcmpge>
 80049a2:	9e03      	ldr	r6, [sp, #12]
 80049a4:	4637      	mov	r7, r6
 80049a6:	2800      	cmp	r0, #0
 80049a8:	f040 8245 	bne.w	8004e36 <_dtoa_r+0x93e>
 80049ac:	9d01      	ldr	r5, [sp, #4]
 80049ae:	2331      	movs	r3, #49	; 0x31
 80049b0:	f805 3b01 	strb.w	r3, [r5], #1
 80049b4:	9b00      	ldr	r3, [sp, #0]
 80049b6:	3301      	adds	r3, #1
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	e240      	b.n	8004e3e <_dtoa_r+0x946>
 80049bc:	07f2      	lsls	r2, r6, #31
 80049be:	d505      	bpl.n	80049cc <_dtoa_r+0x4d4>
 80049c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c4:	f7fb fe20 	bl	8000608 <__aeabi_dmul>
 80049c8:	3501      	adds	r5, #1
 80049ca:	2301      	movs	r3, #1
 80049cc:	1076      	asrs	r6, r6, #1
 80049ce:	3708      	adds	r7, #8
 80049d0:	e777      	b.n	80048c2 <_dtoa_r+0x3ca>
 80049d2:	2502      	movs	r5, #2
 80049d4:	e779      	b.n	80048ca <_dtoa_r+0x3d2>
 80049d6:	9f00      	ldr	r7, [sp, #0]
 80049d8:	9e03      	ldr	r6, [sp, #12]
 80049da:	e794      	b.n	8004906 <_dtoa_r+0x40e>
 80049dc:	9901      	ldr	r1, [sp, #4]
 80049de:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <_dtoa_r+0x618>)
 80049e0:	4431      	add	r1, r6
 80049e2:	910d      	str	r1, [sp, #52]	; 0x34
 80049e4:	9908      	ldr	r1, [sp, #32]
 80049e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80049ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049ee:	2900      	cmp	r1, #0
 80049f0:	d043      	beq.n	8004a7a <_dtoa_r+0x582>
 80049f2:	494d      	ldr	r1, [pc, #308]	; (8004b28 <_dtoa_r+0x630>)
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fb ff31 	bl	800085c <__aeabi_ddiv>
 80049fa:	4652      	mov	r2, sl
 80049fc:	465b      	mov	r3, fp
 80049fe:	f7fb fc4b 	bl	8000298 <__aeabi_dsub>
 8004a02:	9d01      	ldr	r5, [sp, #4]
 8004a04:	4682      	mov	sl, r0
 8004a06:	468b      	mov	fp, r1
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f7fc f8ac 	bl	8000b68 <__aeabi_d2iz>
 8004a10:	4606      	mov	r6, r0
 8004a12:	f7fb fd8f 	bl	8000534 <__aeabi_i2d>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	f7fb fc3b 	bl	8000298 <__aeabi_dsub>
 8004a22:	3630      	adds	r6, #48	; 0x30
 8004a24:	f805 6b01 	strb.w	r6, [r5], #1
 8004a28:	4652      	mov	r2, sl
 8004a2a:	465b      	mov	r3, fp
 8004a2c:	4680      	mov	r8, r0
 8004a2e:	4689      	mov	r9, r1
 8004a30:	f7fc f85c 	bl	8000aec <__aeabi_dcmplt>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d163      	bne.n	8004b00 <_dtoa_r+0x608>
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	4936      	ldr	r1, [pc, #216]	; (8004b18 <_dtoa_r+0x620>)
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f7fb fc2a 	bl	8000298 <__aeabi_dsub>
 8004a44:	4652      	mov	r2, sl
 8004a46:	465b      	mov	r3, fp
 8004a48:	f7fc f850 	bl	8000aec <__aeabi_dcmplt>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f040 80b5 	bne.w	8004bbc <_dtoa_r+0x6c4>
 8004a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a54:	429d      	cmp	r5, r3
 8004a56:	d081      	beq.n	800495c <_dtoa_r+0x464>
 8004a58:	4b30      	ldr	r3, [pc, #192]	; (8004b1c <_dtoa_r+0x624>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	4659      	mov	r1, fp
 8004a60:	f7fb fdd2 	bl	8000608 <__aeabi_dmul>
 8004a64:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <_dtoa_r+0x624>)
 8004a66:	4682      	mov	sl, r0
 8004a68:	468b      	mov	fp, r1
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f7fb fdca 	bl	8000608 <__aeabi_dmul>
 8004a74:	4680      	mov	r8, r0
 8004a76:	4689      	mov	r9, r1
 8004a78:	e7c6      	b.n	8004a08 <_dtoa_r+0x510>
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	f7fb fdc3 	bl	8000608 <__aeabi_dmul>
 8004a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a84:	9d01      	ldr	r5, [sp, #4]
 8004a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a88:	4682      	mov	sl, r0
 8004a8a:	468b      	mov	fp, r1
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4640      	mov	r0, r8
 8004a90:	f7fc f86a 	bl	8000b68 <__aeabi_d2iz>
 8004a94:	4606      	mov	r6, r0
 8004a96:	f7fb fd4d 	bl	8000534 <__aeabi_i2d>
 8004a9a:	3630      	adds	r6, #48	; 0x30
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	f7fb fbf8 	bl	8000298 <__aeabi_dsub>
 8004aa8:	f805 6b01 	strb.w	r6, [r5], #1
 8004aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aae:	429d      	cmp	r5, r3
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	d124      	bne.n	8004b04 <_dtoa_r+0x60c>
 8004aba:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <_dtoa_r+0x630>)
 8004abc:	4650      	mov	r0, sl
 8004abe:	4659      	mov	r1, fp
 8004ac0:	f7fb fbec 	bl	800029c <__adddf3>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4640      	mov	r0, r8
 8004aca:	4649      	mov	r1, r9
 8004acc:	f7fc f82c 	bl	8000b28 <__aeabi_dcmpgt>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d173      	bne.n	8004bbc <_dtoa_r+0x6c4>
 8004ad4:	4652      	mov	r2, sl
 8004ad6:	465b      	mov	r3, fp
 8004ad8:	4913      	ldr	r1, [pc, #76]	; (8004b28 <_dtoa_r+0x630>)
 8004ada:	2000      	movs	r0, #0
 8004adc:	f7fb fbdc 	bl	8000298 <__aeabi_dsub>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	f7fc f800 	bl	8000aec <__aeabi_dcmplt>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	f43f af35 	beq.w	800495c <_dtoa_r+0x464>
 8004af2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004af4:	1e6b      	subs	r3, r5, #1
 8004af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004af8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004afc:	2b30      	cmp	r3, #48	; 0x30
 8004afe:	d0f8      	beq.n	8004af2 <_dtoa_r+0x5fa>
 8004b00:	9700      	str	r7, [sp, #0]
 8004b02:	e049      	b.n	8004b98 <_dtoa_r+0x6a0>
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <_dtoa_r+0x624>)
 8004b06:	f7fb fd7f 	bl	8000608 <__aeabi_dmul>
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	4689      	mov	r9, r1
 8004b0e:	e7bd      	b.n	8004a8c <_dtoa_r+0x594>
 8004b10:	08007dc0 	.word	0x08007dc0
 8004b14:	08007d98 	.word	0x08007d98
 8004b18:	3ff00000 	.word	0x3ff00000
 8004b1c:	40240000 	.word	0x40240000
 8004b20:	401c0000 	.word	0x401c0000
 8004b24:	40140000 	.word	0x40140000
 8004b28:	3fe00000 	.word	0x3fe00000
 8004b2c:	9d01      	ldr	r5, [sp, #4]
 8004b2e:	4656      	mov	r6, sl
 8004b30:	465f      	mov	r7, fp
 8004b32:	4642      	mov	r2, r8
 8004b34:	464b      	mov	r3, r9
 8004b36:	4630      	mov	r0, r6
 8004b38:	4639      	mov	r1, r7
 8004b3a:	f7fb fe8f 	bl	800085c <__aeabi_ddiv>
 8004b3e:	f7fc f813 	bl	8000b68 <__aeabi_d2iz>
 8004b42:	4682      	mov	sl, r0
 8004b44:	f7fb fcf6 	bl	8000534 <__aeabi_i2d>
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	f7fb fd5c 	bl	8000608 <__aeabi_dmul>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4630      	mov	r0, r6
 8004b56:	4639      	mov	r1, r7
 8004b58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004b5c:	f7fb fb9c 	bl	8000298 <__aeabi_dsub>
 8004b60:	f805 6b01 	strb.w	r6, [r5], #1
 8004b64:	9e01      	ldr	r6, [sp, #4]
 8004b66:	9f03      	ldr	r7, [sp, #12]
 8004b68:	1bae      	subs	r6, r5, r6
 8004b6a:	42b7      	cmp	r7, r6
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	d135      	bne.n	8004bde <_dtoa_r+0x6e6>
 8004b72:	f7fb fb93 	bl	800029c <__adddf3>
 8004b76:	4642      	mov	r2, r8
 8004b78:	464b      	mov	r3, r9
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	f7fb ffd3 	bl	8000b28 <__aeabi_dcmpgt>
 8004b82:	b9d0      	cbnz	r0, 8004bba <_dtoa_r+0x6c2>
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	4630      	mov	r0, r6
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	f7fb ffa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b90:	b110      	cbz	r0, 8004b98 <_dtoa_r+0x6a0>
 8004b92:	f01a 0f01 	tst.w	sl, #1
 8004b96:	d110      	bne.n	8004bba <_dtoa_r+0x6c2>
 8004b98:	4620      	mov	r0, r4
 8004b9a:	ee18 1a10 	vmov	r1, s16
 8004b9e:	f000 faf3 	bl	8005188 <_Bfree>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9800      	ldr	r0, [sp, #0]
 8004ba6:	702b      	strb	r3, [r5, #0]
 8004ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004baa:	3001      	adds	r0, #1
 8004bac:	6018      	str	r0, [r3, #0]
 8004bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f43f acf1 	beq.w	8004598 <_dtoa_r+0xa0>
 8004bb6:	601d      	str	r5, [r3, #0]
 8004bb8:	e4ee      	b.n	8004598 <_dtoa_r+0xa0>
 8004bba:	9f00      	ldr	r7, [sp, #0]
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	461d      	mov	r5, r3
 8004bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bc4:	2a39      	cmp	r2, #57	; 0x39
 8004bc6:	d106      	bne.n	8004bd6 <_dtoa_r+0x6de>
 8004bc8:	9a01      	ldr	r2, [sp, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d1f7      	bne.n	8004bbe <_dtoa_r+0x6c6>
 8004bce:	9901      	ldr	r1, [sp, #4]
 8004bd0:	2230      	movs	r2, #48	; 0x30
 8004bd2:	3701      	adds	r7, #1
 8004bd4:	700a      	strb	r2, [r1, #0]
 8004bd6:	781a      	ldrb	r2, [r3, #0]
 8004bd8:	3201      	adds	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e790      	b.n	8004b00 <_dtoa_r+0x608>
 8004bde:	4ba6      	ldr	r3, [pc, #664]	; (8004e78 <_dtoa_r+0x980>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	f7fb fd11 	bl	8000608 <__aeabi_dmul>
 8004be6:	2200      	movs	r2, #0
 8004be8:	2300      	movs	r3, #0
 8004bea:	4606      	mov	r6, r0
 8004bec:	460f      	mov	r7, r1
 8004bee:	f7fb ff73 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d09d      	beq.n	8004b32 <_dtoa_r+0x63a>
 8004bf6:	e7cf      	b.n	8004b98 <_dtoa_r+0x6a0>
 8004bf8:	9a08      	ldr	r2, [sp, #32]
 8004bfa:	2a00      	cmp	r2, #0
 8004bfc:	f000 80d7 	beq.w	8004dae <_dtoa_r+0x8b6>
 8004c00:	9a06      	ldr	r2, [sp, #24]
 8004c02:	2a01      	cmp	r2, #1
 8004c04:	f300 80ba 	bgt.w	8004d7c <_dtoa_r+0x884>
 8004c08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	f000 80b2 	beq.w	8004d74 <_dtoa_r+0x87c>
 8004c10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c14:	9e07      	ldr	r6, [sp, #28]
 8004c16:	9d04      	ldr	r5, [sp, #16]
 8004c18:	9a04      	ldr	r2, [sp, #16]
 8004c1a:	441a      	add	r2, r3
 8004c1c:	9204      	str	r2, [sp, #16]
 8004c1e:	9a05      	ldr	r2, [sp, #20]
 8004c20:	2101      	movs	r1, #1
 8004c22:	441a      	add	r2, r3
 8004c24:	4620      	mov	r0, r4
 8004c26:	9205      	str	r2, [sp, #20]
 8004c28:	f000 fb66 	bl	80052f8 <__i2b>
 8004c2c:	4607      	mov	r7, r0
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	dd0c      	ble.n	8004c4c <_dtoa_r+0x754>
 8004c32:	9b05      	ldr	r3, [sp, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	dd09      	ble.n	8004c4c <_dtoa_r+0x754>
 8004c38:	42ab      	cmp	r3, r5
 8004c3a:	9a04      	ldr	r2, [sp, #16]
 8004c3c:	bfa8      	it	ge
 8004c3e:	462b      	movge	r3, r5
 8004c40:	1ad2      	subs	r2, r2, r3
 8004c42:	9204      	str	r2, [sp, #16]
 8004c44:	9a05      	ldr	r2, [sp, #20]
 8004c46:	1aed      	subs	r5, r5, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	9305      	str	r3, [sp, #20]
 8004c4c:	9b07      	ldr	r3, [sp, #28]
 8004c4e:	b31b      	cbz	r3, 8004c98 <_dtoa_r+0x7a0>
 8004c50:	9b08      	ldr	r3, [sp, #32]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80af 	beq.w	8004db6 <_dtoa_r+0x8be>
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	dd13      	ble.n	8004c84 <_dtoa_r+0x78c>
 8004c5c:	4639      	mov	r1, r7
 8004c5e:	4632      	mov	r2, r6
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 fc09 	bl	8005478 <__pow5mult>
 8004c66:	ee18 2a10 	vmov	r2, s16
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f000 fb58 	bl	8005324 <__multiply>
 8004c74:	ee18 1a10 	vmov	r1, s16
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 fa84 	bl	8005188 <_Bfree>
 8004c80:	ee08 8a10 	vmov	s16, r8
 8004c84:	9b07      	ldr	r3, [sp, #28]
 8004c86:	1b9a      	subs	r2, r3, r6
 8004c88:	d006      	beq.n	8004c98 <_dtoa_r+0x7a0>
 8004c8a:	ee18 1a10 	vmov	r1, s16
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 fbf2 	bl	8005478 <__pow5mult>
 8004c94:	ee08 0a10 	vmov	s16, r0
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f000 fb2c 	bl	80052f8 <__i2b>
 8004ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	f340 8088 	ble.w	8004dba <_dtoa_r+0x8c2>
 8004caa:	461a      	mov	r2, r3
 8004cac:	4601      	mov	r1, r0
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f000 fbe2 	bl	8005478 <__pow5mult>
 8004cb4:	9b06      	ldr	r3, [sp, #24]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	4606      	mov	r6, r0
 8004cba:	f340 8081 	ble.w	8004dc0 <_dtoa_r+0x8c8>
 8004cbe:	f04f 0800 	mov.w	r8, #0
 8004cc2:	6933      	ldr	r3, [r6, #16]
 8004cc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004cc8:	6918      	ldr	r0, [r3, #16]
 8004cca:	f000 fac5 	bl	8005258 <__hi0bits>
 8004cce:	f1c0 0020 	rsb	r0, r0, #32
 8004cd2:	9b05      	ldr	r3, [sp, #20]
 8004cd4:	4418      	add	r0, r3
 8004cd6:	f010 001f 	ands.w	r0, r0, #31
 8004cda:	f000 8092 	beq.w	8004e02 <_dtoa_r+0x90a>
 8004cde:	f1c0 0320 	rsb	r3, r0, #32
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	f340 808a 	ble.w	8004dfc <_dtoa_r+0x904>
 8004ce8:	f1c0 001c 	rsb	r0, r0, #28
 8004cec:	9b04      	ldr	r3, [sp, #16]
 8004cee:	4403      	add	r3, r0
 8004cf0:	9304      	str	r3, [sp, #16]
 8004cf2:	9b05      	ldr	r3, [sp, #20]
 8004cf4:	4403      	add	r3, r0
 8004cf6:	4405      	add	r5, r0
 8004cf8:	9305      	str	r3, [sp, #20]
 8004cfa:	9b04      	ldr	r3, [sp, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dd07      	ble.n	8004d10 <_dtoa_r+0x818>
 8004d00:	ee18 1a10 	vmov	r1, s16
 8004d04:	461a      	mov	r2, r3
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 fc10 	bl	800552c <__lshift>
 8004d0c:	ee08 0a10 	vmov	s16, r0
 8004d10:	9b05      	ldr	r3, [sp, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	dd05      	ble.n	8004d22 <_dtoa_r+0x82a>
 8004d16:	4631      	mov	r1, r6
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 fc06 	bl	800552c <__lshift>
 8004d20:	4606      	mov	r6, r0
 8004d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d06e      	beq.n	8004e06 <_dtoa_r+0x90e>
 8004d28:	ee18 0a10 	vmov	r0, s16
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	f000 fc6d 	bl	800560c <__mcmp>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	da67      	bge.n	8004e06 <_dtoa_r+0x90e>
 8004d36:	9b00      	ldr	r3, [sp, #0]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	ee18 1a10 	vmov	r1, s16
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	220a      	movs	r2, #10
 8004d42:	2300      	movs	r3, #0
 8004d44:	4620      	mov	r0, r4
 8004d46:	f000 fa41 	bl	80051cc <__multadd>
 8004d4a:	9b08      	ldr	r3, [sp, #32]
 8004d4c:	ee08 0a10 	vmov	s16, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 81b1 	beq.w	80050b8 <_dtoa_r+0xbc0>
 8004d56:	2300      	movs	r3, #0
 8004d58:	4639      	mov	r1, r7
 8004d5a:	220a      	movs	r2, #10
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 fa35 	bl	80051cc <__multadd>
 8004d62:	9b02      	ldr	r3, [sp, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	4607      	mov	r7, r0
 8004d68:	f300 808e 	bgt.w	8004e88 <_dtoa_r+0x990>
 8004d6c:	9b06      	ldr	r3, [sp, #24]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	dc51      	bgt.n	8004e16 <_dtoa_r+0x91e>
 8004d72:	e089      	b.n	8004e88 <_dtoa_r+0x990>
 8004d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d7a:	e74b      	b.n	8004c14 <_dtoa_r+0x71c>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	1e5e      	subs	r6, r3, #1
 8004d80:	9b07      	ldr	r3, [sp, #28]
 8004d82:	42b3      	cmp	r3, r6
 8004d84:	bfbf      	itttt	lt
 8004d86:	9b07      	ldrlt	r3, [sp, #28]
 8004d88:	9607      	strlt	r6, [sp, #28]
 8004d8a:	1af2      	sublt	r2, r6, r3
 8004d8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d8e:	bfb6      	itet	lt
 8004d90:	189b      	addlt	r3, r3, r2
 8004d92:	1b9e      	subge	r6, r3, r6
 8004d94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	bfb8      	it	lt
 8004d9a:	2600      	movlt	r6, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bfb7      	itett	lt
 8004da0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004da4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004da8:	1a9d      	sublt	r5, r3, r2
 8004daa:	2300      	movlt	r3, #0
 8004dac:	e734      	b.n	8004c18 <_dtoa_r+0x720>
 8004dae:	9e07      	ldr	r6, [sp, #28]
 8004db0:	9d04      	ldr	r5, [sp, #16]
 8004db2:	9f08      	ldr	r7, [sp, #32]
 8004db4:	e73b      	b.n	8004c2e <_dtoa_r+0x736>
 8004db6:	9a07      	ldr	r2, [sp, #28]
 8004db8:	e767      	b.n	8004c8a <_dtoa_r+0x792>
 8004dba:	9b06      	ldr	r3, [sp, #24]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	dc18      	bgt.n	8004df2 <_dtoa_r+0x8fa>
 8004dc0:	f1ba 0f00 	cmp.w	sl, #0
 8004dc4:	d115      	bne.n	8004df2 <_dtoa_r+0x8fa>
 8004dc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004dca:	b993      	cbnz	r3, 8004df2 <_dtoa_r+0x8fa>
 8004dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004dd0:	0d1b      	lsrs	r3, r3, #20
 8004dd2:	051b      	lsls	r3, r3, #20
 8004dd4:	b183      	cbz	r3, 8004df8 <_dtoa_r+0x900>
 8004dd6:	9b04      	ldr	r3, [sp, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	9b05      	ldr	r3, [sp, #20]
 8004dde:	3301      	adds	r3, #1
 8004de0:	9305      	str	r3, [sp, #20]
 8004de2:	f04f 0801 	mov.w	r8, #1
 8004de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f47f af6a 	bne.w	8004cc2 <_dtoa_r+0x7ca>
 8004dee:	2001      	movs	r0, #1
 8004df0:	e76f      	b.n	8004cd2 <_dtoa_r+0x7da>
 8004df2:	f04f 0800 	mov.w	r8, #0
 8004df6:	e7f6      	b.n	8004de6 <_dtoa_r+0x8ee>
 8004df8:	4698      	mov	r8, r3
 8004dfa:	e7f4      	b.n	8004de6 <_dtoa_r+0x8ee>
 8004dfc:	f43f af7d 	beq.w	8004cfa <_dtoa_r+0x802>
 8004e00:	4618      	mov	r0, r3
 8004e02:	301c      	adds	r0, #28
 8004e04:	e772      	b.n	8004cec <_dtoa_r+0x7f4>
 8004e06:	9b03      	ldr	r3, [sp, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dc37      	bgt.n	8004e7c <_dtoa_r+0x984>
 8004e0c:	9b06      	ldr	r3, [sp, #24]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	dd34      	ble.n	8004e7c <_dtoa_r+0x984>
 8004e12:	9b03      	ldr	r3, [sp, #12]
 8004e14:	9302      	str	r3, [sp, #8]
 8004e16:	9b02      	ldr	r3, [sp, #8]
 8004e18:	b96b      	cbnz	r3, 8004e36 <_dtoa_r+0x93e>
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	2205      	movs	r2, #5
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 f9d4 	bl	80051cc <__multadd>
 8004e24:	4601      	mov	r1, r0
 8004e26:	4606      	mov	r6, r0
 8004e28:	ee18 0a10 	vmov	r0, s16
 8004e2c:	f000 fbee 	bl	800560c <__mcmp>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f73f adbb 	bgt.w	80049ac <_dtoa_r+0x4b4>
 8004e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e38:	9d01      	ldr	r5, [sp, #4]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	f04f 0800 	mov.w	r8, #0
 8004e42:	4631      	mov	r1, r6
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 f99f 	bl	8005188 <_Bfree>
 8004e4a:	2f00      	cmp	r7, #0
 8004e4c:	f43f aea4 	beq.w	8004b98 <_dtoa_r+0x6a0>
 8004e50:	f1b8 0f00 	cmp.w	r8, #0
 8004e54:	d005      	beq.n	8004e62 <_dtoa_r+0x96a>
 8004e56:	45b8      	cmp	r8, r7
 8004e58:	d003      	beq.n	8004e62 <_dtoa_r+0x96a>
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 f993 	bl	8005188 <_Bfree>
 8004e62:	4639      	mov	r1, r7
 8004e64:	4620      	mov	r0, r4
 8004e66:	f000 f98f 	bl	8005188 <_Bfree>
 8004e6a:	e695      	b.n	8004b98 <_dtoa_r+0x6a0>
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	4637      	mov	r7, r6
 8004e70:	e7e1      	b.n	8004e36 <_dtoa_r+0x93e>
 8004e72:	9700      	str	r7, [sp, #0]
 8004e74:	4637      	mov	r7, r6
 8004e76:	e599      	b.n	80049ac <_dtoa_r+0x4b4>
 8004e78:	40240000 	.word	0x40240000
 8004e7c:	9b08      	ldr	r3, [sp, #32]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 80ca 	beq.w	8005018 <_dtoa_r+0xb20>
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	9302      	str	r3, [sp, #8]
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	dd05      	ble.n	8004e98 <_dtoa_r+0x9a0>
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	462a      	mov	r2, r5
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 fb4b 	bl	800552c <__lshift>
 8004e96:	4607      	mov	r7, r0
 8004e98:	f1b8 0f00 	cmp.w	r8, #0
 8004e9c:	d05b      	beq.n	8004f56 <_dtoa_r+0xa5e>
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 f931 	bl	8005108 <_Balloc>
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	b928      	cbnz	r0, 8004eb6 <_dtoa_r+0x9be>
 8004eaa:	4b87      	ldr	r3, [pc, #540]	; (80050c8 <_dtoa_r+0xbd0>)
 8004eac:	4602      	mov	r2, r0
 8004eae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004eb2:	f7ff bb3b 	b.w	800452c <_dtoa_r+0x34>
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	3202      	adds	r2, #2
 8004eba:	0092      	lsls	r2, r2, #2
 8004ebc:	f107 010c 	add.w	r1, r7, #12
 8004ec0:	300c      	adds	r0, #12
 8004ec2:	f000 f913 	bl	80050ec <memcpy>
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 fb2e 	bl	800552c <__lshift>
 8004ed0:	9b01      	ldr	r3, [sp, #4]
 8004ed2:	f103 0901 	add.w	r9, r3, #1
 8004ed6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004eda:	4413      	add	r3, r2
 8004edc:	9305      	str	r3, [sp, #20]
 8004ede:	f00a 0301 	and.w	r3, sl, #1
 8004ee2:	46b8      	mov	r8, r7
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	4607      	mov	r7, r0
 8004ee8:	4631      	mov	r1, r6
 8004eea:	ee18 0a10 	vmov	r0, s16
 8004eee:	f7ff fa77 	bl	80043e0 <quorem>
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	9002      	str	r0, [sp, #8]
 8004ef6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004efa:	ee18 0a10 	vmov	r0, s16
 8004efe:	f000 fb85 	bl	800560c <__mcmp>
 8004f02:	463a      	mov	r2, r7
 8004f04:	9003      	str	r0, [sp, #12]
 8004f06:	4631      	mov	r1, r6
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 fb9b 	bl	8005644 <__mdiff>
 8004f0e:	68c2      	ldr	r2, [r0, #12]
 8004f10:	f109 3bff 	add.w	fp, r9, #4294967295
 8004f14:	4605      	mov	r5, r0
 8004f16:	bb02      	cbnz	r2, 8004f5a <_dtoa_r+0xa62>
 8004f18:	4601      	mov	r1, r0
 8004f1a:	ee18 0a10 	vmov	r0, s16
 8004f1e:	f000 fb75 	bl	800560c <__mcmp>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4629      	mov	r1, r5
 8004f26:	4620      	mov	r0, r4
 8004f28:	9207      	str	r2, [sp, #28]
 8004f2a:	f000 f92d 	bl	8005188 <_Bfree>
 8004f2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004f32:	ea43 0102 	orr.w	r1, r3, r2
 8004f36:	9b04      	ldr	r3, [sp, #16]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	464d      	mov	r5, r9
 8004f3c:	d10f      	bne.n	8004f5e <_dtoa_r+0xa66>
 8004f3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f42:	d02a      	beq.n	8004f9a <_dtoa_r+0xaa2>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	dd02      	ble.n	8004f50 <_dtoa_r+0xa58>
 8004f4a:	9b02      	ldr	r3, [sp, #8]
 8004f4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004f50:	f88b a000 	strb.w	sl, [fp]
 8004f54:	e775      	b.n	8004e42 <_dtoa_r+0x94a>
 8004f56:	4638      	mov	r0, r7
 8004f58:	e7ba      	b.n	8004ed0 <_dtoa_r+0x9d8>
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	e7e2      	b.n	8004f24 <_dtoa_r+0xa2c>
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	db04      	blt.n	8004f6e <_dtoa_r+0xa76>
 8004f64:	9906      	ldr	r1, [sp, #24]
 8004f66:	430b      	orrs	r3, r1
 8004f68:	9904      	ldr	r1, [sp, #16]
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	d122      	bne.n	8004fb4 <_dtoa_r+0xabc>
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	ddee      	ble.n	8004f50 <_dtoa_r+0xa58>
 8004f72:	ee18 1a10 	vmov	r1, s16
 8004f76:	2201      	movs	r2, #1
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f000 fad7 	bl	800552c <__lshift>
 8004f7e:	4631      	mov	r1, r6
 8004f80:	ee08 0a10 	vmov	s16, r0
 8004f84:	f000 fb42 	bl	800560c <__mcmp>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	dc03      	bgt.n	8004f94 <_dtoa_r+0xa9c>
 8004f8c:	d1e0      	bne.n	8004f50 <_dtoa_r+0xa58>
 8004f8e:	f01a 0f01 	tst.w	sl, #1
 8004f92:	d0dd      	beq.n	8004f50 <_dtoa_r+0xa58>
 8004f94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f98:	d1d7      	bne.n	8004f4a <_dtoa_r+0xa52>
 8004f9a:	2339      	movs	r3, #57	; 0x39
 8004f9c:	f88b 3000 	strb.w	r3, [fp]
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004faa:	2a39      	cmp	r2, #57	; 0x39
 8004fac:	d071      	beq.n	8005092 <_dtoa_r+0xb9a>
 8004fae:	3201      	adds	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e746      	b.n	8004e42 <_dtoa_r+0x94a>
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	dd07      	ble.n	8004fc8 <_dtoa_r+0xad0>
 8004fb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004fbc:	d0ed      	beq.n	8004f9a <_dtoa_r+0xaa2>
 8004fbe:	f10a 0301 	add.w	r3, sl, #1
 8004fc2:	f88b 3000 	strb.w	r3, [fp]
 8004fc6:	e73c      	b.n	8004e42 <_dtoa_r+0x94a>
 8004fc8:	9b05      	ldr	r3, [sp, #20]
 8004fca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004fce:	4599      	cmp	r9, r3
 8004fd0:	d047      	beq.n	8005062 <_dtoa_r+0xb6a>
 8004fd2:	ee18 1a10 	vmov	r1, s16
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	220a      	movs	r2, #10
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 f8f6 	bl	80051cc <__multadd>
 8004fe0:	45b8      	cmp	r8, r7
 8004fe2:	ee08 0a10 	vmov	s16, r0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	f04f 020a 	mov.w	r2, #10
 8004fee:	4641      	mov	r1, r8
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	d106      	bne.n	8005002 <_dtoa_r+0xb0a>
 8004ff4:	f000 f8ea 	bl	80051cc <__multadd>
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	4607      	mov	r7, r0
 8004ffc:	f109 0901 	add.w	r9, r9, #1
 8005000:	e772      	b.n	8004ee8 <_dtoa_r+0x9f0>
 8005002:	f000 f8e3 	bl	80051cc <__multadd>
 8005006:	4639      	mov	r1, r7
 8005008:	4680      	mov	r8, r0
 800500a:	2300      	movs	r3, #0
 800500c:	220a      	movs	r2, #10
 800500e:	4620      	mov	r0, r4
 8005010:	f000 f8dc 	bl	80051cc <__multadd>
 8005014:	4607      	mov	r7, r0
 8005016:	e7f1      	b.n	8004ffc <_dtoa_r+0xb04>
 8005018:	9b03      	ldr	r3, [sp, #12]
 800501a:	9302      	str	r3, [sp, #8]
 800501c:	9d01      	ldr	r5, [sp, #4]
 800501e:	ee18 0a10 	vmov	r0, s16
 8005022:	4631      	mov	r1, r6
 8005024:	f7ff f9dc 	bl	80043e0 <quorem>
 8005028:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800502c:	9b01      	ldr	r3, [sp, #4]
 800502e:	f805 ab01 	strb.w	sl, [r5], #1
 8005032:	1aea      	subs	r2, r5, r3
 8005034:	9b02      	ldr	r3, [sp, #8]
 8005036:	4293      	cmp	r3, r2
 8005038:	dd09      	ble.n	800504e <_dtoa_r+0xb56>
 800503a:	ee18 1a10 	vmov	r1, s16
 800503e:	2300      	movs	r3, #0
 8005040:	220a      	movs	r2, #10
 8005042:	4620      	mov	r0, r4
 8005044:	f000 f8c2 	bl	80051cc <__multadd>
 8005048:	ee08 0a10 	vmov	s16, r0
 800504c:	e7e7      	b.n	800501e <_dtoa_r+0xb26>
 800504e:	9b02      	ldr	r3, [sp, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfc8      	it	gt
 8005054:	461d      	movgt	r5, r3
 8005056:	9b01      	ldr	r3, [sp, #4]
 8005058:	bfd8      	it	le
 800505a:	2501      	movle	r5, #1
 800505c:	441d      	add	r5, r3
 800505e:	f04f 0800 	mov.w	r8, #0
 8005062:	ee18 1a10 	vmov	r1, s16
 8005066:	2201      	movs	r2, #1
 8005068:	4620      	mov	r0, r4
 800506a:	f000 fa5f 	bl	800552c <__lshift>
 800506e:	4631      	mov	r1, r6
 8005070:	ee08 0a10 	vmov	s16, r0
 8005074:	f000 faca 	bl	800560c <__mcmp>
 8005078:	2800      	cmp	r0, #0
 800507a:	dc91      	bgt.n	8004fa0 <_dtoa_r+0xaa8>
 800507c:	d102      	bne.n	8005084 <_dtoa_r+0xb8c>
 800507e:	f01a 0f01 	tst.w	sl, #1
 8005082:	d18d      	bne.n	8004fa0 <_dtoa_r+0xaa8>
 8005084:	462b      	mov	r3, r5
 8005086:	461d      	mov	r5, r3
 8005088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800508c:	2a30      	cmp	r2, #48	; 0x30
 800508e:	d0fa      	beq.n	8005086 <_dtoa_r+0xb8e>
 8005090:	e6d7      	b.n	8004e42 <_dtoa_r+0x94a>
 8005092:	9a01      	ldr	r2, [sp, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d184      	bne.n	8004fa2 <_dtoa_r+0xaaa>
 8005098:	9b00      	ldr	r3, [sp, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2331      	movs	r3, #49	; 0x31
 80050a0:	7013      	strb	r3, [r2, #0]
 80050a2:	e6ce      	b.n	8004e42 <_dtoa_r+0x94a>
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <_dtoa_r+0xbd4>)
 80050a6:	f7ff ba95 	b.w	80045d4 <_dtoa_r+0xdc>
 80050aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f47f aa6e 	bne.w	800458e <_dtoa_r+0x96>
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <_dtoa_r+0xbd8>)
 80050b4:	f7ff ba8e 	b.w	80045d4 <_dtoa_r+0xdc>
 80050b8:	9b02      	ldr	r3, [sp, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	dcae      	bgt.n	800501c <_dtoa_r+0xb24>
 80050be:	9b06      	ldr	r3, [sp, #24]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	f73f aea8 	bgt.w	8004e16 <_dtoa_r+0x91e>
 80050c6:	e7a9      	b.n	800501c <_dtoa_r+0xb24>
 80050c8:	08007d27 	.word	0x08007d27
 80050cc:	08007c84 	.word	0x08007c84
 80050d0:	08007ca8 	.word	0x08007ca8

080050d4 <_localeconv_r>:
 80050d4:	4800      	ldr	r0, [pc, #0]	; (80050d8 <_localeconv_r+0x4>)
 80050d6:	4770      	bx	lr
 80050d8:	20000164 	.word	0x20000164

080050dc <malloc>:
 80050dc:	4b02      	ldr	r3, [pc, #8]	; (80050e8 <malloc+0xc>)
 80050de:	4601      	mov	r1, r0
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	f000 bc17 	b.w	8005914 <_malloc_r>
 80050e6:	bf00      	nop
 80050e8:	20000010 	.word	0x20000010

080050ec <memcpy>:
 80050ec:	440a      	add	r2, r1
 80050ee:	4291      	cmp	r1, r2
 80050f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050f4:	d100      	bne.n	80050f8 <memcpy+0xc>
 80050f6:	4770      	bx	lr
 80050f8:	b510      	push	{r4, lr}
 80050fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005102:	4291      	cmp	r1, r2
 8005104:	d1f9      	bne.n	80050fa <memcpy+0xe>
 8005106:	bd10      	pop	{r4, pc}

08005108 <_Balloc>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800510c:	4604      	mov	r4, r0
 800510e:	460d      	mov	r5, r1
 8005110:	b976      	cbnz	r6, 8005130 <_Balloc+0x28>
 8005112:	2010      	movs	r0, #16
 8005114:	f7ff ffe2 	bl	80050dc <malloc>
 8005118:	4602      	mov	r2, r0
 800511a:	6260      	str	r0, [r4, #36]	; 0x24
 800511c:	b920      	cbnz	r0, 8005128 <_Balloc+0x20>
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <_Balloc+0x78>)
 8005120:	4818      	ldr	r0, [pc, #96]	; (8005184 <_Balloc+0x7c>)
 8005122:	2166      	movs	r1, #102	; 0x66
 8005124:	f000 fc7a 	bl	8005a1c <__assert_func>
 8005128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800512c:	6006      	str	r6, [r0, #0]
 800512e:	60c6      	str	r6, [r0, #12]
 8005130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005132:	68f3      	ldr	r3, [r6, #12]
 8005134:	b183      	cbz	r3, 8005158 <_Balloc+0x50>
 8005136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800513e:	b9b8      	cbnz	r0, 8005170 <_Balloc+0x68>
 8005140:	2101      	movs	r1, #1
 8005142:	fa01 f605 	lsl.w	r6, r1, r5
 8005146:	1d72      	adds	r2, r6, #5
 8005148:	0092      	lsls	r2, r2, #2
 800514a:	4620      	mov	r0, r4
 800514c:	f000 fb60 	bl	8005810 <_calloc_r>
 8005150:	b160      	cbz	r0, 800516c <_Balloc+0x64>
 8005152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005156:	e00e      	b.n	8005176 <_Balloc+0x6e>
 8005158:	2221      	movs	r2, #33	; 0x21
 800515a:	2104      	movs	r1, #4
 800515c:	4620      	mov	r0, r4
 800515e:	f000 fb57 	bl	8005810 <_calloc_r>
 8005162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005164:	60f0      	str	r0, [r6, #12]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e4      	bne.n	8005136 <_Balloc+0x2e>
 800516c:	2000      	movs	r0, #0
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	6802      	ldr	r2, [r0, #0]
 8005172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005176:	2300      	movs	r3, #0
 8005178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800517c:	e7f7      	b.n	800516e <_Balloc+0x66>
 800517e:	bf00      	nop
 8005180:	08007cb5 	.word	0x08007cb5
 8005184:	08007d38 	.word	0x08007d38

08005188 <_Bfree>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800518c:	4605      	mov	r5, r0
 800518e:	460c      	mov	r4, r1
 8005190:	b976      	cbnz	r6, 80051b0 <_Bfree+0x28>
 8005192:	2010      	movs	r0, #16
 8005194:	f7ff ffa2 	bl	80050dc <malloc>
 8005198:	4602      	mov	r2, r0
 800519a:	6268      	str	r0, [r5, #36]	; 0x24
 800519c:	b920      	cbnz	r0, 80051a8 <_Bfree+0x20>
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <_Bfree+0x3c>)
 80051a0:	4809      	ldr	r0, [pc, #36]	; (80051c8 <_Bfree+0x40>)
 80051a2:	218a      	movs	r1, #138	; 0x8a
 80051a4:	f000 fc3a 	bl	8005a1c <__assert_func>
 80051a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051ac:	6006      	str	r6, [r0, #0]
 80051ae:	60c6      	str	r6, [r0, #12]
 80051b0:	b13c      	cbz	r4, 80051c2 <_Bfree+0x3a>
 80051b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051b4:	6862      	ldr	r2, [r4, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051bc:	6021      	str	r1, [r4, #0]
 80051be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	08007cb5 	.word	0x08007cb5
 80051c8:	08007d38 	.word	0x08007d38

080051cc <__multadd>:
 80051cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d0:	690d      	ldr	r5, [r1, #16]
 80051d2:	4607      	mov	r7, r0
 80051d4:	460c      	mov	r4, r1
 80051d6:	461e      	mov	r6, r3
 80051d8:	f101 0c14 	add.w	ip, r1, #20
 80051dc:	2000      	movs	r0, #0
 80051de:	f8dc 3000 	ldr.w	r3, [ip]
 80051e2:	b299      	uxth	r1, r3
 80051e4:	fb02 6101 	mla	r1, r2, r1, r6
 80051e8:	0c1e      	lsrs	r6, r3, #16
 80051ea:	0c0b      	lsrs	r3, r1, #16
 80051ec:	fb02 3306 	mla	r3, r2, r6, r3
 80051f0:	b289      	uxth	r1, r1
 80051f2:	3001      	adds	r0, #1
 80051f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051f8:	4285      	cmp	r5, r0
 80051fa:	f84c 1b04 	str.w	r1, [ip], #4
 80051fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005202:	dcec      	bgt.n	80051de <__multadd+0x12>
 8005204:	b30e      	cbz	r6, 800524a <__multadd+0x7e>
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	42ab      	cmp	r3, r5
 800520a:	dc19      	bgt.n	8005240 <__multadd+0x74>
 800520c:	6861      	ldr	r1, [r4, #4]
 800520e:	4638      	mov	r0, r7
 8005210:	3101      	adds	r1, #1
 8005212:	f7ff ff79 	bl	8005108 <_Balloc>
 8005216:	4680      	mov	r8, r0
 8005218:	b928      	cbnz	r0, 8005226 <__multadd+0x5a>
 800521a:	4602      	mov	r2, r0
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <__multadd+0x84>)
 800521e:	480d      	ldr	r0, [pc, #52]	; (8005254 <__multadd+0x88>)
 8005220:	21b5      	movs	r1, #181	; 0xb5
 8005222:	f000 fbfb 	bl	8005a1c <__assert_func>
 8005226:	6922      	ldr	r2, [r4, #16]
 8005228:	3202      	adds	r2, #2
 800522a:	f104 010c 	add.w	r1, r4, #12
 800522e:	0092      	lsls	r2, r2, #2
 8005230:	300c      	adds	r0, #12
 8005232:	f7ff ff5b 	bl	80050ec <memcpy>
 8005236:	4621      	mov	r1, r4
 8005238:	4638      	mov	r0, r7
 800523a:	f7ff ffa5 	bl	8005188 <_Bfree>
 800523e:	4644      	mov	r4, r8
 8005240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005244:	3501      	adds	r5, #1
 8005246:	615e      	str	r6, [r3, #20]
 8005248:	6125      	str	r5, [r4, #16]
 800524a:	4620      	mov	r0, r4
 800524c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005250:	08007d27 	.word	0x08007d27
 8005254:	08007d38 	.word	0x08007d38

08005258 <__hi0bits>:
 8005258:	0c03      	lsrs	r3, r0, #16
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	b9d3      	cbnz	r3, 8005294 <__hi0bits+0x3c>
 800525e:	0400      	lsls	r0, r0, #16
 8005260:	2310      	movs	r3, #16
 8005262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005266:	bf04      	itt	eq
 8005268:	0200      	lsleq	r0, r0, #8
 800526a:	3308      	addeq	r3, #8
 800526c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005270:	bf04      	itt	eq
 8005272:	0100      	lsleq	r0, r0, #4
 8005274:	3304      	addeq	r3, #4
 8005276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800527a:	bf04      	itt	eq
 800527c:	0080      	lsleq	r0, r0, #2
 800527e:	3302      	addeq	r3, #2
 8005280:	2800      	cmp	r0, #0
 8005282:	db05      	blt.n	8005290 <__hi0bits+0x38>
 8005284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005288:	f103 0301 	add.w	r3, r3, #1
 800528c:	bf08      	it	eq
 800528e:	2320      	moveq	r3, #32
 8005290:	4618      	mov	r0, r3
 8005292:	4770      	bx	lr
 8005294:	2300      	movs	r3, #0
 8005296:	e7e4      	b.n	8005262 <__hi0bits+0xa>

08005298 <__lo0bits>:
 8005298:	6803      	ldr	r3, [r0, #0]
 800529a:	f013 0207 	ands.w	r2, r3, #7
 800529e:	4601      	mov	r1, r0
 80052a0:	d00b      	beq.n	80052ba <__lo0bits+0x22>
 80052a2:	07da      	lsls	r2, r3, #31
 80052a4:	d423      	bmi.n	80052ee <__lo0bits+0x56>
 80052a6:	0798      	lsls	r0, r3, #30
 80052a8:	bf49      	itett	mi
 80052aa:	085b      	lsrmi	r3, r3, #1
 80052ac:	089b      	lsrpl	r3, r3, #2
 80052ae:	2001      	movmi	r0, #1
 80052b0:	600b      	strmi	r3, [r1, #0]
 80052b2:	bf5c      	itt	pl
 80052b4:	600b      	strpl	r3, [r1, #0]
 80052b6:	2002      	movpl	r0, #2
 80052b8:	4770      	bx	lr
 80052ba:	b298      	uxth	r0, r3
 80052bc:	b9a8      	cbnz	r0, 80052ea <__lo0bits+0x52>
 80052be:	0c1b      	lsrs	r3, r3, #16
 80052c0:	2010      	movs	r0, #16
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	b90a      	cbnz	r2, 80052ca <__lo0bits+0x32>
 80052c6:	3008      	adds	r0, #8
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	071a      	lsls	r2, r3, #28
 80052cc:	bf04      	itt	eq
 80052ce:	091b      	lsreq	r3, r3, #4
 80052d0:	3004      	addeq	r0, #4
 80052d2:	079a      	lsls	r2, r3, #30
 80052d4:	bf04      	itt	eq
 80052d6:	089b      	lsreq	r3, r3, #2
 80052d8:	3002      	addeq	r0, #2
 80052da:	07da      	lsls	r2, r3, #31
 80052dc:	d403      	bmi.n	80052e6 <__lo0bits+0x4e>
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	f100 0001 	add.w	r0, r0, #1
 80052e4:	d005      	beq.n	80052f2 <__lo0bits+0x5a>
 80052e6:	600b      	str	r3, [r1, #0]
 80052e8:	4770      	bx	lr
 80052ea:	4610      	mov	r0, r2
 80052ec:	e7e9      	b.n	80052c2 <__lo0bits+0x2a>
 80052ee:	2000      	movs	r0, #0
 80052f0:	4770      	bx	lr
 80052f2:	2020      	movs	r0, #32
 80052f4:	4770      	bx	lr
	...

080052f8 <__i2b>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	460c      	mov	r4, r1
 80052fc:	2101      	movs	r1, #1
 80052fe:	f7ff ff03 	bl	8005108 <_Balloc>
 8005302:	4602      	mov	r2, r0
 8005304:	b928      	cbnz	r0, 8005312 <__i2b+0x1a>
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <__i2b+0x24>)
 8005308:	4805      	ldr	r0, [pc, #20]	; (8005320 <__i2b+0x28>)
 800530a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800530e:	f000 fb85 	bl	8005a1c <__assert_func>
 8005312:	2301      	movs	r3, #1
 8005314:	6144      	str	r4, [r0, #20]
 8005316:	6103      	str	r3, [r0, #16]
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	08007d27 	.word	0x08007d27
 8005320:	08007d38 	.word	0x08007d38

08005324 <__multiply>:
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	4691      	mov	r9, r2
 800532a:	690a      	ldr	r2, [r1, #16]
 800532c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005330:	429a      	cmp	r2, r3
 8005332:	bfb8      	it	lt
 8005334:	460b      	movlt	r3, r1
 8005336:	460c      	mov	r4, r1
 8005338:	bfbc      	itt	lt
 800533a:	464c      	movlt	r4, r9
 800533c:	4699      	movlt	r9, r3
 800533e:	6927      	ldr	r7, [r4, #16]
 8005340:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005344:	68a3      	ldr	r3, [r4, #8]
 8005346:	6861      	ldr	r1, [r4, #4]
 8005348:	eb07 060a 	add.w	r6, r7, sl
 800534c:	42b3      	cmp	r3, r6
 800534e:	b085      	sub	sp, #20
 8005350:	bfb8      	it	lt
 8005352:	3101      	addlt	r1, #1
 8005354:	f7ff fed8 	bl	8005108 <_Balloc>
 8005358:	b930      	cbnz	r0, 8005368 <__multiply+0x44>
 800535a:	4602      	mov	r2, r0
 800535c:	4b44      	ldr	r3, [pc, #272]	; (8005470 <__multiply+0x14c>)
 800535e:	4845      	ldr	r0, [pc, #276]	; (8005474 <__multiply+0x150>)
 8005360:	f240 115d 	movw	r1, #349	; 0x15d
 8005364:	f000 fb5a 	bl	8005a1c <__assert_func>
 8005368:	f100 0514 	add.w	r5, r0, #20
 800536c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005370:	462b      	mov	r3, r5
 8005372:	2200      	movs	r2, #0
 8005374:	4543      	cmp	r3, r8
 8005376:	d321      	bcc.n	80053bc <__multiply+0x98>
 8005378:	f104 0314 	add.w	r3, r4, #20
 800537c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005380:	f109 0314 	add.w	r3, r9, #20
 8005384:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005388:	9202      	str	r2, [sp, #8]
 800538a:	1b3a      	subs	r2, r7, r4
 800538c:	3a15      	subs	r2, #21
 800538e:	f022 0203 	bic.w	r2, r2, #3
 8005392:	3204      	adds	r2, #4
 8005394:	f104 0115 	add.w	r1, r4, #21
 8005398:	428f      	cmp	r7, r1
 800539a:	bf38      	it	cc
 800539c:	2204      	movcc	r2, #4
 800539e:	9201      	str	r2, [sp, #4]
 80053a0:	9a02      	ldr	r2, [sp, #8]
 80053a2:	9303      	str	r3, [sp, #12]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d80c      	bhi.n	80053c2 <__multiply+0x9e>
 80053a8:	2e00      	cmp	r6, #0
 80053aa:	dd03      	ble.n	80053b4 <__multiply+0x90>
 80053ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d05a      	beq.n	800546a <__multiply+0x146>
 80053b4:	6106      	str	r6, [r0, #16]
 80053b6:	b005      	add	sp, #20
 80053b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053bc:	f843 2b04 	str.w	r2, [r3], #4
 80053c0:	e7d8      	b.n	8005374 <__multiply+0x50>
 80053c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80053c6:	f1ba 0f00 	cmp.w	sl, #0
 80053ca:	d024      	beq.n	8005416 <__multiply+0xf2>
 80053cc:	f104 0e14 	add.w	lr, r4, #20
 80053d0:	46a9      	mov	r9, r5
 80053d2:	f04f 0c00 	mov.w	ip, #0
 80053d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80053da:	f8d9 1000 	ldr.w	r1, [r9]
 80053de:	fa1f fb82 	uxth.w	fp, r2
 80053e2:	b289      	uxth	r1, r1
 80053e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80053e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80053ec:	f8d9 2000 	ldr.w	r2, [r9]
 80053f0:	4461      	add	r1, ip
 80053f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80053f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80053fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80053fe:	b289      	uxth	r1, r1
 8005400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005404:	4577      	cmp	r7, lr
 8005406:	f849 1b04 	str.w	r1, [r9], #4
 800540a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800540e:	d8e2      	bhi.n	80053d6 <__multiply+0xb2>
 8005410:	9a01      	ldr	r2, [sp, #4]
 8005412:	f845 c002 	str.w	ip, [r5, r2]
 8005416:	9a03      	ldr	r2, [sp, #12]
 8005418:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800541c:	3304      	adds	r3, #4
 800541e:	f1b9 0f00 	cmp.w	r9, #0
 8005422:	d020      	beq.n	8005466 <__multiply+0x142>
 8005424:	6829      	ldr	r1, [r5, #0]
 8005426:	f104 0c14 	add.w	ip, r4, #20
 800542a:	46ae      	mov	lr, r5
 800542c:	f04f 0a00 	mov.w	sl, #0
 8005430:	f8bc b000 	ldrh.w	fp, [ip]
 8005434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005438:	fb09 220b 	mla	r2, r9, fp, r2
 800543c:	4492      	add	sl, r2
 800543e:	b289      	uxth	r1, r1
 8005440:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005444:	f84e 1b04 	str.w	r1, [lr], #4
 8005448:	f85c 2b04 	ldr.w	r2, [ip], #4
 800544c:	f8be 1000 	ldrh.w	r1, [lr]
 8005450:	0c12      	lsrs	r2, r2, #16
 8005452:	fb09 1102 	mla	r1, r9, r2, r1
 8005456:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800545a:	4567      	cmp	r7, ip
 800545c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005460:	d8e6      	bhi.n	8005430 <__multiply+0x10c>
 8005462:	9a01      	ldr	r2, [sp, #4]
 8005464:	50a9      	str	r1, [r5, r2]
 8005466:	3504      	adds	r5, #4
 8005468:	e79a      	b.n	80053a0 <__multiply+0x7c>
 800546a:	3e01      	subs	r6, #1
 800546c:	e79c      	b.n	80053a8 <__multiply+0x84>
 800546e:	bf00      	nop
 8005470:	08007d27 	.word	0x08007d27
 8005474:	08007d38 	.word	0x08007d38

08005478 <__pow5mult>:
 8005478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800547c:	4615      	mov	r5, r2
 800547e:	f012 0203 	ands.w	r2, r2, #3
 8005482:	4606      	mov	r6, r0
 8005484:	460f      	mov	r7, r1
 8005486:	d007      	beq.n	8005498 <__pow5mult+0x20>
 8005488:	4c25      	ldr	r4, [pc, #148]	; (8005520 <__pow5mult+0xa8>)
 800548a:	3a01      	subs	r2, #1
 800548c:	2300      	movs	r3, #0
 800548e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005492:	f7ff fe9b 	bl	80051cc <__multadd>
 8005496:	4607      	mov	r7, r0
 8005498:	10ad      	asrs	r5, r5, #2
 800549a:	d03d      	beq.n	8005518 <__pow5mult+0xa0>
 800549c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800549e:	b97c      	cbnz	r4, 80054c0 <__pow5mult+0x48>
 80054a0:	2010      	movs	r0, #16
 80054a2:	f7ff fe1b 	bl	80050dc <malloc>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6270      	str	r0, [r6, #36]	; 0x24
 80054aa:	b928      	cbnz	r0, 80054b8 <__pow5mult+0x40>
 80054ac:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <__pow5mult+0xac>)
 80054ae:	481e      	ldr	r0, [pc, #120]	; (8005528 <__pow5mult+0xb0>)
 80054b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80054b4:	f000 fab2 	bl	8005a1c <__assert_func>
 80054b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054bc:	6004      	str	r4, [r0, #0]
 80054be:	60c4      	str	r4, [r0, #12]
 80054c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054c8:	b94c      	cbnz	r4, 80054de <__pow5mult+0x66>
 80054ca:	f240 2171 	movw	r1, #625	; 0x271
 80054ce:	4630      	mov	r0, r6
 80054d0:	f7ff ff12 	bl	80052f8 <__i2b>
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80054da:	4604      	mov	r4, r0
 80054dc:	6003      	str	r3, [r0, #0]
 80054de:	f04f 0900 	mov.w	r9, #0
 80054e2:	07eb      	lsls	r3, r5, #31
 80054e4:	d50a      	bpl.n	80054fc <__pow5mult+0x84>
 80054e6:	4639      	mov	r1, r7
 80054e8:	4622      	mov	r2, r4
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7ff ff1a 	bl	8005324 <__multiply>
 80054f0:	4639      	mov	r1, r7
 80054f2:	4680      	mov	r8, r0
 80054f4:	4630      	mov	r0, r6
 80054f6:	f7ff fe47 	bl	8005188 <_Bfree>
 80054fa:	4647      	mov	r7, r8
 80054fc:	106d      	asrs	r5, r5, #1
 80054fe:	d00b      	beq.n	8005518 <__pow5mult+0xa0>
 8005500:	6820      	ldr	r0, [r4, #0]
 8005502:	b938      	cbnz	r0, 8005514 <__pow5mult+0x9c>
 8005504:	4622      	mov	r2, r4
 8005506:	4621      	mov	r1, r4
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff ff0b 	bl	8005324 <__multiply>
 800550e:	6020      	str	r0, [r4, #0]
 8005510:	f8c0 9000 	str.w	r9, [r0]
 8005514:	4604      	mov	r4, r0
 8005516:	e7e4      	b.n	80054e2 <__pow5mult+0x6a>
 8005518:	4638      	mov	r0, r7
 800551a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551e:	bf00      	nop
 8005520:	08007e88 	.word	0x08007e88
 8005524:	08007cb5 	.word	0x08007cb5
 8005528:	08007d38 	.word	0x08007d38

0800552c <__lshift>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	460c      	mov	r4, r1
 8005532:	6849      	ldr	r1, [r1, #4]
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	4607      	mov	r7, r0
 800553e:	4691      	mov	r9, r2
 8005540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005544:	f108 0601 	add.w	r6, r8, #1
 8005548:	42b3      	cmp	r3, r6
 800554a:	db0b      	blt.n	8005564 <__lshift+0x38>
 800554c:	4638      	mov	r0, r7
 800554e:	f7ff fddb 	bl	8005108 <_Balloc>
 8005552:	4605      	mov	r5, r0
 8005554:	b948      	cbnz	r0, 800556a <__lshift+0x3e>
 8005556:	4602      	mov	r2, r0
 8005558:	4b2a      	ldr	r3, [pc, #168]	; (8005604 <__lshift+0xd8>)
 800555a:	482b      	ldr	r0, [pc, #172]	; (8005608 <__lshift+0xdc>)
 800555c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005560:	f000 fa5c 	bl	8005a1c <__assert_func>
 8005564:	3101      	adds	r1, #1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	e7ee      	b.n	8005548 <__lshift+0x1c>
 800556a:	2300      	movs	r3, #0
 800556c:	f100 0114 	add.w	r1, r0, #20
 8005570:	f100 0210 	add.w	r2, r0, #16
 8005574:	4618      	mov	r0, r3
 8005576:	4553      	cmp	r3, sl
 8005578:	db37      	blt.n	80055ea <__lshift+0xbe>
 800557a:	6920      	ldr	r0, [r4, #16]
 800557c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005580:	f104 0314 	add.w	r3, r4, #20
 8005584:	f019 091f 	ands.w	r9, r9, #31
 8005588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800558c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005590:	d02f      	beq.n	80055f2 <__lshift+0xc6>
 8005592:	f1c9 0e20 	rsb	lr, r9, #32
 8005596:	468a      	mov	sl, r1
 8005598:	f04f 0c00 	mov.w	ip, #0
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	fa02 f209 	lsl.w	r2, r2, r9
 80055a2:	ea42 020c 	orr.w	r2, r2, ip
 80055a6:	f84a 2b04 	str.w	r2, [sl], #4
 80055aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ae:	4298      	cmp	r0, r3
 80055b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80055b4:	d8f2      	bhi.n	800559c <__lshift+0x70>
 80055b6:	1b03      	subs	r3, r0, r4
 80055b8:	3b15      	subs	r3, #21
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	3304      	adds	r3, #4
 80055c0:	f104 0215 	add.w	r2, r4, #21
 80055c4:	4290      	cmp	r0, r2
 80055c6:	bf38      	it	cc
 80055c8:	2304      	movcc	r3, #4
 80055ca:	f841 c003 	str.w	ip, [r1, r3]
 80055ce:	f1bc 0f00 	cmp.w	ip, #0
 80055d2:	d001      	beq.n	80055d8 <__lshift+0xac>
 80055d4:	f108 0602 	add.w	r6, r8, #2
 80055d8:	3e01      	subs	r6, #1
 80055da:	4638      	mov	r0, r7
 80055dc:	612e      	str	r6, [r5, #16]
 80055de:	4621      	mov	r1, r4
 80055e0:	f7ff fdd2 	bl	8005188 <_Bfree>
 80055e4:	4628      	mov	r0, r5
 80055e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80055ee:	3301      	adds	r3, #1
 80055f0:	e7c1      	b.n	8005576 <__lshift+0x4a>
 80055f2:	3904      	subs	r1, #4
 80055f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80055fc:	4298      	cmp	r0, r3
 80055fe:	d8f9      	bhi.n	80055f4 <__lshift+0xc8>
 8005600:	e7ea      	b.n	80055d8 <__lshift+0xac>
 8005602:	bf00      	nop
 8005604:	08007d27 	.word	0x08007d27
 8005608:	08007d38 	.word	0x08007d38

0800560c <__mcmp>:
 800560c:	b530      	push	{r4, r5, lr}
 800560e:	6902      	ldr	r2, [r0, #16]
 8005610:	690c      	ldr	r4, [r1, #16]
 8005612:	1b12      	subs	r2, r2, r4
 8005614:	d10e      	bne.n	8005634 <__mcmp+0x28>
 8005616:	f100 0314 	add.w	r3, r0, #20
 800561a:	3114      	adds	r1, #20
 800561c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800562c:	42a5      	cmp	r5, r4
 800562e:	d003      	beq.n	8005638 <__mcmp+0x2c>
 8005630:	d305      	bcc.n	800563e <__mcmp+0x32>
 8005632:	2201      	movs	r2, #1
 8005634:	4610      	mov	r0, r2
 8005636:	bd30      	pop	{r4, r5, pc}
 8005638:	4283      	cmp	r3, r0
 800563a:	d3f3      	bcc.n	8005624 <__mcmp+0x18>
 800563c:	e7fa      	b.n	8005634 <__mcmp+0x28>
 800563e:	f04f 32ff 	mov.w	r2, #4294967295
 8005642:	e7f7      	b.n	8005634 <__mcmp+0x28>

08005644 <__mdiff>:
 8005644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	460c      	mov	r4, r1
 800564a:	4606      	mov	r6, r0
 800564c:	4611      	mov	r1, r2
 800564e:	4620      	mov	r0, r4
 8005650:	4690      	mov	r8, r2
 8005652:	f7ff ffdb 	bl	800560c <__mcmp>
 8005656:	1e05      	subs	r5, r0, #0
 8005658:	d110      	bne.n	800567c <__mdiff+0x38>
 800565a:	4629      	mov	r1, r5
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff fd53 	bl	8005108 <_Balloc>
 8005662:	b930      	cbnz	r0, 8005672 <__mdiff+0x2e>
 8005664:	4b3a      	ldr	r3, [pc, #232]	; (8005750 <__mdiff+0x10c>)
 8005666:	4602      	mov	r2, r0
 8005668:	f240 2132 	movw	r1, #562	; 0x232
 800566c:	4839      	ldr	r0, [pc, #228]	; (8005754 <__mdiff+0x110>)
 800566e:	f000 f9d5 	bl	8005a1c <__assert_func>
 8005672:	2301      	movs	r3, #1
 8005674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567c:	bfa4      	itt	ge
 800567e:	4643      	movge	r3, r8
 8005680:	46a0      	movge	r8, r4
 8005682:	4630      	mov	r0, r6
 8005684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005688:	bfa6      	itte	ge
 800568a:	461c      	movge	r4, r3
 800568c:	2500      	movge	r5, #0
 800568e:	2501      	movlt	r5, #1
 8005690:	f7ff fd3a 	bl	8005108 <_Balloc>
 8005694:	b920      	cbnz	r0, 80056a0 <__mdiff+0x5c>
 8005696:	4b2e      	ldr	r3, [pc, #184]	; (8005750 <__mdiff+0x10c>)
 8005698:	4602      	mov	r2, r0
 800569a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800569e:	e7e5      	b.n	800566c <__mdiff+0x28>
 80056a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80056a4:	6926      	ldr	r6, [r4, #16]
 80056a6:	60c5      	str	r5, [r0, #12]
 80056a8:	f104 0914 	add.w	r9, r4, #20
 80056ac:	f108 0514 	add.w	r5, r8, #20
 80056b0:	f100 0e14 	add.w	lr, r0, #20
 80056b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80056b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056bc:	f108 0210 	add.w	r2, r8, #16
 80056c0:	46f2      	mov	sl, lr
 80056c2:	2100      	movs	r1, #0
 80056c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80056c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80056cc:	fa1f f883 	uxth.w	r8, r3
 80056d0:	fa11 f18b 	uxtah	r1, r1, fp
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	eba1 0808 	sub.w	r8, r1, r8
 80056da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80056e2:	fa1f f888 	uxth.w	r8, r8
 80056e6:	1419      	asrs	r1, r3, #16
 80056e8:	454e      	cmp	r6, r9
 80056ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80056ee:	f84a 3b04 	str.w	r3, [sl], #4
 80056f2:	d8e7      	bhi.n	80056c4 <__mdiff+0x80>
 80056f4:	1b33      	subs	r3, r6, r4
 80056f6:	3b15      	subs	r3, #21
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	3304      	adds	r3, #4
 80056fe:	3415      	adds	r4, #21
 8005700:	42a6      	cmp	r6, r4
 8005702:	bf38      	it	cc
 8005704:	2304      	movcc	r3, #4
 8005706:	441d      	add	r5, r3
 8005708:	4473      	add	r3, lr
 800570a:	469e      	mov	lr, r3
 800570c:	462e      	mov	r6, r5
 800570e:	4566      	cmp	r6, ip
 8005710:	d30e      	bcc.n	8005730 <__mdiff+0xec>
 8005712:	f10c 0203 	add.w	r2, ip, #3
 8005716:	1b52      	subs	r2, r2, r5
 8005718:	f022 0203 	bic.w	r2, r2, #3
 800571c:	3d03      	subs	r5, #3
 800571e:	45ac      	cmp	ip, r5
 8005720:	bf38      	it	cc
 8005722:	2200      	movcc	r2, #0
 8005724:	441a      	add	r2, r3
 8005726:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800572a:	b17b      	cbz	r3, 800574c <__mdiff+0x108>
 800572c:	6107      	str	r7, [r0, #16]
 800572e:	e7a3      	b.n	8005678 <__mdiff+0x34>
 8005730:	f856 8b04 	ldr.w	r8, [r6], #4
 8005734:	fa11 f288 	uxtah	r2, r1, r8
 8005738:	1414      	asrs	r4, r2, #16
 800573a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800573e:	b292      	uxth	r2, r2
 8005740:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005744:	f84e 2b04 	str.w	r2, [lr], #4
 8005748:	1421      	asrs	r1, r4, #16
 800574a:	e7e0      	b.n	800570e <__mdiff+0xca>
 800574c:	3f01      	subs	r7, #1
 800574e:	e7ea      	b.n	8005726 <__mdiff+0xe2>
 8005750:	08007d27 	.word	0x08007d27
 8005754:	08007d38 	.word	0x08007d38

08005758 <__d2b>:
 8005758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800575c:	4689      	mov	r9, r1
 800575e:	2101      	movs	r1, #1
 8005760:	ec57 6b10 	vmov	r6, r7, d0
 8005764:	4690      	mov	r8, r2
 8005766:	f7ff fccf 	bl	8005108 <_Balloc>
 800576a:	4604      	mov	r4, r0
 800576c:	b930      	cbnz	r0, 800577c <__d2b+0x24>
 800576e:	4602      	mov	r2, r0
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <__d2b+0xb0>)
 8005772:	4826      	ldr	r0, [pc, #152]	; (800580c <__d2b+0xb4>)
 8005774:	f240 310a 	movw	r1, #778	; 0x30a
 8005778:	f000 f950 	bl	8005a1c <__assert_func>
 800577c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005780:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005784:	bb35      	cbnz	r5, 80057d4 <__d2b+0x7c>
 8005786:	2e00      	cmp	r6, #0
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	d028      	beq.n	80057de <__d2b+0x86>
 800578c:	4668      	mov	r0, sp
 800578e:	9600      	str	r6, [sp, #0]
 8005790:	f7ff fd82 	bl	8005298 <__lo0bits>
 8005794:	9900      	ldr	r1, [sp, #0]
 8005796:	b300      	cbz	r0, 80057da <__d2b+0x82>
 8005798:	9a01      	ldr	r2, [sp, #4]
 800579a:	f1c0 0320 	rsb	r3, r0, #32
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	430b      	orrs	r3, r1
 80057a4:	40c2      	lsrs	r2, r0
 80057a6:	6163      	str	r3, [r4, #20]
 80057a8:	9201      	str	r2, [sp, #4]
 80057aa:	9b01      	ldr	r3, [sp, #4]
 80057ac:	61a3      	str	r3, [r4, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2202      	movne	r2, #2
 80057b4:	2201      	moveq	r2, #1
 80057b6:	6122      	str	r2, [r4, #16]
 80057b8:	b1d5      	cbz	r5, 80057f0 <__d2b+0x98>
 80057ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80057be:	4405      	add	r5, r0
 80057c0:	f8c9 5000 	str.w	r5, [r9]
 80057c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057c8:	f8c8 0000 	str.w	r0, [r8]
 80057cc:	4620      	mov	r0, r4
 80057ce:	b003      	add	sp, #12
 80057d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d8:	e7d5      	b.n	8005786 <__d2b+0x2e>
 80057da:	6161      	str	r1, [r4, #20]
 80057dc:	e7e5      	b.n	80057aa <__d2b+0x52>
 80057de:	a801      	add	r0, sp, #4
 80057e0:	f7ff fd5a 	bl	8005298 <__lo0bits>
 80057e4:	9b01      	ldr	r3, [sp, #4]
 80057e6:	6163      	str	r3, [r4, #20]
 80057e8:	2201      	movs	r2, #1
 80057ea:	6122      	str	r2, [r4, #16]
 80057ec:	3020      	adds	r0, #32
 80057ee:	e7e3      	b.n	80057b8 <__d2b+0x60>
 80057f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80057f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057f8:	f8c9 0000 	str.w	r0, [r9]
 80057fc:	6918      	ldr	r0, [r3, #16]
 80057fe:	f7ff fd2b 	bl	8005258 <__hi0bits>
 8005802:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005806:	e7df      	b.n	80057c8 <__d2b+0x70>
 8005808:	08007d27 	.word	0x08007d27
 800580c:	08007d38 	.word	0x08007d38

08005810 <_calloc_r>:
 8005810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005812:	fba1 2402 	umull	r2, r4, r1, r2
 8005816:	b94c      	cbnz	r4, 800582c <_calloc_r+0x1c>
 8005818:	4611      	mov	r1, r2
 800581a:	9201      	str	r2, [sp, #4]
 800581c:	f000 f87a 	bl	8005914 <_malloc_r>
 8005820:	9a01      	ldr	r2, [sp, #4]
 8005822:	4605      	mov	r5, r0
 8005824:	b930      	cbnz	r0, 8005834 <_calloc_r+0x24>
 8005826:	4628      	mov	r0, r5
 8005828:	b003      	add	sp, #12
 800582a:	bd30      	pop	{r4, r5, pc}
 800582c:	220c      	movs	r2, #12
 800582e:	6002      	str	r2, [r0, #0]
 8005830:	2500      	movs	r5, #0
 8005832:	e7f8      	b.n	8005826 <_calloc_r+0x16>
 8005834:	4621      	mov	r1, r4
 8005836:	f7fe f961 	bl	8003afc <memset>
 800583a:	e7f4      	b.n	8005826 <_calloc_r+0x16>

0800583c <_free_r>:
 800583c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800583e:	2900      	cmp	r1, #0
 8005840:	d044      	beq.n	80058cc <_free_r+0x90>
 8005842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005846:	9001      	str	r0, [sp, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f1a1 0404 	sub.w	r4, r1, #4
 800584e:	bfb8      	it	lt
 8005850:	18e4      	addlt	r4, r4, r3
 8005852:	f000 f925 	bl	8005aa0 <__malloc_lock>
 8005856:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <_free_r+0x94>)
 8005858:	9801      	ldr	r0, [sp, #4]
 800585a:	6813      	ldr	r3, [r2, #0]
 800585c:	b933      	cbnz	r3, 800586c <_free_r+0x30>
 800585e:	6063      	str	r3, [r4, #4]
 8005860:	6014      	str	r4, [r2, #0]
 8005862:	b003      	add	sp, #12
 8005864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005868:	f000 b920 	b.w	8005aac <__malloc_unlock>
 800586c:	42a3      	cmp	r3, r4
 800586e:	d908      	bls.n	8005882 <_free_r+0x46>
 8005870:	6825      	ldr	r5, [r4, #0]
 8005872:	1961      	adds	r1, r4, r5
 8005874:	428b      	cmp	r3, r1
 8005876:	bf01      	itttt	eq
 8005878:	6819      	ldreq	r1, [r3, #0]
 800587a:	685b      	ldreq	r3, [r3, #4]
 800587c:	1949      	addeq	r1, r1, r5
 800587e:	6021      	streq	r1, [r4, #0]
 8005880:	e7ed      	b.n	800585e <_free_r+0x22>
 8005882:	461a      	mov	r2, r3
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	b10b      	cbz	r3, 800588c <_free_r+0x50>
 8005888:	42a3      	cmp	r3, r4
 800588a:	d9fa      	bls.n	8005882 <_free_r+0x46>
 800588c:	6811      	ldr	r1, [r2, #0]
 800588e:	1855      	adds	r5, r2, r1
 8005890:	42a5      	cmp	r5, r4
 8005892:	d10b      	bne.n	80058ac <_free_r+0x70>
 8005894:	6824      	ldr	r4, [r4, #0]
 8005896:	4421      	add	r1, r4
 8005898:	1854      	adds	r4, r2, r1
 800589a:	42a3      	cmp	r3, r4
 800589c:	6011      	str	r1, [r2, #0]
 800589e:	d1e0      	bne.n	8005862 <_free_r+0x26>
 80058a0:	681c      	ldr	r4, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	6053      	str	r3, [r2, #4]
 80058a6:	4421      	add	r1, r4
 80058a8:	6011      	str	r1, [r2, #0]
 80058aa:	e7da      	b.n	8005862 <_free_r+0x26>
 80058ac:	d902      	bls.n	80058b4 <_free_r+0x78>
 80058ae:	230c      	movs	r3, #12
 80058b0:	6003      	str	r3, [r0, #0]
 80058b2:	e7d6      	b.n	8005862 <_free_r+0x26>
 80058b4:	6825      	ldr	r5, [r4, #0]
 80058b6:	1961      	adds	r1, r4, r5
 80058b8:	428b      	cmp	r3, r1
 80058ba:	bf04      	itt	eq
 80058bc:	6819      	ldreq	r1, [r3, #0]
 80058be:	685b      	ldreq	r3, [r3, #4]
 80058c0:	6063      	str	r3, [r4, #4]
 80058c2:	bf04      	itt	eq
 80058c4:	1949      	addeq	r1, r1, r5
 80058c6:	6021      	streq	r1, [r4, #0]
 80058c8:	6054      	str	r4, [r2, #4]
 80058ca:	e7ca      	b.n	8005862 <_free_r+0x26>
 80058cc:	b003      	add	sp, #12
 80058ce:	bd30      	pop	{r4, r5, pc}
 80058d0:	20000230 	.word	0x20000230

080058d4 <sbrk_aligned>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	4e0e      	ldr	r6, [pc, #56]	; (8005910 <sbrk_aligned+0x3c>)
 80058d8:	460c      	mov	r4, r1
 80058da:	6831      	ldr	r1, [r6, #0]
 80058dc:	4605      	mov	r5, r0
 80058de:	b911      	cbnz	r1, 80058e6 <sbrk_aligned+0x12>
 80058e0:	f000 f88c 	bl	80059fc <_sbrk_r>
 80058e4:	6030      	str	r0, [r6, #0]
 80058e6:	4621      	mov	r1, r4
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 f887 	bl	80059fc <_sbrk_r>
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	d00a      	beq.n	8005908 <sbrk_aligned+0x34>
 80058f2:	1cc4      	adds	r4, r0, #3
 80058f4:	f024 0403 	bic.w	r4, r4, #3
 80058f8:	42a0      	cmp	r0, r4
 80058fa:	d007      	beq.n	800590c <sbrk_aligned+0x38>
 80058fc:	1a21      	subs	r1, r4, r0
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 f87c 	bl	80059fc <_sbrk_r>
 8005904:	3001      	adds	r0, #1
 8005906:	d101      	bne.n	800590c <sbrk_aligned+0x38>
 8005908:	f04f 34ff 	mov.w	r4, #4294967295
 800590c:	4620      	mov	r0, r4
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	20000234 	.word	0x20000234

08005914 <_malloc_r>:
 8005914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005918:	1ccd      	adds	r5, r1, #3
 800591a:	f025 0503 	bic.w	r5, r5, #3
 800591e:	3508      	adds	r5, #8
 8005920:	2d0c      	cmp	r5, #12
 8005922:	bf38      	it	cc
 8005924:	250c      	movcc	r5, #12
 8005926:	2d00      	cmp	r5, #0
 8005928:	4607      	mov	r7, r0
 800592a:	db01      	blt.n	8005930 <_malloc_r+0x1c>
 800592c:	42a9      	cmp	r1, r5
 800592e:	d905      	bls.n	800593c <_malloc_r+0x28>
 8005930:	230c      	movs	r3, #12
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	2600      	movs	r6, #0
 8005936:	4630      	mov	r0, r6
 8005938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800593c:	4e2e      	ldr	r6, [pc, #184]	; (80059f8 <_malloc_r+0xe4>)
 800593e:	f000 f8af 	bl	8005aa0 <__malloc_lock>
 8005942:	6833      	ldr	r3, [r6, #0]
 8005944:	461c      	mov	r4, r3
 8005946:	bb34      	cbnz	r4, 8005996 <_malloc_r+0x82>
 8005948:	4629      	mov	r1, r5
 800594a:	4638      	mov	r0, r7
 800594c:	f7ff ffc2 	bl	80058d4 <sbrk_aligned>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	4604      	mov	r4, r0
 8005954:	d14d      	bne.n	80059f2 <_malloc_r+0xde>
 8005956:	6834      	ldr	r4, [r6, #0]
 8005958:	4626      	mov	r6, r4
 800595a:	2e00      	cmp	r6, #0
 800595c:	d140      	bne.n	80059e0 <_malloc_r+0xcc>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	4631      	mov	r1, r6
 8005962:	4638      	mov	r0, r7
 8005964:	eb04 0803 	add.w	r8, r4, r3
 8005968:	f000 f848 	bl	80059fc <_sbrk_r>
 800596c:	4580      	cmp	r8, r0
 800596e:	d13a      	bne.n	80059e6 <_malloc_r+0xd2>
 8005970:	6821      	ldr	r1, [r4, #0]
 8005972:	3503      	adds	r5, #3
 8005974:	1a6d      	subs	r5, r5, r1
 8005976:	f025 0503 	bic.w	r5, r5, #3
 800597a:	3508      	adds	r5, #8
 800597c:	2d0c      	cmp	r5, #12
 800597e:	bf38      	it	cc
 8005980:	250c      	movcc	r5, #12
 8005982:	4629      	mov	r1, r5
 8005984:	4638      	mov	r0, r7
 8005986:	f7ff ffa5 	bl	80058d4 <sbrk_aligned>
 800598a:	3001      	adds	r0, #1
 800598c:	d02b      	beq.n	80059e6 <_malloc_r+0xd2>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	442b      	add	r3, r5
 8005992:	6023      	str	r3, [r4, #0]
 8005994:	e00e      	b.n	80059b4 <_malloc_r+0xa0>
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	1b52      	subs	r2, r2, r5
 800599a:	d41e      	bmi.n	80059da <_malloc_r+0xc6>
 800599c:	2a0b      	cmp	r2, #11
 800599e:	d916      	bls.n	80059ce <_malloc_r+0xba>
 80059a0:	1961      	adds	r1, r4, r5
 80059a2:	42a3      	cmp	r3, r4
 80059a4:	6025      	str	r5, [r4, #0]
 80059a6:	bf18      	it	ne
 80059a8:	6059      	strne	r1, [r3, #4]
 80059aa:	6863      	ldr	r3, [r4, #4]
 80059ac:	bf08      	it	eq
 80059ae:	6031      	streq	r1, [r6, #0]
 80059b0:	5162      	str	r2, [r4, r5]
 80059b2:	604b      	str	r3, [r1, #4]
 80059b4:	4638      	mov	r0, r7
 80059b6:	f104 060b 	add.w	r6, r4, #11
 80059ba:	f000 f877 	bl	8005aac <__malloc_unlock>
 80059be:	f026 0607 	bic.w	r6, r6, #7
 80059c2:	1d23      	adds	r3, r4, #4
 80059c4:	1af2      	subs	r2, r6, r3
 80059c6:	d0b6      	beq.n	8005936 <_malloc_r+0x22>
 80059c8:	1b9b      	subs	r3, r3, r6
 80059ca:	50a3      	str	r3, [r4, r2]
 80059cc:	e7b3      	b.n	8005936 <_malloc_r+0x22>
 80059ce:	6862      	ldr	r2, [r4, #4]
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	bf0c      	ite	eq
 80059d4:	6032      	streq	r2, [r6, #0]
 80059d6:	605a      	strne	r2, [r3, #4]
 80059d8:	e7ec      	b.n	80059b4 <_malloc_r+0xa0>
 80059da:	4623      	mov	r3, r4
 80059dc:	6864      	ldr	r4, [r4, #4]
 80059de:	e7b2      	b.n	8005946 <_malloc_r+0x32>
 80059e0:	4634      	mov	r4, r6
 80059e2:	6876      	ldr	r6, [r6, #4]
 80059e4:	e7b9      	b.n	800595a <_malloc_r+0x46>
 80059e6:	230c      	movs	r3, #12
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	4638      	mov	r0, r7
 80059ec:	f000 f85e 	bl	8005aac <__malloc_unlock>
 80059f0:	e7a1      	b.n	8005936 <_malloc_r+0x22>
 80059f2:	6025      	str	r5, [r4, #0]
 80059f4:	e7de      	b.n	80059b4 <_malloc_r+0xa0>
 80059f6:	bf00      	nop
 80059f8:	20000230 	.word	0x20000230

080059fc <_sbrk_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d06      	ldr	r5, [pc, #24]	; (8005a18 <_sbrk_r+0x1c>)
 8005a00:	2300      	movs	r3, #0
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	f001 fe6c 	bl	80076e4 <_sbrk>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_sbrk_r+0x1a>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_sbrk_r+0x1a>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	20000238 	.word	0x20000238

08005a1c <__assert_func>:
 8005a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a1e:	4614      	mov	r4, r2
 8005a20:	461a      	mov	r2, r3
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <__assert_func+0x2c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4605      	mov	r5, r0
 8005a28:	68d8      	ldr	r0, [r3, #12]
 8005a2a:	b14c      	cbz	r4, 8005a40 <__assert_func+0x24>
 8005a2c:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <__assert_func+0x30>)
 8005a2e:	9100      	str	r1, [sp, #0]
 8005a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a34:	4906      	ldr	r1, [pc, #24]	; (8005a50 <__assert_func+0x34>)
 8005a36:	462b      	mov	r3, r5
 8005a38:	f000 f80e 	bl	8005a58 <fiprintf>
 8005a3c:	f000 fa64 	bl	8005f08 <abort>
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <__assert_func+0x38>)
 8005a42:	461c      	mov	r4, r3
 8005a44:	e7f3      	b.n	8005a2e <__assert_func+0x12>
 8005a46:	bf00      	nop
 8005a48:	20000010 	.word	0x20000010
 8005a4c:	08007e94 	.word	0x08007e94
 8005a50:	08007ea1 	.word	0x08007ea1
 8005a54:	08007ecf 	.word	0x08007ecf

08005a58 <fiprintf>:
 8005a58:	b40e      	push	{r1, r2, r3}
 8005a5a:	b503      	push	{r0, r1, lr}
 8005a5c:	4601      	mov	r1, r0
 8005a5e:	ab03      	add	r3, sp, #12
 8005a60:	4805      	ldr	r0, [pc, #20]	; (8005a78 <fiprintf+0x20>)
 8005a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a66:	6800      	ldr	r0, [r0, #0]
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	f000 f84f 	bl	8005b0c <_vfiprintf_r>
 8005a6e:	b002      	add	sp, #8
 8005a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a74:	b003      	add	sp, #12
 8005a76:	4770      	bx	lr
 8005a78:	20000010 	.word	0x20000010

08005a7c <__ascii_mbtowc>:
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	b901      	cbnz	r1, 8005a82 <__ascii_mbtowc+0x6>
 8005a80:	a901      	add	r1, sp, #4
 8005a82:	b142      	cbz	r2, 8005a96 <__ascii_mbtowc+0x1a>
 8005a84:	b14b      	cbz	r3, 8005a9a <__ascii_mbtowc+0x1e>
 8005a86:	7813      	ldrb	r3, [r2, #0]
 8005a88:	600b      	str	r3, [r1, #0]
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	1e10      	subs	r0, r2, #0
 8005a8e:	bf18      	it	ne
 8005a90:	2001      	movne	r0, #1
 8005a92:	b002      	add	sp, #8
 8005a94:	4770      	bx	lr
 8005a96:	4610      	mov	r0, r2
 8005a98:	e7fb      	b.n	8005a92 <__ascii_mbtowc+0x16>
 8005a9a:	f06f 0001 	mvn.w	r0, #1
 8005a9e:	e7f8      	b.n	8005a92 <__ascii_mbtowc+0x16>

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f000 bbf1 	b.w	8006288 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	2000023c 	.word	0x2000023c

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f000 bbec 	b.w	800628a <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	2000023c 	.word	0x2000023c

08005ab8 <__sfputc_r>:
 8005ab8:	6893      	ldr	r3, [r2, #8]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	b410      	push	{r4}
 8005ac0:	6093      	str	r3, [r2, #8]
 8005ac2:	da08      	bge.n	8005ad6 <__sfputc_r+0x1e>
 8005ac4:	6994      	ldr	r4, [r2, #24]
 8005ac6:	42a3      	cmp	r3, r4
 8005ac8:	db01      	blt.n	8005ace <__sfputc_r+0x16>
 8005aca:	290a      	cmp	r1, #10
 8005acc:	d103      	bne.n	8005ad6 <__sfputc_r+0x1e>
 8005ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad2:	f000 b94b 	b.w	8005d6c <__swbuf_r>
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	1c58      	adds	r0, r3, #1
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	7019      	strb	r1, [r3, #0]
 8005ade:	4608      	mov	r0, r1
 8005ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <__sfputs_r>:
 8005ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae8:	4606      	mov	r6, r0
 8005aea:	460f      	mov	r7, r1
 8005aec:	4614      	mov	r4, r2
 8005aee:	18d5      	adds	r5, r2, r3
 8005af0:	42ac      	cmp	r4, r5
 8005af2:	d101      	bne.n	8005af8 <__sfputs_r+0x12>
 8005af4:	2000      	movs	r0, #0
 8005af6:	e007      	b.n	8005b08 <__sfputs_r+0x22>
 8005af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afc:	463a      	mov	r2, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7ff ffda 	bl	8005ab8 <__sfputc_r>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	d1f3      	bne.n	8005af0 <__sfputs_r+0xa>
 8005b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b0c <_vfiprintf_r>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	460d      	mov	r5, r1
 8005b12:	b09d      	sub	sp, #116	; 0x74
 8005b14:	4614      	mov	r4, r2
 8005b16:	4698      	mov	r8, r3
 8005b18:	4606      	mov	r6, r0
 8005b1a:	b118      	cbz	r0, 8005b24 <_vfiprintf_r+0x18>
 8005b1c:	6983      	ldr	r3, [r0, #24]
 8005b1e:	b90b      	cbnz	r3, 8005b24 <_vfiprintf_r+0x18>
 8005b20:	f000 fb14 	bl	800614c <__sinit>
 8005b24:	4b89      	ldr	r3, [pc, #548]	; (8005d4c <_vfiprintf_r+0x240>)
 8005b26:	429d      	cmp	r5, r3
 8005b28:	d11b      	bne.n	8005b62 <_vfiprintf_r+0x56>
 8005b2a:	6875      	ldr	r5, [r6, #4]
 8005b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b2e:	07d9      	lsls	r1, r3, #31
 8005b30:	d405      	bmi.n	8005b3e <_vfiprintf_r+0x32>
 8005b32:	89ab      	ldrh	r3, [r5, #12]
 8005b34:	059a      	lsls	r2, r3, #22
 8005b36:	d402      	bmi.n	8005b3e <_vfiprintf_r+0x32>
 8005b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b3a:	f000 fba5 	bl	8006288 <__retarget_lock_acquire_recursive>
 8005b3e:	89ab      	ldrh	r3, [r5, #12]
 8005b40:	071b      	lsls	r3, r3, #28
 8005b42:	d501      	bpl.n	8005b48 <_vfiprintf_r+0x3c>
 8005b44:	692b      	ldr	r3, [r5, #16]
 8005b46:	b9eb      	cbnz	r3, 8005b84 <_vfiprintf_r+0x78>
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f000 f96e 	bl	8005e2c <__swsetup_r>
 8005b50:	b1c0      	cbz	r0, 8005b84 <_vfiprintf_r+0x78>
 8005b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b54:	07dc      	lsls	r4, r3, #31
 8005b56:	d50e      	bpl.n	8005b76 <_vfiprintf_r+0x6a>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	b01d      	add	sp, #116	; 0x74
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	4b7b      	ldr	r3, [pc, #492]	; (8005d50 <_vfiprintf_r+0x244>)
 8005b64:	429d      	cmp	r5, r3
 8005b66:	d101      	bne.n	8005b6c <_vfiprintf_r+0x60>
 8005b68:	68b5      	ldr	r5, [r6, #8]
 8005b6a:	e7df      	b.n	8005b2c <_vfiprintf_r+0x20>
 8005b6c:	4b79      	ldr	r3, [pc, #484]	; (8005d54 <_vfiprintf_r+0x248>)
 8005b6e:	429d      	cmp	r5, r3
 8005b70:	bf08      	it	eq
 8005b72:	68f5      	ldreq	r5, [r6, #12]
 8005b74:	e7da      	b.n	8005b2c <_vfiprintf_r+0x20>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	0598      	lsls	r0, r3, #22
 8005b7a:	d4ed      	bmi.n	8005b58 <_vfiprintf_r+0x4c>
 8005b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b7e:	f000 fb84 	bl	800628a <__retarget_lock_release_recursive>
 8005b82:	e7e9      	b.n	8005b58 <_vfiprintf_r+0x4c>
 8005b84:	2300      	movs	r3, #0
 8005b86:	9309      	str	r3, [sp, #36]	; 0x24
 8005b88:	2320      	movs	r3, #32
 8005b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b92:	2330      	movs	r3, #48	; 0x30
 8005b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d58 <_vfiprintf_r+0x24c>
 8005b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b9c:	f04f 0901 	mov.w	r9, #1
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	469a      	mov	sl, r3
 8005ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba8:	b10a      	cbz	r2, 8005bae <_vfiprintf_r+0xa2>
 8005baa:	2a25      	cmp	r2, #37	; 0x25
 8005bac:	d1f9      	bne.n	8005ba2 <_vfiprintf_r+0x96>
 8005bae:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb2:	d00b      	beq.n	8005bcc <_vfiprintf_r+0xc0>
 8005bb4:	465b      	mov	r3, fp
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7ff ff93 	bl	8005ae6 <__sfputs_r>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f000 80aa 	beq.w	8005d1a <_vfiprintf_r+0x20e>
 8005bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc8:	445a      	add	r2, fp
 8005bca:	9209      	str	r2, [sp, #36]	; 0x24
 8005bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80a2 	beq.w	8005d1a <_vfiprintf_r+0x20e>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be0:	f10a 0a01 	add.w	sl, sl, #1
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	9307      	str	r3, [sp, #28]
 8005be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bec:	931a      	str	r3, [sp, #104]	; 0x68
 8005bee:	4654      	mov	r4, sl
 8005bf0:	2205      	movs	r2, #5
 8005bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf6:	4858      	ldr	r0, [pc, #352]	; (8005d58 <_vfiprintf_r+0x24c>)
 8005bf8:	f7fa fafa 	bl	80001f0 <memchr>
 8005bfc:	9a04      	ldr	r2, [sp, #16]
 8005bfe:	b9d8      	cbnz	r0, 8005c38 <_vfiprintf_r+0x12c>
 8005c00:	06d1      	lsls	r1, r2, #27
 8005c02:	bf44      	itt	mi
 8005c04:	2320      	movmi	r3, #32
 8005c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c0a:	0713      	lsls	r3, r2, #28
 8005c0c:	bf44      	itt	mi
 8005c0e:	232b      	movmi	r3, #43	; 0x2b
 8005c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c14:	f89a 3000 	ldrb.w	r3, [sl]
 8005c18:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1a:	d015      	beq.n	8005c48 <_vfiprintf_r+0x13c>
 8005c1c:	9a07      	ldr	r2, [sp, #28]
 8005c1e:	4654      	mov	r4, sl
 8005c20:	2000      	movs	r0, #0
 8005c22:	f04f 0c0a 	mov.w	ip, #10
 8005c26:	4621      	mov	r1, r4
 8005c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c2c:	3b30      	subs	r3, #48	; 0x30
 8005c2e:	2b09      	cmp	r3, #9
 8005c30:	d94e      	bls.n	8005cd0 <_vfiprintf_r+0x1c4>
 8005c32:	b1b0      	cbz	r0, 8005c62 <_vfiprintf_r+0x156>
 8005c34:	9207      	str	r2, [sp, #28]
 8005c36:	e014      	b.n	8005c62 <_vfiprintf_r+0x156>
 8005c38:	eba0 0308 	sub.w	r3, r0, r8
 8005c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c40:	4313      	orrs	r3, r2
 8005c42:	9304      	str	r3, [sp, #16]
 8005c44:	46a2      	mov	sl, r4
 8005c46:	e7d2      	b.n	8005bee <_vfiprintf_r+0xe2>
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	1d19      	adds	r1, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	9103      	str	r1, [sp, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bfbb      	ittet	lt
 8005c54:	425b      	neglt	r3, r3
 8005c56:	f042 0202 	orrlt.w	r2, r2, #2
 8005c5a:	9307      	strge	r3, [sp, #28]
 8005c5c:	9307      	strlt	r3, [sp, #28]
 8005c5e:	bfb8      	it	lt
 8005c60:	9204      	strlt	r2, [sp, #16]
 8005c62:	7823      	ldrb	r3, [r4, #0]
 8005c64:	2b2e      	cmp	r3, #46	; 0x2e
 8005c66:	d10c      	bne.n	8005c82 <_vfiprintf_r+0x176>
 8005c68:	7863      	ldrb	r3, [r4, #1]
 8005c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6c:	d135      	bne.n	8005cda <_vfiprintf_r+0x1ce>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	1d1a      	adds	r2, r3, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	9203      	str	r2, [sp, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bfb8      	it	lt
 8005c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c7e:	3402      	adds	r4, #2
 8005c80:	9305      	str	r3, [sp, #20]
 8005c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d68 <_vfiprintf_r+0x25c>
 8005c86:	7821      	ldrb	r1, [r4, #0]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	f7fa fab0 	bl	80001f0 <memchr>
 8005c90:	b140      	cbz	r0, 8005ca4 <_vfiprintf_r+0x198>
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	eba0 000a 	sub.w	r0, r0, sl
 8005c98:	fa03 f000 	lsl.w	r0, r3, r0
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	4303      	orrs	r3, r0
 8005ca0:	3401      	adds	r4, #1
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca8:	482c      	ldr	r0, [pc, #176]	; (8005d5c <_vfiprintf_r+0x250>)
 8005caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cae:	2206      	movs	r2, #6
 8005cb0:	f7fa fa9e 	bl	80001f0 <memchr>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d03f      	beq.n	8005d38 <_vfiprintf_r+0x22c>
 8005cb8:	4b29      	ldr	r3, [pc, #164]	; (8005d60 <_vfiprintf_r+0x254>)
 8005cba:	bb1b      	cbnz	r3, 8005d04 <_vfiprintf_r+0x1f8>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	3307      	adds	r3, #7
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cca:	443b      	add	r3, r7
 8005ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cce:	e767      	b.n	8005ba0 <_vfiprintf_r+0x94>
 8005cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	e7a5      	b.n	8005c26 <_vfiprintf_r+0x11a>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	3401      	adds	r4, #1
 8005cde:	9305      	str	r3, [sp, #20]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f04f 0c0a 	mov.w	ip, #10
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cec:	3a30      	subs	r2, #48	; 0x30
 8005cee:	2a09      	cmp	r2, #9
 8005cf0:	d903      	bls.n	8005cfa <_vfiprintf_r+0x1ee>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0c5      	beq.n	8005c82 <_vfiprintf_r+0x176>
 8005cf6:	9105      	str	r1, [sp, #20]
 8005cf8:	e7c3      	b.n	8005c82 <_vfiprintf_r+0x176>
 8005cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cfe:	4604      	mov	r4, r0
 8005d00:	2301      	movs	r3, #1
 8005d02:	e7f0      	b.n	8005ce6 <_vfiprintf_r+0x1da>
 8005d04:	ab03      	add	r3, sp, #12
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	462a      	mov	r2, r5
 8005d0a:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <_vfiprintf_r+0x258>)
 8005d0c:	a904      	add	r1, sp, #16
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f7fd ff9c 	bl	8003c4c <_printf_float>
 8005d14:	4607      	mov	r7, r0
 8005d16:	1c78      	adds	r0, r7, #1
 8005d18:	d1d6      	bne.n	8005cc8 <_vfiprintf_r+0x1bc>
 8005d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d1c:	07d9      	lsls	r1, r3, #31
 8005d1e:	d405      	bmi.n	8005d2c <_vfiprintf_r+0x220>
 8005d20:	89ab      	ldrh	r3, [r5, #12]
 8005d22:	059a      	lsls	r2, r3, #22
 8005d24:	d402      	bmi.n	8005d2c <_vfiprintf_r+0x220>
 8005d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d28:	f000 faaf 	bl	800628a <__retarget_lock_release_recursive>
 8005d2c:	89ab      	ldrh	r3, [r5, #12]
 8005d2e:	065b      	lsls	r3, r3, #25
 8005d30:	f53f af12 	bmi.w	8005b58 <_vfiprintf_r+0x4c>
 8005d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d36:	e711      	b.n	8005b5c <_vfiprintf_r+0x50>
 8005d38:	ab03      	add	r3, sp, #12
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <_vfiprintf_r+0x258>)
 8005d40:	a904      	add	r1, sp, #16
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7fe fa26 	bl	8004194 <_printf_i>
 8005d48:	e7e4      	b.n	8005d14 <_vfiprintf_r+0x208>
 8005d4a:	bf00      	nop
 8005d4c:	0800800c 	.word	0x0800800c
 8005d50:	0800802c 	.word	0x0800802c
 8005d54:	08007fec 	.word	0x08007fec
 8005d58:	08007eda 	.word	0x08007eda
 8005d5c:	08007ee4 	.word	0x08007ee4
 8005d60:	08003c4d 	.word	0x08003c4d
 8005d64:	08005ae7 	.word	0x08005ae7
 8005d68:	08007ee0 	.word	0x08007ee0

08005d6c <__swbuf_r>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	460e      	mov	r6, r1
 8005d70:	4614      	mov	r4, r2
 8005d72:	4605      	mov	r5, r0
 8005d74:	b118      	cbz	r0, 8005d7e <__swbuf_r+0x12>
 8005d76:	6983      	ldr	r3, [r0, #24]
 8005d78:	b90b      	cbnz	r3, 8005d7e <__swbuf_r+0x12>
 8005d7a:	f000 f9e7 	bl	800614c <__sinit>
 8005d7e:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <__swbuf_r+0x98>)
 8005d80:	429c      	cmp	r4, r3
 8005d82:	d12b      	bne.n	8005ddc <__swbuf_r+0x70>
 8005d84:	686c      	ldr	r4, [r5, #4]
 8005d86:	69a3      	ldr	r3, [r4, #24]
 8005d88:	60a3      	str	r3, [r4, #8]
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	071a      	lsls	r2, r3, #28
 8005d8e:	d52f      	bpl.n	8005df0 <__swbuf_r+0x84>
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	b36b      	cbz	r3, 8005df0 <__swbuf_r+0x84>
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	1ac0      	subs	r0, r0, r3
 8005d9a:	6963      	ldr	r3, [r4, #20]
 8005d9c:	b2f6      	uxtb	r6, r6
 8005d9e:	4283      	cmp	r3, r0
 8005da0:	4637      	mov	r7, r6
 8005da2:	dc04      	bgt.n	8005dae <__swbuf_r+0x42>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 f93c 	bl	8006024 <_fflush_r>
 8005dac:	bb30      	cbnz	r0, 8005dfc <__swbuf_r+0x90>
 8005dae:	68a3      	ldr	r3, [r4, #8]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	60a3      	str	r3, [r4, #8]
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	6022      	str	r2, [r4, #0]
 8005dba:	701e      	strb	r6, [r3, #0]
 8005dbc:	6963      	ldr	r3, [r4, #20]
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	4283      	cmp	r3, r0
 8005dc2:	d004      	beq.n	8005dce <__swbuf_r+0x62>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	07db      	lsls	r3, r3, #31
 8005dc8:	d506      	bpl.n	8005dd8 <__swbuf_r+0x6c>
 8005dca:	2e0a      	cmp	r6, #10
 8005dcc:	d104      	bne.n	8005dd8 <__swbuf_r+0x6c>
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 f927 	bl	8006024 <_fflush_r>
 8005dd6:	b988      	cbnz	r0, 8005dfc <__swbuf_r+0x90>
 8005dd8:	4638      	mov	r0, r7
 8005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <__swbuf_r+0x9c>)
 8005dde:	429c      	cmp	r4, r3
 8005de0:	d101      	bne.n	8005de6 <__swbuf_r+0x7a>
 8005de2:	68ac      	ldr	r4, [r5, #8]
 8005de4:	e7cf      	b.n	8005d86 <__swbuf_r+0x1a>
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <__swbuf_r+0xa0>)
 8005de8:	429c      	cmp	r4, r3
 8005dea:	bf08      	it	eq
 8005dec:	68ec      	ldreq	r4, [r5, #12]
 8005dee:	e7ca      	b.n	8005d86 <__swbuf_r+0x1a>
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f81a 	bl	8005e2c <__swsetup_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d0cb      	beq.n	8005d94 <__swbuf_r+0x28>
 8005dfc:	f04f 37ff 	mov.w	r7, #4294967295
 8005e00:	e7ea      	b.n	8005dd8 <__swbuf_r+0x6c>
 8005e02:	bf00      	nop
 8005e04:	0800800c 	.word	0x0800800c
 8005e08:	0800802c 	.word	0x0800802c
 8005e0c:	08007fec 	.word	0x08007fec

08005e10 <__ascii_wctomb>:
 8005e10:	b149      	cbz	r1, 8005e26 <__ascii_wctomb+0x16>
 8005e12:	2aff      	cmp	r2, #255	; 0xff
 8005e14:	bf85      	ittet	hi
 8005e16:	238a      	movhi	r3, #138	; 0x8a
 8005e18:	6003      	strhi	r3, [r0, #0]
 8005e1a:	700a      	strbls	r2, [r1, #0]
 8005e1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e20:	bf98      	it	ls
 8005e22:	2001      	movls	r0, #1
 8005e24:	4770      	bx	lr
 8005e26:	4608      	mov	r0, r1
 8005e28:	4770      	bx	lr
	...

08005e2c <__swsetup_r>:
 8005e2c:	4b32      	ldr	r3, [pc, #200]	; (8005ef8 <__swsetup_r+0xcc>)
 8005e2e:	b570      	push	{r4, r5, r6, lr}
 8005e30:	681d      	ldr	r5, [r3, #0]
 8005e32:	4606      	mov	r6, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	b125      	cbz	r5, 8005e42 <__swsetup_r+0x16>
 8005e38:	69ab      	ldr	r3, [r5, #24]
 8005e3a:	b913      	cbnz	r3, 8005e42 <__swsetup_r+0x16>
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f000 f985 	bl	800614c <__sinit>
 8005e42:	4b2e      	ldr	r3, [pc, #184]	; (8005efc <__swsetup_r+0xd0>)
 8005e44:	429c      	cmp	r4, r3
 8005e46:	d10f      	bne.n	8005e68 <__swsetup_r+0x3c>
 8005e48:	686c      	ldr	r4, [r5, #4]
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e50:	0719      	lsls	r1, r3, #28
 8005e52:	d42c      	bmi.n	8005eae <__swsetup_r+0x82>
 8005e54:	06dd      	lsls	r5, r3, #27
 8005e56:	d411      	bmi.n	8005e7c <__swsetup_r+0x50>
 8005e58:	2309      	movs	r3, #9
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	f04f 30ff 	mov.w	r0, #4294967295
 8005e66:	e03e      	b.n	8005ee6 <__swsetup_r+0xba>
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <__swsetup_r+0xd4>)
 8005e6a:	429c      	cmp	r4, r3
 8005e6c:	d101      	bne.n	8005e72 <__swsetup_r+0x46>
 8005e6e:	68ac      	ldr	r4, [r5, #8]
 8005e70:	e7eb      	b.n	8005e4a <__swsetup_r+0x1e>
 8005e72:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <__swsetup_r+0xd8>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	bf08      	it	eq
 8005e78:	68ec      	ldreq	r4, [r5, #12]
 8005e7a:	e7e6      	b.n	8005e4a <__swsetup_r+0x1e>
 8005e7c:	0758      	lsls	r0, r3, #29
 8005e7e:	d512      	bpl.n	8005ea6 <__swsetup_r+0x7a>
 8005e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e82:	b141      	cbz	r1, 8005e96 <__swsetup_r+0x6a>
 8005e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e88:	4299      	cmp	r1, r3
 8005e8a:	d002      	beq.n	8005e92 <__swsetup_r+0x66>
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f7ff fcd5 	bl	800583c <_free_r>
 8005e92:	2300      	movs	r3, #0
 8005e94:	6363      	str	r3, [r4, #52]	; 0x34
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e9c:	81a3      	strh	r3, [r4, #12]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6063      	str	r3, [r4, #4]
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	f043 0308 	orr.w	r3, r3, #8
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	b94b      	cbnz	r3, 8005ec6 <__swsetup_r+0x9a>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ebc:	d003      	beq.n	8005ec6 <__swsetup_r+0x9a>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f000 fa09 	bl	80062d8 <__smakebuf_r>
 8005ec6:	89a0      	ldrh	r0, [r4, #12]
 8005ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ecc:	f010 0301 	ands.w	r3, r0, #1
 8005ed0:	d00a      	beq.n	8005ee8 <__swsetup_r+0xbc>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60a3      	str	r3, [r4, #8]
 8005ed6:	6963      	ldr	r3, [r4, #20]
 8005ed8:	425b      	negs	r3, r3
 8005eda:	61a3      	str	r3, [r4, #24]
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	b943      	cbnz	r3, 8005ef2 <__swsetup_r+0xc6>
 8005ee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ee4:	d1ba      	bne.n	8005e5c <__swsetup_r+0x30>
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	0781      	lsls	r1, r0, #30
 8005eea:	bf58      	it	pl
 8005eec:	6963      	ldrpl	r3, [r4, #20]
 8005eee:	60a3      	str	r3, [r4, #8]
 8005ef0:	e7f4      	b.n	8005edc <__swsetup_r+0xb0>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e7f7      	b.n	8005ee6 <__swsetup_r+0xba>
 8005ef6:	bf00      	nop
 8005ef8:	20000010 	.word	0x20000010
 8005efc:	0800800c 	.word	0x0800800c
 8005f00:	0800802c 	.word	0x0800802c
 8005f04:	08007fec 	.word	0x08007fec

08005f08 <abort>:
 8005f08:	b508      	push	{r3, lr}
 8005f0a:	2006      	movs	r0, #6
 8005f0c:	f000 fa4c 	bl	80063a8 <raise>
 8005f10:	2001      	movs	r0, #1
 8005f12:	f001 fbfd 	bl	8007710 <_exit>
	...

08005f18 <__sflush_r>:
 8005f18:	898a      	ldrh	r2, [r1, #12]
 8005f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	4605      	mov	r5, r0
 8005f20:	0710      	lsls	r0, r2, #28
 8005f22:	460c      	mov	r4, r1
 8005f24:	d458      	bmi.n	8005fd8 <__sflush_r+0xc0>
 8005f26:	684b      	ldr	r3, [r1, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc05      	bgt.n	8005f38 <__sflush_r+0x20>
 8005f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dc02      	bgt.n	8005f38 <__sflush_r+0x20>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	d0f9      	beq.n	8005f32 <__sflush_r+0x1a>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f44:	682f      	ldr	r7, [r5, #0]
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	d032      	beq.n	8005fb0 <__sflush_r+0x98>
 8005f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	075a      	lsls	r2, r3, #29
 8005f50:	d505      	bpl.n	8005f5e <__sflush_r+0x46>
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	1ac0      	subs	r0, r0, r3
 8005f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f58:	b10b      	cbz	r3, 8005f5e <__sflush_r+0x46>
 8005f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f5c:	1ac0      	subs	r0, r0, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	4602      	mov	r2, r0
 8005f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f64:	6a21      	ldr	r1, [r4, #32]
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b0      	blx	r6
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	d106      	bne.n	8005f7e <__sflush_r+0x66>
 8005f70:	6829      	ldr	r1, [r5, #0]
 8005f72:	291d      	cmp	r1, #29
 8005f74:	d82c      	bhi.n	8005fd0 <__sflush_r+0xb8>
 8005f76:	4a2a      	ldr	r2, [pc, #168]	; (8006020 <__sflush_r+0x108>)
 8005f78:	40ca      	lsrs	r2, r1
 8005f7a:	07d6      	lsls	r6, r2, #31
 8005f7c:	d528      	bpl.n	8005fd0 <__sflush_r+0xb8>
 8005f7e:	2200      	movs	r2, #0
 8005f80:	6062      	str	r2, [r4, #4]
 8005f82:	04d9      	lsls	r1, r3, #19
 8005f84:	6922      	ldr	r2, [r4, #16]
 8005f86:	6022      	str	r2, [r4, #0]
 8005f88:	d504      	bpl.n	8005f94 <__sflush_r+0x7c>
 8005f8a:	1c42      	adds	r2, r0, #1
 8005f8c:	d101      	bne.n	8005f92 <__sflush_r+0x7a>
 8005f8e:	682b      	ldr	r3, [r5, #0]
 8005f90:	b903      	cbnz	r3, 8005f94 <__sflush_r+0x7c>
 8005f92:	6560      	str	r0, [r4, #84]	; 0x54
 8005f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f96:	602f      	str	r7, [r5, #0]
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d0ca      	beq.n	8005f32 <__sflush_r+0x1a>
 8005f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	d002      	beq.n	8005faa <__sflush_r+0x92>
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f7ff fc49 	bl	800583c <_free_r>
 8005faa:	2000      	movs	r0, #0
 8005fac:	6360      	str	r0, [r4, #52]	; 0x34
 8005fae:	e7c1      	b.n	8005f34 <__sflush_r+0x1c>
 8005fb0:	6a21      	ldr	r1, [r4, #32]
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b0      	blx	r6
 8005fb8:	1c41      	adds	r1, r0, #1
 8005fba:	d1c7      	bne.n	8005f4c <__sflush_r+0x34>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0c4      	beq.n	8005f4c <__sflush_r+0x34>
 8005fc2:	2b1d      	cmp	r3, #29
 8005fc4:	d001      	beq.n	8005fca <__sflush_r+0xb2>
 8005fc6:	2b16      	cmp	r3, #22
 8005fc8:	d101      	bne.n	8005fce <__sflush_r+0xb6>
 8005fca:	602f      	str	r7, [r5, #0]
 8005fcc:	e7b1      	b.n	8005f32 <__sflush_r+0x1a>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	e7ad      	b.n	8005f34 <__sflush_r+0x1c>
 8005fd8:	690f      	ldr	r7, [r1, #16]
 8005fda:	2f00      	cmp	r7, #0
 8005fdc:	d0a9      	beq.n	8005f32 <__sflush_r+0x1a>
 8005fde:	0793      	lsls	r3, r2, #30
 8005fe0:	680e      	ldr	r6, [r1, #0]
 8005fe2:	bf08      	it	eq
 8005fe4:	694b      	ldreq	r3, [r1, #20]
 8005fe6:	600f      	str	r7, [r1, #0]
 8005fe8:	bf18      	it	ne
 8005fea:	2300      	movne	r3, #0
 8005fec:	eba6 0807 	sub.w	r8, r6, r7
 8005ff0:	608b      	str	r3, [r1, #8]
 8005ff2:	f1b8 0f00 	cmp.w	r8, #0
 8005ff6:	dd9c      	ble.n	8005f32 <__sflush_r+0x1a>
 8005ff8:	6a21      	ldr	r1, [r4, #32]
 8005ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ffc:	4643      	mov	r3, r8
 8005ffe:	463a      	mov	r2, r7
 8006000:	4628      	mov	r0, r5
 8006002:	47b0      	blx	r6
 8006004:	2800      	cmp	r0, #0
 8006006:	dc06      	bgt.n	8006016 <__sflush_r+0xfe>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	e78e      	b.n	8005f34 <__sflush_r+0x1c>
 8006016:	4407      	add	r7, r0
 8006018:	eba8 0800 	sub.w	r8, r8, r0
 800601c:	e7e9      	b.n	8005ff2 <__sflush_r+0xda>
 800601e:	bf00      	nop
 8006020:	20400001 	.word	0x20400001

08006024 <_fflush_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	690b      	ldr	r3, [r1, #16]
 8006028:	4605      	mov	r5, r0
 800602a:	460c      	mov	r4, r1
 800602c:	b913      	cbnz	r3, 8006034 <_fflush_r+0x10>
 800602e:	2500      	movs	r5, #0
 8006030:	4628      	mov	r0, r5
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	b118      	cbz	r0, 800603e <_fflush_r+0x1a>
 8006036:	6983      	ldr	r3, [r0, #24]
 8006038:	b90b      	cbnz	r3, 800603e <_fflush_r+0x1a>
 800603a:	f000 f887 	bl	800614c <__sinit>
 800603e:	4b14      	ldr	r3, [pc, #80]	; (8006090 <_fflush_r+0x6c>)
 8006040:	429c      	cmp	r4, r3
 8006042:	d11b      	bne.n	800607c <_fflush_r+0x58>
 8006044:	686c      	ldr	r4, [r5, #4]
 8006046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0ef      	beq.n	800602e <_fflush_r+0xa>
 800604e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006050:	07d0      	lsls	r0, r2, #31
 8006052:	d404      	bmi.n	800605e <_fflush_r+0x3a>
 8006054:	0599      	lsls	r1, r3, #22
 8006056:	d402      	bmi.n	800605e <_fflush_r+0x3a>
 8006058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800605a:	f000 f915 	bl	8006288 <__retarget_lock_acquire_recursive>
 800605e:	4628      	mov	r0, r5
 8006060:	4621      	mov	r1, r4
 8006062:	f7ff ff59 	bl	8005f18 <__sflush_r>
 8006066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006068:	07da      	lsls	r2, r3, #31
 800606a:	4605      	mov	r5, r0
 800606c:	d4e0      	bmi.n	8006030 <_fflush_r+0xc>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	059b      	lsls	r3, r3, #22
 8006072:	d4dd      	bmi.n	8006030 <_fflush_r+0xc>
 8006074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006076:	f000 f908 	bl	800628a <__retarget_lock_release_recursive>
 800607a:	e7d9      	b.n	8006030 <_fflush_r+0xc>
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <_fflush_r+0x70>)
 800607e:	429c      	cmp	r4, r3
 8006080:	d101      	bne.n	8006086 <_fflush_r+0x62>
 8006082:	68ac      	ldr	r4, [r5, #8]
 8006084:	e7df      	b.n	8006046 <_fflush_r+0x22>
 8006086:	4b04      	ldr	r3, [pc, #16]	; (8006098 <_fflush_r+0x74>)
 8006088:	429c      	cmp	r4, r3
 800608a:	bf08      	it	eq
 800608c:	68ec      	ldreq	r4, [r5, #12]
 800608e:	e7da      	b.n	8006046 <_fflush_r+0x22>
 8006090:	0800800c 	.word	0x0800800c
 8006094:	0800802c 	.word	0x0800802c
 8006098:	08007fec 	.word	0x08007fec

0800609c <std>:
 800609c:	2300      	movs	r3, #0
 800609e:	b510      	push	{r4, lr}
 80060a0:	4604      	mov	r4, r0
 80060a2:	e9c0 3300 	strd	r3, r3, [r0]
 80060a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060aa:	6083      	str	r3, [r0, #8]
 80060ac:	8181      	strh	r1, [r0, #12]
 80060ae:	6643      	str	r3, [r0, #100]	; 0x64
 80060b0:	81c2      	strh	r2, [r0, #14]
 80060b2:	6183      	str	r3, [r0, #24]
 80060b4:	4619      	mov	r1, r3
 80060b6:	2208      	movs	r2, #8
 80060b8:	305c      	adds	r0, #92	; 0x5c
 80060ba:	f7fd fd1f 	bl	8003afc <memset>
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <std+0x38>)
 80060c0:	6263      	str	r3, [r4, #36]	; 0x24
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <std+0x3c>)
 80060c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80060c6:	4b05      	ldr	r3, [pc, #20]	; (80060dc <std+0x40>)
 80060c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <std+0x44>)
 80060cc:	6224      	str	r4, [r4, #32]
 80060ce:	6323      	str	r3, [r4, #48]	; 0x30
 80060d0:	bd10      	pop	{r4, pc}
 80060d2:	bf00      	nop
 80060d4:	080063e1 	.word	0x080063e1
 80060d8:	08006403 	.word	0x08006403
 80060dc:	0800643b 	.word	0x0800643b
 80060e0:	0800645f 	.word	0x0800645f

080060e4 <_cleanup_r>:
 80060e4:	4901      	ldr	r1, [pc, #4]	; (80060ec <_cleanup_r+0x8>)
 80060e6:	f000 b8af 	b.w	8006248 <_fwalk_reent>
 80060ea:	bf00      	nop
 80060ec:	08006025 	.word	0x08006025

080060f0 <__sfmoreglue>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	2268      	movs	r2, #104	; 0x68
 80060f4:	1e4d      	subs	r5, r1, #1
 80060f6:	4355      	muls	r5, r2
 80060f8:	460e      	mov	r6, r1
 80060fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060fe:	f7ff fc09 	bl	8005914 <_malloc_r>
 8006102:	4604      	mov	r4, r0
 8006104:	b140      	cbz	r0, 8006118 <__sfmoreglue+0x28>
 8006106:	2100      	movs	r1, #0
 8006108:	e9c0 1600 	strd	r1, r6, [r0]
 800610c:	300c      	adds	r0, #12
 800610e:	60a0      	str	r0, [r4, #8]
 8006110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006114:	f7fd fcf2 	bl	8003afc <memset>
 8006118:	4620      	mov	r0, r4
 800611a:	bd70      	pop	{r4, r5, r6, pc}

0800611c <__sfp_lock_acquire>:
 800611c:	4801      	ldr	r0, [pc, #4]	; (8006124 <__sfp_lock_acquire+0x8>)
 800611e:	f000 b8b3 	b.w	8006288 <__retarget_lock_acquire_recursive>
 8006122:	bf00      	nop
 8006124:	2000023d 	.word	0x2000023d

08006128 <__sfp_lock_release>:
 8006128:	4801      	ldr	r0, [pc, #4]	; (8006130 <__sfp_lock_release+0x8>)
 800612a:	f000 b8ae 	b.w	800628a <__retarget_lock_release_recursive>
 800612e:	bf00      	nop
 8006130:	2000023d 	.word	0x2000023d

08006134 <__sinit_lock_acquire>:
 8006134:	4801      	ldr	r0, [pc, #4]	; (800613c <__sinit_lock_acquire+0x8>)
 8006136:	f000 b8a7 	b.w	8006288 <__retarget_lock_acquire_recursive>
 800613a:	bf00      	nop
 800613c:	2000023e 	.word	0x2000023e

08006140 <__sinit_lock_release>:
 8006140:	4801      	ldr	r0, [pc, #4]	; (8006148 <__sinit_lock_release+0x8>)
 8006142:	f000 b8a2 	b.w	800628a <__retarget_lock_release_recursive>
 8006146:	bf00      	nop
 8006148:	2000023e 	.word	0x2000023e

0800614c <__sinit>:
 800614c:	b510      	push	{r4, lr}
 800614e:	4604      	mov	r4, r0
 8006150:	f7ff fff0 	bl	8006134 <__sinit_lock_acquire>
 8006154:	69a3      	ldr	r3, [r4, #24]
 8006156:	b11b      	cbz	r3, 8006160 <__sinit+0x14>
 8006158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615c:	f7ff bff0 	b.w	8006140 <__sinit_lock_release>
 8006160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006164:	6523      	str	r3, [r4, #80]	; 0x50
 8006166:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <__sinit+0x68>)
 8006168:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <__sinit+0x6c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	62a2      	str	r2, [r4, #40]	; 0x28
 800616e:	42a3      	cmp	r3, r4
 8006170:	bf04      	itt	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	61a3      	streq	r3, [r4, #24]
 8006176:	4620      	mov	r0, r4
 8006178:	f000 f820 	bl	80061bc <__sfp>
 800617c:	6060      	str	r0, [r4, #4]
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f81c 	bl	80061bc <__sfp>
 8006184:	60a0      	str	r0, [r4, #8]
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f818 	bl	80061bc <__sfp>
 800618c:	2200      	movs	r2, #0
 800618e:	60e0      	str	r0, [r4, #12]
 8006190:	2104      	movs	r1, #4
 8006192:	6860      	ldr	r0, [r4, #4]
 8006194:	f7ff ff82 	bl	800609c <std>
 8006198:	68a0      	ldr	r0, [r4, #8]
 800619a:	2201      	movs	r2, #1
 800619c:	2109      	movs	r1, #9
 800619e:	f7ff ff7d 	bl	800609c <std>
 80061a2:	68e0      	ldr	r0, [r4, #12]
 80061a4:	2202      	movs	r2, #2
 80061a6:	2112      	movs	r1, #18
 80061a8:	f7ff ff78 	bl	800609c <std>
 80061ac:	2301      	movs	r3, #1
 80061ae:	61a3      	str	r3, [r4, #24]
 80061b0:	e7d2      	b.n	8006158 <__sinit+0xc>
 80061b2:	bf00      	nop
 80061b4:	08007c70 	.word	0x08007c70
 80061b8:	080060e5 	.word	0x080060e5

080061bc <__sfp>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	4607      	mov	r7, r0
 80061c0:	f7ff ffac 	bl	800611c <__sfp_lock_acquire>
 80061c4:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <__sfp+0x84>)
 80061c6:	681e      	ldr	r6, [r3, #0]
 80061c8:	69b3      	ldr	r3, [r6, #24]
 80061ca:	b913      	cbnz	r3, 80061d2 <__sfp+0x16>
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff ffbd 	bl	800614c <__sinit>
 80061d2:	3648      	adds	r6, #72	; 0x48
 80061d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061d8:	3b01      	subs	r3, #1
 80061da:	d503      	bpl.n	80061e4 <__sfp+0x28>
 80061dc:	6833      	ldr	r3, [r6, #0]
 80061de:	b30b      	cbz	r3, 8006224 <__sfp+0x68>
 80061e0:	6836      	ldr	r6, [r6, #0]
 80061e2:	e7f7      	b.n	80061d4 <__sfp+0x18>
 80061e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061e8:	b9d5      	cbnz	r5, 8006220 <__sfp+0x64>
 80061ea:	4b16      	ldr	r3, [pc, #88]	; (8006244 <__sfp+0x88>)
 80061ec:	60e3      	str	r3, [r4, #12]
 80061ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061f2:	6665      	str	r5, [r4, #100]	; 0x64
 80061f4:	f000 f847 	bl	8006286 <__retarget_lock_init_recursive>
 80061f8:	f7ff ff96 	bl	8006128 <__sfp_lock_release>
 80061fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006204:	6025      	str	r5, [r4, #0]
 8006206:	61a5      	str	r5, [r4, #24]
 8006208:	2208      	movs	r2, #8
 800620a:	4629      	mov	r1, r5
 800620c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006210:	f7fd fc74 	bl	8003afc <memset>
 8006214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800621c:	4620      	mov	r0, r4
 800621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006220:	3468      	adds	r4, #104	; 0x68
 8006222:	e7d9      	b.n	80061d8 <__sfp+0x1c>
 8006224:	2104      	movs	r1, #4
 8006226:	4638      	mov	r0, r7
 8006228:	f7ff ff62 	bl	80060f0 <__sfmoreglue>
 800622c:	4604      	mov	r4, r0
 800622e:	6030      	str	r0, [r6, #0]
 8006230:	2800      	cmp	r0, #0
 8006232:	d1d5      	bne.n	80061e0 <__sfp+0x24>
 8006234:	f7ff ff78 	bl	8006128 <__sfp_lock_release>
 8006238:	230c      	movs	r3, #12
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	e7ee      	b.n	800621c <__sfp+0x60>
 800623e:	bf00      	nop
 8006240:	08007c70 	.word	0x08007c70
 8006244:	ffff0001 	.word	0xffff0001

08006248 <_fwalk_reent>:
 8006248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800624c:	4606      	mov	r6, r0
 800624e:	4688      	mov	r8, r1
 8006250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006254:	2700      	movs	r7, #0
 8006256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800625a:	f1b9 0901 	subs.w	r9, r9, #1
 800625e:	d505      	bpl.n	800626c <_fwalk_reent+0x24>
 8006260:	6824      	ldr	r4, [r4, #0]
 8006262:	2c00      	cmp	r4, #0
 8006264:	d1f7      	bne.n	8006256 <_fwalk_reent+0xe>
 8006266:	4638      	mov	r0, r7
 8006268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626c:	89ab      	ldrh	r3, [r5, #12]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d907      	bls.n	8006282 <_fwalk_reent+0x3a>
 8006272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006276:	3301      	adds	r3, #1
 8006278:	d003      	beq.n	8006282 <_fwalk_reent+0x3a>
 800627a:	4629      	mov	r1, r5
 800627c:	4630      	mov	r0, r6
 800627e:	47c0      	blx	r8
 8006280:	4307      	orrs	r7, r0
 8006282:	3568      	adds	r5, #104	; 0x68
 8006284:	e7e9      	b.n	800625a <_fwalk_reent+0x12>

08006286 <__retarget_lock_init_recursive>:
 8006286:	4770      	bx	lr

08006288 <__retarget_lock_acquire_recursive>:
 8006288:	4770      	bx	lr

0800628a <__retarget_lock_release_recursive>:
 800628a:	4770      	bx	lr

0800628c <__swhatbuf_r>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	460e      	mov	r6, r1
 8006290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006294:	2900      	cmp	r1, #0
 8006296:	b096      	sub	sp, #88	; 0x58
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	da08      	bge.n	80062b0 <__swhatbuf_r+0x24>
 800629e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	602a      	str	r2, [r5, #0]
 80062a6:	061a      	lsls	r2, r3, #24
 80062a8:	d410      	bmi.n	80062cc <__swhatbuf_r+0x40>
 80062aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ae:	e00e      	b.n	80062ce <__swhatbuf_r+0x42>
 80062b0:	466a      	mov	r2, sp
 80062b2:	f000 f8fb 	bl	80064ac <_fstat_r>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	dbf1      	blt.n	800629e <__swhatbuf_r+0x12>
 80062ba:	9a01      	ldr	r2, [sp, #4]
 80062bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062c4:	425a      	negs	r2, r3
 80062c6:	415a      	adcs	r2, r3
 80062c8:	602a      	str	r2, [r5, #0]
 80062ca:	e7ee      	b.n	80062aa <__swhatbuf_r+0x1e>
 80062cc:	2340      	movs	r3, #64	; 0x40
 80062ce:	2000      	movs	r0, #0
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	b016      	add	sp, #88	; 0x58
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080062d8 <__smakebuf_r>:
 80062d8:	898b      	ldrh	r3, [r1, #12]
 80062da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062dc:	079d      	lsls	r5, r3, #30
 80062de:	4606      	mov	r6, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	d507      	bpl.n	80062f4 <__smakebuf_r+0x1c>
 80062e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	2301      	movs	r3, #1
 80062ee:	6163      	str	r3, [r4, #20]
 80062f0:	b002      	add	sp, #8
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	ab01      	add	r3, sp, #4
 80062f6:	466a      	mov	r2, sp
 80062f8:	f7ff ffc8 	bl	800628c <__swhatbuf_r>
 80062fc:	9900      	ldr	r1, [sp, #0]
 80062fe:	4605      	mov	r5, r0
 8006300:	4630      	mov	r0, r6
 8006302:	f7ff fb07 	bl	8005914 <_malloc_r>
 8006306:	b948      	cbnz	r0, 800631c <__smakebuf_r+0x44>
 8006308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630c:	059a      	lsls	r2, r3, #22
 800630e:	d4ef      	bmi.n	80062f0 <__smakebuf_r+0x18>
 8006310:	f023 0303 	bic.w	r3, r3, #3
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	e7e3      	b.n	80062e4 <__smakebuf_r+0xc>
 800631c:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <__smakebuf_r+0x7c>)
 800631e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	6020      	str	r0, [r4, #0]
 8006324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006328:	81a3      	strh	r3, [r4, #12]
 800632a:	9b00      	ldr	r3, [sp, #0]
 800632c:	6163      	str	r3, [r4, #20]
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	6120      	str	r0, [r4, #16]
 8006332:	b15b      	cbz	r3, 800634c <__smakebuf_r+0x74>
 8006334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006338:	4630      	mov	r0, r6
 800633a:	f000 f8c9 	bl	80064d0 <_isatty_r>
 800633e:	b128      	cbz	r0, 800634c <__smakebuf_r+0x74>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	89a0      	ldrh	r0, [r4, #12]
 800634e:	4305      	orrs	r5, r0
 8006350:	81a5      	strh	r5, [r4, #12]
 8006352:	e7cd      	b.n	80062f0 <__smakebuf_r+0x18>
 8006354:	080060e5 	.word	0x080060e5

08006358 <_raise_r>:
 8006358:	291f      	cmp	r1, #31
 800635a:	b538      	push	{r3, r4, r5, lr}
 800635c:	4604      	mov	r4, r0
 800635e:	460d      	mov	r5, r1
 8006360:	d904      	bls.n	800636c <_raise_r+0x14>
 8006362:	2316      	movs	r3, #22
 8006364:	6003      	str	r3, [r0, #0]
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800636e:	b112      	cbz	r2, 8006376 <_raise_r+0x1e>
 8006370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006374:	b94b      	cbnz	r3, 800638a <_raise_r+0x32>
 8006376:	4620      	mov	r0, r4
 8006378:	f000 f830 	bl	80063dc <_getpid_r>
 800637c:	462a      	mov	r2, r5
 800637e:	4601      	mov	r1, r0
 8006380:	4620      	mov	r0, r4
 8006382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006386:	f000 b817 	b.w	80063b8 <_kill_r>
 800638a:	2b01      	cmp	r3, #1
 800638c:	d00a      	beq.n	80063a4 <_raise_r+0x4c>
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	d103      	bne.n	800639a <_raise_r+0x42>
 8006392:	2316      	movs	r3, #22
 8006394:	6003      	str	r3, [r0, #0]
 8006396:	2001      	movs	r0, #1
 8006398:	e7e7      	b.n	800636a <_raise_r+0x12>
 800639a:	2400      	movs	r4, #0
 800639c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063a0:	4628      	mov	r0, r5
 80063a2:	4798      	blx	r3
 80063a4:	2000      	movs	r0, #0
 80063a6:	e7e0      	b.n	800636a <_raise_r+0x12>

080063a8 <raise>:
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <raise+0xc>)
 80063aa:	4601      	mov	r1, r0
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f7ff bfd3 	b.w	8006358 <_raise_r>
 80063b2:	bf00      	nop
 80063b4:	20000010 	.word	0x20000010

080063b8 <_kill_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	; (80063d8 <_kill_r+0x20>)
 80063bc:	2300      	movs	r3, #0
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	f001 f975 	bl	80076b4 <_kill>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d102      	bne.n	80063d4 <_kill_r+0x1c>
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	b103      	cbz	r3, 80063d4 <_kill_r+0x1c>
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	bd38      	pop	{r3, r4, r5, pc}
 80063d6:	bf00      	nop
 80063d8:	20000238 	.word	0x20000238

080063dc <_getpid_r>:
 80063dc:	f001 b95a 	b.w	8007694 <_getpid>

080063e0 <__sread>:
 80063e0:	b510      	push	{r4, lr}
 80063e2:	460c      	mov	r4, r1
 80063e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e8:	f000 f894 	bl	8006514 <_read_r>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	bfab      	itete	ge
 80063f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063f2:	89a3      	ldrhlt	r3, [r4, #12]
 80063f4:	181b      	addge	r3, r3, r0
 80063f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063fa:	bfac      	ite	ge
 80063fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80063fe:	81a3      	strhlt	r3, [r4, #12]
 8006400:	bd10      	pop	{r4, pc}

08006402 <__swrite>:
 8006402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006406:	461f      	mov	r7, r3
 8006408:	898b      	ldrh	r3, [r1, #12]
 800640a:	05db      	lsls	r3, r3, #23
 800640c:	4605      	mov	r5, r0
 800640e:	460c      	mov	r4, r1
 8006410:	4616      	mov	r6, r2
 8006412:	d505      	bpl.n	8006420 <__swrite+0x1e>
 8006414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006418:	2302      	movs	r3, #2
 800641a:	2200      	movs	r2, #0
 800641c:	f000 f868 	bl	80064f0 <_lseek_r>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	4632      	mov	r2, r6
 800642e:	463b      	mov	r3, r7
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	f000 b817 	b.w	8006468 <_write_r>

0800643a <__sseek>:
 800643a:	b510      	push	{r4, lr}
 800643c:	460c      	mov	r4, r1
 800643e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006442:	f000 f855 	bl	80064f0 <_lseek_r>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	bf15      	itete	ne
 800644c:	6560      	strne	r0, [r4, #84]	; 0x54
 800644e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006456:	81a3      	strheq	r3, [r4, #12]
 8006458:	bf18      	it	ne
 800645a:	81a3      	strhne	r3, [r4, #12]
 800645c:	bd10      	pop	{r4, pc}

0800645e <__sclose>:
 800645e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006462:	f000 b813 	b.w	800648c <_close_r>
	...

08006468 <_write_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4d07      	ldr	r5, [pc, #28]	; (8006488 <_write_r+0x20>)
 800646c:	4604      	mov	r4, r0
 800646e:	4608      	mov	r0, r1
 8006470:	4611      	mov	r1, r2
 8006472:	2200      	movs	r2, #0
 8006474:	602a      	str	r2, [r5, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	f001 f942 	bl	8007700 <_write>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_write_r+0x1e>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_write_r+0x1e>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	20000238 	.word	0x20000238

0800648c <_close_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d06      	ldr	r5, [pc, #24]	; (80064a8 <_close_r+0x1c>)
 8006490:	2300      	movs	r3, #0
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	602b      	str	r3, [r5, #0]
 8006498:	f001 f8ec 	bl	8007674 <_close>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_close_r+0x1a>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_close_r+0x1a>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	20000238 	.word	0x20000238

080064ac <_fstat_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d07      	ldr	r5, [pc, #28]	; (80064cc <_fstat_r+0x20>)
 80064b0:	2300      	movs	r3, #0
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	f001 f8e3 	bl	8007684 <_fstat>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	d102      	bne.n	80064c8 <_fstat_r+0x1c>
 80064c2:	682b      	ldr	r3, [r5, #0]
 80064c4:	b103      	cbz	r3, 80064c8 <_fstat_r+0x1c>
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
 80064ca:	bf00      	nop
 80064cc:	20000238 	.word	0x20000238

080064d0 <_isatty_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d06      	ldr	r5, [pc, #24]	; (80064ec <_isatty_r+0x1c>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f001 f8e2 	bl	80076a4 <_isatty>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_isatty_r+0x1a>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_isatty_r+0x1a>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	20000238 	.word	0x20000238

080064f0 <_lseek_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d07      	ldr	r5, [pc, #28]	; (8006510 <_lseek_r+0x20>)
 80064f4:	4604      	mov	r4, r0
 80064f6:	4608      	mov	r0, r1
 80064f8:	4611      	mov	r1, r2
 80064fa:	2200      	movs	r2, #0
 80064fc:	602a      	str	r2, [r5, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	f001 f8e0 	bl	80076c4 <_lseek>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_lseek_r+0x1e>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_lseek_r+0x1e>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	20000238 	.word	0x20000238

08006514 <_read_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	; (8006534 <_read_r+0x20>)
 8006518:	4604      	mov	r4, r0
 800651a:	4608      	mov	r0, r1
 800651c:	4611      	mov	r1, r2
 800651e:	2200      	movs	r2, #0
 8006520:	602a      	str	r2, [r5, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	f001 f8d6 	bl	80076d4 <_read>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_read_r+0x1e>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_read_r+0x1e>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	20000238 	.word	0x20000238

08006538 <cos>:
 8006538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800653a:	ec53 2b10 	vmov	r2, r3, d0
 800653e:	4826      	ldr	r0, [pc, #152]	; (80065d8 <cos+0xa0>)
 8006540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006544:	4281      	cmp	r1, r0
 8006546:	dc06      	bgt.n	8006556 <cos+0x1e>
 8006548:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80065d0 <cos+0x98>
 800654c:	b005      	add	sp, #20
 800654e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006552:	f000 baa9 	b.w	8006aa8 <__kernel_cos>
 8006556:	4821      	ldr	r0, [pc, #132]	; (80065dc <cos+0xa4>)
 8006558:	4281      	cmp	r1, r0
 800655a:	dd09      	ble.n	8006570 <cos+0x38>
 800655c:	ee10 0a10 	vmov	r0, s0
 8006560:	4619      	mov	r1, r3
 8006562:	f7f9 fe99 	bl	8000298 <__aeabi_dsub>
 8006566:	ec41 0b10 	vmov	d0, r0, r1
 800656a:	b005      	add	sp, #20
 800656c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006570:	4668      	mov	r0, sp
 8006572:	f000 f88d 	bl	8006690 <__ieee754_rem_pio2>
 8006576:	f000 0003 	and.w	r0, r0, #3
 800657a:	2801      	cmp	r0, #1
 800657c:	d00b      	beq.n	8006596 <cos+0x5e>
 800657e:	2802      	cmp	r0, #2
 8006580:	d016      	beq.n	80065b0 <cos+0x78>
 8006582:	b9e0      	cbnz	r0, 80065be <cos+0x86>
 8006584:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006588:	ed9d 0b00 	vldr	d0, [sp]
 800658c:	f000 fa8c 	bl	8006aa8 <__kernel_cos>
 8006590:	ec51 0b10 	vmov	r0, r1, d0
 8006594:	e7e7      	b.n	8006566 <cos+0x2e>
 8006596:	ed9d 1b02 	vldr	d1, [sp, #8]
 800659a:	ed9d 0b00 	vldr	d0, [sp]
 800659e:	f000 fe9b 	bl	80072d8 <__kernel_sin>
 80065a2:	ec53 2b10 	vmov	r2, r3, d0
 80065a6:	ee10 0a10 	vmov	r0, s0
 80065aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80065ae:	e7da      	b.n	8006566 <cos+0x2e>
 80065b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065b4:	ed9d 0b00 	vldr	d0, [sp]
 80065b8:	f000 fa76 	bl	8006aa8 <__kernel_cos>
 80065bc:	e7f1      	b.n	80065a2 <cos+0x6a>
 80065be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065c2:	ed9d 0b00 	vldr	d0, [sp]
 80065c6:	2001      	movs	r0, #1
 80065c8:	f000 fe86 	bl	80072d8 <__kernel_sin>
 80065cc:	e7e0      	b.n	8006590 <cos+0x58>
 80065ce:	bf00      	nop
	...
 80065d8:	3fe921fb 	.word	0x3fe921fb
 80065dc:	7fefffff 	.word	0x7fefffff

080065e0 <sin>:
 80065e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065e2:	ec53 2b10 	vmov	r2, r3, d0
 80065e6:	4828      	ldr	r0, [pc, #160]	; (8006688 <sin+0xa8>)
 80065e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80065ec:	4281      	cmp	r1, r0
 80065ee:	dc07      	bgt.n	8006600 <sin+0x20>
 80065f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006680 <sin+0xa0>
 80065f4:	2000      	movs	r0, #0
 80065f6:	b005      	add	sp, #20
 80065f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065fc:	f000 be6c 	b.w	80072d8 <__kernel_sin>
 8006600:	4822      	ldr	r0, [pc, #136]	; (800668c <sin+0xac>)
 8006602:	4281      	cmp	r1, r0
 8006604:	dd09      	ble.n	800661a <sin+0x3a>
 8006606:	ee10 0a10 	vmov	r0, s0
 800660a:	4619      	mov	r1, r3
 800660c:	f7f9 fe44 	bl	8000298 <__aeabi_dsub>
 8006610:	ec41 0b10 	vmov	d0, r0, r1
 8006614:	b005      	add	sp, #20
 8006616:	f85d fb04 	ldr.w	pc, [sp], #4
 800661a:	4668      	mov	r0, sp
 800661c:	f000 f838 	bl	8006690 <__ieee754_rem_pio2>
 8006620:	f000 0003 	and.w	r0, r0, #3
 8006624:	2801      	cmp	r0, #1
 8006626:	d00c      	beq.n	8006642 <sin+0x62>
 8006628:	2802      	cmp	r0, #2
 800662a:	d011      	beq.n	8006650 <sin+0x70>
 800662c:	b9f0      	cbnz	r0, 800666c <sin+0x8c>
 800662e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006632:	ed9d 0b00 	vldr	d0, [sp]
 8006636:	2001      	movs	r0, #1
 8006638:	f000 fe4e 	bl	80072d8 <__kernel_sin>
 800663c:	ec51 0b10 	vmov	r0, r1, d0
 8006640:	e7e6      	b.n	8006610 <sin+0x30>
 8006642:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006646:	ed9d 0b00 	vldr	d0, [sp]
 800664a:	f000 fa2d 	bl	8006aa8 <__kernel_cos>
 800664e:	e7f5      	b.n	800663c <sin+0x5c>
 8006650:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006654:	ed9d 0b00 	vldr	d0, [sp]
 8006658:	2001      	movs	r0, #1
 800665a:	f000 fe3d 	bl	80072d8 <__kernel_sin>
 800665e:	ec53 2b10 	vmov	r2, r3, d0
 8006662:	ee10 0a10 	vmov	r0, s0
 8006666:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800666a:	e7d1      	b.n	8006610 <sin+0x30>
 800666c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006670:	ed9d 0b00 	vldr	d0, [sp]
 8006674:	f000 fa18 	bl	8006aa8 <__kernel_cos>
 8006678:	e7f1      	b.n	800665e <sin+0x7e>
 800667a:	bf00      	nop
 800667c:	f3af 8000 	nop.w
	...
 8006688:	3fe921fb 	.word	0x3fe921fb
 800668c:	7fefffff 	.word	0x7fefffff

08006690 <__ieee754_rem_pio2>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	ed2d 8b02 	vpush	{d8}
 8006698:	ec55 4b10 	vmov	r4, r5, d0
 800669c:	4bca      	ldr	r3, [pc, #808]	; (80069c8 <__ieee754_rem_pio2+0x338>)
 800669e:	b08b      	sub	sp, #44	; 0x2c
 80066a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80066a4:	4598      	cmp	r8, r3
 80066a6:	4682      	mov	sl, r0
 80066a8:	9502      	str	r5, [sp, #8]
 80066aa:	dc08      	bgt.n	80066be <__ieee754_rem_pio2+0x2e>
 80066ac:	2200      	movs	r2, #0
 80066ae:	2300      	movs	r3, #0
 80066b0:	ed80 0b00 	vstr	d0, [r0]
 80066b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80066b8:	f04f 0b00 	mov.w	fp, #0
 80066bc:	e028      	b.n	8006710 <__ieee754_rem_pio2+0x80>
 80066be:	4bc3      	ldr	r3, [pc, #780]	; (80069cc <__ieee754_rem_pio2+0x33c>)
 80066c0:	4598      	cmp	r8, r3
 80066c2:	dc78      	bgt.n	80067b6 <__ieee754_rem_pio2+0x126>
 80066c4:	9b02      	ldr	r3, [sp, #8]
 80066c6:	4ec2      	ldr	r6, [pc, #776]	; (80069d0 <__ieee754_rem_pio2+0x340>)
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	ee10 0a10 	vmov	r0, s0
 80066ce:	a3b0      	add	r3, pc, #704	; (adr r3, 8006990 <__ieee754_rem_pio2+0x300>)
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	4629      	mov	r1, r5
 80066d6:	dd39      	ble.n	800674c <__ieee754_rem_pio2+0xbc>
 80066d8:	f7f9 fdde 	bl	8000298 <__aeabi_dsub>
 80066dc:	45b0      	cmp	r8, r6
 80066de:	4604      	mov	r4, r0
 80066e0:	460d      	mov	r5, r1
 80066e2:	d01b      	beq.n	800671c <__ieee754_rem_pio2+0x8c>
 80066e4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006998 <__ieee754_rem_pio2+0x308>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f7f9 fdd5 	bl	8000298 <__aeabi_dsub>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	e9ca 2300 	strd	r2, r3, [sl]
 80066f6:	4620      	mov	r0, r4
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7f9 fdcd 	bl	8000298 <__aeabi_dsub>
 80066fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8006998 <__ieee754_rem_pio2+0x308>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f7f9 fdc8 	bl	8000298 <__aeabi_dsub>
 8006708:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800670c:	f04f 0b01 	mov.w	fp, #1
 8006710:	4658      	mov	r0, fp
 8006712:	b00b      	add	sp, #44	; 0x2c
 8006714:	ecbd 8b02 	vpop	{d8}
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	a3a0      	add	r3, pc, #640	; (adr r3, 80069a0 <__ieee754_rem_pio2+0x310>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7f9 fdb9 	bl	8000298 <__aeabi_dsub>
 8006726:	a3a0      	add	r3, pc, #640	; (adr r3, 80069a8 <__ieee754_rem_pio2+0x318>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	4604      	mov	r4, r0
 800672e:	460d      	mov	r5, r1
 8006730:	f7f9 fdb2 	bl	8000298 <__aeabi_dsub>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	e9ca 2300 	strd	r2, r3, [sl]
 800673c:	4620      	mov	r0, r4
 800673e:	4629      	mov	r1, r5
 8006740:	f7f9 fdaa 	bl	8000298 <__aeabi_dsub>
 8006744:	a398      	add	r3, pc, #608	; (adr r3, 80069a8 <__ieee754_rem_pio2+0x318>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	e7db      	b.n	8006704 <__ieee754_rem_pio2+0x74>
 800674c:	f7f9 fda6 	bl	800029c <__adddf3>
 8006750:	45b0      	cmp	r8, r6
 8006752:	4604      	mov	r4, r0
 8006754:	460d      	mov	r5, r1
 8006756:	d016      	beq.n	8006786 <__ieee754_rem_pio2+0xf6>
 8006758:	a38f      	add	r3, pc, #572	; (adr r3, 8006998 <__ieee754_rem_pio2+0x308>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fd9d 	bl	800029c <__adddf3>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	e9ca 2300 	strd	r2, r3, [sl]
 800676a:	4620      	mov	r0, r4
 800676c:	4629      	mov	r1, r5
 800676e:	f7f9 fd93 	bl	8000298 <__aeabi_dsub>
 8006772:	a389      	add	r3, pc, #548	; (adr r3, 8006998 <__ieee754_rem_pio2+0x308>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 fd90 	bl	800029c <__adddf3>
 800677c:	f04f 3bff 	mov.w	fp, #4294967295
 8006780:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006784:	e7c4      	b.n	8006710 <__ieee754_rem_pio2+0x80>
 8006786:	a386      	add	r3, pc, #536	; (adr r3, 80069a0 <__ieee754_rem_pio2+0x310>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f7f9 fd86 	bl	800029c <__adddf3>
 8006790:	a385      	add	r3, pc, #532	; (adr r3, 80069a8 <__ieee754_rem_pio2+0x318>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	4604      	mov	r4, r0
 8006798:	460d      	mov	r5, r1
 800679a:	f7f9 fd7f 	bl	800029c <__adddf3>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	e9ca 2300 	strd	r2, r3, [sl]
 80067a6:	4620      	mov	r0, r4
 80067a8:	4629      	mov	r1, r5
 80067aa:	f7f9 fd75 	bl	8000298 <__aeabi_dsub>
 80067ae:	a37e      	add	r3, pc, #504	; (adr r3, 80069a8 <__ieee754_rem_pio2+0x318>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	e7e0      	b.n	8006778 <__ieee754_rem_pio2+0xe8>
 80067b6:	4b87      	ldr	r3, [pc, #540]	; (80069d4 <__ieee754_rem_pio2+0x344>)
 80067b8:	4598      	cmp	r8, r3
 80067ba:	f300 80d9 	bgt.w	8006970 <__ieee754_rem_pio2+0x2e0>
 80067be:	f000 fe49 	bl	8007454 <fabs>
 80067c2:	ec55 4b10 	vmov	r4, r5, d0
 80067c6:	ee10 0a10 	vmov	r0, s0
 80067ca:	a379      	add	r3, pc, #484	; (adr r3, 80069b0 <__ieee754_rem_pio2+0x320>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7f9 ff19 	bl	8000608 <__aeabi_dmul>
 80067d6:	4b80      	ldr	r3, [pc, #512]	; (80069d8 <__ieee754_rem_pio2+0x348>)
 80067d8:	2200      	movs	r2, #0
 80067da:	f7f9 fd5f 	bl	800029c <__adddf3>
 80067de:	f7fa f9c3 	bl	8000b68 <__aeabi_d2iz>
 80067e2:	4683      	mov	fp, r0
 80067e4:	f7f9 fea6 	bl	8000534 <__aeabi_i2d>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	ec43 2b18 	vmov	d8, r2, r3
 80067f0:	a367      	add	r3, pc, #412	; (adr r3, 8006990 <__ieee754_rem_pio2+0x300>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f7f9 ff07 	bl	8000608 <__aeabi_dmul>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7f9 fd49 	bl	8000298 <__aeabi_dsub>
 8006806:	a364      	add	r3, pc, #400	; (adr r3, 8006998 <__ieee754_rem_pio2+0x308>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	4606      	mov	r6, r0
 800680e:	460f      	mov	r7, r1
 8006810:	ec51 0b18 	vmov	r0, r1, d8
 8006814:	f7f9 fef8 	bl	8000608 <__aeabi_dmul>
 8006818:	f1bb 0f1f 	cmp.w	fp, #31
 800681c:	4604      	mov	r4, r0
 800681e:	460d      	mov	r5, r1
 8006820:	dc0d      	bgt.n	800683e <__ieee754_rem_pio2+0x1ae>
 8006822:	4b6e      	ldr	r3, [pc, #440]	; (80069dc <__ieee754_rem_pio2+0x34c>)
 8006824:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	4543      	cmp	r3, r8
 800682e:	d006      	beq.n	800683e <__ieee754_rem_pio2+0x1ae>
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	4630      	mov	r0, r6
 8006836:	4639      	mov	r1, r7
 8006838:	f7f9 fd2e 	bl	8000298 <__aeabi_dsub>
 800683c:	e00f      	b.n	800685e <__ieee754_rem_pio2+0x1ce>
 800683e:	462b      	mov	r3, r5
 8006840:	4622      	mov	r2, r4
 8006842:	4630      	mov	r0, r6
 8006844:	4639      	mov	r1, r7
 8006846:	f7f9 fd27 	bl	8000298 <__aeabi_dsub>
 800684a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800684e:	9303      	str	r3, [sp, #12]
 8006850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006854:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006858:	f1b8 0f10 	cmp.w	r8, #16
 800685c:	dc02      	bgt.n	8006864 <__ieee754_rem_pio2+0x1d4>
 800685e:	e9ca 0100 	strd	r0, r1, [sl]
 8006862:	e039      	b.n	80068d8 <__ieee754_rem_pio2+0x248>
 8006864:	a34e      	add	r3, pc, #312	; (adr r3, 80069a0 <__ieee754_rem_pio2+0x310>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	ec51 0b18 	vmov	r0, r1, d8
 800686e:	f7f9 fecb 	bl	8000608 <__aeabi_dmul>
 8006872:	4604      	mov	r4, r0
 8006874:	460d      	mov	r5, r1
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4630      	mov	r0, r6
 800687c:	4639      	mov	r1, r7
 800687e:	f7f9 fd0b 	bl	8000298 <__aeabi_dsub>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4680      	mov	r8, r0
 8006888:	4689      	mov	r9, r1
 800688a:	4630      	mov	r0, r6
 800688c:	4639      	mov	r1, r7
 800688e:	f7f9 fd03 	bl	8000298 <__aeabi_dsub>
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	f7f9 fcff 	bl	8000298 <__aeabi_dsub>
 800689a:	a343      	add	r3, pc, #268	; (adr r3, 80069a8 <__ieee754_rem_pio2+0x318>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	4604      	mov	r4, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	ec51 0b18 	vmov	r0, r1, d8
 80068a8:	f7f9 feae 	bl	8000608 <__aeabi_dmul>
 80068ac:	4622      	mov	r2, r4
 80068ae:	462b      	mov	r3, r5
 80068b0:	f7f9 fcf2 	bl	8000298 <__aeabi_dsub>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4604      	mov	r4, r0
 80068ba:	460d      	mov	r5, r1
 80068bc:	4640      	mov	r0, r8
 80068be:	4649      	mov	r1, r9
 80068c0:	f7f9 fcea 	bl	8000298 <__aeabi_dsub>
 80068c4:	9a03      	ldr	r2, [sp, #12]
 80068c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b31      	cmp	r3, #49	; 0x31
 80068ce:	dc24      	bgt.n	800691a <__ieee754_rem_pio2+0x28a>
 80068d0:	e9ca 0100 	strd	r0, r1, [sl]
 80068d4:	4646      	mov	r6, r8
 80068d6:	464f      	mov	r7, r9
 80068d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80068dc:	4630      	mov	r0, r6
 80068de:	4642      	mov	r2, r8
 80068e0:	464b      	mov	r3, r9
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7f9 fcd8 	bl	8000298 <__aeabi_dsub>
 80068e8:	462b      	mov	r3, r5
 80068ea:	4622      	mov	r2, r4
 80068ec:	f7f9 fcd4 	bl	8000298 <__aeabi_dsub>
 80068f0:	9b02      	ldr	r3, [sp, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80068f8:	f6bf af0a 	bge.w	8006710 <__ieee754_rem_pio2+0x80>
 80068fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006900:	f8ca 3004 	str.w	r3, [sl, #4]
 8006904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006908:	f8ca 8000 	str.w	r8, [sl]
 800690c:	f8ca 0008 	str.w	r0, [sl, #8]
 8006910:	f8ca 300c 	str.w	r3, [sl, #12]
 8006914:	f1cb 0b00 	rsb	fp, fp, #0
 8006918:	e6fa      	b.n	8006710 <__ieee754_rem_pio2+0x80>
 800691a:	a327      	add	r3, pc, #156	; (adr r3, 80069b8 <__ieee754_rem_pio2+0x328>)
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	ec51 0b18 	vmov	r0, r1, d8
 8006924:	f7f9 fe70 	bl	8000608 <__aeabi_dmul>
 8006928:	4604      	mov	r4, r0
 800692a:	460d      	mov	r5, r1
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4640      	mov	r0, r8
 8006932:	4649      	mov	r1, r9
 8006934:	f7f9 fcb0 	bl	8000298 <__aeabi_dsub>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	4640      	mov	r0, r8
 8006942:	4649      	mov	r1, r9
 8006944:	f7f9 fca8 	bl	8000298 <__aeabi_dsub>
 8006948:	4622      	mov	r2, r4
 800694a:	462b      	mov	r3, r5
 800694c:	f7f9 fca4 	bl	8000298 <__aeabi_dsub>
 8006950:	a31b      	add	r3, pc, #108	; (adr r3, 80069c0 <__ieee754_rem_pio2+0x330>)
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	4604      	mov	r4, r0
 8006958:	460d      	mov	r5, r1
 800695a:	ec51 0b18 	vmov	r0, r1, d8
 800695e:	f7f9 fe53 	bl	8000608 <__aeabi_dmul>
 8006962:	4622      	mov	r2, r4
 8006964:	462b      	mov	r3, r5
 8006966:	f7f9 fc97 	bl	8000298 <__aeabi_dsub>
 800696a:	4604      	mov	r4, r0
 800696c:	460d      	mov	r5, r1
 800696e:	e75f      	b.n	8006830 <__ieee754_rem_pio2+0x1a0>
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <__ieee754_rem_pio2+0x350>)
 8006972:	4598      	cmp	r8, r3
 8006974:	dd36      	ble.n	80069e4 <__ieee754_rem_pio2+0x354>
 8006976:	ee10 2a10 	vmov	r2, s0
 800697a:	462b      	mov	r3, r5
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fc8a 	bl	8000298 <__aeabi_dsub>
 8006984:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006988:	e9ca 0100 	strd	r0, r1, [sl]
 800698c:	e694      	b.n	80066b8 <__ieee754_rem_pio2+0x28>
 800698e:	bf00      	nop
 8006990:	54400000 	.word	0x54400000
 8006994:	3ff921fb 	.word	0x3ff921fb
 8006998:	1a626331 	.word	0x1a626331
 800699c:	3dd0b461 	.word	0x3dd0b461
 80069a0:	1a600000 	.word	0x1a600000
 80069a4:	3dd0b461 	.word	0x3dd0b461
 80069a8:	2e037073 	.word	0x2e037073
 80069ac:	3ba3198a 	.word	0x3ba3198a
 80069b0:	6dc9c883 	.word	0x6dc9c883
 80069b4:	3fe45f30 	.word	0x3fe45f30
 80069b8:	2e000000 	.word	0x2e000000
 80069bc:	3ba3198a 	.word	0x3ba3198a
 80069c0:	252049c1 	.word	0x252049c1
 80069c4:	397b839a 	.word	0x397b839a
 80069c8:	3fe921fb 	.word	0x3fe921fb
 80069cc:	4002d97b 	.word	0x4002d97b
 80069d0:	3ff921fb 	.word	0x3ff921fb
 80069d4:	413921fb 	.word	0x413921fb
 80069d8:	3fe00000 	.word	0x3fe00000
 80069dc:	0800804c 	.word	0x0800804c
 80069e0:	7fefffff 	.word	0x7fefffff
 80069e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80069e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80069ec:	ee10 0a10 	vmov	r0, s0
 80069f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80069f4:	ee10 6a10 	vmov	r6, s0
 80069f8:	460f      	mov	r7, r1
 80069fa:	f7fa f8b5 	bl	8000b68 <__aeabi_d2iz>
 80069fe:	f7f9 fd99 	bl	8000534 <__aeabi_i2d>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a0e:	f7f9 fc43 	bl	8000298 <__aeabi_dsub>
 8006a12:	4b23      	ldr	r3, [pc, #140]	; (8006aa0 <__ieee754_rem_pio2+0x410>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	f7f9 fdf7 	bl	8000608 <__aeabi_dmul>
 8006a1a:	460f      	mov	r7, r1
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	f7fa f8a3 	bl	8000b68 <__aeabi_d2iz>
 8006a22:	f7f9 fd87 	bl	8000534 <__aeabi_i2d>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a32:	f7f9 fc31 	bl	8000298 <__aeabi_dsub>
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <__ieee754_rem_pio2+0x410>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f7f9 fde5 	bl	8000608 <__aeabi_dmul>
 8006a3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a42:	ad04      	add	r5, sp, #16
 8006a44:	f04f 0803 	mov.w	r8, #3
 8006a48:	46a9      	mov	r9, r5
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	2700      	movs	r7, #0
 8006a4e:	4632      	mov	r2, r6
 8006a50:	463b      	mov	r3, r7
 8006a52:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006a56:	46c3      	mov	fp, r8
 8006a58:	3d08      	subs	r5, #8
 8006a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a5e:	f7fa f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d1f3      	bne.n	8006a4e <__ieee754_rem_pio2+0x3be>
 8006a66:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <__ieee754_rem_pio2+0x414>)
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4622      	mov	r2, r4
 8006a70:	465b      	mov	r3, fp
 8006a72:	4651      	mov	r1, sl
 8006a74:	4648      	mov	r0, r9
 8006a76:	f000 f8df 	bl	8006c38 <__kernel_rem_pio2>
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	4683      	mov	fp, r0
 8006a80:	f6bf ae46 	bge.w	8006710 <__ieee754_rem_pio2+0x80>
 8006a84:	e9da 2100 	ldrd	r2, r1, [sl]
 8006a88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a8c:	e9ca 2300 	strd	r2, r3, [sl]
 8006a90:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006a94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a98:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006a9c:	e73a      	b.n	8006914 <__ieee754_rem_pio2+0x284>
 8006a9e:	bf00      	nop
 8006aa0:	41700000 	.word	0x41700000
 8006aa4:	080080cc 	.word	0x080080cc

08006aa8 <__kernel_cos>:
 8006aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	ec57 6b10 	vmov	r6, r7, d0
 8006ab0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006ab4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006ab8:	ed8d 1b00 	vstr	d1, [sp]
 8006abc:	da07      	bge.n	8006ace <__kernel_cos+0x26>
 8006abe:	ee10 0a10 	vmov	r0, s0
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7fa f850 	bl	8000b68 <__aeabi_d2iz>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f000 8088 	beq.w	8006bde <__kernel_cos+0x136>
 8006ace:	4632      	mov	r2, r6
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7f9 fd97 	bl	8000608 <__aeabi_dmul>
 8006ada:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <__kernel_cos+0x178>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	f7f9 fd91 	bl	8000608 <__aeabi_dmul>
 8006ae6:	a340      	add	r3, pc, #256	; (adr r3, 8006be8 <__kernel_cos+0x140>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	4682      	mov	sl, r0
 8006aee:	468b      	mov	fp, r1
 8006af0:	4620      	mov	r0, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7f9 fd88 	bl	8000608 <__aeabi_dmul>
 8006af8:	a33d      	add	r3, pc, #244	; (adr r3, 8006bf0 <__kernel_cos+0x148>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fbcd 	bl	800029c <__adddf3>
 8006b02:	4622      	mov	r2, r4
 8006b04:	462b      	mov	r3, r5
 8006b06:	f7f9 fd7f 	bl	8000608 <__aeabi_dmul>
 8006b0a:	a33b      	add	r3, pc, #236	; (adr r3, 8006bf8 <__kernel_cos+0x150>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fbc2 	bl	8000298 <__aeabi_dsub>
 8006b14:	4622      	mov	r2, r4
 8006b16:	462b      	mov	r3, r5
 8006b18:	f7f9 fd76 	bl	8000608 <__aeabi_dmul>
 8006b1c:	a338      	add	r3, pc, #224	; (adr r3, 8006c00 <__kernel_cos+0x158>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fbbb 	bl	800029c <__adddf3>
 8006b26:	4622      	mov	r2, r4
 8006b28:	462b      	mov	r3, r5
 8006b2a:	f7f9 fd6d 	bl	8000608 <__aeabi_dmul>
 8006b2e:	a336      	add	r3, pc, #216	; (adr r3, 8006c08 <__kernel_cos+0x160>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f7f9 fbb0 	bl	8000298 <__aeabi_dsub>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f7f9 fd64 	bl	8000608 <__aeabi_dmul>
 8006b40:	a333      	add	r3, pc, #204	; (adr r3, 8006c10 <__kernel_cos+0x168>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fba9 	bl	800029c <__adddf3>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	f7f9 fd5b 	bl	8000608 <__aeabi_dmul>
 8006b52:	4622      	mov	r2, r4
 8006b54:	462b      	mov	r3, r5
 8006b56:	f7f9 fd57 	bl	8000608 <__aeabi_dmul>
 8006b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b5e:	4604      	mov	r4, r0
 8006b60:	460d      	mov	r5, r1
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7f9 fd4f 	bl	8000608 <__aeabi_dmul>
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7f9 fb91 	bl	8000298 <__aeabi_dsub>
 8006b76:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <__kernel_cos+0x17c>)
 8006b78:	4598      	cmp	r8, r3
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	dc10      	bgt.n	8006ba2 <__kernel_cos+0xfa>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4650      	mov	r0, sl
 8006b86:	4659      	mov	r1, fp
 8006b88:	f7f9 fb86 	bl	8000298 <__aeabi_dsub>
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4926      	ldr	r1, [pc, #152]	; (8006c28 <__kernel_cos+0x180>)
 8006b90:	4602      	mov	r2, r0
 8006b92:	2000      	movs	r0, #0
 8006b94:	f7f9 fb80 	bl	8000298 <__aeabi_dsub>
 8006b98:	ec41 0b10 	vmov	d0, r0, r1
 8006b9c:	b003      	add	sp, #12
 8006b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba2:	4b22      	ldr	r3, [pc, #136]	; (8006c2c <__kernel_cos+0x184>)
 8006ba4:	4920      	ldr	r1, [pc, #128]	; (8006c28 <__kernel_cos+0x180>)
 8006ba6:	4598      	cmp	r8, r3
 8006ba8:	bfcc      	ite	gt
 8006baa:	4d21      	ldrgt	r5, [pc, #132]	; (8006c30 <__kernel_cos+0x188>)
 8006bac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006bb0:	2400      	movs	r4, #0
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	f7f9 fb6e 	bl	8000298 <__aeabi_dsub>
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4680      	mov	r8, r0
 8006bc0:	4689      	mov	r9, r1
 8006bc2:	462b      	mov	r3, r5
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	f7f9 fb66 	bl	8000298 <__aeabi_dsub>
 8006bcc:	4632      	mov	r2, r6
 8006bce:	463b      	mov	r3, r7
 8006bd0:	f7f9 fb62 	bl	8000298 <__aeabi_dsub>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4649      	mov	r1, r9
 8006bdc:	e7da      	b.n	8006b94 <__kernel_cos+0xec>
 8006bde:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006c18 <__kernel_cos+0x170>
 8006be2:	e7db      	b.n	8006b9c <__kernel_cos+0xf4>
 8006be4:	f3af 8000 	nop.w
 8006be8:	be8838d4 	.word	0xbe8838d4
 8006bec:	bda8fae9 	.word	0xbda8fae9
 8006bf0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006bf4:	3e21ee9e 	.word	0x3e21ee9e
 8006bf8:	809c52ad 	.word	0x809c52ad
 8006bfc:	3e927e4f 	.word	0x3e927e4f
 8006c00:	19cb1590 	.word	0x19cb1590
 8006c04:	3efa01a0 	.word	0x3efa01a0
 8006c08:	16c15177 	.word	0x16c15177
 8006c0c:	3f56c16c 	.word	0x3f56c16c
 8006c10:	5555554c 	.word	0x5555554c
 8006c14:	3fa55555 	.word	0x3fa55555
 8006c18:	00000000 	.word	0x00000000
 8006c1c:	3ff00000 	.word	0x3ff00000
 8006c20:	3fe00000 	.word	0x3fe00000
 8006c24:	3fd33332 	.word	0x3fd33332
 8006c28:	3ff00000 	.word	0x3ff00000
 8006c2c:	3fe90000 	.word	0x3fe90000
 8006c30:	3fd20000 	.word	0x3fd20000
 8006c34:	00000000 	.word	0x00000000

08006c38 <__kernel_rem_pio2>:
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	ed2d 8b02 	vpush	{d8}
 8006c40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006c44:	f112 0f14 	cmn.w	r2, #20
 8006c48:	9308      	str	r3, [sp, #32]
 8006c4a:	9101      	str	r1, [sp, #4]
 8006c4c:	4bc4      	ldr	r3, [pc, #784]	; (8006f60 <__kernel_rem_pio2+0x328>)
 8006c4e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006c50:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c56:	9302      	str	r3, [sp, #8]
 8006c58:	9b08      	ldr	r3, [sp, #32]
 8006c5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c5e:	bfa8      	it	ge
 8006c60:	1ed4      	subge	r4, r2, #3
 8006c62:	9306      	str	r3, [sp, #24]
 8006c64:	bfb2      	itee	lt
 8006c66:	2400      	movlt	r4, #0
 8006c68:	2318      	movge	r3, #24
 8006c6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006c6e:	f06f 0317 	mvn.w	r3, #23
 8006c72:	fb04 3303 	mla	r3, r4, r3, r3
 8006c76:	eb03 0a02 	add.w	sl, r3, r2
 8006c7a:	9b02      	ldr	r3, [sp, #8]
 8006c7c:	9a06      	ldr	r2, [sp, #24]
 8006c7e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006f50 <__kernel_rem_pio2+0x318>
 8006c82:	eb03 0802 	add.w	r8, r3, r2
 8006c86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006c88:	1aa7      	subs	r7, r4, r2
 8006c8a:	ae22      	add	r6, sp, #136	; 0x88
 8006c8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006c90:	2500      	movs	r5, #0
 8006c92:	4545      	cmp	r5, r8
 8006c94:	dd13      	ble.n	8006cbe <__kernel_rem_pio2+0x86>
 8006c96:	9b08      	ldr	r3, [sp, #32]
 8006c98:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006f50 <__kernel_rem_pio2+0x318>
 8006c9c:	aa22      	add	r2, sp, #136	; 0x88
 8006c9e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006ca2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006ca6:	f04f 0800 	mov.w	r8, #0
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	4598      	cmp	r8, r3
 8006cae:	dc2f      	bgt.n	8006d10 <__kernel_rem_pio2+0xd8>
 8006cb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006cb4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006cb8:	462f      	mov	r7, r5
 8006cba:	2600      	movs	r6, #0
 8006cbc:	e01b      	b.n	8006cf6 <__kernel_rem_pio2+0xbe>
 8006cbe:	42ef      	cmn	r7, r5
 8006cc0:	d407      	bmi.n	8006cd2 <__kernel_rem_pio2+0x9a>
 8006cc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006cc6:	f7f9 fc35 	bl	8000534 <__aeabi_i2d>
 8006cca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006cce:	3501      	adds	r5, #1
 8006cd0:	e7df      	b.n	8006c92 <__kernel_rem_pio2+0x5a>
 8006cd2:	ec51 0b18 	vmov	r0, r1, d8
 8006cd6:	e7f8      	b.n	8006cca <__kernel_rem_pio2+0x92>
 8006cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006ce0:	f7f9 fc92 	bl	8000608 <__aeabi_dmul>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cec:	f7f9 fad6 	bl	800029c <__adddf3>
 8006cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cf4:	3601      	adds	r6, #1
 8006cf6:	9b06      	ldr	r3, [sp, #24]
 8006cf8:	429e      	cmp	r6, r3
 8006cfa:	f1a7 0708 	sub.w	r7, r7, #8
 8006cfe:	ddeb      	ble.n	8006cd8 <__kernel_rem_pio2+0xa0>
 8006d00:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006d04:	f108 0801 	add.w	r8, r8, #1
 8006d08:	ecab 7b02 	vstmia	fp!, {d7}
 8006d0c:	3508      	adds	r5, #8
 8006d0e:	e7cc      	b.n	8006caa <__kernel_rem_pio2+0x72>
 8006d10:	9b02      	ldr	r3, [sp, #8]
 8006d12:	aa0e      	add	r2, sp, #56	; 0x38
 8006d14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d18:	930d      	str	r3, [sp, #52]	; 0x34
 8006d1a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006d1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d20:	9c02      	ldr	r4, [sp, #8]
 8006d22:	930c      	str	r3, [sp, #48]	; 0x30
 8006d24:	00e3      	lsls	r3, r4, #3
 8006d26:	930a      	str	r3, [sp, #40]	; 0x28
 8006d28:	ab9a      	add	r3, sp, #616	; 0x268
 8006d2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006d32:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006d36:	ab72      	add	r3, sp, #456	; 0x1c8
 8006d38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006d3c:	46c3      	mov	fp, r8
 8006d3e:	46a1      	mov	r9, r4
 8006d40:	f1b9 0f00 	cmp.w	r9, #0
 8006d44:	f1a5 0508 	sub.w	r5, r5, #8
 8006d48:	dc77      	bgt.n	8006e3a <__kernel_rem_pio2+0x202>
 8006d4a:	ec47 6b10 	vmov	d0, r6, r7
 8006d4e:	4650      	mov	r0, sl
 8006d50:	f000 fc0a 	bl	8007568 <scalbn>
 8006d54:	ec57 6b10 	vmov	r6, r7, d0
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006d5e:	ee10 0a10 	vmov	r0, s0
 8006d62:	4639      	mov	r1, r7
 8006d64:	f7f9 fc50 	bl	8000608 <__aeabi_dmul>
 8006d68:	ec41 0b10 	vmov	d0, r0, r1
 8006d6c:	f000 fb7c 	bl	8007468 <floor>
 8006d70:	4b7c      	ldr	r3, [pc, #496]	; (8006f64 <__kernel_rem_pio2+0x32c>)
 8006d72:	ec51 0b10 	vmov	r0, r1, d0
 8006d76:	2200      	movs	r2, #0
 8006d78:	f7f9 fc46 	bl	8000608 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 fa88 	bl	8000298 <__aeabi_dsub>
 8006d88:	460f      	mov	r7, r1
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	f7f9 feec 	bl	8000b68 <__aeabi_d2iz>
 8006d90:	9004      	str	r0, [sp, #16]
 8006d92:	f7f9 fbcf 	bl	8000534 <__aeabi_i2d>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	f7f9 fa7b 	bl	8000298 <__aeabi_dsub>
 8006da2:	f1ba 0f00 	cmp.w	sl, #0
 8006da6:	4606      	mov	r6, r0
 8006da8:	460f      	mov	r7, r1
 8006daa:	dd6d      	ble.n	8006e88 <__kernel_rem_pio2+0x250>
 8006dac:	1e62      	subs	r2, r4, #1
 8006dae:	ab0e      	add	r3, sp, #56	; 0x38
 8006db0:	9d04      	ldr	r5, [sp, #16]
 8006db2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006db6:	f1ca 0118 	rsb	r1, sl, #24
 8006dba:	fa40 f301 	asr.w	r3, r0, r1
 8006dbe:	441d      	add	r5, r3
 8006dc0:	408b      	lsls	r3, r1
 8006dc2:	1ac0      	subs	r0, r0, r3
 8006dc4:	ab0e      	add	r3, sp, #56	; 0x38
 8006dc6:	9504      	str	r5, [sp, #16]
 8006dc8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006dcc:	f1ca 0317 	rsb	r3, sl, #23
 8006dd0:	fa40 fb03 	asr.w	fp, r0, r3
 8006dd4:	f1bb 0f00 	cmp.w	fp, #0
 8006dd8:	dd65      	ble.n	8006ea6 <__kernel_rem_pio2+0x26e>
 8006dda:	9b04      	ldr	r3, [sp, #16]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	3301      	adds	r3, #1
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	4615      	mov	r5, r2
 8006de4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006de8:	4294      	cmp	r4, r2
 8006dea:	f300 809c 	bgt.w	8006f26 <__kernel_rem_pio2+0x2ee>
 8006dee:	f1ba 0f00 	cmp.w	sl, #0
 8006df2:	dd07      	ble.n	8006e04 <__kernel_rem_pio2+0x1cc>
 8006df4:	f1ba 0f01 	cmp.w	sl, #1
 8006df8:	f000 80c0 	beq.w	8006f7c <__kernel_rem_pio2+0x344>
 8006dfc:	f1ba 0f02 	cmp.w	sl, #2
 8006e00:	f000 80c6 	beq.w	8006f90 <__kernel_rem_pio2+0x358>
 8006e04:	f1bb 0f02 	cmp.w	fp, #2
 8006e08:	d14d      	bne.n	8006ea6 <__kernel_rem_pio2+0x26e>
 8006e0a:	4632      	mov	r2, r6
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	4956      	ldr	r1, [pc, #344]	; (8006f68 <__kernel_rem_pio2+0x330>)
 8006e10:	2000      	movs	r0, #0
 8006e12:	f7f9 fa41 	bl	8000298 <__aeabi_dsub>
 8006e16:	4606      	mov	r6, r0
 8006e18:	460f      	mov	r7, r1
 8006e1a:	2d00      	cmp	r5, #0
 8006e1c:	d043      	beq.n	8006ea6 <__kernel_rem_pio2+0x26e>
 8006e1e:	4650      	mov	r0, sl
 8006e20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006f58 <__kernel_rem_pio2+0x320>
 8006e24:	f000 fba0 	bl	8007568 <scalbn>
 8006e28:	4630      	mov	r0, r6
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	ec53 2b10 	vmov	r2, r3, d0
 8006e30:	f7f9 fa32 	bl	8000298 <__aeabi_dsub>
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	e035      	b.n	8006ea6 <__kernel_rem_pio2+0x26e>
 8006e3a:	4b4c      	ldr	r3, [pc, #304]	; (8006f6c <__kernel_rem_pio2+0x334>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4630      	mov	r0, r6
 8006e40:	4639      	mov	r1, r7
 8006e42:	f7f9 fbe1 	bl	8000608 <__aeabi_dmul>
 8006e46:	f7f9 fe8f 	bl	8000b68 <__aeabi_d2iz>
 8006e4a:	f7f9 fb73 	bl	8000534 <__aeabi_i2d>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	ec43 2b18 	vmov	d8, r2, r3
 8006e56:	4b46      	ldr	r3, [pc, #280]	; (8006f70 <__kernel_rem_pio2+0x338>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f7f9 fbd5 	bl	8000608 <__aeabi_dmul>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7f9 fa17 	bl	8000298 <__aeabi_dsub>
 8006e6a:	f7f9 fe7d 	bl	8000b68 <__aeabi_d2iz>
 8006e6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e72:	f84b 0b04 	str.w	r0, [fp], #4
 8006e76:	ec51 0b18 	vmov	r0, r1, d8
 8006e7a:	f7f9 fa0f 	bl	800029c <__adddf3>
 8006e7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006e82:	4606      	mov	r6, r0
 8006e84:	460f      	mov	r7, r1
 8006e86:	e75b      	b.n	8006d40 <__kernel_rem_pio2+0x108>
 8006e88:	d106      	bne.n	8006e98 <__kernel_rem_pio2+0x260>
 8006e8a:	1e63      	subs	r3, r4, #1
 8006e8c:	aa0e      	add	r2, sp, #56	; 0x38
 8006e8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006e92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006e96:	e79d      	b.n	8006dd4 <__kernel_rem_pio2+0x19c>
 8006e98:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <__kernel_rem_pio2+0x33c>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f7f9 fe3a 	bl	8000b14 <__aeabi_dcmpge>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d13d      	bne.n	8006f20 <__kernel_rem_pio2+0x2e8>
 8006ea4:	4683      	mov	fp, r0
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 fe13 	bl	8000ad8 <__aeabi_dcmpeq>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f000 80c0 	beq.w	8007038 <__kernel_rem_pio2+0x400>
 8006eb8:	1e65      	subs	r5, r4, #1
 8006eba:	462b      	mov	r3, r5
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	9902      	ldr	r1, [sp, #8]
 8006ec0:	428b      	cmp	r3, r1
 8006ec2:	da6c      	bge.n	8006f9e <__kernel_rem_pio2+0x366>
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	f000 8089 	beq.w	8006fdc <__kernel_rem_pio2+0x3a4>
 8006eca:	ab0e      	add	r3, sp, #56	; 0x38
 8006ecc:	f1aa 0a18 	sub.w	sl, sl, #24
 8006ed0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80ad 	beq.w	8007034 <__kernel_rem_pio2+0x3fc>
 8006eda:	4650      	mov	r0, sl
 8006edc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006f58 <__kernel_rem_pio2+0x320>
 8006ee0:	f000 fb42 	bl	8007568 <scalbn>
 8006ee4:	ab9a      	add	r3, sp, #616	; 0x268
 8006ee6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006eea:	ec57 6b10 	vmov	r6, r7, d0
 8006eee:	00ec      	lsls	r4, r5, #3
 8006ef0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006ef4:	46aa      	mov	sl, r5
 8006ef6:	f1ba 0f00 	cmp.w	sl, #0
 8006efa:	f280 80d6 	bge.w	80070aa <__kernel_rem_pio2+0x472>
 8006efe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006f50 <__kernel_rem_pio2+0x318>
 8006f02:	462e      	mov	r6, r5
 8006f04:	2e00      	cmp	r6, #0
 8006f06:	f2c0 8104 	blt.w	8007112 <__kernel_rem_pio2+0x4da>
 8006f0a:	ab72      	add	r3, sp, #456	; 0x1c8
 8006f0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006f10:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006f78 <__kernel_rem_pio2+0x340>
 8006f14:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006f18:	f04f 0800 	mov.w	r8, #0
 8006f1c:	1baf      	subs	r7, r5, r6
 8006f1e:	e0ea      	b.n	80070f6 <__kernel_rem_pio2+0x4be>
 8006f20:	f04f 0b02 	mov.w	fp, #2
 8006f24:	e759      	b.n	8006dda <__kernel_rem_pio2+0x1a2>
 8006f26:	f8d8 3000 	ldr.w	r3, [r8]
 8006f2a:	b955      	cbnz	r5, 8006f42 <__kernel_rem_pio2+0x30a>
 8006f2c:	b123      	cbz	r3, 8006f38 <__kernel_rem_pio2+0x300>
 8006f2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006f32:	f8c8 3000 	str.w	r3, [r8]
 8006f36:	2301      	movs	r3, #1
 8006f38:	3201      	adds	r2, #1
 8006f3a:	f108 0804 	add.w	r8, r8, #4
 8006f3e:	461d      	mov	r5, r3
 8006f40:	e752      	b.n	8006de8 <__kernel_rem_pio2+0x1b0>
 8006f42:	1acb      	subs	r3, r1, r3
 8006f44:	f8c8 3000 	str.w	r3, [r8]
 8006f48:	462b      	mov	r3, r5
 8006f4a:	e7f5      	b.n	8006f38 <__kernel_rem_pio2+0x300>
 8006f4c:	f3af 8000 	nop.w
	...
 8006f5c:	3ff00000 	.word	0x3ff00000
 8006f60:	08008218 	.word	0x08008218
 8006f64:	40200000 	.word	0x40200000
 8006f68:	3ff00000 	.word	0x3ff00000
 8006f6c:	3e700000 	.word	0x3e700000
 8006f70:	41700000 	.word	0x41700000
 8006f74:	3fe00000 	.word	0x3fe00000
 8006f78:	080081d8 	.word	0x080081d8
 8006f7c:	1e62      	subs	r2, r4, #1
 8006f7e:	ab0e      	add	r3, sp, #56	; 0x38
 8006f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f88:	a90e      	add	r1, sp, #56	; 0x38
 8006f8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006f8e:	e739      	b.n	8006e04 <__kernel_rem_pio2+0x1cc>
 8006f90:	1e62      	subs	r2, r4, #1
 8006f92:	ab0e      	add	r3, sp, #56	; 0x38
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006f9c:	e7f4      	b.n	8006f88 <__kernel_rem_pio2+0x350>
 8006f9e:	a90e      	add	r1, sp, #56	; 0x38
 8006fa0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	e789      	b.n	8006ebe <__kernel_rem_pio2+0x286>
 8006faa:	3301      	adds	r3, #1
 8006fac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d0fa      	beq.n	8006faa <__kernel_rem_pio2+0x372>
 8006fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fb6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006fba:	446a      	add	r2, sp
 8006fbc:	3a98      	subs	r2, #152	; 0x98
 8006fbe:	920a      	str	r2, [sp, #40]	; 0x28
 8006fc0:	9a08      	ldr	r2, [sp, #32]
 8006fc2:	18e3      	adds	r3, r4, r3
 8006fc4:	18a5      	adds	r5, r4, r2
 8006fc6:	aa22      	add	r2, sp, #136	; 0x88
 8006fc8:	f104 0801 	add.w	r8, r4, #1
 8006fcc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006fd0:	9304      	str	r3, [sp, #16]
 8006fd2:	9b04      	ldr	r3, [sp, #16]
 8006fd4:	4543      	cmp	r3, r8
 8006fd6:	da04      	bge.n	8006fe2 <__kernel_rem_pio2+0x3aa>
 8006fd8:	461c      	mov	r4, r3
 8006fda:	e6a3      	b.n	8006d24 <__kernel_rem_pio2+0xec>
 8006fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e7e4      	b.n	8006fac <__kernel_rem_pio2+0x374>
 8006fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fe4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006fe8:	f7f9 faa4 	bl	8000534 <__aeabi_i2d>
 8006fec:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff2:	46ab      	mov	fp, r5
 8006ff4:	461c      	mov	r4, r3
 8006ff6:	f04f 0900 	mov.w	r9, #0
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	2700      	movs	r7, #0
 8006ffe:	9b06      	ldr	r3, [sp, #24]
 8007000:	4599      	cmp	r9, r3
 8007002:	dd06      	ble.n	8007012 <__kernel_rem_pio2+0x3da>
 8007004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007006:	e8e3 6702 	strd	r6, r7, [r3], #8
 800700a:	f108 0801 	add.w	r8, r8, #1
 800700e:	930a      	str	r3, [sp, #40]	; 0x28
 8007010:	e7df      	b.n	8006fd2 <__kernel_rem_pio2+0x39a>
 8007012:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007016:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800701a:	f7f9 faf5 	bl	8000608 <__aeabi_dmul>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4630      	mov	r0, r6
 8007024:	4639      	mov	r1, r7
 8007026:	f7f9 f939 	bl	800029c <__adddf3>
 800702a:	f109 0901 	add.w	r9, r9, #1
 800702e:	4606      	mov	r6, r0
 8007030:	460f      	mov	r7, r1
 8007032:	e7e4      	b.n	8006ffe <__kernel_rem_pio2+0x3c6>
 8007034:	3d01      	subs	r5, #1
 8007036:	e748      	b.n	8006eca <__kernel_rem_pio2+0x292>
 8007038:	ec47 6b10 	vmov	d0, r6, r7
 800703c:	f1ca 0000 	rsb	r0, sl, #0
 8007040:	f000 fa92 	bl	8007568 <scalbn>
 8007044:	ec57 6b10 	vmov	r6, r7, d0
 8007048:	4ba0      	ldr	r3, [pc, #640]	; (80072cc <__kernel_rem_pio2+0x694>)
 800704a:	ee10 0a10 	vmov	r0, s0
 800704e:	2200      	movs	r2, #0
 8007050:	4639      	mov	r1, r7
 8007052:	f7f9 fd5f 	bl	8000b14 <__aeabi_dcmpge>
 8007056:	b1f8      	cbz	r0, 8007098 <__kernel_rem_pio2+0x460>
 8007058:	4b9d      	ldr	r3, [pc, #628]	; (80072d0 <__kernel_rem_pio2+0x698>)
 800705a:	2200      	movs	r2, #0
 800705c:	4630      	mov	r0, r6
 800705e:	4639      	mov	r1, r7
 8007060:	f7f9 fad2 	bl	8000608 <__aeabi_dmul>
 8007064:	f7f9 fd80 	bl	8000b68 <__aeabi_d2iz>
 8007068:	4680      	mov	r8, r0
 800706a:	f7f9 fa63 	bl	8000534 <__aeabi_i2d>
 800706e:	4b97      	ldr	r3, [pc, #604]	; (80072cc <__kernel_rem_pio2+0x694>)
 8007070:	2200      	movs	r2, #0
 8007072:	f7f9 fac9 	bl	8000608 <__aeabi_dmul>
 8007076:	460b      	mov	r3, r1
 8007078:	4602      	mov	r2, r0
 800707a:	4639      	mov	r1, r7
 800707c:	4630      	mov	r0, r6
 800707e:	f7f9 f90b 	bl	8000298 <__aeabi_dsub>
 8007082:	f7f9 fd71 	bl	8000b68 <__aeabi_d2iz>
 8007086:	1c65      	adds	r5, r4, #1
 8007088:	ab0e      	add	r3, sp, #56	; 0x38
 800708a:	f10a 0a18 	add.w	sl, sl, #24
 800708e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007092:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007096:	e720      	b.n	8006eda <__kernel_rem_pio2+0x2a2>
 8007098:	4630      	mov	r0, r6
 800709a:	4639      	mov	r1, r7
 800709c:	f7f9 fd64 	bl	8000b68 <__aeabi_d2iz>
 80070a0:	ab0e      	add	r3, sp, #56	; 0x38
 80070a2:	4625      	mov	r5, r4
 80070a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070a8:	e717      	b.n	8006eda <__kernel_rem_pio2+0x2a2>
 80070aa:	ab0e      	add	r3, sp, #56	; 0x38
 80070ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80070b0:	f7f9 fa40 	bl	8000534 <__aeabi_i2d>
 80070b4:	4632      	mov	r2, r6
 80070b6:	463b      	mov	r3, r7
 80070b8:	f7f9 faa6 	bl	8000608 <__aeabi_dmul>
 80070bc:	4b84      	ldr	r3, [pc, #528]	; (80072d0 <__kernel_rem_pio2+0x698>)
 80070be:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80070c2:	2200      	movs	r2, #0
 80070c4:	4630      	mov	r0, r6
 80070c6:	4639      	mov	r1, r7
 80070c8:	f7f9 fa9e 	bl	8000608 <__aeabi_dmul>
 80070cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070d0:	4606      	mov	r6, r0
 80070d2:	460f      	mov	r7, r1
 80070d4:	e70f      	b.n	8006ef6 <__kernel_rem_pio2+0x2be>
 80070d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80070da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80070de:	f7f9 fa93 	bl	8000608 <__aeabi_dmul>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ea:	f7f9 f8d7 	bl	800029c <__adddf3>
 80070ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80070f2:	f108 0801 	add.w	r8, r8, #1
 80070f6:	9b02      	ldr	r3, [sp, #8]
 80070f8:	4598      	cmp	r8, r3
 80070fa:	dc01      	bgt.n	8007100 <__kernel_rem_pio2+0x4c8>
 80070fc:	45b8      	cmp	r8, r7
 80070fe:	ddea      	ble.n	80070d6 <__kernel_rem_pio2+0x49e>
 8007100:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007104:	ab4a      	add	r3, sp, #296	; 0x128
 8007106:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800710a:	ed87 7b00 	vstr	d7, [r7]
 800710e:	3e01      	subs	r6, #1
 8007110:	e6f8      	b.n	8006f04 <__kernel_rem_pio2+0x2cc>
 8007112:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007114:	2b02      	cmp	r3, #2
 8007116:	dc0b      	bgt.n	8007130 <__kernel_rem_pio2+0x4f8>
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc35      	bgt.n	8007188 <__kernel_rem_pio2+0x550>
 800711c:	d059      	beq.n	80071d2 <__kernel_rem_pio2+0x59a>
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	f003 0007 	and.w	r0, r3, #7
 8007124:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007128:	ecbd 8b02 	vpop	{d8}
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007132:	2b03      	cmp	r3, #3
 8007134:	d1f3      	bne.n	800711e <__kernel_rem_pio2+0x4e6>
 8007136:	ab4a      	add	r3, sp, #296	; 0x128
 8007138:	4423      	add	r3, r4
 800713a:	9306      	str	r3, [sp, #24]
 800713c:	461c      	mov	r4, r3
 800713e:	469a      	mov	sl, r3
 8007140:	9502      	str	r5, [sp, #8]
 8007142:	9b02      	ldr	r3, [sp, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f1aa 0a08 	sub.w	sl, sl, #8
 800714a:	dc6b      	bgt.n	8007224 <__kernel_rem_pio2+0x5ec>
 800714c:	46aa      	mov	sl, r5
 800714e:	f1ba 0f01 	cmp.w	sl, #1
 8007152:	f1a4 0408 	sub.w	r4, r4, #8
 8007156:	f300 8085 	bgt.w	8007264 <__kernel_rem_pio2+0x62c>
 800715a:	9c06      	ldr	r4, [sp, #24]
 800715c:	2000      	movs	r0, #0
 800715e:	3408      	adds	r4, #8
 8007160:	2100      	movs	r1, #0
 8007162:	2d01      	cmp	r5, #1
 8007164:	f300 809d 	bgt.w	80072a2 <__kernel_rem_pio2+0x66a>
 8007168:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800716c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007170:	f1bb 0f00 	cmp.w	fp, #0
 8007174:	f040 809b 	bne.w	80072ae <__kernel_rem_pio2+0x676>
 8007178:	9b01      	ldr	r3, [sp, #4]
 800717a:	e9c3 5600 	strd	r5, r6, [r3]
 800717e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007182:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007186:	e7ca      	b.n	800711e <__kernel_rem_pio2+0x4e6>
 8007188:	3408      	adds	r4, #8
 800718a:	ab4a      	add	r3, sp, #296	; 0x128
 800718c:	441c      	add	r4, r3
 800718e:	462e      	mov	r6, r5
 8007190:	2000      	movs	r0, #0
 8007192:	2100      	movs	r1, #0
 8007194:	2e00      	cmp	r6, #0
 8007196:	da36      	bge.n	8007206 <__kernel_rem_pio2+0x5ce>
 8007198:	f1bb 0f00 	cmp.w	fp, #0
 800719c:	d039      	beq.n	8007212 <__kernel_rem_pio2+0x5da>
 800719e:	4602      	mov	r2, r0
 80071a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071a4:	9c01      	ldr	r4, [sp, #4]
 80071a6:	e9c4 2300 	strd	r2, r3, [r4]
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80071b2:	f7f9 f871 	bl	8000298 <__aeabi_dsub>
 80071b6:	ae4c      	add	r6, sp, #304	; 0x130
 80071b8:	2401      	movs	r4, #1
 80071ba:	42a5      	cmp	r5, r4
 80071bc:	da2c      	bge.n	8007218 <__kernel_rem_pio2+0x5e0>
 80071be:	f1bb 0f00 	cmp.w	fp, #0
 80071c2:	d002      	beq.n	80071ca <__kernel_rem_pio2+0x592>
 80071c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071c8:	4619      	mov	r1, r3
 80071ca:	9b01      	ldr	r3, [sp, #4]
 80071cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80071d0:	e7a5      	b.n	800711e <__kernel_rem_pio2+0x4e6>
 80071d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80071d6:	eb0d 0403 	add.w	r4, sp, r3
 80071da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80071de:	2000      	movs	r0, #0
 80071e0:	2100      	movs	r1, #0
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	da09      	bge.n	80071fa <__kernel_rem_pio2+0x5c2>
 80071e6:	f1bb 0f00 	cmp.w	fp, #0
 80071ea:	d002      	beq.n	80071f2 <__kernel_rem_pio2+0x5ba>
 80071ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071f0:	4619      	mov	r1, r3
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	e9c3 0100 	strd	r0, r1, [r3]
 80071f8:	e791      	b.n	800711e <__kernel_rem_pio2+0x4e6>
 80071fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80071fe:	f7f9 f84d 	bl	800029c <__adddf3>
 8007202:	3d01      	subs	r5, #1
 8007204:	e7ed      	b.n	80071e2 <__kernel_rem_pio2+0x5aa>
 8007206:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800720a:	f7f9 f847 	bl	800029c <__adddf3>
 800720e:	3e01      	subs	r6, #1
 8007210:	e7c0      	b.n	8007194 <__kernel_rem_pio2+0x55c>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	e7c5      	b.n	80071a4 <__kernel_rem_pio2+0x56c>
 8007218:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800721c:	f7f9 f83e 	bl	800029c <__adddf3>
 8007220:	3401      	adds	r4, #1
 8007222:	e7ca      	b.n	80071ba <__kernel_rem_pio2+0x582>
 8007224:	e9da 8900 	ldrd	r8, r9, [sl]
 8007228:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800722c:	9b02      	ldr	r3, [sp, #8]
 800722e:	3b01      	subs	r3, #1
 8007230:	9302      	str	r3, [sp, #8]
 8007232:	4632      	mov	r2, r6
 8007234:	463b      	mov	r3, r7
 8007236:	4640      	mov	r0, r8
 8007238:	4649      	mov	r1, r9
 800723a:	f7f9 f82f 	bl	800029c <__adddf3>
 800723e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4640      	mov	r0, r8
 8007248:	4649      	mov	r1, r9
 800724a:	f7f9 f825 	bl	8000298 <__aeabi_dsub>
 800724e:	4632      	mov	r2, r6
 8007250:	463b      	mov	r3, r7
 8007252:	f7f9 f823 	bl	800029c <__adddf3>
 8007256:	ed9d 7b08 	vldr	d7, [sp, #32]
 800725a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800725e:	ed8a 7b00 	vstr	d7, [sl]
 8007262:	e76e      	b.n	8007142 <__kernel_rem_pio2+0x50a>
 8007264:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007268:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800726c:	4640      	mov	r0, r8
 800726e:	4632      	mov	r2, r6
 8007270:	463b      	mov	r3, r7
 8007272:	4649      	mov	r1, r9
 8007274:	f7f9 f812 	bl	800029c <__adddf3>
 8007278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	f7f9 f808 	bl	8000298 <__aeabi_dsub>
 8007288:	4632      	mov	r2, r6
 800728a:	463b      	mov	r3, r7
 800728c:	f7f9 f806 	bl	800029c <__adddf3>
 8007290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007294:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007298:	ed84 7b00 	vstr	d7, [r4]
 800729c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072a0:	e755      	b.n	800714e <__kernel_rem_pio2+0x516>
 80072a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80072a6:	f7f8 fff9 	bl	800029c <__adddf3>
 80072aa:	3d01      	subs	r5, #1
 80072ac:	e759      	b.n	8007162 <__kernel_rem_pio2+0x52a>
 80072ae:	9b01      	ldr	r3, [sp, #4]
 80072b0:	9a01      	ldr	r2, [sp, #4]
 80072b2:	601d      	str	r5, [r3, #0]
 80072b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80072b8:	605c      	str	r4, [r3, #4]
 80072ba:	609f      	str	r7, [r3, #8]
 80072bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80072c0:	60d3      	str	r3, [r2, #12]
 80072c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072c6:	6110      	str	r0, [r2, #16]
 80072c8:	6153      	str	r3, [r2, #20]
 80072ca:	e728      	b.n	800711e <__kernel_rem_pio2+0x4e6>
 80072cc:	41700000 	.word	0x41700000
 80072d0:	3e700000 	.word	0x3e700000
 80072d4:	00000000 	.word	0x00000000

080072d8 <__kernel_sin>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	ed2d 8b04 	vpush	{d8-d9}
 80072e0:	eeb0 8a41 	vmov.f32	s16, s2
 80072e4:	eef0 8a61 	vmov.f32	s17, s3
 80072e8:	ec55 4b10 	vmov	r4, r5, d0
 80072ec:	b083      	sub	sp, #12
 80072ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80072f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80072f6:	9001      	str	r0, [sp, #4]
 80072f8:	da06      	bge.n	8007308 <__kernel_sin+0x30>
 80072fa:	ee10 0a10 	vmov	r0, s0
 80072fe:	4629      	mov	r1, r5
 8007300:	f7f9 fc32 	bl	8000b68 <__aeabi_d2iz>
 8007304:	2800      	cmp	r0, #0
 8007306:	d051      	beq.n	80073ac <__kernel_sin+0xd4>
 8007308:	4622      	mov	r2, r4
 800730a:	462b      	mov	r3, r5
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f9 f97a 	bl	8000608 <__aeabi_dmul>
 8007314:	4682      	mov	sl, r0
 8007316:	468b      	mov	fp, r1
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f7f9 f972 	bl	8000608 <__aeabi_dmul>
 8007324:	a341      	add	r3, pc, #260	; (adr r3, 800742c <__kernel_sin+0x154>)
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	4680      	mov	r8, r0
 800732c:	4689      	mov	r9, r1
 800732e:	4650      	mov	r0, sl
 8007330:	4659      	mov	r1, fp
 8007332:	f7f9 f969 	bl	8000608 <__aeabi_dmul>
 8007336:	a33f      	add	r3, pc, #252	; (adr r3, 8007434 <__kernel_sin+0x15c>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f7f8 ffac 	bl	8000298 <__aeabi_dsub>
 8007340:	4652      	mov	r2, sl
 8007342:	465b      	mov	r3, fp
 8007344:	f7f9 f960 	bl	8000608 <__aeabi_dmul>
 8007348:	a33c      	add	r3, pc, #240	; (adr r3, 800743c <__kernel_sin+0x164>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f7f8 ffa5 	bl	800029c <__adddf3>
 8007352:	4652      	mov	r2, sl
 8007354:	465b      	mov	r3, fp
 8007356:	f7f9 f957 	bl	8000608 <__aeabi_dmul>
 800735a:	a33a      	add	r3, pc, #232	; (adr r3, 8007444 <__kernel_sin+0x16c>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f7f8 ff9a 	bl	8000298 <__aeabi_dsub>
 8007364:	4652      	mov	r2, sl
 8007366:	465b      	mov	r3, fp
 8007368:	f7f9 f94e 	bl	8000608 <__aeabi_dmul>
 800736c:	a337      	add	r3, pc, #220	; (adr r3, 800744c <__kernel_sin+0x174>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f7f8 ff93 	bl	800029c <__adddf3>
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	4606      	mov	r6, r0
 800737a:	460f      	mov	r7, r1
 800737c:	b9eb      	cbnz	r3, 80073ba <__kernel_sin+0xe2>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4650      	mov	r0, sl
 8007384:	4659      	mov	r1, fp
 8007386:	f7f9 f93f 	bl	8000608 <__aeabi_dmul>
 800738a:	a325      	add	r3, pc, #148	; (adr r3, 8007420 <__kernel_sin+0x148>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 ff82 	bl	8000298 <__aeabi_dsub>
 8007394:	4642      	mov	r2, r8
 8007396:	464b      	mov	r3, r9
 8007398:	f7f9 f936 	bl	8000608 <__aeabi_dmul>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4620      	mov	r0, r4
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7f8 ff7a 	bl	800029c <__adddf3>
 80073a8:	4604      	mov	r4, r0
 80073aa:	460d      	mov	r5, r1
 80073ac:	ec45 4b10 	vmov	d0, r4, r5
 80073b0:	b003      	add	sp, #12
 80073b2:	ecbd 8b04 	vpop	{d8-d9}
 80073b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ba:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <__kernel_sin+0x150>)
 80073bc:	ec51 0b18 	vmov	r0, r1, d8
 80073c0:	2200      	movs	r2, #0
 80073c2:	f7f9 f921 	bl	8000608 <__aeabi_dmul>
 80073c6:	4632      	mov	r2, r6
 80073c8:	ec41 0b19 	vmov	d9, r0, r1
 80073cc:	463b      	mov	r3, r7
 80073ce:	4640      	mov	r0, r8
 80073d0:	4649      	mov	r1, r9
 80073d2:	f7f9 f919 	bl	8000608 <__aeabi_dmul>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	ec51 0b19 	vmov	r0, r1, d9
 80073de:	f7f8 ff5b 	bl	8000298 <__aeabi_dsub>
 80073e2:	4652      	mov	r2, sl
 80073e4:	465b      	mov	r3, fp
 80073e6:	f7f9 f90f 	bl	8000608 <__aeabi_dmul>
 80073ea:	ec53 2b18 	vmov	r2, r3, d8
 80073ee:	f7f8 ff53 	bl	8000298 <__aeabi_dsub>
 80073f2:	a30b      	add	r3, pc, #44	; (adr r3, 8007420 <__kernel_sin+0x148>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	4640      	mov	r0, r8
 80073fe:	4649      	mov	r1, r9
 8007400:	f7f9 f902 	bl	8000608 <__aeabi_dmul>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4630      	mov	r0, r6
 800740a:	4639      	mov	r1, r7
 800740c:	f7f8 ff46 	bl	800029c <__adddf3>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f8 ff3e 	bl	8000298 <__aeabi_dsub>
 800741c:	e7c4      	b.n	80073a8 <__kernel_sin+0xd0>
 800741e:	bf00      	nop
 8007420:	55555549 	.word	0x55555549
 8007424:	3fc55555 	.word	0x3fc55555
 8007428:	3fe00000 	.word	0x3fe00000
 800742c:	5acfd57c 	.word	0x5acfd57c
 8007430:	3de5d93a 	.word	0x3de5d93a
 8007434:	8a2b9ceb 	.word	0x8a2b9ceb
 8007438:	3e5ae5e6 	.word	0x3e5ae5e6
 800743c:	57b1fe7d 	.word	0x57b1fe7d
 8007440:	3ec71de3 	.word	0x3ec71de3
 8007444:	19c161d5 	.word	0x19c161d5
 8007448:	3f2a01a0 	.word	0x3f2a01a0
 800744c:	1110f8a6 	.word	0x1110f8a6
 8007450:	3f811111 	.word	0x3f811111

08007454 <fabs>:
 8007454:	ec51 0b10 	vmov	r0, r1, d0
 8007458:	ee10 2a10 	vmov	r2, s0
 800745c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007460:	ec43 2b10 	vmov	d0, r2, r3
 8007464:	4770      	bx	lr
	...

08007468 <floor>:
 8007468:	ec51 0b10 	vmov	r0, r1, d0
 800746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007470:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007474:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007478:	2e13      	cmp	r6, #19
 800747a:	ee10 5a10 	vmov	r5, s0
 800747e:	ee10 8a10 	vmov	r8, s0
 8007482:	460c      	mov	r4, r1
 8007484:	dc32      	bgt.n	80074ec <floor+0x84>
 8007486:	2e00      	cmp	r6, #0
 8007488:	da14      	bge.n	80074b4 <floor+0x4c>
 800748a:	a333      	add	r3, pc, #204	; (adr r3, 8007558 <floor+0xf0>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 ff04 	bl	800029c <__adddf3>
 8007494:	2200      	movs	r2, #0
 8007496:	2300      	movs	r3, #0
 8007498:	f7f9 fb46 	bl	8000b28 <__aeabi_dcmpgt>
 800749c:	b138      	cbz	r0, 80074ae <floor+0x46>
 800749e:	2c00      	cmp	r4, #0
 80074a0:	da57      	bge.n	8007552 <floor+0xea>
 80074a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80074a6:	431d      	orrs	r5, r3
 80074a8:	d001      	beq.n	80074ae <floor+0x46>
 80074aa:	4c2d      	ldr	r4, [pc, #180]	; (8007560 <floor+0xf8>)
 80074ac:	2500      	movs	r5, #0
 80074ae:	4621      	mov	r1, r4
 80074b0:	4628      	mov	r0, r5
 80074b2:	e025      	b.n	8007500 <floor+0x98>
 80074b4:	4f2b      	ldr	r7, [pc, #172]	; (8007564 <floor+0xfc>)
 80074b6:	4137      	asrs	r7, r6
 80074b8:	ea01 0307 	and.w	r3, r1, r7
 80074bc:	4303      	orrs	r3, r0
 80074be:	d01f      	beq.n	8007500 <floor+0x98>
 80074c0:	a325      	add	r3, pc, #148	; (adr r3, 8007558 <floor+0xf0>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 fee9 	bl	800029c <__adddf3>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	f7f9 fb2b 	bl	8000b28 <__aeabi_dcmpgt>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d0eb      	beq.n	80074ae <floor+0x46>
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	bfbe      	ittt	lt
 80074da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80074de:	fa43 f606 	asrlt.w	r6, r3, r6
 80074e2:	19a4      	addlt	r4, r4, r6
 80074e4:	ea24 0407 	bic.w	r4, r4, r7
 80074e8:	2500      	movs	r5, #0
 80074ea:	e7e0      	b.n	80074ae <floor+0x46>
 80074ec:	2e33      	cmp	r6, #51	; 0x33
 80074ee:	dd0b      	ble.n	8007508 <floor+0xa0>
 80074f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80074f4:	d104      	bne.n	8007500 <floor+0x98>
 80074f6:	ee10 2a10 	vmov	r2, s0
 80074fa:	460b      	mov	r3, r1
 80074fc:	f7f8 fece 	bl	800029c <__adddf3>
 8007500:	ec41 0b10 	vmov	d0, r0, r1
 8007504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007508:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800750c:	f04f 33ff 	mov.w	r3, #4294967295
 8007510:	fa23 f707 	lsr.w	r7, r3, r7
 8007514:	4207      	tst	r7, r0
 8007516:	d0f3      	beq.n	8007500 <floor+0x98>
 8007518:	a30f      	add	r3, pc, #60	; (adr r3, 8007558 <floor+0xf0>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f7f8 febd 	bl	800029c <__adddf3>
 8007522:	2200      	movs	r2, #0
 8007524:	2300      	movs	r3, #0
 8007526:	f7f9 faff 	bl	8000b28 <__aeabi_dcmpgt>
 800752a:	2800      	cmp	r0, #0
 800752c:	d0bf      	beq.n	80074ae <floor+0x46>
 800752e:	2c00      	cmp	r4, #0
 8007530:	da02      	bge.n	8007538 <floor+0xd0>
 8007532:	2e14      	cmp	r6, #20
 8007534:	d103      	bne.n	800753e <floor+0xd6>
 8007536:	3401      	adds	r4, #1
 8007538:	ea25 0507 	bic.w	r5, r5, r7
 800753c:	e7b7      	b.n	80074ae <floor+0x46>
 800753e:	2301      	movs	r3, #1
 8007540:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007544:	fa03 f606 	lsl.w	r6, r3, r6
 8007548:	4435      	add	r5, r6
 800754a:	4545      	cmp	r5, r8
 800754c:	bf38      	it	cc
 800754e:	18e4      	addcc	r4, r4, r3
 8007550:	e7f2      	b.n	8007538 <floor+0xd0>
 8007552:	2500      	movs	r5, #0
 8007554:	462c      	mov	r4, r5
 8007556:	e7aa      	b.n	80074ae <floor+0x46>
 8007558:	8800759c 	.word	0x8800759c
 800755c:	7e37e43c 	.word	0x7e37e43c
 8007560:	bff00000 	.word	0xbff00000
 8007564:	000fffff 	.word	0x000fffff

08007568 <scalbn>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	ec55 4b10 	vmov	r4, r5, d0
 800756e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007572:	4606      	mov	r6, r0
 8007574:	462b      	mov	r3, r5
 8007576:	b99a      	cbnz	r2, 80075a0 <scalbn+0x38>
 8007578:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800757c:	4323      	orrs	r3, r4
 800757e:	d036      	beq.n	80075ee <scalbn+0x86>
 8007580:	4b39      	ldr	r3, [pc, #228]	; (8007668 <scalbn+0x100>)
 8007582:	4629      	mov	r1, r5
 8007584:	ee10 0a10 	vmov	r0, s0
 8007588:	2200      	movs	r2, #0
 800758a:	f7f9 f83d 	bl	8000608 <__aeabi_dmul>
 800758e:	4b37      	ldr	r3, [pc, #220]	; (800766c <scalbn+0x104>)
 8007590:	429e      	cmp	r6, r3
 8007592:	4604      	mov	r4, r0
 8007594:	460d      	mov	r5, r1
 8007596:	da10      	bge.n	80075ba <scalbn+0x52>
 8007598:	a32b      	add	r3, pc, #172	; (adr r3, 8007648 <scalbn+0xe0>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	e03a      	b.n	8007616 <scalbn+0xae>
 80075a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80075a4:	428a      	cmp	r2, r1
 80075a6:	d10c      	bne.n	80075c2 <scalbn+0x5a>
 80075a8:	ee10 2a10 	vmov	r2, s0
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f8 fe74 	bl	800029c <__adddf3>
 80075b4:	4604      	mov	r4, r0
 80075b6:	460d      	mov	r5, r1
 80075b8:	e019      	b.n	80075ee <scalbn+0x86>
 80075ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075be:	460b      	mov	r3, r1
 80075c0:	3a36      	subs	r2, #54	; 0x36
 80075c2:	4432      	add	r2, r6
 80075c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075c8:	428a      	cmp	r2, r1
 80075ca:	dd08      	ble.n	80075de <scalbn+0x76>
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	a120      	add	r1, pc, #128	; (adr r1, 8007650 <scalbn+0xe8>)
 80075d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075d4:	da1c      	bge.n	8007610 <scalbn+0xa8>
 80075d6:	a120      	add	r1, pc, #128	; (adr r1, 8007658 <scalbn+0xf0>)
 80075d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075dc:	e018      	b.n	8007610 <scalbn+0xa8>
 80075de:	2a00      	cmp	r2, #0
 80075e0:	dd08      	ble.n	80075f4 <scalbn+0x8c>
 80075e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075ee:	ec45 4b10 	vmov	d0, r4, r5
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075f8:	da19      	bge.n	800762e <scalbn+0xc6>
 80075fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075fe:	429e      	cmp	r6, r3
 8007600:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007604:	dd0a      	ble.n	800761c <scalbn+0xb4>
 8007606:	a112      	add	r1, pc, #72	; (adr r1, 8007650 <scalbn+0xe8>)
 8007608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e2      	bne.n	80075d6 <scalbn+0x6e>
 8007610:	a30f      	add	r3, pc, #60	; (adr r3, 8007650 <scalbn+0xe8>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 fff7 	bl	8000608 <__aeabi_dmul>
 800761a:	e7cb      	b.n	80075b4 <scalbn+0x4c>
 800761c:	a10a      	add	r1, pc, #40	; (adr r1, 8007648 <scalbn+0xe0>)
 800761e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0b8      	beq.n	8007598 <scalbn+0x30>
 8007626:	a10e      	add	r1, pc, #56	; (adr r1, 8007660 <scalbn+0xf8>)
 8007628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800762c:	e7b4      	b.n	8007598 <scalbn+0x30>
 800762e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007632:	3236      	adds	r2, #54	; 0x36
 8007634:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007638:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800763c:	4620      	mov	r0, r4
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <scalbn+0x108>)
 8007640:	2200      	movs	r2, #0
 8007642:	e7e8      	b.n	8007616 <scalbn+0xae>
 8007644:	f3af 8000 	nop.w
 8007648:	c2f8f359 	.word	0xc2f8f359
 800764c:	01a56e1f 	.word	0x01a56e1f
 8007650:	8800759c 	.word	0x8800759c
 8007654:	7e37e43c 	.word	0x7e37e43c
 8007658:	8800759c 	.word	0x8800759c
 800765c:	fe37e43c 	.word	0xfe37e43c
 8007660:	c2f8f359 	.word	0xc2f8f359
 8007664:	81a56e1f 	.word	0x81a56e1f
 8007668:	43500000 	.word	0x43500000
 800766c:	ffff3cb0 	.word	0xffff3cb0
 8007670:	3c900000 	.word	0x3c900000

08007674 <_close>:
 8007674:	4b02      	ldr	r3, [pc, #8]	; (8007680 <_close+0xc>)
 8007676:	2258      	movs	r2, #88	; 0x58
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	4770      	bx	lr
 8007680:	20000238 	.word	0x20000238

08007684 <_fstat>:
 8007684:	4b02      	ldr	r3, [pc, #8]	; (8007690 <_fstat+0xc>)
 8007686:	2258      	movs	r2, #88	; 0x58
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	f04f 30ff 	mov.w	r0, #4294967295
 800768e:	4770      	bx	lr
 8007690:	20000238 	.word	0x20000238

08007694 <_getpid>:
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <_getpid+0xc>)
 8007696:	2258      	movs	r2, #88	; 0x58
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f04f 30ff 	mov.w	r0, #4294967295
 800769e:	4770      	bx	lr
 80076a0:	20000238 	.word	0x20000238

080076a4 <_isatty>:
 80076a4:	4b02      	ldr	r3, [pc, #8]	; (80076b0 <_isatty+0xc>)
 80076a6:	2258      	movs	r2, #88	; 0x58
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	2000      	movs	r0, #0
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	20000238 	.word	0x20000238

080076b4 <_kill>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	; (80076c0 <_kill+0xc>)
 80076b6:	2258      	movs	r2, #88	; 0x58
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295
 80076be:	4770      	bx	lr
 80076c0:	20000238 	.word	0x20000238

080076c4 <_lseek>:
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <_lseek+0xc>)
 80076c6:	2258      	movs	r2, #88	; 0x58
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	f04f 30ff 	mov.w	r0, #4294967295
 80076ce:	4770      	bx	lr
 80076d0:	20000238 	.word	0x20000238

080076d4 <_read>:
 80076d4:	4b02      	ldr	r3, [pc, #8]	; (80076e0 <_read+0xc>)
 80076d6:	2258      	movs	r2, #88	; 0x58
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	f04f 30ff 	mov.w	r0, #4294967295
 80076de:	4770      	bx	lr
 80076e0:	20000238 	.word	0x20000238

080076e4 <_sbrk>:
 80076e4:	4a04      	ldr	r2, [pc, #16]	; (80076f8 <_sbrk+0x14>)
 80076e6:	6811      	ldr	r1, [r2, #0]
 80076e8:	4603      	mov	r3, r0
 80076ea:	b909      	cbnz	r1, 80076f0 <_sbrk+0xc>
 80076ec:	4903      	ldr	r1, [pc, #12]	; (80076fc <_sbrk+0x18>)
 80076ee:	6011      	str	r1, [r2, #0]
 80076f0:	6810      	ldr	r0, [r2, #0]
 80076f2:	4403      	add	r3, r0
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	4770      	bx	lr
 80076f8:	20000240 	.word	0x20000240
 80076fc:	20000248 	.word	0x20000248

08007700 <_write>:
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <_write+0xc>)
 8007702:	2258      	movs	r2, #88	; 0x58
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	4770      	bx	lr
 800770c:	20000238 	.word	0x20000238

08007710 <_exit>:
 8007710:	e7fe      	b.n	8007710 <_exit>
	...

08007714 <_init>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr

08007720 <_fini>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr
